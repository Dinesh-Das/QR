{"version":3,"file":"static/js/801.20a61aff.chunk.js","mappings":"+LAKA,MAAM,MAAEA,GAAUC,EAAAA,EAuFlB,EArFiBC,KACf,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,KAClCC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,GAEjCG,EAAgBC,UACpBF,GAAW,GACX,IACE,MAAMG,QAAiBC,EAAAA,QAAUC,IAAI,kBAAmB,CAAEC,WAC1D,GAAW,OAANA,QAAM,IAANA,IAAAA,EAAQC,QAAS,CAEpB,MAAMC,EAAeC,MAAMC,QAAQP,GAAYA,EAAW,GAC1DN,EAAYW,EACd,CACF,CAAE,MAAOG,GACI,OAANL,QAAM,IAANA,GAAAA,EAAQC,UACXK,QAAQD,MAAM,4BAA6BA,GAE3Cd,EAAY,IAEhB,CAAC,QACY,OAANS,QAAM,IAANA,GAAAA,EAAQC,SACXP,GAAW,EAEf,IAGFa,EAAAA,EAAAA,WAAU,KACR,MAAMC,EAAa,IAAIC,gBAIvB,OAFAd,EAAca,EAAWR,QAElB,KACLQ,EAAWE,UAEZ,IAEH,MASMC,EAAU,CACd,CACEC,MAAO,aACPC,UAAW,KACXC,IAAK,MAEP,CACEF,MAAO,OACPC,UAAW,OACXC,IAAK,QAEP,CACEF,MAAO,aACPC,UAAW,YACXC,IAAK,aAEP,CACEF,MAAO,gBACPC,UAAW,eACXC,IAAK,gBAEP,CACEF,MAAO,UACPE,IAAK,UACLC,OAAQA,CAACC,EAAGC,KACVC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAACC,KAAK,UAAUC,QAAM,EAACC,QAASA,IAlCrB1B,WACtB,UACQE,EAAAA,QAAUyB,OAAO,mBAAmBC,KAC1C7B,GACF,CAAE,MAAOU,GACPC,QAAQD,MAAM,+BAAgCA,EAChD,GA4BiDoB,CAAgBR,EAAOS,IAAIC,SAAC,gBAO/E,OACEC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACET,EAAAA,EAAAA,KAAC/B,EAAK,CAAC0C,MAAO,EAAEF,SAAC,qBACjBT,EAAAA,EAAAA,KAACY,EAAAA,EAAK,CAACnB,QAASA,EAASoB,WAAYzC,EAAU0C,OAAO,KAAKvC,QAASA,O","sources":["screens/Sessions.js"],"sourcesContent":["import { Table, Button, Typography } from 'antd';\nimport React, { useState, useEffect } from 'react';\n\nimport apiClient from '../api/client';\n\nconst { Title } = Typography;\n\nconst Sessions = () => {\n  const [sessions, setSessions] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const fetchSessions = async signal => {\n    setLoading(true);\n    try {\n      const response = await apiClient.get('/admin/sessions', { signal });\n      if (!signal?.aborted) {\n        // Ensure response is always an array\n        const safeSessions = Array.isArray(response) ? response : [];\n        setSessions(safeSessions);\n      }\n    } catch (error) {\n      if (!signal?.aborted) {\n        console.error('Failed to fetch sessions:', error);\n        // Set empty array on error\n        setSessions([]);\n      }\n    } finally {\n      if (!signal?.aborted) {\n        setLoading(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    fetchSessions(controller.signal);\n\n    return () => {\n      controller.abort();\n    };\n  }, []);\n\n  const handleTerminate = async sessionId => {\n    try {\n      await apiClient.delete(`/admin/sessions/${sessionId}`);\n      fetchSessions();\n    } catch (error) {\n      console.error('Failed to terminate session:', error);\n    }\n  };\n\n  const columns = [\n    {\n      title: 'Session ID',\n      dataIndex: 'id',\n      key: 'id'\n    },\n    {\n      title: 'User',\n      dataIndex: 'user',\n      key: 'user'\n    },\n    {\n      title: 'Start Time',\n      dataIndex: 'startTime',\n      key: 'startTime'\n    },\n    {\n      title: 'Last Activity',\n      dataIndex: 'lastActivity',\n      key: 'lastActivity'\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (_, record) => (\n        <Button type=\"primary\" danger onClick={() => handleTerminate(record.id)}>\n          Terminate\n        </Button>\n      )\n    }\n  ];\n\n  return (\n    <div>\n      <Title level={2}>Active Sessions</Title>\n      <Table columns={columns} dataSource={sessions} rowKey=\"id\" loading={loading} />\n    </div>\n  );\n};\n\nexport default Sessions;\n"],"names":["Title","Typography","Sessions","sessions","setSessions","useState","loading","setLoading","fetchSessions","async","response","apiClient","get","signal","aborted","safeSessions","Array","isArray","error","console","useEffect","controller","AbortController","abort","columns","title","dataIndex","key","render","_","record","_jsx","Button","type","danger","onClick","delete","sessionId","handleTerminate","id","children","_jsxs","level","Table","dataSource","rowKey"],"sourceRoot":""}