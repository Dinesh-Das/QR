{"version":3,"file":"static/js/475.0385724a.chunk.js","mappings":"+MAGO,MCcMA,EAAY,CACvBC,kBAAmB,IACnBC,kBAAmB,KACnBC,UAAW,GACXC,eAAgB,KAILC,EAAkB,CAC7BC,UAAW,YACXC,YAAa,cACbC,eAAgB,iBAChBC,SAAU,WACVC,SAAU,WACVC,UAAW,aAYAC,EAAkB,CAC7BC,IAAK,MACLC,OAAQ,SACRC,KAAM,OACNC,OAAQ,SACRC,SAAU,YAiGCC,GAnEVb,EAAgBC,UAChBD,EAAgBE,YAChBF,EAAgBG,eAChBH,EAAgBI,SAChBJ,EAAgBK,SAChBL,EAAgBM,UAKhBC,EAAgBC,IAChBD,EAAgBE,OAChBF,EAAgBG,KAChBH,EAAgBI,OAChBJ,EAAgBK,SAqDM,CACvBE,gBAAiB,SACjBC,aAAc,KACdC,aAAc,QACdC,aAAc,aAIHC,EAA2B,CACtCC,YAAa,cACbC,cAAe,gBACfC,YAAa,cACbC,aAAc,eACdC,MAAO,QACPrB,YAAa,cACbI,UAAW,aAIAkB,EAAe,CAC1BC,KAAM,OACNC,SAAU,WACVC,OAAQ,UAIGC,EAAsB,CACjCC,OAAQ,CAAC,QACTC,SAAU,CAAC,WAAY,WAIZC,EAAa,CACxBC,IAAK,MACLC,KAAM,OACNC,IAAK,MACLC,MAAO,SAIIC,EAAY,CACvBC,SAAU,IACVtC,eAAgB,KAILuC,EAAa,CACxBC,kBAAmB,GACnBC,gBAAiB,EACjBC,gBAAiB,GACjBC,mBAAmB,EACnBC,mBAAmB,GAYRC,EAAW,CACtBC,SAAU,WACVC,QAAS,UACTxC,UAAW,YACXyC,QAAS,UACTC,QAAS,U,gDC7MJ,MAAMC,EAAW,CAQtBC,YAAaA,CAACC,EAAYC,IACxBC,EAAAA,QAAUC,KAAK,qBAAqBH,IAAcC,GAOpDG,SAAUC,GAAMH,EAAAA,QAAUI,IAAI,YAAYD,KAQ1CE,YAAaA,CAACF,EAAIJ,IAAcC,EAAAA,QAAUM,IAAI,YAAYH,IAAMJ,GAOhEQ,YAAaJ,GAAMH,EAAAA,QAAUQ,OAAO,YAAYL,KAShDM,aAAcA,CAACN,EAAIO,IAAmBV,EAAAA,QAAUC,KAAK,YAAYE,YAAcO,GAQ/EC,YAAaA,CAACR,EAAIS,IAAWZ,EAAAA,QAAUC,KAAK,YAAYE,WAAa,CAAES,WASvEC,YAAaA,CAACV,EAAIW,IAAmBd,EAAAA,QAAUC,KAAK,YAAYE,WAAaW,GAS7EC,cAAeA,CAACZ,EAAIa,EAASJ,IAC3BZ,EAAAA,QAAUM,IAAI,YAAYH,WAAa,CAAEc,KAAMD,EAASJ,WAQ1DM,qBAAsBpB,GAAcE,EAAAA,QAAUI,IAAI,qBAAqBN,KAOvEqB,iBAAkBF,GAAQjB,EAAAA,QAAUI,IAAI,iBAAiBa,KAOzDG,mBAAoBC,GAAUrB,EAAAA,QAAUI,IAAI,mBAAmBiB,KAO/DC,iBAAkBC,GAAavB,EAAAA,QAAUI,IAAI,sBAO7CoB,cAAeC,IACb,MAAMC,EAAc,IAAIC,gBAAgBF,GAAcG,WACtD,OAAO5B,EAAAA,QAAUI,IAAI,mBAAmBsB,MAS1CG,cAAeC,GAAa9B,EAAAA,QAAUI,IAAI,wBAAwB0B,KAOlEC,qBAAsBd,GAAQjB,EAAAA,QAAUI,IAAI,6BAA6Ba,KAOzEe,2BAA4Bf,GAAQjB,EAAAA,QAAUI,IAAI,sCAAsCa,KAOxFgB,kBAAmB,WAAkB,OAAKjC,EAAAA,QAAUI,IAAI,mBAAmB,EAQ3E8B,6BAA8BjB,GAAQjB,EAAAA,QAAUI,IAAI,gCAAgCa,KAOpFkB,8BAA+BlB,GAAQjB,EAAAA,QAAUI,IAAI,iCAAiCa,KAQtFmB,kBAAmBjC,GAAMH,EAAAA,QAAUI,IAAI,YAAYD,gBAOnDkC,qBAAsB,WAAqB,OAAKrC,EAAAA,QAAUI,IAAI,6BAA6B,EAS3FkC,gBAAiBA,CAACnC,EAAIoC,IAAYvC,EAAAA,QAAUC,KAAK,YAAYE,aAAe,CAAEoC,YAO9EC,iBAAkBrC,GAAMH,EAAAA,QAAUI,IAAI,YAAYD,cASlDsC,oBAAqBA,CAACtC,EAAIuC,IAAa1C,EAAAA,QAAUM,IAAI,YAAYH,aAAe,CAAEuC,aAQlFC,cAAeA,CAACxC,EAAIyC,IAClB5C,EAAAA,QAAUM,IAAI,YAAYH,aAAe,CAAE0C,cAAe,SAS5DC,qBAAsBA,CAACC,EAASC,IACvBhD,EAAAA,QAAUiD,OAAO,YAAYF,cAAqBC,GAU3DE,wBAAyBA,CAACH,EAASI,EAAYH,IACtChD,EAAAA,QAAUiD,OAAO,YAAYF,eAAqBI,cAAwBH,GAQnFI,kBAAoBL,GAAY/C,EAAAA,QAAUI,IAAI,YAAY2C,eAQ1DM,sBAAuBA,CAACN,EAASO,IACxBtD,EAAAA,QAAUuD,SAAS,YAAYR,eAAqBO,cAS7DE,oBAAqBA,CAACT,EAASO,IACtBtD,EAAAA,QAAUQ,OAAO,YAAYuC,eAAqBO,KAW3DG,WAAYA,CAACV,EAASnC,IACpBZ,EAAAA,QAAUC,KAAK,YAAY8C,UAAiB,CAAEnC,WAOhD8C,iBAAmB5D,GACjBE,EAAAA,QAAUI,IAAI,qBAAqBN,cAOrC6D,sBAAwB7D,GACtBE,EAAAA,QAAUI,IAAI,qBAAqBN,oB,sICrQvC,MAAM8D,EAAqBC,IAOpB,IAPqB,SAC1BC,EAAQ,MACRC,EAAQ,GAAE,WACVC,GAAa,EAAK,SAClBC,EAAW,KAAI,QACfC,GAAU,EAAK,aACfC,GAAe,GAChBN,EAEC,GAAIK,EACF,OAAOE,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,KAAK,UAGpB,KAAKC,EAAAA,EAAAA,MACH,OAAOJ,GACLC,EAAAA,EAAAA,KAACI,EAAAA,GAAM,CACLnD,OAAO,UACPoD,MAAM,0BACNC,SAAS,0CAET,KAIN,IAAKX,GAA0B,IAAjBA,EAAMY,OAClB,OAAOb,EAIT,MAAMc,GAAcC,EAAAA,EAAAA,MACdC,EAAad,EACfD,EAAMgB,MAAMC,IAAQC,EAAAA,EAAAA,IAAQD,IAC5BjB,EAAMmB,KAAKF,IAAQC,EAAAA,EAAAA,IAAQD,IAI/B,OAFkBJ,GAAeE,EAgB1BhB,EAbDG,IAIGE,GACLC,EAAAA,EAAAA,KAACI,EAAAA,GAAM,CACLnD,OAAO,MACPoD,MAAM,gBACNC,SAAU,qDAAqDX,EAAMoB,KAAK,8BAE1E,OASKC,EAAYC,IAAyD,IAAxD,SAAEvB,EAAQ,SAAEG,EAAW,KAAI,aAAEE,GAAe,GAAMkB,EAC1E,KAAKd,EAAAA,EAAAA,MACH,OAAOJ,GACLC,EAAAA,EAAAA,KAACI,EAAAA,GAAM,CACLnD,OAAO,UACPoD,MAAM,0BACNC,SAAS,0CAET,KAIN,MAAMY,GAAcC,EAAAA,EAAAA,MACdC,GAAcX,EAAAA,EAAAA,MACdY,GAAeR,EAAAA,EAAAA,IAAQ,SACvBS,GAAoBT,EAAAA,EAAAA,IAAQ,SAC5BU,GAAeV,EAAAA,EAAAA,IAAQ,cAGvBW,GAAQC,EAAAA,EAAAA,MACd,IAAIC,GAAe,EACfC,GAAoB,EAExB,GAAIH,EACF,IAAK,IAADI,EAAAC,EACF,MAAMC,EAAUC,EAAAA,EAAaC,gBAAgBR,GAC7CE,GAAoC,KAAd,OAAPI,QAAO,IAAPA,OAAO,EAAPA,EAASrB,SACxBkB,GAA2B,OAAPG,QAAO,IAAPA,GAAc,QAAPF,EAAPE,EAASnC,aAAK,IAAAiC,OAAP,EAAPA,EAAgBK,SAAS,YAAmB,OAAPH,QAAO,IAAPA,GAAoB,QAAbD,EAAPC,EAASI,mBAAW,IAAAL,OAAb,EAAPA,EAAsBI,SAAS,SAC1F,CAAE,MAAOE,GACPC,QAAQD,MAAM,qCAAsCA,EACtD,CAGF,MAAME,EAAYjB,GAAeC,GAAgBC,GAAqBC,GAAgBG,GAAgBC,EAetG,OAZAS,QAAQE,IAAI,4BAA6B,CACvCpB,cACAE,cACAC,eACAC,oBACAC,eACAG,eACAC,oBACAY,eAAgBF,EAChBb,MAAOA,EAAQ,UAAY,YAGxBa,EAcE3C,EAbDG,IAIGE,GACLC,EAAAA,EAAAA,KAACI,EAAAA,GAAM,CACLnD,OAAO,MACPoD,MAAM,gBACNC,SAAU,+DAA+DY,cAAwBE,cAAwBC,iBAA4BK,MAErJ,OAMKc,EAAUC,IAAA,IAAC,SAAE/C,EAAQ,SAAEG,EAAW,KAAI,aAAEE,GAAe,GAAM0C,EAAA,OACxEzC,EAAAA,EAAAA,KAACR,EAAkB,CACjBG,MAAO,CAAC,WAAY,WAAY,SAChCE,SAAUA,EACVE,aAAcA,EAAaL,SAE1BA,KAIQgD,EAAUC,IAAA,IAAC,SAAEjD,EAAQ,SAAEG,EAAW,KAAI,aAAEE,GAAe,GAAM4C,EAAA,OACxE3C,EAAAA,EAAAA,KAACR,EAAkB,CACjBG,MAAO,CAAC,WAAY,WAAY,SAChCE,SAAUA,EACVE,aAAcA,EAAaL,SAE1BA,KAIQkD,EAAWC,IAAA,IAAC,SAAEnD,EAAQ,SAAEG,EAAW,KAAI,aAAEE,GAAe,GAAM8C,EAAA,OACzE7C,EAAAA,EAAAA,KAACR,EAAkB,CACjBG,MAAO,CAAC,YAAa,YAAa,SAClCE,SAAUA,EACVE,aAAcA,EAAaL,SAE1BA,KAIQoD,EAAYC,IAAA,IAAC,SAAErD,EAAQ,SAAEG,EAAW,KAAI,aAAEE,GAAe,GAAMgD,EAAA,OAC1E/C,EAAAA,EAAAA,KAACR,EAAkB,CACjBG,MAAO,CAAC,aAAc,aAAc,SACpCE,SAAUA,EACVE,aAAcA,EAAaL,SAE1BA,I,wNC3JL,MAAM,KAAEsD,GAASC,EAAAA,GACX,QAAEC,GAAYC,EAAAA,EAqWpB,EAlV4B1D,IAOrB,IAPsB,QACzBd,EAAO,WACPI,EAAU,iBACVqE,EAAgB,SAChBC,EAAW,EAAC,SACZC,GAAW,EAAK,QAChBC,EAAU,SACb9D,EACG,MAAO+D,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,KAClCC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IACpCG,EAAgBC,IAAqBJ,EAAAA,EAAAA,UAAS,GAgJ/CK,EAAkBC,IACpB,GAAc,IAAVA,EAAa,MAAO,UACxB,MAEMC,EAAIC,KAAKC,MAAMD,KAAK5B,IAAI0B,GAASE,KAAK5B,IAFlC,OAGV,MAAO,GAAG8B,YAAYJ,EAAQE,KAAKG,IAHzB,KAGgCJ,IAAIK,QAAQ,OAFxC,CAAC,QAAS,KAAM,KAAM,MAE+BL,MAGjEM,EAA2B,aAAZhB,EAAyB,WAAa,QACrDiB,EAAiBhB,EAASiB,OAAOC,GAAkB,SAAbA,EAAEzH,QAAmBsD,OAEjE,OACIP,EAAAA,EAAAA,KAAC2E,EAAAA,EAAI,CACDzE,KAAK,QACLG,OACIuE,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAAAnF,SAAA,EACFM,EAAAA,EAAAA,KAAC8E,EAAAA,EAAc,KACfF,EAAAA,EAAAA,MAAA,QAAAlF,SAAA,CAAM,uBAAqB6E,QAGnCQ,MAAO,CAAEC,gBAAiB,UAAWC,OAAQ,sBAAuBvF,UAEpEkF,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACK,UAAU,WAAWH,MAAO,CAAEI,MAAO,QAASzF,SAAA,EAEjDM,EAAAA,EAAAA,KAACoF,EAAAA,EAAK,CACFC,QAAS,uBAAuBd,IAChCe,aACIV,EAAAA,EAAAA,MAAA,MAAIG,MAAO,CAAEQ,OAAQ,EAAGC,YAAa,IAAK9F,SAAA,EACtCM,EAAAA,EAAAA,KAAA,MAAAN,SAAI,wFACJM,EAAAA,EAAAA,KAAA,MAAAN,SAAI,sCACJkF,EAAAA,EAAAA,MAAA,MAAAlF,SAAA,CAAI,WAAS2D,EAAS,qBACtBuB,EAAAA,EAAAA,MAAA,MAAAlF,SAAA,CAAI,kCAAgC6D,EAAQkC,oBAGpDC,KAAK,OACLC,UAAQ,EACRzF,KAAK,QACL6E,MAAO,CAAEa,aAAc,OAI3BhB,EAAAA,EAAAA,MAAC1B,EAAO,CACJ2C,UAAQ,EACRrC,SAAUA,EACVsC,SA9JS7E,IAAgC,IAA7BuC,SAAUuC,GAAa9E,EAE3C8E,EAAYxF,OAAS8C,IACrBgC,EAAAA,GAAQW,QAAQ,WAAW3C,mCAA0CA,8BACrE0C,EAAcA,EAAYE,MAAM,EAAG5C,IAGvC,MAAM6C,EAAoBH,EAAYI,IAAIC,IACtC,GAAIA,EAAKC,cAAe,CACpB,MAAMC,EApCIF,KAClB,MAYMG,EAAUnN,EAAAA,GAAUC,gBAEpBmN,EAAgBJ,EAAKK,KAAKhB,cAAciB,UAAUN,EAAKK,KAAKE,YAAY,MAE9E,MAAO,CACHC,YAjBe,CACf,kBACA,qBACA,0EACA,2BACA,oEACA,aACA,YACA,aASwB3E,SAASmE,EAAKV,OANlB,CAAC,OAAQ,OAAQ,QAAS,OAAQ,QAAS,OAAQ,QAAS,QAMjBzD,SAASuE,GACxEK,YAAaT,EAAKlG,MAAQqG,EAC1Bb,KAAMU,EAAKV,KACXxF,KAAMkG,EAAKlG,KACX4G,UAAWN,IAcYO,CAAaX,EAAKC,eAEhCC,EAAWM,YAGJN,EAAWO,aAInBT,EAAKnJ,OAAS,OACdmJ,EAAKY,QAAU,MAJfZ,EAAKnJ,OAAS,QACdmJ,EAAKa,SAAW,kCAAkCb,EAAKC,cAAcnG,KAAO,KAAO,MAAMoE,QAAQ,WAJjG8B,EAAKnJ,OAAS,QACdmJ,EAAKa,SAAW,qFASpBb,EAAKlG,KAAOkG,EAAKC,cAAcnG,KAC/BkG,EAAKV,KAAOU,EAAKC,cAAcX,KAC/BU,EAAKc,aAAed,EAAKC,cAAca,YAC3C,CACA,OAAOd,IAGX3C,EAAYyC,GAGZ,MAAMiB,EAAajB,EAAkBzB,OAAOC,GAAkB,SAAbA,EAAEzH,QAAmBsD,OAChE6G,EAAalB,EAAkBzB,OAAOC,GAAkB,UAAbA,EAAEzH,QAAoBsD,OAEnE6G,EAAa,EACb/B,EAAAA,GAAQW,QACJ,GAAGoB,wEAEAD,EAAa,GACpB9B,EAAAA,GAAQgC,QAAQ,GAAGF,gCAuHXG,aAAcA,KAAM,EACpBC,OAAO,6CACPjE,SAAUA,GAAYK,EACtBoB,MAAO,CAAEa,aAAc,IAAKlG,SAAA,EAE5BM,EAAAA,EAAAA,KAAA,KAAGwH,UAAU,uBAAsB9H,UAC/BM,EAAAA,EAAAA,KAACyH,EAAAA,EAAa,OAElBzH,EAAAA,EAAAA,KAAA,KAAGwH,UAAU,kBAAiB9H,SAAC,gDAG/BM,EAAAA,EAAAA,KAAA,KAAGwH,UAAU,kBAAiB9H,SAAC,yEAMlCiE,GAAaE,EAAiB,IAC3B7D,EAAAA,EAAAA,KAAC2E,EAAAA,EAAI,CAACzE,KAAK,QAAQ6E,MAAO,CAAEa,aAAc,IAAKlG,UAC3CkF,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACK,UAAU,WAAWH,MAAO,CAAEI,MAAO,QAASzF,SAAA,EACjDM,EAAAA,EAAAA,KAACgD,EAAI,CAAAtD,SAAC,4BACNM,EAAAA,EAAAA,KAAC0H,EAAAA,EAAQ,CACLV,QAASnD,EACT5G,OAA2B,MAAnB4G,EAAyB,UAAY,SAC7C8D,YAAa,CACT,KAAM,UACN,OAAQ,kBAQ3BnE,EAASjD,OAAS,IACfP,EAAAA,EAAAA,KAAC2E,EAAAA,EAAI,CACDzE,KAAK,QACLG,MAAO,mBAAmBmD,EAASjD,UAAU8C,KAC7C0B,MAAO,CAAEa,aAAc,IAAKlG,UAE5BM,EAAAA,EAAAA,KAAC4H,EAAAA,EAAI,CACD1H,KAAK,QACL2H,WAAYrE,EACZsE,WAAY1B,IACRpG,EAAAA,EAAAA,KAAC4H,EAAAA,EAAKG,KAAI,CACNC,QAAS,EACLhI,EAAAA,EAAAA,KAACiI,EAAAA,GAAM,CAEHvC,KAAK,OACLwC,QAAM,EACNC,MAAMnI,EAAAA,EAAAA,KAACoI,EAAAA,EAAc,IACrBC,QAASA,IAtG7BjC,KAChB,MAAML,EAAcvC,EAASiB,OAAO6D,GAAQA,EAAKC,MAAQnC,EAAKmC,KAC9D9E,EAAYsC,IAoGuCyC,CAAWpC,GAC1BlG,KAAK,QACLoD,SAAUK,EAAUjE,SACvB,UAPO,WAUVA,UAEFM,EAAAA,EAAAA,KAAC4H,EAAAA,EAAKG,KAAKU,KAAI,CACXC,OACoB,SAAhBtC,EAAKnJ,QACD+C,EAAAA,EAAAA,KAAC2I,EAAAA,EAAmB,CAAC5D,MAAO,CAAE6D,MAAO,cAErC5I,EAAAA,EAAAA,KAAC6I,EAAAA,EAAyB,CAAC9D,MAAO,CAAE6D,MAAO,aAGnDvI,OACIuE,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAAAnF,SAAA,EACFM,EAAAA,EAAAA,KAACgD,EAAI,CACD8F,OAAwB,SAAhB1C,EAAKnJ,OACbyI,KAAsB,UAAhBU,EAAKnJ,OAAqB,SAAW,UAAUyC,SAEpD0G,EAAKK,OAETL,EAAKlG,OACF0E,EAAAA,EAAAA,MAAC5B,EAAI,CAAC0C,KAAK,YAAWhG,SAAA,CAAC,IAAEqE,EAAeqC,EAAKlG,MAAM,UAI/DoF,YACoB,UAAhBc,EAAKnJ,QACD+C,EAAAA,EAAAA,KAACgD,EAAI,CAAC0C,KAAK,SAAQhG,SAAE0G,EAAKa,YAE1BjH,EAAAA,EAAAA,KAACgD,EAAI,CAAC0C,KAAK,YAAWhG,SAAC,8BAWvDM,EAAAA,EAAAA,KAAA,OAAK+E,MAAO,CAAEgE,UAAW,UAAWrJ,UAChCM,EAAAA,EAAAA,KAACiI,EAAAA,GAAM,CACHvC,KAAK,UACLyC,MAAMnI,EAAAA,EAAAA,KAAC8E,EAAAA,EAAc,IACrBuD,QArNCW,UACjB,MAAM7B,EAAa3D,EAASiB,OAAO2B,GAAwB,SAAhBA,EAAKnJ,QAEhD,GAA0B,IAAtBkK,EAAW5G,OAKf,GAAK5B,EAKL,IACIiF,GAAa,GACbE,EAAkB,GAElB,MAAMlF,EAAQuI,EAAWhB,IAAIC,GAAQA,EAAKC,eAAiBD,GAGrD6C,EAAmBC,YAAY,KACjCpF,EAAkBqF,GACVA,GAAQ,IACRC,cAAcH,GACP,IAEJE,EAAO,KAEnB,KAGH,IAAIE,EAEAA,EADY,aAAZ9F,GAA0BxE,QACXvD,EAAAA,EAASsD,wBAAwBH,EAASI,EAAYH,SAEtDpD,EAAAA,EAASkD,qBAAqBC,EAASC,GAG1DwK,cAAcH,GACdnF,EAAkB,KAElBuB,EAAAA,GAAQgC,QACJ,yBAAyBF,EAAW5G,6BAA6BgD,MAIrEE,EAAY,IACZK,EAAkB,GAGdV,GACAA,EAAiBiG,EAEzB,CAAE,MAAOlH,GACLC,QAAQD,MAAM,6BAA8BA,GAC5CkD,EAAAA,GAAQlD,MAAM,iCAAiCoB,wBAC/CO,EAAkB,EACtB,CAAC,QACGF,GAAa,EACjB,MAlDIyB,EAAAA,GAAQlD,MAAM,kDALdkD,EAAAA,GAAQlD,MAAM,qDAkNFrC,QAAS6D,EACTL,SAAUA,GAA+B,IAAnBkB,EACtBtE,KAAK,QAAOR,SAEXiE,EACK,aAAaa,mBACb,UAAUA,oBAAiCD,QAMxDf,EAASjD,OAAS,IACfP,EAAAA,EAAAA,KAACoF,EAAAA,EAAK,CACFC,QAAQ,0BACRC,aACIV,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACK,UAAU,WAAWhF,KAAK,QAAOR,SAAA,EACpCkF,EAAAA,EAAAA,MAAC5B,EAAI,CAAAtD,SAAA,EACDM,EAAAA,EAAAA,KAAC2I,EAAAA,EAAmB,CAAC5D,MAAO,CAAE6D,MAAO,UAAWU,YAAa,KAAO,gBACtD9E,KAEjBhB,EAASiB,OAAOC,GAAkB,UAAbA,EAAEzH,QAAoBsD,OAAS,IACjDqE,EAAAA,EAAAA,MAAC5B,EAAI,CAAC0C,KAAK,SAAQhG,SAAA,EACfM,EAAAA,EAAAA,KAAC6I,EAAAA,EAAyB,CAAC9D,MAAO,CAAEuE,YAAa,KAAO,sBACpC9F,EAASiB,OAAOC,GAAkB,UAAbA,EAAEzH,QAAoBsD,aAK/EmF,KAAMlC,EAASiB,OAAOC,GAAkB,UAAbA,EAAEzH,QAAoBsD,OAAS,EAAI,UAAY,UAC1EoF,UAAQ,EACRzF,KAAK,e","sources":["constants/roles.js","constants/index.js","services/queryAPI.js","components/RoleBasedComponent.js","components/QueryDocumentUpload.js"],"sourcesContent":["/**\n * Role constants that match the backend RoleConstants.java\n */\nexport const ROLES = {\n  ADMIN: 'ADMIN',\n  JVC_USER: 'JVC_USER',\n  PLANT_USER: 'PLANT_USER',\n  CQS_USER: 'CQS_USER',\n  TECH_USER: 'TECH_USER',\n  VIEWER: 'VIEWER'\n};\n\n/**\n * Role types for backend compatibility\n */\nexport const ROLE_TYPES = {\n  ADMIN: 'ADMIN',\n  JVC_ROLE: 'JVC_ROLE',\n  PLANT_ROLE: 'PLANT_ROLE',\n  CQS_ROLE: 'CQS_ROLE',\n  TECH_ROLE: 'TECH_ROLE',\n  VIEWER_ROLE: 'VIEWER_ROLE'\n};\n\n/**\n * Role display names\n */\nexport const ROLE_DISPLAY_NAMES = {\n  [ROLES.ADMIN]: 'Administrator',\n  [ROLES.JVC_USER]: 'JVC User',\n  [ROLES.PLANT_USER]: 'Plant User',\n  [ROLES.CQS_USER]: 'CQS User',\n  [ROLES.TECH_USER]: 'Technical User',\n  [ROLES.VIEWER]: 'Viewer'\n};\n\n/**\n * Role descriptions\n */\nexport const ROLE_DESCRIPTIONS = {\n  [ROLES.ADMIN]: 'Full system access with administrative privileges',\n  [ROLES.JVC_USER]: 'Joint Venture Company user with workflow initiation rights',\n  [ROLES.PLANT_USER]: 'Plant-specific user with questionnaire completion rights',\n  [ROLES.CQS_USER]: 'Corporate Quality Services user with query management rights',\n  [ROLES.TECH_USER]: 'Technical user with system monitoring and audit access',\n  [ROLES.VIEWER]: 'Read-only access to assigned content'\n};\n\n/**\n * Role hierarchy (higher number = more privileges)\n */\nexport const ROLE_HIERARCHY = {\n  [ROLES.VIEWER]: 1,\n  [ROLES.PLANT_USER]: 2,\n  [ROLES.CQS_USER]: 3,\n  [ROLES.JVC_USER]: 3,\n  [ROLES.TECH_USER]: 4,\n  [ROLES.ADMIN]: 5\n};\n\n/**\n * Screen access mapping by role\n */\nexport const SCREEN_ACCESS = {\n  [ROLES.ADMIN]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/admin',\n    '/qrmfg/jvc',\n    '/qrmfg/cqs',\n    '/qrmfg/tech',\n    '/qrmfg/plant',\n    '/qrmfg/workflows',\n    '/qrmfg/workflow-monitoring',\n    '/qrmfg/reports',\n    '/qrmfg/users',\n    '/qrmfg/roles',\n    '/qrmfg/sessions',\n    '/qrmfg/user-role-management',\n    '/qrmfg/auditlogs',\n    '/qrmfg/settings'\n  ],\n  [ROLES.JVC_USER]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/jvc',\n    '/qrmfg/workflows',\n    '/qrmfg/reports',\n    '/qrmfg/settings'\n  ],\n  [ROLES.CQS_USER]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/cqs',\n    '/qrmfg/workflows',\n    '/qrmfg/reports',\n    '/qrmfg/settings'\n  ],\n  [ROLES.TECH_USER]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/tech',\n    '/qrmfg/workflows',\n    '/qrmfg/workflow-monitoring',\n    '/qrmfg/reports',\n    '/qrmfg/auditlogs',\n    '/qrmfg/settings'\n  ],\n  [ROLES.PLANT_USER]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/plant',\n    '/qrmfg/workflows',\n    '/qrmfg/reports',\n    '/qrmfg/settings'\n  ],\n  [ROLES.VIEWER]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/settings'\n  ]\n};\n\n/**\n * Data access permissions by role\n */\nexport const DATA_ACCESS = {\n  [ROLES.ADMIN]: ['*'], // All data\n  [ROLES.JVC_USER]: ['workflow', 'document', 'query', 'jvc'],\n  [ROLES.CQS_USER]: ['workflow', 'document', 'query', 'cqs'],\n  [ROLES.TECH_USER]: ['workflow', 'document', 'query', 'audit', 'system', 'tech'],\n  [ROLES.PLANT_USER]: ['workflow', 'document', 'query', 'plant'],\n  [ROLES.VIEWER]: ['workflow:read', 'document:read']\n};\n\n/**\n * Action permissions by role\n */\nexport const ACTION_PERMISSIONS = {\n  [ROLES.ADMIN]: ['*'], // All actions\n  [ROLES.JVC_USER]: ['create', 'read', 'update', 'initiate'],\n  [ROLES.CQS_USER]: ['create', 'read', 'update', 'respond'],\n  [ROLES.TECH_USER]: ['create', 'read', 'update', 'monitor', 'audit'],\n  [ROLES.PLANT_USER]: ['read', 'update', 'complete'],\n  [ROLES.VIEWER]: ['read']\n};\n\n/**\n * Helper functions\n */\nexport const getRoleDisplayName = (role) => {\n  return ROLE_DISPLAY_NAMES[role] || role;\n};\n\nexport const getRoleDescription = (role) => {\n  return ROLE_DESCRIPTIONS[role] || 'No description available';\n};\n\nexport const getRoleHierarchy = (role) => {\n  return ROLE_HIERARCHY[role] || 0;\n};\n\nexport const hasHigherPrivilege = (role1, role2) => {\n  return getRoleHierarchy(role1) > getRoleHierarchy(role2);\n};\n\nexport const getScreensForRole = (role) => {\n  return SCREEN_ACCESS[role] || [];\n};\n\nexport const getDataAccessForRole = (role) => {\n  return DATA_ACCESS[role] || [];\n};\n\nexport const getActionPermissionsForRole = (role) => {\n  return ACTION_PERMISSIONS[role] || [];\n};\n\nexport const canAccessScreen = (role, screen) => {\n  const screens = getScreensForRole(role);\n  return screens.includes('*') || screens.includes(screen);\n};\n\nexport const canAccessData = (role, dataType) => {\n  const dataAccess = getDataAccessForRole(role);\n  return dataAccess.includes('*') || \n         dataAccess.includes(dataType) || \n         dataAccess.some(access => access.startsWith(`${dataType}:`));\n};\n\nexport const canPerformAction = (role, action) => {\n  const actions = getActionPermissionsForRole(role);\n  return actions.includes('*') || actions.includes(action);\n};","// Application Constants\n\n// API Configuration\nexport const API_CONFIG = {\n  TIMEOUT: 30000, // 30 seconds\n  BASE_URL: process.env.REACT_APP_API_BASE_URL || '/qrmfg/api/v1',\n  RETRY_ATTEMPTS: 3\n};\n\n// Authentication\nexport const AUTH_CONFIG = {\n  TOKEN_KEY: 'qrmfg_secure_token',\n  LOGIN_PATH: '/qrmfg/login',\n  DEFAULT_REDIRECT: '/qrmfg'\n};\n\n// UI Constants\nexport const UI_CONFIG = {\n  MOBILE_BREAKPOINT: 768,\n  TABLET_BREAKPOINT: 1024,\n  PAGE_SIZE: 10,\n  DEBOUNCE_DELAY: 300\n};\n\n// Workflow States\nexport const WORKFLOW_STATES = {\n  INITIATED: 'INITIATED',\n  IN_PROGRESS: 'IN_PROGRESS',\n  PENDING_REVIEW: 'PENDING_REVIEW',\n  APPROVED: 'APPROVED',\n  REJECTED: 'REJECTED',\n  COMPLETED: 'COMPLETED'\n};\n\n// Query States\nexport const QUERY_STATES = {\n  OPEN: 'OPEN',\n  IN_PROGRESS: 'IN_PROGRESS',\n  RESOLVED: 'RESOLVED',\n  CLOSED: 'CLOSED'\n};\n\n// Priority Levels\nexport const PRIORITY_LEVELS = {\n  LOW: 'LOW',\n  MEDIUM: 'MEDIUM',\n  HIGH: 'HIGH',\n  URGENT: 'URGENT',\n  CRITICAL: 'CRITICAL'\n};\n\n// Teams\nexport const TEAMS = {\n  CQS: 'CQS',\n  TECH: 'TECH',\n  JVC: 'JVC'\n};\n\n// Error Severity\nexport const ERROR_SEVERITY = {\n  LOW: 'LOW',\n  MEDIUM: 'MEDIUM',\n  HIGH: 'HIGH',\n  CRITICAL: 'CRITICAL'\n};\n\n// Error Categories\nexport const ERROR_CATEGORY = {\n  APPLICATION: 'APPLICATION',\n  COMPONENT: 'COMPONENT',\n  API: 'API',\n  ROUTE: 'ROUTE',\n  ASYNC: 'ASYNC',\n  AUTHENTICATION: 'AUTHENTICATION'\n};\n\n// Status Colors\nexport const STATUS_COLORS = {\n  [WORKFLOW_STATES.INITIATED]: 'blue',\n  [WORKFLOW_STATES.IN_PROGRESS]: 'orange',\n  [WORKFLOW_STATES.PENDING_REVIEW]: 'purple',\n  [WORKFLOW_STATES.APPROVED]: 'green',\n  [WORKFLOW_STATES.REJECTED]: 'red',\n  [WORKFLOW_STATES.COMPLETED]: 'green'\n};\n\n// Priority Colors\nexport const PRIORITY_COLORS = {\n  [PRIORITY_LEVELS.LOW]: 'green',\n  [PRIORITY_LEVELS.MEDIUM]: 'blue',\n  [PRIORITY_LEVELS.HIGH]: 'orange',\n  [PRIORITY_LEVELS.URGENT]: 'red',\n  [PRIORITY_LEVELS.CRITICAL]: 'red'\n};\n\n// Form Validation\nexport const VALIDATION = {\n  MIN_PASSWORD_LENGTH: 8,\n  MAX_FILE_SIZE: 10 * 1024 * 1024, // 10MB\n  ALLOWED_FILE_TYPES: ['.pdf', '.doc', '.docx', '.xls', '.xlsx', '.jpg', '.jpeg', '.png'],\n  MAX_COMMENT_LENGTH: 1000,\n  MAX_DESCRIPTION_LENGTH: 500\n};\n\n// Date Formats\nexport const DATE_FORMATS = {\n  DISPLAY: 'DD/MM/YYYY',\n  DISPLAY_WITH_TIME: 'DD/MM/YYYY HH:mm',\n  API: 'YYYY-MM-DD',\n  ISO: 'YYYY-MM-DDTHH:mm:ss.SSSZ'\n};\n\n// Local Storage Keys\nexport const STORAGE_KEYS = {\n  USER_PREFERENCES: 'qrmfg_user_preferences',\n  THEME: 'qrmfg_theme',\n  LANGUAGE: 'qrmfg_language'\n};\n\n// Animation Delays\nexport const ANIMATION = {\n  FADE_IN_DELAY: 0.1, // seconds\n  STAGGER_DELAY: 0.05, // seconds\n  TRANSITION_DURATION: 0.3 // seconds\n};\n\n// Notification Types\nexport const NOTIFICATION_TYPES = {\n  SUCCESS: 'success',\n  ERROR: 'error',\n  WARNING: 'warning',\n  INFO: 'info'\n};\n\n// Component Names (for error boundaries)\nexport const COMPONENT_NAMES = {\n  USER_TABLE: 'UserTable',\n  USER_MODAL: 'UserModal',\n  PLANT_ASSIGNMENT_FORM: 'PlantAssignmentForm',\n  PLANT_DASHBOARD: 'PlantDashboard',\n  WORKFLOW_TABLE: 'WorkflowTable',\n  FILTER_PANEL: 'FilterPanel'\n};\n\n// File size constants\nexport const FILE_SIZE = {\n  MAX_UPLOAD_SIZE: 25 * 1024 * 1024, // 25MB\n  BYTES_PER_KB: 1024,\n  BYTES_PER_MB: 1024 * 1024,\n  BYTES_PER_GB: 1024 * 1024 * 1024\n};\n\n// Workflow specific states\nexport const WORKFLOW_SPECIFIC_STATES = {\n  JVC_PENDING: 'JVC_PENDING',\n  PLANT_PENDING: 'PLANT_PENDING',\n  CQS_PENDING: 'CQS_PENDING',\n  TECH_PENDING: 'TECH_PENDING',\n  DRAFT: 'DRAFT',\n  IN_PROGRESS: 'IN_PROGRESS',\n  COMPLETED: 'COMPLETED'\n};\n\n// Query status\nexport const QUERY_STATUS = {\n  OPEN: 'OPEN',\n  RESOLVED: 'RESOLVED',\n  CLOSED: 'CLOSED'\n};\n\n// Query status groups for filtering\nexport const QUERY_STATUS_GROUPS = {\n  ACTIVE: ['OPEN'],\n  INACTIVE: ['RESOLVED', 'CLOSED']\n};\n\n// Team names\nexport const TEAM_NAMES = {\n  CQS: 'CQS',\n  TECH: 'TECH',\n  JVC: 'JVC',\n  PLANT: 'PLANT'\n};\n\n// Auto-save intervals\nexport const AUTO_SAVE = {\n  INTERVAL: 30000, // 30 seconds\n  DEBOUNCE_DELAY: 2000 // 2 seconds\n};\n\n// Pagination defaults\nexport const PAGINATION = {\n  DEFAULT_PAGE_SIZE: 10,\n  SMALL_PAGE_SIZE: 5,\n  LARGE_PAGE_SIZE: 15,\n  SHOW_SIZE_CHANGER: true,\n  SHOW_QUICK_JUMPER: true\n};\n\n// Completion filter options\nexport const COMPLETION_FILTERS = {\n  ALL: 'all',\n  COMPLETED: 'completed',\n  IN_PROGRESS: 'in-progress',\n  NOT_STARTED: 'not-started'\n};\n\n// Tab keys\nexport const TAB_KEYS = {\n  INITIATE: 'initiate',\n  PENDING: 'pending',\n  COMPLETED: 'completed',\n  QUERIES: 'queries',\n  HISTORY: 'history'\n};\n\n// Re-export role constants\nexport * from './roles';\n","import apiClient from '../api/client';\n\n/**\n * Query API service providing query management functionality\n * Migrated to use unified APIClient with standardized error handling\n *\n * @namespace queryAPI\n */\nexport const queryAPI = {\n  // Query CRUD operations\n  /**\n   * Create a new query for a workflow\n   * @param {string} workflowId - Workflow ID to create query for\n   * @param {Object} queryData - Query data\n   * @returns {Promise<Object>} Created query object\n   */\n  createQuery: (workflowId, queryData) =>\n    apiClient.post(`/queries/workflow/${workflowId}`, queryData),\n\n  /**\n   * Get query by ID\n   * @param {string} id - Query ID\n   * @returns {Promise<Object>} Query object\n   */\n  getQuery: id => apiClient.get(`/queries/${id}`),\n\n  /**\n   * Update query by ID\n   * @param {string} id - Query ID\n   * @param {Object} queryData - Updated query data\n   * @returns {Promise<Object>} Updated query object\n   */\n  updateQuery: (id, queryData) => apiClient.put(`/queries/${id}`, queryData),\n\n  /**\n   * Delete query by ID\n   * @param {string} id - Query ID\n   * @returns {Promise<void>} Promise that resolves when query is deleted\n   */\n  deleteQuery: id => apiClient.delete(`/queries/${id}`),\n\n  // Query resolution\n  /**\n   * Resolve a query\n   * @param {string} id - Query ID\n   * @param {Object} resolutionData - Resolution data\n   * @returns {Promise<Object>} Resolved query object\n   */\n  resolveQuery: (id, resolutionData) => apiClient.post(`/queries/${id}/resolve`, resolutionData),\n\n  /**\n   * Reopen a resolved query\n   * @param {string} id - Query ID\n   * @param {string} reason - Reason for reopening\n   * @returns {Promise<Object>} Reopened query object\n   */\n  reopenQuery: (id, reason) => apiClient.post(`/queries/${id}/reopen`, { reason }),\n\n  // Query assignment\n  /**\n   * Assign query to team/user\n   * @param {string} id - Query ID\n   * @param {Object} assignmentData - Assignment data\n   * @returns {Promise<Object>} Assigned query object\n   */\n  assignQuery: (id, assignmentData) => apiClient.post(`/queries/${id}/assign`, assignmentData),\n\n  /**\n   * Reassign query to different team\n   * @param {string} id - Query ID\n   * @param {string} newTeam - New team to assign to\n   * @param {string} reason - Reason for reassignment\n   * @returns {Promise<Object>} Reassigned query object\n   */\n  reassignQuery: (id, newTeam, reason) =>\n    apiClient.put(`/queries/${id}/assign`, { team: newTeam, reason }),\n\n  // Query search and filtering\n  /**\n   * Get queries for a specific workflow\n   * @param {string} workflowId - Workflow ID\n   * @returns {Promise<Array>} Array of queries for the workflow\n   */\n  getQueriesByWorkflow: workflowId => apiClient.get(`/queries/workflow/${workflowId}`),\n\n  /**\n   * Get queries assigned to a team\n   * @param {string} team - Team name\n   * @returns {Promise<Array>} Array of queries for the team\n   */\n  getQueriesByTeam: team => apiClient.get(`/queries/team/${team}`),\n\n  /**\n   * Get queries by status\n   * @param {string} status - Query status\n   * @returns {Promise<Array>} Array of queries with the specified status\n   */\n  getQueriesByStatus: status => apiClient.get(`/queries/status/${status}`),\n\n  /**\n   * Get queries raised by current user\n   * @param {string} username - Username (unused in current implementation)\n   * @returns {Promise<Array>} Array of queries raised by user\n   */\n  getQueriesByUser: _username => apiClient.get(`/queries/my-raised`),\n\n  /**\n   * Search queries with parameters\n   * @param {Object} searchParams - Search parameters\n   * @returns {Promise<Array>} Array of matching queries\n   */\n  searchQueries: searchParams => {\n    const queryString = new URLSearchParams(searchParams).toString();\n    return apiClient.get(`/queries/search?${queryString}`);\n  },\n\n  // Query statistics\n  /**\n   * Get query statistics for time range\n   * @param {number} timeRange - Number of days to look back\n   * @returns {Promise<Object>} Query statistics\n   */\n  getQueryStats: timeRange => apiClient.get(`/queries/recent?days=${timeRange}`),\n\n  /**\n   * Get query counts by team\n   * @param {string} team - Team name\n   * @returns {Promise<number>} Number of open queries for team\n   */\n  getQueryCountsByTeam: team => apiClient.get(`/queries/stats/count-open/${team}`),\n\n  /**\n   * Get average resolution time by team\n   * @param {string} team - Team name\n   * @returns {Promise<number>} Average resolution time in hours\n   */\n  getAvgResolutionTimeByTeam: team => apiClient.get(`/queries/stats/avg-resolution-time/${team}`),\n\n  /**\n   * Get overdue queries\n   * @param {number} dayThreshold - Days threshold for overdue (default: 3)\n   * @returns {Promise<Array>} Array of overdue queries\n   */\n  getOverdueQueries: (_dayThreshold = 3) => apiClient.get('/queries/overdue'),\n\n  // Team-specific statistics\n  /**\n   * Get overdue queries count by team\n   * @param {string} team - Team name\n   * @returns {Promise<number>} Number of overdue queries for team\n   */\n  getOverdueQueriesCountByTeam: team => apiClient.get(`/queries/stats/overdue-count/${team}`),\n\n  /**\n   * Get queries resolved today by team\n   * @param {string} team - Team name\n   * @returns {Promise<number>} Number of queries resolved today by team\n   */\n  getQueriesResolvedTodayByTeam: team => apiClient.get(`/queries/stats/resolved-today/${team}`),\n\n  // Query SLA tracking\n  /**\n   * Get query SLA status\n   * @param {string} id - Query ID\n   * @returns {Promise<boolean>} True if query is overdue\n   */\n  getQuerySLAStatus: id => apiClient.get(`/queries/${id}/is-overdue`),\n\n  /**\n   * Get queries nearing SLA deadline\n   * @param {number} hoursThreshold - Hours threshold (default: 24)\n   * @returns {Promise<Array>} Array of queries needing attention\n   */\n  getQueriesNearingSLA: (_hoursThreshold = 24) => apiClient.get('/queries/needing-attention'),\n\n  // Query comments/updates (not implemented in backend yet)\n  /**\n   * Add comment to query\n   * @param {string} id - Query ID\n   * @param {string} comment - Comment text\n   * @returns {Promise<Object>} Added comment object\n   */\n  addQueryComment: (id, comment) => apiClient.post(`/queries/${id}/comments`, { comment }),\n\n  /**\n   * Get comments for query\n   * @param {string} id - Query ID\n   * @returns {Promise<Array>} Array of comments for the query\n   */\n  getQueryComments: id => apiClient.get(`/queries/${id}/comments`),\n\n  // Query priority management\n  /**\n   * Update query priority\n   * @param {string} id - Query ID\n   * @param {string} priority - New priority level\n   * @returns {Promise<Object>} Updated query object\n   */\n  updateQueryPriority: (id, priority) => apiClient.put(`/queries/${id}/priority`, { priority }),\n\n  /**\n   * Escalate query priority\n   * @param {string} id - Query ID\n   * @param {string} escalationReason - Reason for escalation\n   * @returns {Promise<Object>} Escalated query object\n   */\n  escalateQuery: (id, _escalationReason) =>\n    apiClient.put(`/queries/${id}/priority`, { priorityLevel: 'HIGH' }),\n\n  // Query document management\n  /**\n   * Upload documents to a query\n   * @param {string} queryId - Query ID\n   * @param {Array<File>} files - Files to upload\n   * @returns {Promise<Array>} Array of uploaded document objects\n   */\n  uploadQueryDocuments: (queryId, files) => {\n    return apiClient.upload(`/queries/${queryId}/documents`, files);\n  },\n\n  /**\n   * Upload documents to a query response\n   * @param {string} queryId - Query ID\n   * @param {string} responseId - Response ID\n   * @param {Array<File>} files - Files to upload\n   * @returns {Promise<Array>} Array of uploaded document objects\n   */\n  uploadResponseDocuments: (queryId, responseId, files) => {\n    return apiClient.upload(`/queries/${queryId}/responses/${responseId}/documents`, files);\n  },\n\n  /**\n   * Get all documents associated with a query\n   * @param {string} queryId - Query ID\n   * @returns {Promise<Array>} Array of document objects\n   */\n  getQueryDocuments: (queryId) => apiClient.get(`/queries/${queryId}/documents`),\n\n  /**\n   * Download a query document\n   * @param {string} queryId - Query ID\n   * @param {string} documentId - Document ID\n   * @returns {Promise<Blob>} Document file blob\n   */\n  downloadQueryDocument: (queryId, documentId) => {\n    return apiClient.download(`/queries/${queryId}/documents/${documentId}/download`);\n  },\n\n  /**\n   * Delete a query document\n   * @param {string} queryId - Query ID\n   * @param {string} documentId - Document ID\n   * @returns {Promise<void>} Promise that resolves when document is deleted\n   */\n  deleteQueryDocument: (queryId, documentId) => {\n    return apiClient.delete(`/queries/${queryId}/documents/${documentId}`);\n  },\n\n  // Enhanced Query Status Management (New APIs)\n\n  /**\n   * Close query without resolution\n   * @param {string} queryId - Query ID\n   * @param {string} reason - Reason for closing\n   * @returns {Promise<Object>} Updated query object\n   */\n  closeQuery: (queryId, reason) => \n    apiClient.post(`/queries/${queryId}/close`, { reason }),\n\n  /**\n   * Check if plant can edit form while queries are active\n   * @param {string} workflowId - Workflow ID\n   * @returns {Promise<Object>} Object with canEdit boolean\n   */\n  canPlantEditForm: (workflowId) => \n    apiClient.get(`/queries/workflow/${workflowId}/can-edit`),\n\n  /**\n   * Get comprehensive query status summary for workflow\n   * @param {string} workflowId - Workflow ID\n   * @returns {Promise<Object>} Query status summary\n   */\n  getQueryStatusSummary: (workflowId) => \n    apiClient.get(`/queries/workflow/${workflowId}/status-summary`)\n};","import { Result, Spin } from 'antd';\nimport React from 'react';\n\n\nimport { \n  isAuthenticated, \n  isAdmin, \n  isJvcUser, \n  isCqsUser, \n  isTechUser, \n  isPlantUser, \n  isViewer,\n  hasRole,\n  getPrimaryRoleType,\n  getCurrentUser,\n  getToken\n} from '../services/auth';\nimport JWTValidator from '../services/jwtValidator';\n\n/**\n * Role-based component wrapper that conditionally renders content based on user roles\n */\nconst RoleBasedComponent = ({ \n  children, \n  roles = [], \n  requireAll = false, \n  fallback = null, \n  loading = false,\n  showFallback = true \n}) => {\n  \n  if (loading) {\n    return <Spin size=\"large\" />;\n  }\n\n  if (!isAuthenticated()) {\n    return showFallback ? (\n      <Result\n        status=\"warning\"\n        title=\"Authentication Required\"\n        subTitle=\"Please log in to access this content.\"\n      />\n    ) : null;\n  }\n\n  // If no roles specified, show content to all authenticated users\n  if (!roles || roles.length === 0) {\n    return children;\n  }\n\n  // Check role access - admins have access to everything\n  const adminAccess = isAdmin();\n  const roleAccess = requireAll \n    ? roles.every(role => hasRole(role))\n    : roles.some(role => hasRole(role));\n  \n  const hasAccess = adminAccess || roleAccess;\n\n  if (!hasAccess) {\n    if (fallback) {\n      return fallback;\n    }\n    \n    return showFallback ? (\n      <Result\n        status=\"403\"\n        title=\"Access Denied\"\n        subTitle={`This content requires one of the following roles: ${roles.join(', ')} or ADMIN privileges`}\n      />\n    ) : null;\n  }\n\n  return children;\n};\n\n/**\n * Convenience components for specific roles\n */\nexport const AdminOnly = ({ children, fallback = null, showFallback = true }) => {\n  if (!isAuthenticated()) {\n    return showFallback ? (\n      <Result\n        status=\"warning\"\n        title=\"Authentication Required\"\n        subTitle=\"Please log in to access this content.\"\n      />\n    ) : null;\n  }\n\n  // Direct check using multiple methods\n  const currentUser = getCurrentUser();\n  const adminStatus = isAdmin();\n  const hasAdminRole = hasRole('ADMIN');\n  const hasAdminRoleLower = hasRole('admin');\n  const hasRoleAdmin = hasRole('ROLE_ADMIN');\n  \n  // Also check the JWT token directly\n  const token = getToken();\n  let tokenIsAdmin = false;\n  let tokenHasAdminRole = false;\n  \n  if (token) {\n    try {\n      const payload = JWTValidator.getTokenPayload(token);\n      tokenIsAdmin = payload?.isAdmin === true;\n      tokenHasAdminRole = payload?.roles?.includes('ADMIN') || payload?.authorities?.includes('ADMIN');\n    } catch (error) {\n      console.error('Error checking token in AdminOnly:', error);\n    }\n  }\n  \n  const hasAccess = adminStatus || hasAdminRole || hasAdminRoleLower || hasRoleAdmin || tokenIsAdmin || tokenHasAdminRole;\n  \n  // Enhanced debugging\n  console.log('AdminOnly Enhanced Debug:', {\n    currentUser,\n    adminStatus,\n    hasAdminRole,\n    hasAdminRoleLower,\n    hasRoleAdmin,\n    tokenIsAdmin,\n    tokenHasAdminRole,\n    finalHasAccess: hasAccess,\n    token: token ? 'present' : 'missing'\n  });\n\n  if (!hasAccess) {\n    if (fallback) {\n      return fallback;\n    }\n    \n    return showFallback ? (\n      <Result\n        status=\"403\"\n        title=\"Access Denied\"\n        subTitle={`This content requires administrator privileges. Debug: user=${currentUser}, isAdmin=${adminStatus}, hasRole=${hasAdminRole}, tokenAdmin=${tokenIsAdmin}`}\n      />\n    ) : null;\n  }\n\n  return children;\n};\n\nexport const JvcOnly = ({ children, fallback = null, showFallback = true }) => (\n  <RoleBasedComponent \n    roles={['JVC_USER', 'JVC_ROLE', 'ADMIN']} \n    fallback={fallback} \n    showFallback={showFallback}\n  >\n    {children}\n  </RoleBasedComponent>\n);\n\nexport const CqsOnly = ({ children, fallback = null, showFallback = true }) => (\n  <RoleBasedComponent \n    roles={['CQS_USER', 'CQS_ROLE', 'ADMIN']} \n    fallback={fallback} \n    showFallback={showFallback}\n  >\n    {children}\n  </RoleBasedComponent>\n);\n\nexport const TechOnly = ({ children, fallback = null, showFallback = true }) => (\n  <RoleBasedComponent \n    roles={['TECH_USER', 'TECH_ROLE', 'ADMIN']} \n    fallback={fallback} \n    showFallback={showFallback}\n  >\n    {children}\n  </RoleBasedComponent>\n);\n\nexport const PlantOnly = ({ children, fallback = null, showFallback = true }) => (\n  <RoleBasedComponent \n    roles={['PLANT_USER', 'PLANT_ROLE', 'ADMIN']} \n    fallback={fallback} \n    showFallback={showFallback}\n  >\n    {children}\n  </RoleBasedComponent>\n);\n\nexport const NonViewerOnly = ({ children, fallback = null, showFallback = true }) => {\n  if (!isAuthenticated()) {\n    return showFallback ? (\n      <Result\n        status=\"warning\"\n        title=\"Authentication Required\"\n        subTitle=\"Please log in to access this content.\"\n      />\n    ) : null;\n  }\n\n  if (isViewer() && !isAdmin()) {\n    return fallback || (showFallback ? (\n      <Result\n        status=\"403\"\n        title=\"Access Denied\"\n        subTitle=\"Viewers cannot access this content.\"\n      />\n    ) : null);\n  }\n\n  return children;\n};\n\n/**\n * Hook for role-based conditional rendering\n */\nexport const useRoleAccess = () => {\n  return {\n    isAuthenticated: isAuthenticated(),\n    isAdmin: isAdmin(),\n    isJvcUser: isJvcUser(),\n    isCqsUser: isCqsUser(),\n    isTechUser: isTechUser(),\n    isPlantUser: isPlantUser(),\n    isViewer: isViewer(),\n    primaryRole: getPrimaryRoleType(),\n    hasRole: (role) => hasRole(role),\n    hasAnyRole: (roles) => roles.some(role => hasRole(role)),\n    hasAllRoles: (roles) => roles.every(role => hasRole(role))\n  };\n};\n\nexport default RoleBasedComponent;","import {\n    UploadOutlined,\n    InboxOutlined,\n    CheckCircleOutlined,\n    DeleteOutlined,\n    ExclamationCircleOutlined\n} from '@ant-design/icons';\nimport {\n    Upload,\n    Button,\n    Card,\n    Space,\n    Typography,\n    Alert,\n    message,\n    List,\n    Progress\n} from 'antd';\nimport React, { useState } from 'react';\n\nimport { FILE_SIZE } from '../constants';\nimport { queryAPI } from '../services/queryAPI';\n\n\nconst { Text } = Typography;\nconst { Dragger } = Upload;\n\n/**\n * QueryDocumentUpload Component\n * \n * Provides file upload functionality for query documents with:\n * - Drag and drop interface\n * - File validation with user-friendly error messages\n * - Progress indicators and upload status feedback\n * - Support for both query creation and response attachment contexts\n * \n * @param {Object} props\n * @param {string} props.queryId - Query ID (required for response context)\n * @param {string} props.responseId - Response ID (optional, for response attachments)\n * @param {Function} props.onUploadComplete - Callback when upload completes\n * @param {number} props.maxFiles - Maximum number of files allowed (default: 5)\n * @param {boolean} props.disabled - Whether upload is disabled\n * @param {string} props.context - Upload context: 'query' or 'response'\n */\nconst QueryDocumentUpload = ({\n    queryId,\n    responseId,\n    onUploadComplete,\n    maxFiles = 5,\n    disabled = false,\n    context = 'query'\n}) => {\n    const [fileList, setFileList] = useState([]);\n    const [uploading, setUploading] = useState(false);\n    const [uploadProgress, setUploadProgress] = useState(0);\n\n    // File validation function\n    const validateFile = (file) => {\n        const validTypes = [\n            'application/pdf',\n            'application/msword',\n            'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n            'application/vnd.ms-excel',\n            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n            'image/jpeg',\n            'image/jpg',\n            'image/png'\n        ];\n\n        const validExtensions = ['.pdf', '.doc', '.docx', '.xls', '.xlsx', '.jpg', '.jpeg', '.png'];\n        const maxSize = FILE_SIZE.MAX_UPLOAD_SIZE;\n\n        const fileExtension = file.name.toLowerCase().substring(file.name.lastIndexOf('.'));\n\n        return {\n            isValidType: validTypes.includes(file.type) || validExtensions.includes(fileExtension),\n            isValidSize: file.size <= maxSize,\n            type: file.type,\n            size: file.size,\n            extension: fileExtension\n        };\n    };\n\n    // Handle file selection and validation\n    const handleFileChange = ({ fileList: newFileList }) => {\n        // Limit number of files\n        if (newFileList.length > maxFiles) {\n            message.warning(`Maximum ${maxFiles} files allowed. Only the first ${maxFiles} files will be processed.`);\n            newFileList = newFileList.slice(0, maxFiles);\n        }\n\n        const validatedFileList = newFileList.map(file => {\n            if (file.originFileObj) {\n                const validation = validateFile(file.originFileObj);\n\n                if (!validation.isValidType) {\n                    file.status = 'error';\n                    file.response = 'Invalid file type. Only PDF, Word, Excel, and image files (JPG, PNG) are allowed.';\n                } else if (!validation.isValidSize) {\n                    file.status = 'error';\n                    file.response = `File size exceeds 25MB limit (${(file.originFileObj.size / 1024 / 1024).toFixed(2)}MB).`;\n                } else {\n                    file.status = 'done';\n                    file.percent = 100;\n                }\n\n                file.size = file.originFileObj.size;\n                file.type = file.originFileObj.type;\n                file.lastModified = file.originFileObj.lastModified;\n            }\n            return file;\n        });\n\n        setFileList(validatedFileList);\n\n        // Show validation feedback\n        const validFiles = validatedFileList.filter(f => f.status === 'done').length;\n        const errorFiles = validatedFileList.filter(f => f.status === 'error').length;\n\n        if (errorFiles > 0) {\n            message.warning(\n                `${errorFiles} file(s) have validation errors. Please check file types and sizes.`\n            );\n        } else if (validFiles > 0) {\n            message.success(`${validFiles} file(s) ready for upload.`);\n        }\n    };\n\n    // Handle file upload\n    const handleUpload = async () => {\n        const validFiles = fileList.filter(file => file.status === 'done');\n\n        if (validFiles.length === 0) {\n            message.error('Please select at least one valid file to upload.');\n            return;\n        }\n\n        if (!queryId) {\n            message.error('Query ID is required for document upload.');\n            return;\n        }\n\n        try {\n            setUploading(true);\n            setUploadProgress(0);\n\n            const files = validFiles.map(file => file.originFileObj || file);\n\n            // Simulate progress for better UX\n            const progressInterval = setInterval(() => {\n                setUploadProgress(prev => {\n                    if (prev >= 90) {\n                        clearInterval(progressInterval);\n                        return 90;\n                    }\n                    return prev + 10;\n                });\n            }, 200);\n\n            // Call appropriate API based on context\n            let result;\n            if (context === 'response' && responseId) {\n                result = await queryAPI.uploadResponseDocuments(queryId, responseId, files);\n            } else {\n                result = await queryAPI.uploadQueryDocuments(queryId, files);\n            }\n\n            clearInterval(progressInterval);\n            setUploadProgress(100);\n\n            message.success(\n                `Successfully uploaded ${validFiles.length} document(s) to the ${context}.`\n            );\n\n            // Clear the file list\n            setFileList([]);\n            setUploadProgress(0);\n\n            // Notify parent component\n            if (onUploadComplete) {\n                onUploadComplete(result);\n            }\n        } catch (error) {\n            console.error('Error uploading documents:', error);\n            message.error(`Failed to upload documents to ${context}. Please try again.`);\n            setUploadProgress(0);\n        } finally {\n            setUploading(false);\n        }\n    };\n\n    // Remove file from list\n    const removeFile = (file) => {\n        const newFileList = fileList.filter(item => item.uid !== file.uid);\n        setFileList(newFileList);\n    };\n\n    // Format file size for display\n    const formatFileSize = (bytes) => {\n        if (bytes === 0) return '0 Bytes';\n        const k = 1024;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;\n    };\n\n    const contextLabel = context === 'response' ? 'Response' : 'Query';\n    const validFileCount = fileList.filter(f => f.status === 'done').length;\n\n    return (\n        <Card\n            size=\"small\"\n            title={\n                <Space>\n                    <UploadOutlined />\n                    <span>Upload Documents to {contextLabel}</span>\n                </Space>\n            }\n            style={{ backgroundColor: '#fafafa', border: '1px dashed #d9d9d9' }}\n        >\n            <Space direction=\"vertical\" style={{ width: '100%' }}>\n                {/* Upload Guidelines */}\n                <Alert\n                    message={`Document Upload for ${contextLabel}`}\n                    description={\n                        <ul style={{ margin: 0, paddingLeft: 20 }}>\n                            <li>Supported formats: PDF, Word (.doc, .docx), Excel (.xls, .xlsx), Images (JPG, PNG)</li>\n                            <li>Maximum file size: 25MB per file</li>\n                            <li>Maximum {maxFiles} files allowed</li>\n                            <li>Files will be attached to this {context.toLowerCase()}</li>\n                        </ul>\n                    }\n                    type=\"info\"\n                    showIcon\n                    size=\"small\"\n                    style={{ marginBottom: 16 }}\n                />\n\n                {/* Drag and Drop Upload Area */}\n                <Dragger\n                    multiple\n                    fileList={fileList}\n                    onChange={handleFileChange}\n                    beforeUpload={() => false} // Prevent auto upload\n                    accept=\".pdf,.doc,.docx,.xls,.xlsx,.jpg,.jpeg,.png\"\n                    disabled={disabled || uploading}\n                    style={{ marginBottom: 16 }}\n                >\n                    <p className=\"ant-upload-drag-icon\">\n                        <InboxOutlined />\n                    </p>\n                    <p className=\"ant-upload-text\">\n                        Click or drag files to this area to upload\n                    </p>\n                    <p className=\"ant-upload-hint\">\n                        Support for PDF, Word, Excel, and image files. Maximum 25MB each.\n                    </p>\n                </Dragger>\n\n                {/* Upload Progress */}\n                {uploading && uploadProgress > 0 && (\n                    <Card size=\"small\" style={{ marginBottom: 16 }}>\n                        <Space direction=\"vertical\" style={{ width: '100%' }}>\n                            <Text>Uploading documents...</Text>\n                            <Progress\n                                percent={uploadProgress}\n                                status={uploadProgress === 100 ? 'success' : 'active'}\n                                strokeColor={{\n                                    '0%': '#108ee9',\n                                    '100%': '#87d068',\n                                }}\n                            />\n                        </Space>\n                    </Card>\n                )}\n\n                {/* Selected Files List */}\n                {fileList.length > 0 && (\n                    <Card\n                        size=\"small\"\n                        title={`Selected Files (${fileList.length}/${maxFiles})`}\n                        style={{ marginBottom: 16 }}\n                    >\n                        <List\n                            size=\"small\"\n                            dataSource={fileList}\n                            renderItem={file => (\n                                <List.Item\n                                    actions={[\n                                        <Button\n                                            key=\"remove\"\n                                            type=\"text\"\n                                            danger\n                                            icon={<DeleteOutlined />}\n                                            onClick={() => removeFile(file)}\n                                            size=\"small\"\n                                            disabled={uploading}\n                                        >\n                                            Remove\n                                        </Button>\n                                    ]}\n                                >\n                                    <List.Item.Meta\n                                        avatar={\n                                            file.status === 'done' ? (\n                                                <CheckCircleOutlined style={{ color: '#52c41a' }} />\n                                            ) : (\n                                                <ExclamationCircleOutlined style={{ color: '#ff4d4f' }} />\n                                            )\n                                        }\n                                        title={\n                                            <Space>\n                                                <Text\n                                                    strong={file.status === 'done'}\n                                                    type={file.status === 'error' ? 'danger' : 'default'}\n                                                >\n                                                    {file.name}\n                                                </Text>\n                                                {file.size && (\n                                                    <Text type=\"secondary\">({formatFileSize(file.size)})</Text>\n                                                )}\n                                            </Space>\n                                        }\n                                        description={\n                                            file.status === 'error' ? (\n                                                <Text type=\"danger\">{file.response}</Text>\n                                            ) : (\n                                                <Text type=\"secondary\">Ready for upload</Text>\n                                            )\n                                        }\n                                    />\n                                </List.Item>\n                            )}\n                        />\n                    </Card>\n                )}\n\n                {/* Upload Button */}\n                <div style={{ textAlign: 'center' }}>\n                    <Button\n                        type=\"primary\"\n                        icon={<UploadOutlined />}\n                        onClick={handleUpload}\n                        loading={uploading}\n                        disabled={disabled || validFileCount === 0}\n                        size=\"large\"\n                    >\n                        {uploading\n                            ? `Uploading ${validFileCount} Document(s)...`\n                            : `Upload ${validFileCount} Document(s) to ${contextLabel}`\n                        }\n                    </Button>\n                </div>\n\n                {/* File Validation Summary */}\n                {fileList.length > 0 && (\n                    <Alert\n                        message=\"File Validation Summary\"\n                        description={\n                            <Space direction=\"vertical\" size=\"small\">\n                                <Text>\n                                    <CheckCircleOutlined style={{ color: '#52c41a', marginRight: 4 }} />\n                                    Valid files: {validFileCount}\n                                </Text>\n                                {fileList.filter(f => f.status === 'error').length > 0 && (\n                                    <Text type=\"danger\">\n                                        <ExclamationCircleOutlined style={{ marginRight: 4 }} />\n                                        Files with errors: {fileList.filter(f => f.status === 'error').length}\n                                    </Text>\n                                )}\n                            </Space>\n                        }\n                        type={fileList.filter(f => f.status === 'error').length > 0 ? 'warning' : 'success'}\n                        showIcon\n                        size=\"small\"\n                    />\n                )}\n            </Space>\n        </Card>\n    );\n};\n\nexport default QueryDocumentUpload;"],"names":["UI_CONFIG","MOBILE_BREAKPOINT","TABLET_BREAKPOINT","PAGE_SIZE","DEBOUNCE_DELAY","WORKFLOW_STATES","INITIATED","IN_PROGRESS","PENDING_REVIEW","APPROVED","REJECTED","COMPLETED","PRIORITY_LEVELS","LOW","MEDIUM","HIGH","URGENT","CRITICAL","FILE_SIZE","MAX_UPLOAD_SIZE","BYTES_PER_KB","BYTES_PER_MB","BYTES_PER_GB","WORKFLOW_SPECIFIC_STATES","JVC_PENDING","PLANT_PENDING","CQS_PENDING","TECH_PENDING","DRAFT","QUERY_STATUS","OPEN","RESOLVED","CLOSED","QUERY_STATUS_GROUPS","ACTIVE","INACTIVE","TEAM_NAMES","CQS","TECH","JVC","PLANT","AUTO_SAVE","INTERVAL","PAGINATION","DEFAULT_PAGE_SIZE","SMALL_PAGE_SIZE","LARGE_PAGE_SIZE","SHOW_SIZE_CHANGER","SHOW_QUICK_JUMPER","TAB_KEYS","INITIATE","PENDING","QUERIES","HISTORY","queryAPI","createQuery","workflowId","queryData","apiClient","post","getQuery","id","get","updateQuery","put","deleteQuery","delete","resolveQuery","resolutionData","reopenQuery","reason","assignQuery","assignmentData","reassignQuery","newTeam","team","getQueriesByWorkflow","getQueriesByTeam","getQueriesByStatus","status","getQueriesByUser","_username","searchQueries","searchParams","queryString","URLSearchParams","toString","getQueryStats","timeRange","getQueryCountsByTeam","getAvgResolutionTimeByTeam","getOverdueQueries","getOverdueQueriesCountByTeam","getQueriesResolvedTodayByTeam","getQuerySLAStatus","getQueriesNearingSLA","addQueryComment","comment","getQueryComments","updateQueryPriority","priority","escalateQuery","_escalationReason","priorityLevel","uploadQueryDocuments","queryId","files","upload","uploadResponseDocuments","responseId","getQueryDocuments","downloadQueryDocument","documentId","download","deleteQueryDocument","closeQuery","canPlantEditForm","getQueryStatusSummary","RoleBasedComponent","_ref","children","roles","requireAll","fallback","loading","showFallback","_jsx","Spin","size","isAuthenticated","Result","title","subTitle","length","adminAccess","isAdmin","roleAccess","every","role","hasRole","some","join","AdminOnly","_ref2","currentUser","getCurrentUser","adminStatus","hasAdminRole","hasAdminRoleLower","hasRoleAdmin","token","getToken","tokenIsAdmin","tokenHasAdminRole","_payload$roles","_payload$authorities","payload","JWTValidator","getTokenPayload","includes","authorities","error","console","hasAccess","log","finalHasAccess","JvcOnly","_ref3","CqsOnly","_ref4","TechOnly","_ref5","PlantOnly","_ref6","Text","Typography","Dragger","Upload","onUploadComplete","maxFiles","disabled","context","fileList","setFileList","useState","uploading","setUploading","uploadProgress","setUploadProgress","formatFileSize","bytes","i","Math","floor","parseFloat","pow","toFixed","contextLabel","validFileCount","filter","f","Card","_jsxs","Space","UploadOutlined","style","backgroundColor","border","direction","width","Alert","message","description","margin","paddingLeft","toLowerCase","type","showIcon","marginBottom","multiple","onChange","newFileList","warning","slice","validatedFileList","map","file","originFileObj","validation","maxSize","fileExtension","name","substring","lastIndexOf","isValidType","isValidSize","extension","validateFile","percent","response","lastModified","validFiles","errorFiles","success","beforeUpload","accept","className","InboxOutlined","Progress","strokeColor","List","dataSource","renderItem","Item","actions","Button","danger","icon","DeleteOutlined","onClick","item","uid","removeFile","Meta","avatar","CheckCircleOutlined","color","ExclamationCircleOutlined","strong","textAlign","async","progressInterval","setInterval","prev","clearInterval","result","marginRight"],"sourceRoot":""}