{"version":3,"file":"static/js/947.a2029d40.chunk.js","mappings":"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","sources":["components/ErrorBoundaries/PlantErrorBoundary.js","components/Plant/FilterPanel.js","components/Plant/PlantDashboard.js","components/Plant/WorkflowTable.js","components/CqsFieldDisplay.js","components/MaterialContextPanel.js","components/QueryRaisingModal.js","components/PlantQuestionnaire.js","screens/PlantView.js","hooks/usePlantWorkflows.js","hooks/useWorkflowFilters.js","hooks/useRoleBasedAccess.js","components/SecureForm.js","utils/questionnaireUtils.js","services/userAPI.js","services/masterDataAPI.js"],"sourcesContent":["import React from 'react';\n\nimport { RouteErrorBoundary } from './RouteErrorBoundary';\n\n/**\n * Plant-specific error boundary for handling errors within plant workflow management\n * Extends RouteErrorBoundary with plant-specific context\n */\nexport const PlantErrorBoundary = ({ children, plantCode }) => (\n  <RouteErrorBoundary \n    routeName=\"Plant Dashboard\" \n    errorContext={{ \n      plantCode,\n      feature: 'plant-workflow-management',\n      level: 'plant'\n    }}\n  >\n    {children}\n  </RouteErrorBoundary>\n);\n\nexport default PlantErrorBoundary;","import { SearchOutlined, ClearOutlined, SaveOutlined, FilterOutlined } from '@ant-design/icons';\nimport { Card, Row, Col, Input, Select, Button, Space, Tag, Divider } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { useCallback } from 'react';\n\nconst { Search } = Input;\nconst { Option } = Select;\n\n/**\n * FilterPanel component provides filtering controls for workflow data\n * Optimized with React.memo and useCallback for performance\n */\nconst FilterPanel = React.memo(({ \n  searchText,\n  statusFilter,\n  completionFilter,\n  onSearchTextChange,\n  onStatusFilterChange,\n  onCompletionFilterChange,\n  onClearFilters,\n  onApplyPreset,\n  onSaveFilters,\n  filterPresets,\n  filterSummary\n}) => {\n  /**\n   * Handle search text change\n   */\n  const handleSearchChange = useCallback((value) => {\n    if (onSearchTextChange) {\n      onSearchTextChange(value);\n    }\n  }, [onSearchTextChange]);\n\n  /**\n   * Handle status filter change\n   */\n  const handleStatusChange = useCallback((value) => {\n    if (onStatusFilterChange) {\n      onStatusFilterChange(value);\n    }\n  }, [onStatusFilterChange]);\n\n  /**\n   * Handle completion filter change\n   */\n  const handleCompletionChange = useCallback((value) => {\n    if (onCompletionFilterChange) {\n      onCompletionFilterChange(value);\n    }\n  }, [onCompletionFilterChange]);\n\n  /**\n   * Handle clear all filters\n   */\n  const handleClearFilters = useCallback(() => {\n    if (onClearFilters) {\n      onClearFilters();\n    }\n  }, [onClearFilters]);\n\n  /**\n   * Handle preset application\n   */\n  const handlePresetClick = useCallback((presetName) => {\n    if (onApplyPreset) {\n      onApplyPreset(presetName);\n    }\n  }, [onApplyPreset]);\n\n  /**\n   * Handle save filters\n   */\n  const handleSaveFilters = useCallback(() => {\n    if (onSaveFilters) {\n      onSaveFilters();\n    }\n  }, [onSaveFilters]);\n\n  return (\n    <Card \n      title={\n        <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>\n          <FilterOutlined />\n          <span>Filters</span>\n          {filterSummary?.hasActiveFilters && (\n            <Tag color=\"blue\" style={{ marginLeft: 8 }}>\n              {filterSummary.activeFilters.length} active\n            </Tag>\n          )}\n        </div>\n      }\n      size=\"small\"\n      style={{ marginBottom: 16 }}\n      extra={\n        <Space>\n          {onSaveFilters && (\n            <Button \n              size=\"small\" \n              icon={<SaveOutlined />}\n              onClick={handleSaveFilters}\n              disabled={!filterSummary?.hasActiveFilters}\n            >\n              Save\n            </Button>\n          )}\n          <Button \n            size=\"small\" \n            icon={<ClearOutlined />}\n            onClick={handleClearFilters}\n            disabled={!filterSummary?.hasActiveFilters}\n          >\n            Clear All\n          </Button>\n        </Space>\n      }\n    >\n      {/* Main Filter Controls */}\n      <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>\n        <Col xs={24} sm={8} md={8} lg={8}>\n          <div style={{ marginBottom: 4, fontSize: '12px', fontWeight: '500', color: '#666' }}>\n            Search Materials\n          </div>\n          <Search\n            placeholder=\"Search by Material Code or Plant\"\n            value={searchText}\n            onChange={(e) => handleSearchChange(e.target.value)}\n            style={{ width: '100%' }}\n            allowClear\n            enterButton={<SearchOutlined />}\n          />\n        </Col>\n        <Col xs={12} sm={8} md={8} lg={8}>\n          <div style={{ marginBottom: 4, fontSize: '12px', fontWeight: '500', color: '#666' }}>\n            Status Filter\n          </div>\n          <Select\n            placeholder=\"Filter by Status\"\n            value={statusFilter}\n            onChange={handleStatusChange}\n            style={{ width: '100%' }}\n            allowClear\n          >\n            <Option value=\"all\">All Statuses</Option>\n            <Option value=\"DRAFT\">Draft</Option>\n            <Option value=\"IN_PROGRESS\">In Progress</Option>\n            <Option value=\"COMPLETED\">Completed</Option>\n          </Select>\n        </Col>\n        <Col xs={12} sm={8} md={8} lg={8}>\n          <div style={{ marginBottom: 4, fontSize: '12px', fontWeight: '500', color: '#666' }}>\n            Completion Filter\n          </div>\n          <Select\n            placeholder=\"Filter by Completion\"\n            value={completionFilter}\n            onChange={handleCompletionChange}\n            style={{ width: '100%' }}\n            allowClear\n          >\n            <Option value=\"all\">All Progress</Option>\n            <Option value=\"not-started\">Not Started (0%)</Option>\n            <Option value=\"in-progress\">In Progress (1-99%)</Option>\n            <Option value=\"completed\">Completed (100%)</Option>\n          </Select>\n        </Col>\n      </Row>\n\n      {/* Filter Presets */}\n      {filterPresets && filterPresets.length > 0 && (\n        <>\n          <Divider style={{ margin: '12px 0' }} />\n          <div style={{ marginBottom: 8 }}>\n            <span style={{ fontSize: '12px', fontWeight: '500', color: '#666' }}>\n              Quick Filters:\n            </span>\n          </div>\n          <Space wrap>\n            {filterPresets.map((preset) => (\n              <Button\n                key={preset.name}\n                size=\"small\"\n                type=\"default\"\n                onClick={() => handlePresetClick(preset.name)}\n                style={{ fontSize: '12px' }}\n              >\n                {preset.name}\n              </Button>\n            ))}\n          </Space>\n        </>\n      )}\n\n      {/* Active Filters Summary */}\n      {filterSummary?.hasActiveFilters && (\n        <>\n          <Divider style={{ margin: '12px 0' }} />\n          <div style={{ marginBottom: 8 }}>\n            <span style={{ fontSize: '12px', fontWeight: '500', color: '#666' }}>\n              Active Filters:\n            </span>\n          </div>\n          <Space wrap>\n            {filterSummary.activeFilters.map((filter, index) => (\n              <Tag key={index} color=\"blue\" style={{ fontSize: '11px' }}>\n                {filter}\n              </Tag>\n            ))}\n          </Space>\n          <div style={{ marginTop: 8, fontSize: '12px', color: '#666' }}>\n            Showing {filterSummary.totalFiltered} of {filterSummary.totalOriginal} workflows\n          </div>\n        </>\n      )}\n\n      {/* No Active Filters Message */}\n      {!filterSummary?.hasActiveFilters && (\n        <>\n          <Divider style={{ margin: '12px 0' }} />\n          <div style={{ fontSize: '12px', color: '#999', textAlign: 'center' }}>\n            No filters applied - showing all workflows\n          </div>\n        </>\n      )}\n    </Card>\n  );\n});\n\nFilterPanel.displayName = 'FilterPanel';\n\nFilterPanel.propTypes = {\n  searchText: PropTypes.string,\n  statusFilter: PropTypes.string,\n  completionFilter: PropTypes.string,\n  onSearchTextChange: PropTypes.func,\n  onStatusFilterChange: PropTypes.func,\n  onCompletionFilterChange: PropTypes.func,\n  onClearFilters: PropTypes.func,\n  onApplyPreset: PropTypes.func,\n  onSaveFilters: PropTypes.func,\n  filterPresets: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    filters: PropTypes.object.isRequired\n  })),\n  filterSummary: PropTypes.shape({\n    activeFilters: PropTypes.arrayOf(PropTypes.string),\n    hasActiveFilters: PropTypes.bool,\n    totalFiltered: PropTypes.number,\n    totalOriginal: PropTypes.number\n  })\n};\n\nFilterPanel.defaultProps = {\n  searchText: '',\n  statusFilter: 'all',\n  completionFilter: 'all',\n  onSearchTextChange: null,\n  onStatusFilterChange: null,\n  onCompletionFilterChange: null,\n  onClearFilters: null,\n  onApplyPreset: null,\n  onSaveFilters: null,\n  filterPresets: [],\n  filterSummary: null\n};\n\nexport default FilterPanel;","import {\n  ClockCircleOutlined,\n  CheckCircleOutlined,\n  ExclamationCircleOutlined,\n  BarChartOutlined\n} from '@ant-design/icons';\nimport { Card, Row, Col, Statistic, Progress, Alert } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { useMemo } from 'react';\n\n/**\n * PlantDashboard component displays summary statistics and progress for plant workflows\n * Optimized with React.memo and useMemo for performance\n */\nconst PlantDashboard = React.memo(({ \n  dashboardStats, \n  loading, \n  error, \n  currentPlant,\n  onRefresh \n}) => {\n  /**\n   * Calculate progress color based on completion percentage\n   */\n  const getProgressColor = useMemo(() => (percentage) => {\n    if (percentage >= 80) return '#52c41a'; // Green\n    if (percentage >= 60) return '#1890ff'; // Blue\n    if (percentage >= 40) return '#faad14'; // Yellow\n    if (percentage >= 20) return '#fa8c16'; // Orange\n    return '#ff4d4f'; // Red\n  }, []);\n\n  /**\n   * Calculate completion rate statistics\n   */\n  const completionStats = useMemo(() => {\n    const { totalWorkflows, completedCount, inProgressCount, draftCount } = dashboardStats;\n    \n    if (totalWorkflows === 0) {\n      return {\n        completionRate: 0,\n        inProgressRate: 0,\n        draftRate: 0\n      };\n    }\n\n    return {\n      completionRate: Math.round((completedCount / totalWorkflows) * 100),\n      inProgressRate: Math.round((inProgressCount / totalWorkflows) * 100),\n      draftRate: Math.round((draftCount / totalWorkflows) * 100)\n    };\n  }, [dashboardStats]);\n\n  /**\n   * Get status color for statistics\n   */\n  const getStatisticColor = useMemo(() => (type) => {\n    const colors = {\n      total: '#1890ff',\n      inProgress: '#fa8c16',\n      completed: '#52c41a',\n      average: '#52c41a'\n    };\n    return colors[type] || '#1890ff';\n  }, []);\n\n  if (error) {\n    return (\n      <Alert\n        message=\"Dashboard Error\"\n        description={`Failed to load dashboard data: ${error}`}\n        type=\"error\"\n        showIcon\n        style={{ marginBottom: 24 }}\n        action={\n          onRefresh && (\n            <button onClick={onRefresh} style={{ border: 'none', background: 'none', color: '#1890ff', cursor: 'pointer' }}>\n              Retry\n            </button>\n          )\n        }\n      />\n    );\n  }\n\n  return (\n    <div style={{ marginBottom: 24 }}>\n      {/* Main Statistics Row */}\n      <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>\n        <Col xs={12} sm={6} md={6} lg={6}>\n          <Card loading={loading}>\n            <Statistic\n              title=\"Total Materials\"\n              value={dashboardStats.totalWorkflows || 0}\n              prefix={<ClockCircleOutlined />}\n              valueStyle={{ color: getStatisticColor('total') }}\n            />\n          </Card>\n        </Col>\n        <Col xs={12} sm={6} md={6} lg={6}>\n          <Card loading={loading}>\n            <Statistic\n              title=\"In Progress\"\n              value={dashboardStats.inProgressCount || 0}\n              prefix={<ExclamationCircleOutlined />}\n              valueStyle={{ color: getStatisticColor('inProgress') }}\n            />\n          </Card>\n        </Col>\n        <Col xs={12} sm={6} md={6} lg={6}>\n          <Card loading={loading}>\n            <Statistic\n              title=\"Completed\"\n              value={dashboardStats.completedCount || 0}\n              prefix={<CheckCircleOutlined />}\n              valueStyle={{ color: getStatisticColor('completed') }}\n            />\n          </Card>\n        </Col>\n        <Col xs={12} sm={6} md={6} lg={6}>\n          <Card loading={loading}>\n            <Statistic\n              title=\"Average Progress\"\n              value={dashboardStats.averageCompletion || 0}\n              suffix=\"%\"\n              prefix={<BarChartOutlined />}\n              valueStyle={{ color: getStatisticColor('average') }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Progress Breakdown Row */}\n      <Row gutter={[16, 16]}>\n        <Col xs={24} sm={12} md={8} lg={8}>\n          <Card \n            title=\"Completion Rate\" \n            loading={loading}\n            size=\"small\"\n          >\n            <Progress\n              type=\"circle\"\n              percent={completionStats.completionRate}\n              strokeColor={getProgressColor(completionStats.completionRate)}\n              format={(percent) => `${percent}%`}\n              size={80}\n            />\n            <div style={{ textAlign: 'center', marginTop: 8, fontSize: '12px', color: '#666' }}>\n              {dashboardStats.completedCount} of {dashboardStats.totalWorkflows} completed\n            </div>\n          </Card>\n        </Col>\n        <Col xs={24} sm={12} md={8} lg={8}>\n          <Card \n            title=\"In Progress Rate\" \n            loading={loading}\n            size=\"small\"\n          >\n            <Progress\n              type=\"circle\"\n              percent={completionStats.inProgressRate}\n              strokeColor=\"#fa8c16\"\n              format={(percent) => `${percent}%`}\n              size={80}\n            />\n            <div style={{ textAlign: 'center', marginTop: 8, fontSize: '12px', color: '#666' }}>\n              {dashboardStats.inProgressCount} workflows active\n            </div>\n          </Card>\n        </Col>\n        <Col xs={24} sm={12} md={8} lg={8}>\n          <Card \n            title=\"Draft Rate\" \n            loading={loading}\n            size=\"small\"\n          >\n            <Progress\n              type=\"circle\"\n              percent={completionStats.draftRate}\n              strokeColor=\"#ff4d4f\"\n              format={(percent) => `${percent}%`}\n              size={80}\n            />\n            <div style={{ textAlign: 'center', marginTop: 8, fontSize: '12px', color: '#666' }}>\n              {dashboardStats.draftCount} not started\n            </div>\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Plant Information */}\n      {currentPlant && (\n        <Alert\n          message={`Plant Dashboard - ${currentPlant}`}\n          description=\"Overview of all assigned materials and their completion status for the selected plant.\"\n          type=\"info\"\n          showIcon\n          style={{ marginTop: 16 }}\n        />\n      )}\n    </div>\n  );\n});\n\nPlantDashboard.displayName = 'PlantDashboard';\n\nPlantDashboard.propTypes = {\n  dashboardStats: PropTypes.shape({\n    totalWorkflows: PropTypes.number,\n    completedCount: PropTypes.number,\n    inProgressCount: PropTypes.number,\n    draftCount: PropTypes.number,\n    averageCompletion: PropTypes.number,\n    completedToday: PropTypes.number\n  }).isRequired,\n  loading: PropTypes.bool,\n  error: PropTypes.string,\n  currentPlant: PropTypes.string,\n  onRefresh: PropTypes.func\n};\n\nPlantDashboard.defaultProps = {\n  loading: false,\n  error: null,\n  currentPlant: null,\n  onRefresh: null\n};\n\nexport default PlantDashboard;","import {\n  FormOutlined,\n  EyeOutlined,\n  SearchOutlined\n} from '@ant-design/icons';\nimport { Table, Button, Space, Tag, Progress, Input } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { useMemo, useCallback } from 'react';\n\nimport { PAGINATION } from '../../constants';\n\n/**\n * WorkflowTable component displays workflows in a table format with sorting, filtering, and actions\n * Optimized with React.memo and performance optimizations\n */\nconst WorkflowTable = React.memo(({ \n  workflows, \n  loading, \n  onStartQuestionnaire, \n  onViewWorkflow,\n  onRefresh \n}) => {\n  /**\n   * Get status color for workflow status tags\n   */\n  const getStatusColor = useCallback((status) => {\n    const colors = {\n      DRAFT: 'default',\n      IN_PROGRESS: 'processing',\n      COMPLETED: 'success'\n    };\n    return colors[status] || 'default';\n  }, []);\n\n  /**\n   * Get completion color based on percentage\n   */\n  const getCompletionColor = useCallback((percentage) => {\n    if (percentage === 100) return '#52c41a';\n    if (percentage >= 75) return '#1890ff';\n    if (percentage >= 50) return '#faad14';\n    if (percentage >= 25) return '#fa8c16';\n    return '#ff4d4f';\n  }, []);\n\n  /**\n   * Calculate days in current state\n   */\n  const getDaysInState = useCallback((lastModified) => {\n    if (!lastModified) return 0;\n    const now = new Date();\n    const modified = new Date(lastModified);\n    const diffTime = Math.abs(now - modified);\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  }, []);\n\n  /**\n   * Handle start questionnaire action\n   */\n  const handleStartQuestionnaire = useCallback((workflow) => {\n    if (onStartQuestionnaire) {\n      onStartQuestionnaire(workflow);\n    }\n  }, [onStartQuestionnaire]);\n\n  /**\n   * Handle view workflow action\n   */\n  const handleViewWorkflow = useCallback((workflow) => {\n    if (onViewWorkflow) {\n      onViewWorkflow(workflow);\n    } else {\n      console.log('View workflow:', workflow.id);\n    }\n  }, [onViewWorkflow]);\n\n  /**\n   * Table columns configuration with memoization\n   */\n  const columns = useMemo(() => [\n    {\n      title: 'Material Code',\n      dataIndex: 'materialCode',\n      key: 'materialCode',\n      width: 140,\n      sorter: (a, b) => a.materialCode.localeCompare(b.materialCode),\n      filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n        <div style={{ padding: 8 }}>\n          <Input\n            placeholder=\"Search Material Code\"\n            value={selectedKeys[0]}\n            onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n            onPressEnter={() => confirm()}\n            style={{ width: 188, marginBottom: 8, display: 'block' }}\n          />\n          <Space>\n            <Button\n              type=\"primary\"\n              onClick={() => confirm()}\n              icon={<SearchOutlined />}\n              size=\"small\"\n              style={{ width: 90 }}\n            >\n              Search\n            </Button>\n            <Button onClick={() => clearFilters()} size=\"small\" style={{ width: 90 }}>\n              Reset\n            </Button>\n          </Space>\n        </div>\n      ),\n      filterIcon: filtered => (\n        <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />\n      ),\n      onFilter: (value, record) => record.materialCode.toLowerCase().includes(value.toLowerCase()),\n      render: (text, record) => (\n        <div>\n          <div style={{ fontWeight: 'bold' }}>{text}</div>\n          <div style={{ fontSize: '12px', color: '#666' }}>\n            {record.materialName || record.itemDescription || 'Material Name'}\n          </div>\n        </div>\n      )\n    },\n    {\n      title: 'Plant Code',\n      dataIndex: 'plantCode',\n      key: 'plantCode',\n      width: 120,\n      sorter: (a, b) => (a.plantCode || '').localeCompare(b.plantCode || ''),\n      filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n        <div style={{ padding: 8 }}>\n          <Input\n            placeholder=\"Search Plant Code\"\n            value={selectedKeys[0]}\n            onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n            onPressEnter={() => confirm()}\n            style={{ width: 188, marginBottom: 8, display: 'block' }}\n          />\n          <Space>\n            <Button\n              type=\"primary\"\n              onClick={() => confirm()}\n              icon={<SearchOutlined />}\n              size=\"small\"\n              style={{ width: 90 }}\n            >\n              Search\n            </Button>\n            <Button onClick={() => clearFilters()} size=\"small\" style={{ width: 90 }}>\n              Reset\n            </Button>\n          </Space>\n        </div>\n      ),\n      filterIcon: filtered => (\n        <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />\n      ),\n      onFilter: (value, record) =>\n        (record.plantCode || '').toLowerCase().includes(value.toLowerCase()),\n      render: text => (\n        <Tag color=\"blue\" style={{ fontWeight: 'bold' }}>\n          {text || 'N/A'}\n        </Tag>\n      )\n    },\n\n    {\n      title: 'Status',\n      dataIndex: 'completionStatus',\n      key: 'completionStatus',\n      width: 120,\n      filters: [\n        { text: 'Draft', value: 'DRAFT' },\n        { text: 'In Progress', value: 'IN_PROGRESS' },\n        { text: 'Completed', value: 'COMPLETED' }\n      ],\n      onFilter: (value, record) => record.completionStatus === value,\n      render: status => <Tag color={getStatusColor(status)}>{status.replace('_', ' ')}</Tag>\n    },\n    {\n      title: 'Progress',\n      key: 'progress',\n      width: 150,\n      sorter: (a, b) => a.completionPercentage - b.completionPercentage,\n      render: (_, record) => {\n        const percentage = record.completionPercentage || 0;\n        return (\n          <div>\n            <Progress\n              percent={percentage}\n              size=\"small\"\n              strokeColor={getCompletionColor(percentage)}\n              format={() => `${percentage}%`}\n            />\n            <div style={{ fontSize: '11px', color: '#666', marginTop: 2 }}>\n              {record.completedFields || 0} / {record.totalFields || 0} fields\n            </div>\n          </div>\n        );\n      }\n    },\n    {\n      title: 'Days Pending',\n      key: 'daysPending',\n      width: 100,\n      sorter: (a, b) => getDaysInState(a.lastModified) - getDaysInState(b.lastModified),\n      render: (_, record) => {\n        const days = getDaysInState(record.lastModified);\n        return <span style={{ color: days > 3 ? '#ff4d4f' : 'inherit' }}>{days}</span>;\n      }\n    },\n    {\n      title: 'Open Queries',\n      dataIndex: 'openQueries',\n      key: 'openQueries',\n      width: 100,\n      sorter: (a, b) => (a.openQueries || 0) - (b.openQueries || 0),\n      render: count => (count > 0 ? <Tag color=\"red\">{count}</Tag> : <Tag color=\"green\">0</Tag>)\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      width: 150,\n      render: (_, record) => (\n        <Space>\n          <Button\n            type=\"primary\"\n            size=\"small\"\n            icon={<FormOutlined />}\n            onClick={() => handleStartQuestionnaire(record)}\n            disabled={record.isSubmitted || record.completionStatus === 'COMPLETED'}\n          >\n            {record.completionPercentage > 0 ? 'Continue' : 'Start'}\n          </Button>\n          <Button\n            size=\"small\"\n            icon={<EyeOutlined />}\n            onClick={() => handleViewWorkflow(record)}\n          >\n            View\n          </Button>\n        </Space>\n      )\n    }\n  ], [getStatusColor, getCompletionColor, getDaysInState, handleStartQuestionnaire, handleViewWorkflow]);\n\n  /**\n   * Row class name for styling overdue rows\n   */\n  const getRowClassName = useCallback((record) => {\n    const days = getDaysInState(record.lastModified);\n    return days > 3 ? 'overdue-row' : '';\n  }, [getDaysInState]);\n\n  /**\n   * Pagination configuration\n   */\n  const paginationConfig = useMemo(() => ({\n    pageSize: PAGINATION.DEFAULT_PAGE_SIZE,\n    showSizeChanger: true,\n    showQuickJumper: true,\n    showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} materials`,\n    pageSizeOptions: ['10', '20', '50', '100']\n  }), []);\n\n  return (\n    <>\n      <Table\n        dataSource={workflows}\n        columns={columns}\n        loading={loading}\n        rowKey=\"id\"\n        pagination={paginationConfig}\n        rowClassName={getRowClassName}\n        scroll={{ x: 1200 }}\n        size=\"small\"\n        bordered\n        title={() => (\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n            <span style={{ fontWeight: 'bold' }}>\n              Assigned Materials ({workflows.length})\n            </span>\n            {onRefresh && (\n              <Button onClick={onRefresh} loading={loading} size=\"small\">\n                Refresh\n              </Button>\n            )}\n          </div>\n        )}\n      />\n      \n      {/* Custom styles for overdue rows */}\n      <style>{`\n        .overdue-row {\n          background-color: #fff2f0;\n        }\n        .overdue-row:hover {\n          background-color: #ffebe6 !important;\n        }\n        .ant-table-tbody > tr.overdue-row > td {\n          border-bottom: 1px solid #ffccc7;\n        }\n      `}</style>\n    </>\n  );\n});\n\nWorkflowTable.displayName = 'WorkflowTable';\n\nWorkflowTable.propTypes = {\n  workflows: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    materialCode: PropTypes.string.isRequired,\n    plantCode: PropTypes.string,\n\n    completionStatus: PropTypes.string.isRequired,\n    completionPercentage: PropTypes.number,\n    totalFields: PropTypes.number,\n    completedFields: PropTypes.number,\n    lastModified: PropTypes.string,\n    openQueries: PropTypes.number,\n    isSubmitted: PropTypes.bool,\n    materialName: PropTypes.string,\n    itemDescription: PropTypes.string\n  })).isRequired,\n  loading: PropTypes.bool,\n  onStartQuestionnaire: PropTypes.func,\n  onViewWorkflow: PropTypes.func,\n  onRefresh: PropTypes.func\n};\n\nWorkflowTable.defaultProps = {\n  loading: false,\n  onStartQuestionnaire: null,\n  onViewWorkflow: null,\n  onRefresh: null\n};\n\nexport default WorkflowTable;","import { \r\n  CheckCircleOutlined, \r\n  ExclamationCircleOutlined, \r\n  InfoCircleOutlined,\r\n  DatabaseOutlined,\r\n  SyncOutlined \r\n} from '@ant-design/icons';\r\nimport { Card, Tag, Tooltip, Space, Typography, Row, Col, Progress, Alert } from 'antd';\r\nimport React from 'react';\r\n\r\nconst { Text, Title } = Typography;\r\n\r\nconst CqsFieldDisplay = ({ \r\n  field, \r\n  cqsData, \r\n  cqsFieldMapping = {}, \r\n  showDetails = false,\r\n  compact = false \r\n}) => {\r\n  \r\n  // Get CQS value for this field\r\n  const cqsValue = cqsData?.cqsData?.[field.name];\r\n  const hasValue = cqsValue !== null && cqsValue !== undefined && cqsValue !== '';\r\n  const displayName = cqsFieldMapping[field.name] || field.label || field.name;\r\n  \r\n  // Determine status\r\n  const getStatus = () => {\r\n    if (!field.isCqsAutoPopulated) return 'plant-input';\r\n    if (hasValue) return 'populated';\r\n    return 'pending';\r\n  };\r\n  \r\n  const status = getStatus();\r\n  \r\n  // Status configurations\r\n  const statusConfig = {\r\n    'populated': {\r\n      color: 'success',\r\n      icon: <CheckCircleOutlined />,\r\n      text: 'Auto-Populated',\r\n      description: 'Value automatically populated from CQS system'\r\n    },\r\n    'pending': {\r\n      color: 'warning', \r\n      icon: <ExclamationCircleOutlined />,\r\n      text: 'Pending CQS',\r\n      description: 'Waiting for CQS system to provide value'\r\n    },\r\n    'plant-input': {\r\n      color: 'processing',\r\n      icon: <InfoCircleOutlined />,\r\n      text: 'Plant Input',\r\n      description: 'Value to be provided by plant personnel'\r\n    }\r\n  };\r\n  \r\n  const config = statusConfig[status];\r\n  \r\n  if (compact) {\r\n    return (\r\n      <Space size=\"small\">\r\n        {field.isCqsAutoPopulated && (\r\n          <Tooltip title={`${config.description}${hasValue ? ` - Value: ${cqsValue}` : ''}`}>\r\n            <Tag \r\n              color={config.color} \r\n              icon={config.icon}\r\n              size=\"small\"\r\n              style={{ \r\n                fontWeight: 'bold',\r\n                borderRadius: '12px'\r\n              }}\r\n            >\r\n              CQS {hasValue ? '✓' : '⏳'}\r\n            </Tag>\r\n          </Tooltip>\r\n        )}\r\n        {hasValue && (\r\n          <Text \r\n            strong \r\n            style={{ \r\n              color: '#52c41a',\r\n              background: '#f6ffed',\r\n              padding: '2px 6px',\r\n              borderRadius: '4px',\r\n              fontSize: '12px'\r\n            }}\r\n          >\r\n            {cqsValue}\r\n          </Text>\r\n        )}\r\n      </Space>\r\n    );\r\n  }\r\n  \r\n  if (!showDetails && !field.isCqsAutoPopulated) {\r\n    return null; // Don't show non-CQS fields in CQS display mode\r\n  }\r\n  \r\n  return (\r\n    <Card \r\n      size=\"small\" \r\n      className={`cqs-field-card ${status}`}\r\n      style={{ marginBottom: 8 }}\r\n    >\r\n      <Row gutter={[16, 8]} align=\"middle\">\r\n        <Col flex=\"auto\">\r\n          <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\r\n            <Space>\r\n              <Tooltip title={config.description}>\r\n                <Tag \r\n                  color={config.color} \r\n                  icon={config.icon}\r\n                >\r\n                  {config.text}\r\n                </Tag>\r\n              </Tooltip>\r\n              <Text strong>{displayName}</Text>\r\n            </Space>\r\n            \r\n            {showDetails && (\r\n              <Text type=\"secondary\" style={{ fontSize: '12px' }}>\r\n                Field: {field.name}\r\n              </Text>\r\n            )}\r\n          </Space>\r\n        </Col>\r\n        \r\n        <Col>\r\n          <Space direction=\"vertical\" align=\"end\" size=\"small\">\r\n            {hasValue ? (\r\n              <Text strong style={{ color: '#52c41a' }}>\r\n                {cqsValue}\r\n              </Text>\r\n            ) : field.isCqsAutoPopulated ? (\r\n              <Text type=\"secondary\" italic>\r\n                Pending\r\n              </Text>\r\n            ) : (\r\n              <Text type=\"secondary\">\r\n                Plant Input Required\r\n              </Text>\r\n            )}\r\n          </Space>\r\n        </Col>\r\n      </Row>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst CqsDataSummary = ({ \r\n  cqsData, \r\n  template, \r\n  cqsFieldMapping = {},\r\n  showAllFields = false \r\n}) => {\r\n  \r\n  if (!cqsData) {\r\n    return (\r\n      <Alert\r\n        message=\"CQS Data Not Available\"\r\n        description=\"CQS integration is pending implementation\"\r\n        type=\"info\"\r\n        icon={<DatabaseOutlined />}\r\n        showIcon\r\n      />\r\n    );\r\n  }\r\n  \r\n  // Calculate statistics\r\n  const totalCqsFields = cqsData.totalFields || 0;\r\n  const populatedFields = cqsData.populatedFields || 0;\r\n  const completionPercentage = cqsData.completionPercentage || 0;\r\n  \r\n  // Get all CQS fields from template\r\n  const cqsFields = [];\r\n  if (template?.steps) {\r\n    template.steps.forEach(step => {\r\n      if (step.fields) {\r\n        step.fields.forEach(field => {\r\n          if (field.isCqsAutoPopulated || showAllFields) {\r\n            cqsFields.push({\r\n              ...field,\r\n              stepTitle: step.title,\r\n              stepNumber: step.stepNumber\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n  \r\n  return (\r\n    <Card \r\n      title={\r\n        <Space>\r\n          <DatabaseOutlined />\r\n          <span>CQS Auto-Population Status</span>\r\n          <Tag color={cqsData.syncStatus === 'ACTIVE' ? 'success' : 'warning'}>\r\n            {cqsData.syncStatus || 'UNKNOWN'}\r\n          </Tag>\r\n        </Space>\r\n      }\r\n      extra={\r\n        <Tooltip title=\"Refresh CQS Data\">\r\n          <SyncOutlined />\r\n        </Tooltip>\r\n      }\r\n    >\r\n      <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\r\n        \r\n        {/* Progress Summary */}\r\n        <Row gutter={[16, 16]}>\r\n          <Col span={24}>\r\n            <Title level={5}>Completion Progress</Title>\r\n            <Progress \r\n              percent={Math.round(completionPercentage)} \r\n              status={completionPercentage === 100 ? 'success' : 'active'}\r\n              format={() => `${populatedFields}/${totalCqsFields} fields`}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        \r\n        {/* Statistics */}\r\n        <Row gutter={[16, 16]}>\r\n          <Col span={8}>\r\n            <Card size=\"small\">\r\n              <Text type=\"secondary\">Total CQS Fields</Text>\r\n              <br />\r\n              <Text strong style={{ fontSize: '18px' }}>{totalCqsFields}</Text>\r\n            </Card>\r\n          </Col>\r\n          <Col span={8}>\r\n            <Card size=\"small\">\r\n              <Text type=\"secondary\">Populated</Text>\r\n              <br />\r\n              <Text strong style={{ fontSize: '18px', color: '#52c41a' }}>\r\n                {populatedFields}\r\n              </Text>\r\n            </Card>\r\n          </Col>\r\n          <Col span={8}>\r\n            <Card size=\"small\">\r\n              <Text type=\"secondary\">Pending</Text>\r\n              <br />\r\n              <Text strong style={{ fontSize: '18px', color: '#faad14' }}>\r\n                {totalCqsFields - populatedFields}\r\n              </Text>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        \r\n        {/* Sync Status */}\r\n        {cqsData.syncMessage && (\r\n          <Alert\r\n            message={cqsData.syncMessage}\r\n            type={cqsData.syncStatus === 'ACTIVE' ? 'success' : 'info'}\r\n            showIcon\r\n          />\r\n        )}\r\n        \r\n        {/* CQS Fields List */}\r\n        {cqsFields.length > 0 && (\r\n          <div>\r\n            <Title level={5}>CQS Auto-Populated Fields</Title>\r\n            <Space direction=\"vertical\" style={{ width: '100%' }}>\r\n              {cqsFields.map((field, index) => (\r\n                <CqsFieldDisplay\r\n                  key={`${field.name}-${index}`}\r\n                  field={field}\r\n                  cqsData={cqsData}\r\n                  cqsFieldMapping={cqsFieldMapping}\r\n                  showDetails={true}\r\n                />\r\n              ))}\r\n            </Space>\r\n          </div>\r\n        )}\r\n        \r\n      </Space>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport { CqsFieldDisplay, CqsDataSummary };\r\nexport default CqsFieldDisplay;","import {\n  InfoCircleOutlined,\n  FileTextOutlined,\n  TeamOutlined,\n  CalendarOutlined,\n  DownloadOutlined,\n  WarningOutlined\n} from '@ant-design/icons';\nimport {\n  Card,\n  Descriptions,\n  Tag,\n  Space,\n  Button,\n  Collapse,\n  Alert,\n  Divider,\n  Typography,\n  Tooltip,\n  Badge,\n  Spin,\n  Progress,\n  message\n} from 'antd';\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport { workflowAPI } from '../services/workflowAPI';\n\nconst { Panel } = Collapse;\nconst { Text } = Typography;\n\nconst MaterialContextPanel = ({ workflowData }) => {\n  const [loading, setLoading] = useState(false);\n  const [jvcDocuments, setJvcDocuments] = useState([]);\n  const [expanded, setExpanded] = useState(['basic', 'workflow', 'jvc-data']);\n\n  const loadJvcDocuments = useCallback(async () => {\n    try {\n      setLoading(true);\n      \n      // Get reusable documents for the same project/material combination\n      if (workflowData?.projectCode && workflowData?.materialCode) {\n        const documents = await workflowAPI.getReusableDocuments(\n          workflowData.projectCode, \n          workflowData.materialCode\n        );\n        setJvcDocuments(documents || []);\n      } else {\n        // Fallback to workflow documents if project/material codes are not available\n        const documents = await workflowAPI.getWorkflowDocuments(workflowData.id);\n        setJvcDocuments(documents || []);\n      }\n    } catch (error) {\n      console.error('Failed to load JVC documents:', error);\n      setJvcDocuments([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [workflowData?.id, workflowData?.projectCode, workflowData?.materialCode]);\n\n  useEffect(() => {\n    if (workflowData?.id) {\n      loadJvcDocuments();\n    }\n  }, [workflowData?.id, workflowData?.projectCode, workflowData?.materialCode, loadJvcDocuments]);\n\n  const getStateColor = state => {\n    const colors = {\n      JVC_PENDING: 'blue',\n      PLANT_PENDING: 'orange',\n      CQS_PENDING: 'purple',\n      TECH_PENDING: 'cyan',\n      COMPLETED: 'green'\n    };\n    return colors[state] || 'default';\n  };\n\n  const getStateName = state => {\n    const names = {\n      JVC_PENDING: 'JVC Pending',\n      PLANT_PENDING: 'Plant Pending',\n      CQS_PENDING: 'CQS Pending',\n      TECH_PENDING: 'Tech Pending',\n      COMPLETED: 'Completed'\n    };\n    return names[state] || state;\n  };\n\n  const formatDate = dateString => {\n    if (!dateString) {\n      return 'N/A';\n    }\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const calculateDaysInState = lastModified => {\n    if (!lastModified) {\n      return 0;\n    }\n    const now = new Date();\n    const modified = new Date(lastModified);\n    const diffTime = Math.abs(now - modified);\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  };\n\n  const handleDocumentDownload = async (documentId, filename) => {\n    try {\n      console.log('Downloading document:', { documentId, filename });\n      const blob = await workflowAPI.downloadDocument(documentId);\n      console.log('Download blob received:', blob);\n      \n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = filename || `document_${documentId}`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n      \n      message.success(`Downloaded ${filename || 'document'}`);\n    } catch (error) {\n      console.error('Failed to download document:', error);\n      message.error(`Failed to download document: ${error.message || 'Unknown error'}`);\n    }\n  };\n\n\n\n  if (!workflowData) {\n    return (\n      <Card title=\"Material Context\" style={{ height: 'fit-content' }}>\n        <Alert\n          message=\"No Material Data\"\n          description=\"Material context will appear here once a workflow is selected.\"\n          type=\"info\"\n          showIcon\n        />\n      </Card>\n    );\n  }\n\n  const daysInCurrentState = calculateDaysInState(workflowData.lastModified);\n  const isOverdue = daysInCurrentState > 3;\n\n  return (\n    <Card\n      title={\n        <Space>\n          <InfoCircleOutlined />\n          Material Context\n          {isOverdue && <Badge status=\"error\" text={`${daysInCurrentState} days`} />}\n        </Space>\n      }\n      style={{ height: 'fit-content', position: 'sticky', top: 24 }}\n      size=\"small\"\n    >\n      <Collapse activeKey={expanded} onChange={setExpanded} ghost size=\"small\">\n        {/* Basic Material Information */}\n        <Panel\n          header={\n            <Space>\n              <FileTextOutlined />\n              <strong>Basic Information</strong>\n            </Space>\n          }\n          key=\"basic\"\n        >\n          <Descriptions column={1} size=\"small\">\n            <Descriptions.Item label=\"Material Code\">\n              <Text strong>{workflowData.materialCode}</Text>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Material Name\">\n              {workflowData.materialName || 'Not specified'}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Assigned Plant\">\n              <Tag color=\"blue\">{workflowData.assignedPlant}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Initiated By\">\n              <Space>\n                <TeamOutlined />\n                {workflowData.initiatedBy}\n              </Space>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Created\">\n              <Space>\n                <CalendarOutlined />\n                {formatDate(workflowData.createdAt)}\n              </Space>\n            </Descriptions.Item>\n          </Descriptions>\n        </Panel>\n\n        {/* Workflow Status */}\n        <Panel\n          header={\n            <Space>\n              <TeamOutlined />\n              <strong>Workflow Status</strong>\n              {isOverdue && <WarningOutlined style={{ color: '#ff4d4f' }} />}\n            </Space>\n          }\n          key=\"workflow\"\n        >\n          <Space direction=\"vertical\" style={{ width: '100%' }}>\n            <div>\n              <Text strong>Current State:</Text>\n              <div style={{ marginTop: 4 }}>\n                <Tag color={getStateColor(workflowData.state)}>\n                  {getStateName(workflowData.state)}\n                </Tag>\n              </div>\n            </div>\n\n            <div>\n              <Text strong>Time in Current State:</Text>\n              <div style={{ marginTop: 4 }}>\n                <Text style={{ color: isOverdue ? '#ff4d4f' : 'inherit' }}>\n                  {daysInCurrentState} day{daysInCurrentState !== 1 ? 's' : ''}\n                  {isOverdue && ' (Overdue)'}\n                </Text>\n              </div>\n            </div>\n\n            <div>\n              <Text strong>Last Modified:</Text>\n              <div style={{ marginTop: 4 }}>\n                <Text type=\"secondary\">{formatDate(workflowData.lastModified)}</Text>\n              </div>\n            </div>\n\n            {workflowData.totalQueries > 0 && (\n              <div>\n                <Text strong>Queries:</Text>\n                <div style={{ marginTop: 4 }}>\n                  <Space>\n                    <Tag color=\"red\">{workflowData.openQueries || 0} Open</Tag>\n                    <Tag color=\"green\">\n                      {(workflowData.totalQueries || 0) - (workflowData.openQueries || 0)} Resolved\n                    </Tag>\n                  </Space>\n                </div>\n              </div>\n            )}\n\n            {/* Progress indicator */}\n            {workflowData.completionPercentage !== undefined && (\n              <div>\n                <Text strong>Completion Progress:</Text>\n                <div style={{ marginTop: 4 }}>\n                  <Progress\n                    percent={workflowData.completionPercentage}\n                    size=\"small\"\n                    status={workflowData.completionPercentage === 100 ? 'success' : 'active'}\n                  />\n                </div>\n              </div>\n            )}\n          </Space>\n        </Panel>\n\n        {/* JVC Provided Documents */}\n        <Panel\n          header={\n            <Space>\n              <FileTextOutlined />\n              <strong>JVC Documents</strong>\n              <Badge count={jvcDocuments.length} size=\"small\" />\n            </Space>\n          }\n          key=\"documents\"\n        >\n          {loading ? (\n            <div style={{ textAlign: 'center', padding: '20px' }}>\n              <Spin size=\"small\" />\n            </div>\n          ) : jvcDocuments.length > 0 ? (\n            <Space direction=\"vertical\" style={{ width: '100%' }}>\n              {jvcDocuments.map((doc, index) => (\n                <Card\n                  key={doc.id || index}\n                  size=\"small\"\n                  style={{ marginBottom: 8 }}\n                  styles={{ body: { padding: '8px 12px' } }}\n                >\n                  <div style={{ marginBottom: 4 }}>\n                    <Text strong style={{ fontSize: '12px' }}>\n                      {doc.originalFileName || doc.fileName || `Document ${index + 1}`}\n                    </Text>\n                  </div>\n                  <div style={{ marginBottom: 8 }}>\n                    <Text type=\"secondary\" style={{ fontSize: '11px' }}>\n                      {doc.sourceDescription || \n                       `${doc.documentSource || 'Document'} • ${doc.fileType?.toUpperCase() || 'File'} • ${\n                         doc.fileSize ? `${(doc.fileSize / 1024 / 1024).toFixed(1)} MB` : 'Unknown size'\n                       } • Uploaded by ${doc.uploadedBy || 'Unknown'}`}\n                    </Text>\n                  </div>\n                  <div style={{ textAlign: 'right' }}>\n                    <Tooltip title=\"Download document\">\n                      <Button\n                        type=\"primary\"\n                        size=\"small\"\n                        icon={<DownloadOutlined />}\n                        onClick={() => handleDocumentDownload(doc.id, doc.originalFileName || doc.fileName)}\n                      >\n                        Download\n                      </Button>\n                    </Tooltip>\n                  </div>\n                </Card>\n              ))}\n            </Space>\n          ) : (\n            <Alert\n              message=\"No Documents\"\n              description=\"No documents have been provided by the JVC team for this material.\"\n              type=\"info\"\n              showIcon\n              size=\"small\"\n            />\n          )}\n        </Panel>\n\n        {/* Enhanced JVC Material Data */}\n        <Panel\n          header={\n            <Space>\n              <InfoCircleOutlined />\n              <strong>JVC Material Data</strong>\n              <Tooltip title=\"Information provided by JVC team for questionnaire completion\">\n                <InfoCircleOutlined style={{ fontSize: '12px', color: '#1890ff' }} />\n              </Tooltip>\n            </Space>\n          }\n          key=\"jvc-data\"\n        >\n          <Descriptions column={1} size=\"small\">\n            <Descriptions.Item label=\"Material Category\">\n              <Tag color=\"blue\">{workflowData.materialCategory || 'Not specified'}</Tag>\n            </Descriptions.Item>\n\n            <Descriptions.Item label=\"Supplier Information\">\n              <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Supplier Name:\n                  </Text>\n                  <div style={{ fontSize: '12px' }}>\n                    {workflowData.supplierName || 'Not specified'}\n                  </div>\n                </div>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Supplier Code:\n                  </Text>\n                  <div style={{ fontSize: '12px' }}>\n                    {workflowData.supplierCode || 'Not specified'}\n                  </div>\n                </div>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Contact Info:\n                  </Text>\n                  <div style={{ fontSize: '12px' }}>\n                    {workflowData.supplierContact || 'Not provided'}\n                  </div>\n                </div>\n              </Space>\n            </Descriptions.Item>\n\n            <Descriptions.Item label=\"Purchase Information\">\n              <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Purchase Order:\n                  </Text>\n                  <div style={{ fontSize: '12px' }}>\n                    {workflowData.purchaseOrder || 'Not specified'}\n                  </div>\n                </div>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Quantity Ordered:\n                  </Text>\n                  <div style={{ fontSize: '12px' }}>\n                    {workflowData.quantityOrdered || 'Not specified'}\n                  </div>\n                </div>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Expected Delivery:\n                  </Text>\n                  <div style={{ fontSize: '12px' }}>\n                    {workflowData.expectedDelivery\n                      ? formatDate(workflowData.expectedDelivery)\n                      : 'Not specified'}\n                  </div>\n                </div>\n              </Space>\n            </Descriptions.Item>\n\n            <Descriptions.Item label=\"Usage & Application\">\n              <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Expected Usage:\n                  </Text>\n                  <div style={{ fontSize: '12px' }}>\n                    {workflowData.expectedUsage || 'Not specified'}\n                  </div>\n                </div>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Application Area:\n                  </Text>\n                  <div style={{ fontSize: '12px' }}>\n                    {workflowData.applicationArea || 'Not specified'}\n                  </div>\n                </div>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Process Requirements:\n                  </Text>\n                  <div style={{ fontSize: '12px' }}>\n                    {workflowData.processRequirements || 'Standard processing'}\n                  </div>\n                </div>\n              </Space>\n            </Descriptions.Item>\n\n            <Descriptions.Item label=\"Regulatory Requirements\">\n              <div\n                style={{\n                  padding: '6px 8px',\n                  backgroundColor: '#fff7e6',\n                  border: '1px solid #ffd591',\n                  borderRadius: '4px',\n                  fontSize: '12px'\n                }}\n              >\n                {workflowData.regulatoryRequirements || 'Standard compliance required'}\n              </div>\n            </Descriptions.Item>\n\n            <Descriptions.Item label=\"Special Instructions\">\n              {workflowData.specialInstructions ? (\n                <div\n                  style={{\n                    padding: '6px 8px',\n                    backgroundColor: '#f6ffed',\n                    border: '1px solid #b7eb8f',\n                    borderRadius: '4px',\n                    fontSize: '12px'\n                  }}\n                >\n                  {workflowData.specialInstructions}\n                </div>\n              ) : (\n                <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                  None\n                </Text>\n              )}\n            </Descriptions.Item>\n\n            <Descriptions.Item label=\"Priority & Impact\">\n              <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Urgency Level:\n                  </Text>\n                  <div style={{ marginTop: 2 }}>\n                    <Tag\n                      color={\n                        workflowData.urgencyLevel === 'HIGH'\n                          ? 'red'\n                          : workflowData.urgencyLevel === 'MEDIUM'\n                            ? 'orange'\n                            : 'green'\n                      }\n                    >\n                      {workflowData.urgencyLevel || 'NORMAL'}\n                    </Tag>\n                  </div>\n                </div>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Business Impact:\n                  </Text>\n                  <div style={{ fontSize: '12px', marginTop: 2 }}>\n                    {workflowData.businessImpact || 'Standard processing'}\n                  </div>\n                </div>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Cost Center:\n                  </Text>\n                  <div style={{ fontSize: '12px', marginTop: 2 }}>\n                    {workflowData.costCenter || 'Not specified'}\n                  </div>\n                </div>\n              </Space>\n            </Descriptions.Item>\n          </Descriptions>\n\n          {workflowData.jvcNotes && (\n            <div style={{ marginTop: 12 }}>\n              <Text strong style={{ fontSize: '12px' }}>\n                JVC Notes:\n              </Text>\n              <div\n                style={{\n                  marginTop: 4,\n                  padding: '8px',\n                  backgroundColor: '#f6ffed',\n                  border: '1px solid #b7eb8f',\n                  borderRadius: '4px',\n                  fontSize: '12px',\n                  whiteSpace: 'pre-wrap'\n                }}\n              >\n                {workflowData.jvcNotes}\n              </div>\n            </div>\n          )}\n\n          {/* Known Material Properties */}\n          {workflowData.knownProperties && Object.keys(workflowData.knownProperties).length > 0 && (\n            <div style={{ marginTop: 12 }}>\n              <Text strong style={{ fontSize: '12px' }}>\n                Known Properties:\n              </Text>\n              <div\n                style={{\n                  marginTop: 4,\n                  padding: '8px',\n                  backgroundColor: '#f0f5ff',\n                  border: '1px solid #adc6ff',\n                  borderRadius: '4px',\n                  fontSize: '11px'\n                }}\n              >\n                {Object.entries(workflowData.knownProperties).map(([key, value]) => (\n                  <div key={key} style={{ marginBottom: 2 }}>\n                    <strong>\n                      {key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}:\n                    </strong>{' '}\n                    {value}\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Additional Context for Plant Team */}\n          <Divider style={{ margin: '12px 0 8px 0' }} />\n          <div style={{ fontSize: '11px', color: '#666' }}>\n            <Text strong>For Plant Team Reference:</Text>\n            <ul style={{ margin: '4px 0 0 16px', padding: 0 }}>\n              <li>Review all JVC-provided information before starting questionnaire</li>\n              <li>Use this context when raising queries to other teams</li>\n              <li>Reference material ID and supplier details in communications</li>\n              <li>Contact JVC team for clarification on any provided data</li>\n              <li>Consider regulatory requirements when completing safety sections</li>\n            </ul>\n          </div>\n        </Panel>\n\n        {/* Material Specifications */}\n        {workflowData.specifications && (\n          <Panel\n            header={\n              <Space>\n                <InfoCircleOutlined />\n                <strong>Technical Specifications</strong>\n              </Space>\n            }\n            key=\"specifications\"\n          >\n            <Descriptions column={1} size=\"small\">\n              {Object.entries(workflowData.specifications).map(([key, value]) => (\n                <Descriptions.Item\n                  key={key}\n                  label={key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}\n                >\n                  {typeof value === 'object' ? JSON.stringify(value) : String(value)}\n                </Descriptions.Item>\n              ))}\n            </Descriptions>\n          </Panel>\n        )}\n\n        {/* Safety Notes */}\n        {workflowData.safetyNotes && (\n          <Panel\n            header={\n              <Space>\n                <WarningOutlined />\n                <strong>Safety Notes</strong>\n              </Space>\n            }\n            key=\"safety\"\n          >\n            <Alert\n              message=\"Important Safety Information\"\n              description={workflowData.safetyNotes}\n              type=\"warning\"\n              showIcon\n              size=\"small\"\n            />\n          </Panel>\n        )}\n      </Collapse>\n\n      <Divider style={{ margin: '12px 0' }} />\n{/* \n      Quick Actions\n      <Space direction=\"vertical\" style={{ width: '100%' }}>\n        <Text strong style={{ fontSize: '12px' }}>\n          Quick Actions:\n        </Text>\n        <Space wrap>\n          <Button size=\"small\" type=\"link\" style={{ padding: '0 4px', height: 'auto' }}>\n            View Full History\n          </Button>\n          <Button size=\"small\" type=\"link\" style={{ padding: '0 4px', height: 'auto' }}>\n            Contact JVC\n          </Button>\n          <Button size=\"small\" type=\"link\" style={{ padding: '0 4px', height: 'auto' }}>\n            Export Data\n          </Button>\n        </Space>\n      </Space> */}\n    </Card>\n  );\n};\n\nexport default MaterialContextPanel;\n","import {\n  QuestionCircleOutlined,\n  InfoCircleOutlined,\n  ExclamationCircleOutlined,\n  PaperClipOutlined\n} from '@ant-design/icons';\nimport {\n  Modal,\n  Form,\n  Input,\n  Select,\n  Radio,\n  Button,\n  Space,\n  Alert,\n  Divider,\n  Tag,\n  message,\n  Collapse\n} from 'antd';\nimport React, { useState } from 'react';\n\nimport { queryAPI } from '../services/queryAPI';\n\nimport QueryDocumentUpload from './QueryDocumentUpload';\nimport SecureForm, { SecureInput, SecureTextArea, SecureFormItem } from './SecureForm';\n\nconst { TextArea } = Input;\nconst { Option } = Select;\n\nconst QueryRaisingModal = ({ open, visible, onCancel, onSubmit, workflowId, fieldContext }) => {\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n  const [uploadedDocuments, setUploadedDocuments] = useState([]);\n  const [createdQueryId, setCreatedQueryId] = useState(null);\n\n  console.log('QueryRaisingModal props:', { open, visible, workflowId, fieldContext });\n\n  const handleSubmit = async values => {\n    try {\n      setLoading(true);\n\n      const queryData = {\n        question: values.question,\n        assignedTeam: values.assignedTeam, // This should be 'CQS', 'TECH', or 'JVC'\n        priorityLevel: values.priority || 'MEDIUM',\n        fieldName: fieldContext?.name,\n        stepNumber: fieldContext?.stepNumber,\n        stepTitle: fieldContext?.stepTitle,\n        // originalQuestion will be fetched automatically from the template based on fieldName\n        queryCategory: values.category || 'GENERAL'\n      };\n\n      const createdQuery = await queryAPI.createQuery(workflowId, queryData);\n      setCreatedQueryId(createdQuery.id);\n\n      message.success('Query created successfully! You can now attach documents if needed.');\n      \n      // Don't close the modal immediately - allow user to upload documents\n      // The modal will close when they click \"Done\" or \"Cancel\"\n      \n    } catch (error) {\n      console.error('Failed to create query:', error);\n      message.error('Failed to raise query. Please try again.');\n      setLoading(false);\n    }\n  };\n\n  // const getCurrentUser = () => { // Not currently used\n  //   return localStorage.getItem('username') || 'current_user';\n  // };\n\n  const handleCancel = () => {\n    form.resetFields();\n    setUploadedDocuments([]);\n    setCreatedQueryId(null);\n    onCancel();\n  };\n\n  // Handle document upload completion\n  const handleDocumentUpload = (documents) => {\n    setUploadedDocuments(prev => [...prev, ...documents]);\n    message.success(`${documents.length} document(s) uploaded successfully`);\n  };\n\n  // const getTeamDescription = team => { // Not currently used\n  //   const descriptions = {\n  //     CQS: 'Chemical Quality & Safety team - for safety data, hazard classifications, and regulatory compliance questions',\n  //     TECH: 'Technical team - for technical specifications, physical properties, and process-related questions',\n  //     JVC: 'JVC team - for material identification, supplier information, and general material questions'\n  //   };\n  //   return descriptions[team] || '';\n  // };\n\n  const getPriorityColor = priority => {\n    const colors = {\n      LOW: 'green',\n      MEDIUM: 'blue',\n      HIGH: 'orange',\n      URGENT: 'red'\n    };\n    return colors[priority] || 'default';\n  };\n\n  const getRecommendedTeam = fieldContext => {\n    if (!fieldContext || !fieldContext.name) {\n      return null;\n    }\n\n    const fieldName = fieldContext.name.toLowerCase();\n    const stepTitle = fieldContext.stepTitle?.toLowerCase() || '';\n    const fieldLabel = fieldContext.label?.toLowerCase() || '';\n\n    // Enhanced smart team recommendation with confidence scoring\n    // const recommendations = []; // Not currently used\n\n    // CQS Team scoring\n    let cqsScore = 0;\n    const cqsKeywords = [\n      'hazard',\n      'safety',\n      'precautionary',\n      'environmental',\n      'toxic',\n      'corrosive',\n      'flammable',\n      'classification',\n      'ghs',\n      'signal',\n      'statement'\n    ];\n    cqsKeywords.forEach(keyword => {\n      if (\n        fieldName.includes(keyword) ||\n        stepTitle.includes(keyword) ||\n        fieldLabel.includes(keyword)\n      ) {\n        cqsScore += 1;\n      }\n    });\n\n    // Technical Team scoring\n    let techScore = 0;\n    const techKeywords = [\n      'physical',\n      'boiling',\n      'melting',\n      'technical',\n      'properties',\n      'temperature',\n      'state',\n      'color',\n      'odor',\n      'specification'\n    ];\n    techKeywords.forEach(keyword => {\n      if (\n        fieldName.includes(keyword) ||\n        stepTitle.includes(keyword) ||\n        fieldLabel.includes(keyword)\n      ) {\n        techScore += 1;\n      }\n    });\n\n    // JVC Team scoring\n    let jvcScore = 0;\n    const jvcKeywords = [\n      'material',\n      'supplier',\n      'cas',\n      'basic',\n      'information',\n      'name',\n      'identification',\n      'type'\n    ];\n    jvcKeywords.forEach(keyword => {\n      if (\n        fieldName.includes(keyword) ||\n        stepTitle.includes(keyword) ||\n        fieldLabel.includes(keyword)\n      ) {\n        jvcScore += 1;\n      }\n    });\n\n    // Determine primary recommendation\n    const maxScore = Math.max(cqsScore, techScore, jvcScore);\n    let primaryTeam = 'CQS'; // Default to CQS for safety\n    let confidence = 'Medium';\n\n    if (maxScore === 0) {\n      confidence = 'Low';\n    } else if (maxScore >= 3) {\n      confidence = 'High';\n    }\n\n    if (cqsScore === maxScore) {\n      primaryTeam = 'CQS';\n    } else if (techScore === maxScore) {\n      primaryTeam = 'TECH';\n    } else if (jvcScore === maxScore) {\n      primaryTeam = 'JVC';\n    }\n\n    const teamDescriptions = {\n      CQS: 'Chemical Quality & Safety team - handles safety data, hazard classifications, and regulatory compliance',\n      TECH: 'Technical team - handles technical specifications, physical properties, and process-related questions',\n      JVC: 'JVC team - handles material identification, supplier information, and general material questions'\n    };\n\n    return (\n      <div>\n        <div style={{ marginBottom: 8 }}>\n          <strong\n            style={{\n              color:\n                confidence === 'High' ? '#52c41a' : confidence === 'Medium' ? '#1890ff' : '#faad14'\n            }}\n          >\n            {primaryTeam} Team\n          </strong>{' '}\n          is recommended ({confidence} confidence)\n        </div>\n        <div style={{ fontSize: '12px', color: '#666', marginBottom: 8 }}>\n          {teamDescriptions[primaryTeam]}\n        </div>\n        <div style={{ fontSize: '11px', color: '#999' }}>\n          Based on field: \"<em>{fieldContext.label}</em>\" in step: \"\n          <em>{fieldContext.stepTitle}</em>\"\n        </div>\n        {confidence === 'Low' && (\n          <div style={{ fontSize: '11px', color: '#fa8c16', marginTop: 4 }}>\n            💡 Consider the nature of your question when selecting the team\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <Modal\n      title={\n        <Space>\n          <QuestionCircleOutlined />\n          Raise Query\n        </Space>\n      }\n      open={open || visible}\n      onCancel={handleCancel}\n      footer={\n        createdQueryId ? [\n          <Button key=\"done\" type=\"primary\" onClick={() => {\n            const documentMessage = uploadedDocuments.length > 0 \n              ? ` with ${uploadedDocuments.length} document(s) attached`\n              : '';\n            message.success(`Query completed${documentMessage}`);\n            \n            form.resetFields();\n            setUploadedDocuments([]);\n            const queryToReturn = { id: createdQueryId, documents: uploadedDocuments };\n            setCreatedQueryId(null);\n            setLoading(false);\n            \n            if (onSubmit) {\n              onSubmit(queryToReturn);\n            }\n          }}>\n            Done\n          </Button>\n        ] : [\n          <Button key=\"cancel\" onClick={handleCancel}>\n            Cancel\n          </Button>,\n          <Button key=\"submit\" type=\"primary\" loading={loading} onClick={() => form.submit()}>\n            Create Query\n          </Button>\n        ]\n      }\n      width={600}\n      destroyOnClose\n    >\n      {/* Field Context Information */}\n      {fieldContext && (\n        <Alert\n          message=\"Field Context\"\n          description={\n            <div>\n              <p>\n                <strong>Step:</strong> {fieldContext.stepTitle}\n              </p>\n              <p>\n                <strong>Field:</strong> {fieldContext.label}\n              </p>\n              {fieldContext.placeholder && (\n                <p>\n                  <strong>Expected:</strong> {fieldContext.placeholder}\n                </p>\n              )}\n            </div>\n          }\n          type=\"info\"\n          icon={<InfoCircleOutlined />}\n          style={{ marginBottom: 16 }}\n        />\n      )}\n\n      <SecureForm\n        form={form}\n        layout=\"vertical\"\n        onFinish={handleSubmit}\n        initialValues={{\n          priority: 'MEDIUM',\n          fieldContext: fieldContext?.label\n        }}\n        componentName=\"QueryRaisingModal\"\n        enableSecurityLogging={true}\n        disabled={createdQueryId !== null}\n      >\n        {/* Smart Team Recommendation */}\n        {fieldContext && (\n          <Alert\n            message=\"Recommended Team\"\n            description={getRecommendedTeam(fieldContext)}\n            type=\"info\"\n            style={{ marginBottom: 16 }}\n            showIcon\n          />\n        )}\n\n        {/* Team Selection with Enhanced Context */}\n        <Form.Item\n          name=\"assignedTeam\"\n          label=\"Assign to Team\"\n          rules={[{ required: true, message: 'Please select a team to assign this query to' }]}\n          help=\"Choose the most appropriate team based on your question type. Consider the field context and question nature.\"\n        >\n          <Select\n            placeholder=\"Select team to handle this query\"\n            size=\"large\"\n            showSearch\n            optionFilterProp=\"children\"\n            filterOption={(input, option) =>\n              option.children.props.children[0].props.children\n                .toLowerCase()\n                .indexOf(input.toLowerCase()) >= 0\n            }\n          >\n            <Option value=\"CQS\">\n              <div>\n                <div style={{ fontWeight: 'bold', color: '#722ed1' }}>CQS Team</div>\n                <div style={{ fontSize: '12px', color: '#666', marginBottom: '4px' }}>\n                  Safety data, hazard classifications, regulatory compliance\n                </div>\n                <div style={{ fontSize: '11px', color: '#999' }}>\n                  Best for: Safety measures, hazard statements, environmental impact\n                </div>\n              </div>\n            </Option>\n            <Option value=\"TECH\">\n              <div>\n                <div style={{ fontWeight: 'bold', color: '#13c2c2' }}>Technical Team</div>\n                <div style={{ fontSize: '12px', color: '#666', marginBottom: '4px' }}>\n                  Technical specs, physical properties, processes\n                </div>\n                <div style={{ fontSize: '11px', color: '#999' }}>\n                  Best for: Physical properties, technical specifications, processes\n                </div>\n              </div>\n            </Option>\n            <Option value=\"JVC\">\n              <div>\n                <div style={{ fontWeight: 'bold', color: '#1890ff' }}>JVC Team</div>\n                <div style={{ fontSize: '12px', color: '#666', marginBottom: '4px' }}>\n                  Material identification, supplier info, general questions\n                </div>\n                <div style={{ fontSize: '11px', color: '#999' }}>\n                  Best for: Material details, supplier information, general clarifications\n                </div>\n              </div>\n            </Option>\n          </Select>\n        </Form.Item>\n\n        {/* Field Context (editable) */}\n        <SecureFormItem\n          name=\"fieldContext\"\n          label=\"Field Context\"\n          help=\"Specify which field or section this query relates to\"\n          validationType=\"text\"\n        >\n          <SecureInput\n            placeholder=\"e.g., Material Name, Safety Classification, Storage Conditions\"\n            prefix={<InfoCircleOutlined />}\n            validationType=\"text\"\n            componentName=\"QueryRaisingModal\"\n            fieldName=\"fieldContext\"\n          />\n        </SecureFormItem>\n\n        {/* Query Category */}\n        <Form.Item\n          name=\"category\"\n          label=\"Query Category\"\n          help=\"Categorize your query for better tracking and resolution\"\n        >\n          <Select\n            placeholder=\"Select query category\"\n            size=\"large\"\n            allowClear\n          >\n            <Option value=\"GENERAL\">General Question</Option>\n            <Option value=\"TECHNICAL\">Technical Specification</Option>\n            <Option value=\"SAFETY\">Safety & Compliance</Option>\n            <Option value=\"REGULATORY\">Regulatory Information</Option>\n            <Option value=\"ENVIRONMENTAL\">Environmental Impact</Option>\n            <Option value=\"TRANSPORTATION\">Transportation & Storage</Option>\n            <Option value=\"SUPPLIER\">Supplier Information</Option>\n            <Option value=\"CLARIFICATION\">Clarification Request</Option>\n          </Select>\n        </Form.Item>\n\n        {/* Priority Selection */}\n        <Form.Item\n          name=\"priority\"\n          label=\"Priority Level\"\n          help=\"Select the urgency level for this query\"\n        >\n          <Radio.Group>\n            <Space direction=\"vertical\">\n              <Radio value=\"LOW\">\n                <Tag color={getPriorityColor('LOW')}>LOW</Tag>\n                <span style={{ marginLeft: 8 }}>General information, non-blocking</span>\n              </Radio>\n              <Radio value=\"MEDIUM\">\n                <Tag color={getPriorityColor('MEDIUM')}>MEDIUM</Tag>\n                <span style={{ marginLeft: 8 }}>Standard clarification needed</span>\n              </Radio>\n              <Radio value=\"HIGH\">\n                <Tag color={getPriorityColor('HIGH')}>HIGH</Tag>\n                <span style={{ marginLeft: 8 }}>Important for completion</span>\n              </Radio>\n              <Radio value=\"URGENT\">\n                <Tag color={getPriorityColor('URGENT')}>URGENT</Tag>\n                <span style={{ marginLeft: 8 }}>Blocking progress, needs immediate attention</span>\n              </Radio>\n            </Space>\n          </Radio.Group>\n        </Form.Item>\n\n        <Divider />\n\n        {/* Question Text */}\n        <SecureFormItem\n          name=\"question\"\n          label=\"Your Question\"\n          validationType=\"richtext\"\n          help=\"Be specific and provide context to help the assigned team understand your question\"\n        >\n          <SecureTextArea\n            rows={6}\n            placeholder=\"Describe your question in detail. Include:\n• What specific information you need\n• Why you need this information\n• Any relevant context or background\n• What you've already tried or researched\"\n            showCount\n            maxLength={1000}\n            validationType=\"richtext\"\n            componentName=\"QueryRaisingModal\"\n            fieldName=\"question\"\n          />\n        </SecureFormItem>\n\n        {/* Document Upload Section */}\n        {createdQueryId ? (\n          <div style={{ marginTop: 16 }}>\n            <Alert\n              message=\"Query Created Successfully!\"\n              description=\"Your query has been created. You can now attach supporting documents if needed, or click 'Done' to finish.\"\n              type=\"success\"\n              showIcon\n              style={{ marginBottom: 16 }}\n            />\n            <QueryDocumentUpload\n              queryId={createdQueryId}\n              context=\"query\"\n              onUploadComplete={handleDocumentUpload}\n              maxFiles={5}\n              disabled={false}\n            />\n          </div>\n        ) : (\n          <Collapse\n            size=\"small\"\n            ghost\n            items={[\n              {\n                key: 'documents',\n                label: (\n                  <Space>\n                    <PaperClipOutlined />\n                    <span>Supporting Documents</span>\n                    <Tag color=\"blue\">Available after query creation</Tag>\n                  </Space>\n                ),\n                children: (\n                  <Alert\n                    message=\"Document Attachment\"\n                    description=\"After creating your query, you'll be able to attach supporting documents to provide additional context. Documents help the assigned team better understand your question.\"\n                    type=\"info\"\n                    showIcon\n                  />\n                )\n              }\n            ]}\n          />\n        )}\n\n        <Divider />\n\n        {/* Guidelines */}\n        <Alert\n          message=\"Query Guidelines\"\n          description={\n            <ul style={{ margin: 0, paddingLeft: 20 }}>\n              <li>Be specific and clear in your question</li>\n              <li>Include relevant context and background information</li>\n              <li>Mention any documentation or resources you've already checked</li>\n              <li>For urgent queries, explain why immediate attention is needed</li>\n              <li>Use appropriate technical terminology when relevant</li>\n            </ul>\n          }\n          type=\"info\"\n          showIcon\n          icon={<ExclamationCircleOutlined />}\n        />\n      </SecureForm>\n    </Modal>\n  );\n};\n\nexport default QueryRaisingModal;\n","import {\n  SaveOutlined,\n  QuestionCircleOutlined,\n  CheckCircleOutlined,\n  BugOutlined,\n  ExclamationCircleOutlined,\n  ArrowLeftOutlined,\n  ArrowRightOutlined,\n  CloudSyncOutlined,\n  WifiOutlined,\n  DisconnectOutlined,\n  MenuOutlined,\n  DashboardOutlined,\n  FileTextOutlined,\n  SafetyOutlined,\n  ExperimentOutlined,\n  FireOutlined,\n  MedicineBoxOutlined,\n  BookOutlined,\n  SettingOutlined,\n  BulbOutlined,\n  RocketOutlined\n} from '@ant-design/icons';\nimport {\n  Card,\n  Form,\n  Input,\n  Select,\n  Radio,\n  Checkbox,\n  Button,\n  Row,\n  Col,\n  Progress,\n  message,\n  Spin,\n  Alert,\n  Space,\n  Tooltip,\n  Badge,\n  notification,\n  Typography,\n  Tag,\n  Modal,\n  FloatButton,\n  Drawer,\n  Timeline,\n  Avatar\n} from 'antd';\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport { UI_CONFIG, AUTO_SAVE } from '../constants';\nimport { queryAPI } from '../services/queryAPI';\nimport { workflowAPI } from '../services/workflowAPI';\n\nimport { CqsFieldDisplay, CqsDataSummary } from './CqsFieldDisplay';\nimport MaterialContextPanel from './MaterialContextPanel';\nimport QueryRaisingModal from './QueryRaisingModal';\nimport './PlantQuestionnaire.css';\nimport './CqsFieldDisplay.css';\n\n// const { Step } = Steps; // Not currently used\nconst { TextArea } = Input;\nconst { Option } = Select;\nconst { Text, Title, Paragraph } = Typography;\n\n// Hook to detect screen size\nconst useResponsive = () => {\n  const [screenSize, setScreenSize] = useState({\n    isMobile: window.innerWidth <= UI_CONFIG.MOBILE_BREAKPOINT,\n    isTablet:\n      window.innerWidth > UI_CONFIG.MOBILE_BREAKPOINT &&\n      window.innerWidth <= UI_CONFIG.TABLET_BREAKPOINT,\n    isDesktop: window.innerWidth > UI_CONFIG.TABLET_BREAKPOINT\n  });\n\n  useEffect(() => {\n    const handleResize = () => {\n      setScreenSize({\n        isMobile: window.innerWidth <= UI_CONFIG.MOBILE_BREAKPOINT,\n        isTablet:\n          window.innerWidth > UI_CONFIG.MOBILE_BREAKPOINT &&\n          window.innerWidth <= UI_CONFIG.TABLET_BREAKPOINT,\n        isDesktop: window.innerWidth > UI_CONFIG.TABLET_BREAKPOINT\n      });\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return screenSize;\n};\n\nconst PlantQuestionnaire = ({ workflowId, onComplete, onSaveDraft }) => {\n  const [form] = Form.useForm();\n  const [currentStep, setCurrentStep] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [submitting, setSubmitting] = useState(false);\n  const [workflowData, setWorkflowData] = useState(null);\n  const [formData, setFormData] = useState({});\n  const [completedSteps, setCompletedSteps] = useState(new Set());\n  const [queryModalVisible, setQueryModalVisible] = useState(false);\n  const [selectedField, setSelectedField] = useState(null);\n  const [queries, setQueries] = useState([]);\n  const [autoSaveEnabled, setAutoSaveEnabled] = useState(true);\n  const [isOffline, setIsOffline] = useState(!navigator.onLine);\n  const [pendingChanges, setPendingChanges] = useState(false);\n  const [sidebarVisible, setSidebarVisible] = useState(false);\n  // const [compactMode, setCompactMode] = useState(false); // Not currently used\n  const [_progressUpdateTrigger, _setProgressUpdateTrigger] = useState(0);\n  const { isMobile } = useResponsive();\n\n  // Define questionnaire steps (loaded from backend template)\n  const [questionnaireSteps, setQuestionnaireSteps] = useState([]);\n  const [templateLoading, setTemplateLoading] = useState(true);\n  // eslint-disable-next-line no-unused-vars\n  const [_cqsData, setCqsData] = useState({}); // Used for CQS auto-population (pending implementation)\n  // eslint-disable-next-line no-unused-vars\n  const [_plantSpecificData, setPlantSpecificData] = useState({}); // Used for plant-specific data loading\n  const [cqsFormData, setCqsFormData] = useState({}); // Store CQS form data separately\n\n  // Step icons mapping for modern UI\n  const stepIcons = {\n    General: <FileTextOutlined />,\n    Physical: <ExperimentOutlined />,\n    'Flammability and Explosivity': <FireOutlined />,\n    Toxicity: <SafetyOutlined />,\n    'Storage and Handling': <BookOutlined />,\n    PPE: <SafetyOutlined />,\n    'First Aid': <MedicineBoxOutlined />,\n    Statutory: <BookOutlined />,\n    Others: <SettingOutlined />,\n    Safety: <SafetyOutlined />,\n    Environmental: <BulbOutlined />,\n    Quality: <RocketOutlined />\n  };\n\n  // Load questionnaire template from backend\n  const loadQuestionnaireTemplate = useCallback(async () => {\n    try {\n      setTemplateLoading(true);\n\n      if (!workflowData?.materialCode || !workflowData?.assignedPlant) {\n        console.warn('Missing required data for template loading:', {\n          materialCode: workflowData?.materialCode,\n          assignedPlant: workflowData?.assignedPlant\n        });\n        setQuestionnaireSteps(getDefaultTemplate());\n        return;\n      }\n\n      console.log('Loading questionnaire template for:', {\n        materialCode: workflowData.materialCode,\n        plantCode: workflowData.assignedPlant\n      });\n\n      const template = await workflowAPI.getQuestionnaireTemplate({\n        materialCode: workflowData.materialCode,\n        plantCode: workflowData.assignedPlant,\n        templateType: 'PLANT_QUESTIONNAIRE'\n      });\n\n      console.log('Received template:', template);\n\n      // Validate template structure\n      if (!template || !template.steps || !Array.isArray(template.steps)) {\n        console.error('Invalid template structure:', template);\n        throw new Error('Invalid template structure received from backend');\n      }\n\n      // Load CQS data first\n      let cqsResponse = {};\n      try {\n        cqsResponse = await workflowAPI.getCqsData({\n          materialCode: workflowData?.materialCode,\n          plantCode: workflowData?.assignedPlant\n        });\n\n        console.log('CQS Response:', cqsResponse);\n        setCqsData(cqsResponse || {});\n      } catch (error) {\n        console.error('Failed to load CQS data:', error);\n        // Continue with empty CQS data\n      }\n\n      // Process template to include CQS auto-populated fields with actual values\n      const processedSteps = template.steps.map(step => ({\n        ...step,\n        title: step.title || step.stepTitle || `Step ${step.stepNumber || 'Unknown'}`,\n        description: step.description || '',\n        fields: (step.fields || []).map(field => {\n          const isCqsField = field.cqsAutoPopulated || field.isCqsAutoPopulated || false;\n          let cqsValue = null;\n\n          // Get actual CQS value for this field\n          if (isCqsField && cqsResponse?.cqsData && cqsResponse.cqsData[field.name]) {\n            cqsValue = cqsResponse.cqsData[field.name];\n          }\n\n          return {\n            ...field,\n            isCqsAutoPopulated: isCqsField,\n            cqsValue,\n            // Only disable if CQS value is available, otherwise allow manual input\n            disabled: isCqsField && cqsValue !== null && cqsValue !== undefined,\n            placeholder: isCqsField && cqsValue\n              ? `Auto-populated by CQS: ${cqsValue}`\n              : isCqsField\n                ? 'CQS data not available - manual input required'\n                : field.placeholder\n          };\n        })\n      }));\n\n      console.log('Processed steps:', processedSteps);\n      setQuestionnaireSteps(processedSteps);\n\n      // Update form with CQS data - auto-populate CQS fields\n      const extractedCqsFormData = {};\n      if (cqsResponse?.cqsData) {\n        Object.entries(cqsResponse.cqsData).forEach(([key, value]) => {\n          if (value !== null && value !== undefined && value !== '') {\n            // Find the field to check if it's CQS auto-populated\n            const field = processedSteps.flatMap(step => step.fields || [])\n              .find(f => f.name === key);\n            if (field && (field.cqsAutoPopulated || field.isCqsAutoPopulated)) {\n              extractedCqsFormData[key] = value;\n            }\n          }\n        });\n      }\n\n      // Store CQS form data in state for later use\n      setCqsFormData(extractedCqsFormData);\n\n      if (Object.keys(extractedCqsFormData).length > 0) {\n        console.log('Setting CQS form data:', extractedCqsFormData);\n        setFormData(prev => ({ ...prev, ...extractedCqsFormData }));\n        form.setFieldsValue(extractedCqsFormData);\n\n        // Debug: Log current form values after setting CQS data\n        setTimeout(() => {\n          console.log('Form values after CQS set:', form.getFieldsValue());\n        }, 100);\n      }\n\n      // Load plant-specific data\n      try {\n        const plantData = await workflowAPI.getOrCreatePlantSpecificData({\n          plantCode: workflowData?.assignedPlant,\n          materialCode: workflowData?.materialCode,\n          workflowId\n        });\n\n        setPlantSpecificData(plantData || {});\n\n        // If plant data exists, merge with CQS data (CQS takes precedence)\n        if (plantData?.plantInputs) {\n          const mergedFormData = { ...plantData.plantInputs, ...extractedCqsFormData };\n          setFormData(prev => ({ ...prev, ...mergedFormData }));\n          form.setFieldsValue(mergedFormData);\n        } else if (Object.keys(extractedCqsFormData).length > 0) {\n          // If no plant data but CQS data exists, ensure CQS data is set\n          form.setFieldsValue(extractedCqsFormData);\n        }\n      } catch (error) {\n        console.error('Failed to load plant-specific data:', error);\n        // If plant data loading fails, ensure CQS data is still set\n        if (Object.keys(extractedCqsFormData).length > 0) {\n          form.setFieldsValue(extractedCqsFormData);\n        }\n      }\n    } catch (error) {\n      console.error('Failed to load questionnaire template:', error);\n      message.error(`Failed to load questionnaire template: ${error.message}`);\n      // Fallback to default template if backend fails\n      console.log('Using fallback template');\n      setQuestionnaireSteps(getDefaultTemplate());\n    } finally {\n      setTemplateLoading(false);\n    }\n  }, [workflowData, workflowId, form]);\n\n\n  // Save plant-specific data with composite key\n  // const savePlantSpecificData = async data => { // Not currently used\n  //   try {\n  //     const plantSpecificPayload = {\n  //       plantCode: workflowData?.assignedPlant,\n  //       materialCode: workflowData?.materialCode,\n\n  //       workflowId: workflowId,\n  //       cqsInputs: cqsData,\n  //       plantInputs: data,\n  //       totalFields: Object.keys(data).length,\n  //       completedFields: Object.values(data).filter(\n  //         value => value !== null && value !== undefined && value !== ''\n  //       ).length\n  //     };\n\n  //     await workflowAPI.savePlantSpecificData(plantSpecificPayload, 'current_user');\n  //   } catch (error) {\n  //     console.error('Failed to save plant-specific data:', error);\n  //     throw error;\n  //   }\n  // };\n\n  // Default template fallback - Updated to match actual 87 questions\n  const getDefaultTemplate = () => [\n    {\n      title: 'General',\n      description: 'General information about MSDS availability and completeness',\n      fields: [\n        {\n          name: 'msds_available',\n          label: 'Is 16 Section MSDS of the raw material available?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'missing_info',\n          label: 'Which information in any one of the 16 sections is not available in full?',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Describe missing information'\n        },\n        {\n          name: 'sourcing_asked',\n          label:\n            'Has the identified missing / more information required from the supplier asked thru Sourcing?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'cas_available',\n          label: 'Is CAS number of the raw material based on the pure substance available?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'mixture_ingredients',\n          label: 'For mixtures, are ingredients of mixture available?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'composition_percentage',\n          label: 'Is % age composition substances in the mixture available?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'total_percentage_1',\n          label:\n            'Is the total %age of all substances in the mixture equal to 100?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'total_percentage',\n          label:\n            'If not what is the % of substances not available?',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Provide details about percentage composition'\n        }\n      ]\n    },\n    {\n      title: 'Physical',\n      description: 'Physical properties and handling requirements',\n      fields: [\n        {\n          name: 'is_corrosive',\n          label: 'Is the material corrosive?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'corrosive_storage',\n          label:\n            'Does the plant have acid and alkali proof storage facilities to store a corrosive raw material?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'highly_toxic',\n          label: 'Is the material highly toxic?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'toxic_powder_handling',\n          label:\n            'Does the plant have facilities to handle fine powder of highly toxic raw material?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'crushing_facilities',\n          label: 'Does the plant have facilities to crush the stone like solid raw material?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'heating_facilities',\n          label:\n            'Does the plant have facilities to heat/melt the raw material if required for charging the same in a batch?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'paste_preparation',\n          label:\n            'Does the plant have facilities to prepare paste of raw material if required for charging the same in a batch?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        }\n      ]\n    },\n    {\n      title: 'Flammability and Explosivity',\n      description: 'Flammability, explosivity and fire safety measures',\n      fields: [\n        {\n          name: 'flash_point_65',\n          label: 'Is Flash point of the raw material given and less than or equal to 65 degree C?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'petroleum_class',\n          label:\n            'Is the raw material is to be catgorised as ClassC / Class B / Class A substance as per Petroleum Act / Rules?',\n          type: 'select',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'class_a', label: 'Class A' },\n            { value: 'class_b', label: 'Class B' },\n            { value: 'class_c', label: 'Class C' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'storage_license',\n          label: 'Does all the plants have the capacity and license to store the raw material?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'ccoe_license',\n          label:\n            'If no, has the plant applied for CCoE license and by when expected to receive the license?',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Provide details about CCoE license application'\n        },\n        {\n          name: 'flash_point_21',\n          label: 'Is Flash point of the raw material given is less than 21 degree C?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'flammable_infrastructure',\n          label:\n            \"If yes, does plant have infrastructure to comply State Factories Rule for handling 'Flammable liquids'?\",\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        }\n      ]\n    },\n    {\n      title: 'Toxicity',\n      description: 'Toxicity assessment and exposure control',\n      fields: [\n        {\n          name: 'ld50_oral',\n          label:\n            'Is LD 50 (oral) value available and higher than the threshold limit of 200 mg/Kg BW?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'ld50_dermal',\n          label: 'Is LD 50 (Dermal) value available and higher than 1000 mg/Kg BW?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'lc50_inhalation',\n          label: 'Is LC50 Inhalation value available and higher than 10 mg/L?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'exposure_minimization',\n          label:\n            'If no, in any of the above three cases (where avaialble) then does the plant have facilities and /or procedure to minmise the exposure of workman?',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Describe exposure minimization procedures'\n        },\n        {\n          name: 'carcinogenic',\n          label: 'Is the RM a suspect Carcinogenic?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'carcinogenic_control',\n          label:\n            'If yes, plant has adequate facilities and /or procedure to minimse the exposure of workman?',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Describe carcinogenic exposure control measures'\n        }\n      ]\n    },\n    {\n      title: 'Storage and Handling',\n      description: 'Storage and handling procedures',\n      fields: [\n        {\n          name: 'storage_conditions_stores',\n          label: 'Are any storage conditions required and available in the plant stores?',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Describe storage conditions in plant stores'\n        },\n        {\n          name: 'storage_conditions_floor',\n          label: 'Are any storage conditions required and available in the shop floor?',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Describe storage conditions on shop floor'\n        },\n        {\n          name: 'closed_loop_required',\n          label: 'Does it require closed loop handling system during charging?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'work_permit_available',\n          label:\n            'Does the plant have required Work permit and /or WI/SOP to handle the raw material adequately?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'procedures_details',\n          label: 'If, yes specify the procedures',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Specify the procedures and work permits'\n        }\n      ]\n    },\n    {\n      title: 'PPE',\n      description: 'Personal protective equipment requirements',\n      fields: [\n        {\n          name: 'recommended_ppe',\n          label: 'Recommended specific PPEs based on MSDS',\n          type: 'textarea',\n          required: false,\n          isCqsAutoPopulated: true\n        },\n        {\n          name: 'ppe_in_use',\n          label:\n            'Are recommended PPE as per MSDS to handle the RM is already in use at the plants?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'partial', label: 'Partially' }\n          ]\n        },\n        {\n          name: 'ppe_procurement_date',\n          label: 'If no, by when the plant can procure the require PPE?',\n          type: 'input',\n          required: false,\n          placeholder: 'Enter expected procurement date'\n        }\n      ]\n    },\n    {\n      title: 'First Aid',\n      description: 'First aid measures and emergency response',\n      fields: [\n        {\n          name: 'is_poisonous',\n          label: 'Is the raw material poisonous as per the MSDS?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'antidote_specified',\n          label:\n            'Is the name of antidote required to counter the impact of the material given in the MSDS?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'antidote_available',\n          label: 'Is the above specified antidote available in the plants?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'antidote_source',\n          label:\n            'If the specified antidote is not available then what is source and who will obtain the antidote in the plant?',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Describe antidote source and procurement plan'\n        },\n        {\n          name: 'first_aid_capability',\n          label:\n            'Does the plant has capability to provide the first aid mentioned in the MSDS with the existing control measures?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        }\n      ]\n    },\n    {\n      title: 'Statutory',\n      description: 'Statutory compliance and regulatory requirements',\n      fields: [\n        {\n          name: 'cmvr_listed',\n          label: 'Is the RM or any of its ingredient listed in Table 3 of Rule 137 (CMVR)',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'msihc_listed',\n          label: 'Is the RM or any of its ingredient listed in part II of Schedule I of MSIHC Rule',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'factories_act_listed',\n          label: 'Is the RM or any of its ingredients listed in Schedule II of Factories Act',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'permissible_concentration',\n          label:\n            'With the current infrastructure, is the concentration of RM / ingredients listed in Schedule II of Factories Act within permissible concentrations as per Factories Act in the work area.',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'monitoring_details',\n          label:\n            'Mention details of work area monitoring results and describe infrastructure used for handling',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Provide monitoring details and infrastructure description'\n        }\n      ]\n    },\n    {\n      title: 'Others',\n      description: 'Additional inputs and gap analysis',\n      fields: [\n        {\n          name: 'plant_inputs_required',\n          label: 'Inputs required from plants based on the above assessment?',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Describe inputs required from plants'\n        },\n        {\n          name: 'gaps_identified',\n          label: 'Gaps identified vis-à-vis existing controls / protocols',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Identify gaps in existing controls and protocols'\n        },\n        {\n          name: 'additional_input_1',\n          label: 'Additional Input 1',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Additional input field 1'\n        },\n        {\n          name: 'additional_input_2',\n          label: 'Additional Input 2',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Additional input field 2'\n        }\n      ]\n    }\n  ];\n\n  // Function definitions (moved here to avoid hoisting issues)\n  const getOverallCompletionPercentage = useCallback(() => {\n    if (!questionnaireSteps || questionnaireSteps.length === 0 || !form) {\n      return 0;\n    }\n\n    let totalFields = 0;\n    let completedFields = 0;\n\n    // Get current form values including any unsaved changes\n    try {\n      const currentFormValues = form.getFieldsValue();\n      const currentData = { ...formData, ...currentFormValues };\n\n      questionnaireSteps.forEach((step, _index) => {\n        const stepFields = step.fields || [];\n\n        // Count ALL fields (both CQS and plant fields) in total\n        totalFields += stepFields.length;\n\n        const completedStepFields = stepFields.filter(field => {\n          const value = currentData[field.name];\n          if (Array.isArray(value)) {\n            return value.length > 0;\n          }\n          return value && value !== '' && value !== null && value !== undefined;\n        });\n\n        completedFields += completedStepFields.length;\n      });\n\n      const percentage = totalFields > 0 ? Math.round((completedFields / totalFields) * 100) : 0;\n\n      // Overall completion calculated (including both CQS and plant fields)\n\n      return percentage;\n    } catch (error) {\n      console.error('Error calculating overall completion:', error);\n      return 0;\n    }\n  }, [questionnaireSteps, formData, form]);\n\n  // Debug function to check plant data status\n  const debugPlantData = useCallback(async () => {\n    try {\n      if (workflowData?.assignedPlant && workflowData?.materialCode) {\n        const debugInfo = await workflowAPI.debugPlantData(\n          workflowData.assignedPlant, \n          workflowData.materialCode\n        );\n        console.log('Plant Data Debug Info:', debugInfo);\n        message.info('Debug info logged to console');\n      } else {\n        message.warning('Plant code or material code not available');\n      }\n    } catch (error) {\n      console.error('Failed to get debug info:', error);\n      message.error('Failed to get debug info');\n    }\n  }, [workflowData]);\n\n  const handleSaveDraft = useCallback(\n    async (silent = false) => {\n      try {\n        setSaving(true);\n        const currentValues = form.getFieldsValue();\n        const updatedFormData = { ...formData, ...currentValues };\n\n        // Enhanced validation before saving\n        const validatedFormData = {};\n        Object.entries(updatedFormData).forEach(([key, value]) => {\n          if (value !== null && value !== undefined && value !== '') {\n            validatedFormData[key] = value;\n          }\n        });\n\n        // Save to local storage as backup with enhanced metadata\n        const draftKey = `plant_questionnaire_draft_${workflowId}`;\n        const draftData = {\n          formData: validatedFormData,\n          currentStep,\n          timestamp: Date.now(),\n          completedSteps: Array.from(completedSteps),\n          version: '2.0',\n          materialCode: workflowData?.materialCode,\n          materialName: workflowData?.materialName,\n          assignedPlant: workflowData?.assignedPlant,\n          lastSyncAttempt: Date.now(),\n          syncStatus: isOffline ? 'pending' : 'synced',\n          totalFields: Object.keys(validatedFormData).length,\n          completionPercentage: getOverallCompletionPercentage(),\n          sessionId: Date.now()\n        };\n\n        try {\n          localStorage.setItem(draftKey, JSON.stringify(draftData));\n        } catch (localStorageError) {\n          console.warn('Failed to save draft to local storage:', localStorageError);\n        }\n\n        // Save to server if online\n        if (!isOffline) {\n          try {\n            const draftData = {\n              plantCode: workflowData?.assignedPlant,\n              materialCode: workflowData?.materialCode,\n              responses: updatedFormData,\n              currentStep,\n              completedSteps: Array.from(completedSteps),\n              modifiedBy: 'current_user'\n            };\n\n            console.log('PlantQuestionnaire: Saving draft with data:', {\n              plantCode: draftData.plantCode,\n              materialCode: draftData.materialCode,\n              responseCount: Object.keys(draftData.responses || {}).length,\n              workflowId\n            });\n\n            const response = await workflowAPI.saveDraftPlantResponses(workflowId, draftData);\n\n            console.log('PlantQuestionnaire: Draft save response:', response);\n\n            if (!silent) {\n              if (response.success) {\n                if (response.hasChanges) {\n                  message.success(`Draft saved successfully (${response.savedFields || 0} fields)`);\n                } else {\n                  // Don't show message for no changes to reduce noise\n                  console.log('No changes detected - draft not saved');\n                }\n              } else {\n                message.warning(response.message || 'Draft save may have failed');\n              }\n            }\n          } catch (serverError) {\n            console.error('Failed to save draft to server:', serverError);\n            setPendingChanges(true);\n\n            if (!silent) {\n              // Check if it's a specific error response\n              if (serverError.response && serverError.response.data && serverError.response.data.message) {\n                message.error(`Draft save failed: ${serverError.response.data.message}`);\n              } else {\n                message.warning('Draft saved locally. Will sync when connection is restored.');\n              }\n            }\n          }\n        } else {\n          setPendingChanges(true);\n          if (!silent) {\n            message.info('Draft saved locally. Will sync when online.');\n          }\n        }\n\n        setFormData(updatedFormData);\n\n        if (onSaveDraft) {\n          onSaveDraft(updatedFormData);\n        }\n      } catch (error) {\n        console.error('Failed to save draft:', error);\n        if (!silent) {\n          message.error('Failed to save draft. Please try again.');\n        }\n      } finally {\n        setSaving(false);\n      }\n    },\n    [form, formData, workflowId, onSaveDraft, currentStep, completedSteps, isOffline, workflowData, getOverallCompletionPercentage]\n  );\n\n  const handleNext = useCallback(async () => {\n    if (currentStep < questionnaireSteps.length - 1) {\n      // Save current form data before moving to next step\n      try {\n        const currentValues = form.getFieldsValue();\n        const updatedFormData = { ...formData, ...currentValues };\n        setFormData(updatedFormData);\n\n        // Save to database\n        await handleSaveDraft(true); // Silent save\n\n        setCurrentStep(currentStep + 1);\n      } catch (error) {\n        console.error('Failed to save data before moving to next step:', error);\n        message.warning('Failed to save current data. Please try again.');\n      }\n    }\n  }, [currentStep, questionnaireSteps.length, form, formData, handleSaveDraft]);\n\n  const handlePrevious = useCallback(async () => {\n    if (currentStep > 0) {\n      // Save current form data before moving to previous step\n      try {\n        const currentValues = form.getFieldsValue();\n        const updatedFormData = { ...formData, ...currentValues };\n        setFormData(updatedFormData);\n\n        // Save to database\n        await handleSaveDraft(true); // Silent save\n\n        setCurrentStep(currentStep - 1);\n      } catch (error) {\n        console.error('Failed to save data before moving to previous step:', error);\n        message.warning('Failed to save current data. Please try again.');\n      }\n    }\n  }, [currentStep, form, formData, handleSaveDraft]);\n\n  const handleStepChange = useCallback(\n    async (step) => {\n      if (step >= 0 && step < questionnaireSteps.length) {\n        // Save current form data before changing step\n        try {\n          const currentValues = form.getFieldsValue();\n          const updatedFormData = { ...formData, ...currentValues };\n          setFormData(updatedFormData);\n\n          // Save to database\n          await handleSaveDraft(true); // Silent save\n\n          setCurrentStep(step);\n        } catch (error) {\n          console.error('Failed to save data before changing step:', error);\n          message.warning('Failed to save current data. Please try again.');\n        }\n      }\n    },\n    [questionnaireSteps.length, form, formData, handleSaveDraft]\n  );\n\n  // Helper function definitions\n  // const getStepForField = fieldName => { // Not currently used\n  //   for (let i = 0; i < questionnaireSteps.length; i++) {\n  //     if (questionnaireSteps[i].fields.some(field => field.name === fieldName)) {\n  //       return i;\n  //     }\n  //   }\n  //   return 0;\n  // };\n\n\n\n  const getTotalFieldsPopulated = useCallback(() => {\n    if (!questionnaireSteps || questionnaireSteps.length === 0 || !form) {\n      return { total: 0, populated: 0 };\n    }\n\n    let totalFields = 0;\n    let populatedFields = 0;\n\n    try {\n      // Get current form values including any unsaved changes\n      const currentFormValues = form.getFieldsValue();\n      const currentData = { ...formData, ...currentFormValues };\n\n      questionnaireSteps.forEach(step => {\n        const stepFields = step.fields || [];\n\n        // Count ALL fields (both CQS and plant fields) in total\n        totalFields += stepFields.length;\n\n        const populatedStepFields = stepFields.filter(field => {\n          const value = currentData[field.name];\n          if (Array.isArray(value)) {\n            return value.length > 0;\n          }\n          return value && value !== '' && value !== null && value !== undefined;\n        });\n\n        populatedFields += populatedStepFields.length;\n      });\n\n      // Total fields populated calculated (including both CQS and plant fields)\n\n      return { total: totalFields, populated: populatedFields };\n    } catch (error) {\n      console.error('Error calculating total fields populated:', error);\n      return { total: 0, populated: 0 };\n    }\n  }, [questionnaireSteps, formData, form]);\n\n  // Network status monitoring with enhanced offline handling\n  useEffect(() => {\n    const handleOnline = () => {\n      setIsOffline(false);\n      notification.success({\n        message: 'Connection Restored',\n        description: 'You are back online. Syncing your changes...',\n        icon: <WifiOutlined style={{ color: '#52c41a' }} />,\n        duration: 3\n      });\n\n      if (pendingChanges) {\n        handleSaveDraft(true); // Auto-sync when back online\n        setPendingChanges(false);\n      }\n    };\n\n    const handleOffline = () => {\n      setIsOffline(true);\n      notification.warning({\n        message: 'Connection Lost',\n        description:\n          'You are offline. Changes will be saved locally and synced when connection is restored.',\n        icon: <DisconnectOutlined style={{ color: '#fa8c16' }} />,\n        duration: 5\n      });\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, [pendingChanges, handleSaveDraft]);\n\n  // Enhanced keyboard navigation\n  useEffect(() => {\n    const handleKeyDown = event => {\n      // Ctrl/Cmd + S to save draft\n      if ((event.ctrlKey || event.metaKey) && event.key === 's') {\n        event.preventDefault();\n        handleSaveDraft();\n      }\n\n      // Ctrl/Cmd + Shift + D for debug info\n      if ((event.ctrlKey || event.metaKey) && event.shiftKey && event.key === 'D') {\n        event.preventDefault();\n        debugPlantData();\n      }\n\n      // Ctrl/Cmd + Right Arrow to go to next step\n      if ((event.ctrlKey || event.metaKey) && event.key === 'ArrowRight') {\n        event.preventDefault();\n        if (currentStep < questionnaireSteps.length - 1) {\n          handleNext();\n        }\n      }\n\n      // Ctrl/Cmd + Left Arrow to go to previous step\n      if ((event.ctrlKey || event.metaKey) && event.key === 'ArrowLeft') {\n        event.preventDefault();\n        if (currentStep > 0) {\n          handlePrevious();\n        }\n      }\n\n      // F1 to show help/shortcuts\n      if (event.key === 'F1') {\n        event.preventDefault();\n        Modal.info({\n          title: 'Keyboard Shortcuts',\n          content: (\n            <div>\n              <p>\n                <strong>Ctrl/Cmd + S:</strong> Save draft\n              </p>\n              <p>\n                <strong>Ctrl/Cmd + →:</strong> Next step\n              </p>\n              <p>\n                <strong>Ctrl/Cmd + ←:</strong> Previous step\n              </p>\n              <p>\n                <strong>Tab:</strong> Navigate between fields\n              </p>\n              <p>\n                <strong>Enter:</strong> Submit form or proceed\n              </p>\n              <p>\n                <strong>Esc:</strong> Close modals\n              </p>\n            </div>\n          )\n        });\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [currentStep, questionnaireSteps.length, handleNext, handlePrevious, handleSaveDraft, debugPlantData]);\n\n  // Define functions before useEffect hooks that depend on them\n  const loadWorkflowData = useCallback(async () => {\n    try {\n      setLoading(true);\n      const workflow = await workflowAPI.getWorkflow(workflowId);\n      setWorkflowData(workflow);\n\n      // Pre-populate material name from workflow data (from ProjectItemMaster)\n      const initialData = {};\n      if (workflow.materialName) {\n        initialData.materialName = workflow.materialName;\n      }\n\n      // Load existing responses if any\n      if (workflow.responses && workflow.responses.length > 0) {\n        const existingData = { ...initialData };\n        const completed = new Set();\n\n        workflow.responses.forEach(response => {\n          existingData[response.fieldName] = response.fieldValue;\n          completed.add(response.stepNumber);\n        });\n\n        // Merge with existing form data (which may include CQS values)\n        setFormData(prevFormData => {\n          const mergedData = { ...existingData, ...prevFormData };\n          form.setFieldsValue(mergedData);\n          return mergedData;\n        });\n        setCompletedSteps(completed);\n      } else {\n        // Set initial data even if no responses exist, but preserve existing form data (CQS values)\n        setFormData(prevFormData => {\n          const mergedData = { ...initialData, ...prevFormData };\n          form.setFieldsValue(mergedData);\n          return mergedData;\n        });\n      }\n    } catch (error) {\n      console.error('Failed to load workflow data:', error);\n      message.error('Failed to load workflow data');\n    } finally {\n      setLoading(false);\n    }\n  }, [workflowId, form]);\n\n  const loadQueries = useCallback(async () => {\n    try {\n      const workflowQueries = await queryAPI.getQueriesByWorkflow(workflowId);\n      setQueries(workflowQueries);\n    } catch (error) {\n      console.error('Failed to load queries:', error);\n    }\n  }, [workflowId]);\n\n  // Load workflow data and existing responses\n  useEffect(() => {\n    if (workflowId) {\n      loadWorkflowData();\n      loadQueries();\n    }\n  }, [workflowId, loadWorkflowData, loadQueries]);\n\n  // Load questionnaire template when workflow data is available\n  useEffect(() => {\n    if (workflowData && workflowData.materialCode && workflowData.assignedPlant) {\n      loadQuestionnaireTemplate();\n    }\n  }, [workflowData, loadQuestionnaireTemplate]);\n\n  // Auto-save functionality with recovery\n  useEffect(() => {\n    if (autoSaveEnabled && Object.keys(formData).length > 0) {\n      const autoSaveTimer = setTimeout(() => {\n        handleSaveDraft(true); // Silent save\n      }, AUTO_SAVE.INTERVAL); // Auto-save every 30 seconds\n\n      return () => clearTimeout(autoSaveTimer);\n    }\n  }, [formData, autoSaveEnabled, handleSaveDraft]);\n\n  // Debounced auto-save for real-time changes (saves data as user types)\n  useEffect(() => {\n    if (autoSaveEnabled && Object.keys(formData).length > 0) {\n      const debouncedSaveTimer = setTimeout(() => {\n        handleSaveDraft(true); // Silent save\n      }, AUTO_SAVE.DEBOUNCE_DELAY); // Save after 2 seconds of inactivity\n\n      return () => clearTimeout(debouncedSaveTimer);\n    }\n  }, [formData, autoSaveEnabled, handleSaveDraft]);\n\n  // Ensure CQS values are always applied to the form\n  useEffect(() => {\n    if (Object.keys(cqsFormData).length > 0) {\n      console.log('Applying CQS form data from useEffect:', cqsFormData);\n      // Get current form values\n      const currentValues = form.getFieldsValue();\n      // Merge with CQS data (CQS takes precedence)\n      const mergedValues = { ...currentValues, ...cqsFormData };\n      // Set the merged values\n      form.setFieldsValue(mergedValues);\n      setFormData(prev => ({ ...prev, ...cqsFormData }));\n    }\n  }, [cqsFormData, form]);\n\n  // Track form data changes and update completed steps\n  useEffect(() => {\n    if (questionnaireSteps.length > 0) {\n      const newCompletedSteps = new Set();\n\n      // Get current form values including any unsaved changes\n      const currentFormValues = form.getFieldsValue();\n      const currentData = { ...formData, ...currentFormValues };\n\n      questionnaireSteps.forEach((step, index) => {\n        const stepFields = step.fields || [];\n\n        // Filter out CQS auto-populated fields for step completion calculation\n        const userEditableFields = stepFields.filter(field => !field.isCqsAutoPopulated && !field.disabled);\n        const requiredFields = userEditableFields.filter(field => field.required);\n\n        const completedRequiredFields = requiredFields.filter(field => {\n          const value = currentData[field.name];\n          if (Array.isArray(value)) {\n            return value.length > 0;\n          }\n          return value && value !== '' && value !== null && value !== undefined;\n        });\n\n        // Mark step as complete based on field completion\n        if (requiredFields.length > 0) {\n          // If there are required fields, all must be completed\n          if (completedRequiredFields.length === requiredFields.length) {\n            newCompletedSteps.add(index);\n          }\n        } else {\n          // If no required fields, mark complete if at least 50% of user-editable fields are filled\n          const completedOptionalFields = userEditableFields.filter(field => {\n            const value = currentData[field.name];\n            if (Array.isArray(value)) {\n              return value.length > 0;\n            }\n            return value && value !== '' && value !== null && value !== undefined;\n          });\n\n          const completionPercentage =\n            userEditableFields.length > 0 ? (completedOptionalFields.length / userEditableFields.length) * 100 : 0;\n\n          if (completionPercentage >= 50) {\n            newCompletedSteps.add(index);\n          }\n        }\n\n        // Step completion calculated (excluding CQS auto-populated fields)\n      });\n\n      // Step completion updated\n\n      setCompletedSteps(newCompletedSteps);\n    }\n  }, [formData, questionnaireSteps, form]);\n\n  // Enhanced form validation with field-specific rules\n  const getFieldValidationRules = field => {\n    const rules = [];\n\n    if (field.required) {\n      rules.push({\n        required: true,\n        message: `${field.label} is required for MSDS completion`\n      });\n    }\n\n    // Add specific validation based on field type and name\n    switch (field.name) {\n      case 'casNumber':\n        rules.push({\n          pattern: /^\\d{1,7}-\\d{2}-\\d$/,\n          message:\n            'Please enter a valid CAS number format (e.g., 64-17-5). If unknown, raise a query to the Technical team.'\n        });\n        break;\n      case 'boilingPoint':\n      case 'meltingPoint':\n        rules.push({\n          pattern: /^-?\\d+(\\.\\d+)?$/,\n          message: 'Please enter a valid temperature in Celsius (e.g., 100.5 or -10)'\n        });\n        break;\n      case 'materialName':\n        rules.push({\n          min: 2,\n          message: 'Material name must be at least 2 characters'\n        });\n        rules.push({\n          max: 200,\n          message: 'Material name cannot exceed 200 characters'\n        });\n        break;\n      case 'supplierName':\n        rules.push({\n          min: 2,\n          message: 'Supplier name must be at least 2 characters'\n        });\n        rules.push({\n          max: 100,\n          message: 'Supplier name cannot exceed 100 characters'\n        });\n        break;\n      case 'missing_info':\n      case 'exposure_minimization':\n      case 'carcinogenic_control':\n      case 'storage_conditions_stores':\n      case 'storage_conditions_floor':\n      case 'procedures_details':\n      case 'antidote_source':\n      case 'monitoring_details':\n      case 'plant_inputs_required':\n      case 'gaps_identified':\n      case 'additional_input_1':\n      case 'additional_input_2':\n        rules.push({\n          min: 10,\n          message: `${field.label} must be at least 10 characters for regulatory compliance`\n        });\n        rules.push({\n          max: 2000,\n          message: `${field.label} cannot exceed 2000 characters`\n        });\n        break;\n      default:\n        break;\n    }\n\n    return rules;\n  };\n\n  // Get contextual help text for fields\n  const getFieldHelpText = field => {\n    const helpTexts = {\n      msds_available:\n        'Material Safety Data Sheet with all 16 sections as per regulatory requirements',\n      cas_available:\n        'Chemical Abstracts Service number - unique identifier for chemical substances',\n      is_corrosive: 'Corrosive materials can cause damage to skin, eyes, and respiratory system',\n      highly_toxic: 'Materials with high toxicity require special handling and safety measures',\n      flash_point_65:\n        'Flash point indicates fire hazard - materials with flash point ≤65°C are flammable',\n      petroleum_class:\n        'Classification under Petroleum Act determines storage and handling requirements',\n      ld50_oral: 'Lethal Dose 50 (oral) - dose that kills 50% of test animals when ingested',\n      ld50_dermal:\n        'Lethal Dose 50 (dermal) - dose that kills 50% of test animals through skin contact',\n      lc50_inhalation:\n        'Lethal Concentration 50 (inhalation) - concentration that kills 50% through inhalation',\n      carcinogenic: 'Materials suspected to cause cancer require enhanced safety protocols',\n      recommended_ppe: 'Personal Protective Equipment recommendations based on material hazards',\n      is_poisonous: 'Poisonous materials require specific antidotes and first aid procedures',\n      cmvr_listed:\n        'Chemical Manufacture and Verification Rules listing affects regulatory compliance',\n      msihc_listed: 'Manufacture, Storage and Import of Hazardous Chemical Rules listing',\n      factories_act_listed: 'Factories Act Schedule II listing requires workplace monitoring'\n    };\n\n    return helpTexts[field.name] || field.help;\n  };\n\n  // Enhanced auto-recovery on component mount with improved error handling\n  useEffect(() => {\n    const recoverDraftData = () => {\n      try {\n        const draftKey = `plant_questionnaire_draft_${workflowId}`;\n        const savedDraft = localStorage.getItem(draftKey);\n\n        if (savedDraft) {\n          const draftData = JSON.parse(savedDraft);\n          const draftTimestamp = draftData.timestamp;\n          const currentTime = Date.now();\n\n          // Only recover if draft is less than 7 days old (extended from 24 hours)\n          if (currentTime - draftTimestamp < 7 * 24 * 60 * 60 * 1000) {\n            // Enhanced validation of draft data integrity\n            if (draftData.formData && typeof draftData.formData === 'object') {\n              // Validate each field value before setting\n              const validatedFormData = {};\n              Object.entries(draftData.formData).forEach(([key, value]) => {\n                if (value !== null && value !== undefined && value !== '') {\n                  validatedFormData[key] = value;\n                }\n              });\n\n              setFormData(prev => ({ ...prev, ...validatedFormData }));\n              form.setFieldsValue(validatedFormData);\n\n              if (\n                typeof draftData.currentStep === 'number' &&\n                draftData.currentStep >= 0 &&\n                draftData.currentStep < questionnaireSteps.length\n              ) {\n                setCurrentStep(draftData.currentStep);\n              }\n\n              if (Array.isArray(draftData.completedSteps)) {\n                setCompletedSteps(new Set(draftData.completedSteps));\n              }\n\n              // Check if there are pending changes to sync\n              if (draftData.syncStatus === 'pending') {\n                setPendingChanges(true);\n              }\n\n              const recoveredFields = Object.keys(validatedFormData).length;\n              const draftAge = Math.round((currentTime - draftTimestamp) / (1000 * 60 * 60));\n\n              notification.success({\n                message: 'Draft Recovered',\n                description: `${recoveredFields} fields restored from ${draftAge} hours ago. Your progress has been preserved.`,\n                duration: 6,\n                placement: 'topRight'\n              });\n            } else {\n              // Remove corrupted draft\n              localStorage.removeItem(draftKey);\n              notification.warning({\n                message: 'Draft Recovery Failed',\n                description: 'Previous draft data was corrupted and has been cleared.',\n                duration: 4\n              });\n            }\n          } else {\n            // Remove old draft\n            localStorage.removeItem(draftKey);\n            const draftAge = Math.round((currentTime - draftTimestamp) / (1000 * 60 * 60 * 24));\n            notification.info({\n              message: 'Old Draft Cleared',\n              description: `Draft from ${draftAge} days ago was automatically removed.`,\n              duration: 3\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Failed to recover draft data:', error);\n        // Remove corrupted draft\n        try {\n          localStorage.removeItem(`plant_questionnaire_draft_${workflowId}`);\n          notification.error({\n            message: 'Draft Recovery Error',\n            description: 'Failed to recover previous draft. Starting fresh.',\n            duration: 4\n          });\n        } catch (removeError) {\n          console.error('Failed to remove corrupted draft:', removeError);\n        }\n      }\n    };\n\n    if (workflowId && !workflowData) {\n      recoverDraftData();\n    }\n  }, [workflowId, workflowData, form, questionnaireSteps.length]);\n\n  // Enhanced step completion tracking with validation\n  const getStepCompletionStatus = useCallback(stepIndex => {\n    if (!questionnaireSteps[stepIndex] || !questionnaireSteps[stepIndex].fields) {\n      return {\n        total: 0,\n        required: 0,\n        optional: 0,\n        completed: 0,\n        requiredCompleted: 0,\n        optionalCompleted: 0,\n        isComplete: false,\n        hasOpenQueries: false,\n        hasResolvedQueries: false,\n        openQueriesCount: 0,\n        resolvedQueriesCount: 0,\n        completionPercentage: 0,\n        requiredCompletionPercentage: 0\n      };\n    }\n\n    const stepFields = questionnaireSteps[stepIndex].fields;\n\n    // Filter out CQS auto-populated fields for step completion calculation\n    const userEditableFields = stepFields.filter(field => !field.isCqsAutoPopulated && !field.disabled);\n    const requiredFields = userEditableFields.filter(field => field.required);\n    const optionalFields = userEditableFields.filter(field => !field.required);\n\n    // Get current form values including any unsaved changes\n    const currentFormValues = form.getFieldsValue();\n    const currentData = { ...formData, ...currentFormValues };\n\n    const completedRequiredFields = requiredFields.filter(field => {\n      const value = currentData[field.name];\n      if (Array.isArray(value)) {\n        return value.length > 0;\n      }\n      return value && value !== '' && value !== null && value !== undefined;\n    });\n\n    const completedOptionalFields = optionalFields.filter(field => {\n      const value = currentData[field.name];\n      if (Array.isArray(value)) {\n        return value.length > 0;\n      }\n      return value && value !== '' && value !== null && value !== undefined;\n    });\n\n    const stepQueries = queries.filter(q => q.stepNumber === stepIndex);\n    const openQueries = stepQueries.filter(q => q.status === 'OPEN');\n    const resolvedQueries = stepQueries.filter(q => q.status === 'RESOLVED');\n\n    return {\n      total: userEditableFields.length,\n      required: requiredFields.length,\n      optional: optionalFields.length,\n      completed: completedRequiredFields.length + completedOptionalFields.length,\n      requiredCompleted: completedRequiredFields.length,\n      optionalCompleted: completedOptionalFields.length,\n      isComplete:\n        requiredFields.length > 0\n          ? completedRequiredFields.length === requiredFields.length\n          : userEditableFields.length > 0 &&\n          (completedRequiredFields.length + completedOptionalFields.length) / userEditableFields.length >=\n          0.5,\n      hasOpenQueries: openQueries.length > 0,\n      hasResolvedQueries: resolvedQueries.length > 0,\n      openQueriesCount: openQueries.length,\n      resolvedQueriesCount: resolvedQueries.length,\n      completionPercentage:\n        userEditableFields.length > 0\n          ? Math.round(\n            ((completedRequiredFields.length + completedOptionalFields.length) /\n              userEditableFields.length) *\n            100\n          )\n          : 100,\n      requiredCompletionPercentage:\n        requiredFields.length > 0\n          ? Math.round((completedRequiredFields.length / requiredFields.length) * 100)\n          : 100\n    };\n  }, [questionnaireSteps, formData, form, queries]);\n\n  const handleRaiseQuery = fieldName => {\n    console.log('handleRaiseQuery called with fieldName:', fieldName);\n    const field = questionnaireSteps[currentStep].fields.find(f => f.name === fieldName);\n    const currentValue = formData[fieldName] || form.getFieldValue(fieldName);\n\n    console.log('Found field:', field);\n    console.log('Current value:', currentValue);\n\n    setSelectedField({\n      ...field,\n      stepNumber: currentStep,\n      stepTitle: questionnaireSteps[currentStep].title,\n      currentValue,\n      materialContext: {\n        materialCode: workflowData?.materialCode,\n        materialName: workflowData?.materialName,\n        materialType: formData.materialType || workflowData?.materialType,\n        supplierName: formData.supplierName || workflowData?.supplierName\n      }\n    });\n\n    console.log('Setting queryModalVisible to true');\n    setQueryModalVisible(true);\n  };\n\n  const handleQueryCreated = _queryData => {\n    setQueryModalVisible(false);\n    setSelectedField(null);\n    loadQueries(); // Reload queries\n    message.success('Query raised successfully');\n  };\n\n\n\n  // Auto-scroll to field with resolved query\n  const scrollToResolvedQuery = useCallback(fieldName => {\n    setTimeout(() => {\n      const fieldElement = document.querySelector(`[data-field-name=\"${fieldName}\"]`);\n      if (fieldElement) {\n        fieldElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center',\n          inline: 'nearest'\n        });\n\n        // Highlight the field briefly\n        fieldElement.style.transition = 'background-color 0.3s ease';\n        fieldElement.style.backgroundColor = '#f6ffed';\n        setTimeout(() => {\n          fieldElement.style.backgroundColor = '';\n        }, 2000);\n      }\n    }, 100);\n  }, []);\n\n  // Check for newly resolved queries and auto-scroll\n  useEffect(() => {\n    if (queries.length > 0) {\n      const resolvedQueriesInCurrentStep = queries.filter(\n        q => q.stepNumber === currentStep && q.status === 'RESOLVED' && !q.hasBeenViewed // Add this flag to track if user has seen the resolution\n      );\n\n      if (resolvedQueriesInCurrentStep.length > 0) {\n        const latestResolvedQuery = resolvedQueriesInCurrentStep.sort(\n          (a, b) => new Date(b.resolvedAt) - new Date(a.resolvedAt)\n        )[0];\n\n        scrollToResolvedQuery(latestResolvedQuery.fieldName);\n\n        // Show notification about resolved query\n        notification.success({\n          message: 'Query Resolved',\n          description: `Your query about \"${latestResolvedQuery.fieldName}\" has been resolved. Check the field for the response.`,\n          duration: 5,\n          placement: 'topRight'\n        });\n      }\n    }\n  }, [queries, currentStep, scrollToResolvedQuery]);\n\n  const handleSubmit = async () => {\n    try {\n      setSubmitting(true);\n\n      // Check for open queries\n      const openQueries = queries.filter(q => q.status === 'OPEN');\n      if (openQueries.length > 0) {\n        Modal.confirm({\n          title: 'Open Queries Detected',\n          content: `You have ${openQueries.length} open queries. Are you sure you want to submit the questionnaire? It's recommended to resolve all queries before submission.`,\n          okText: 'Submit Anyway',\n          cancelText: 'Cancel',\n          onOk: () => proceedWithSubmission()\n        });\n        return;\n      }\n\n      await proceedWithSubmission();\n    } catch (error) {\n      console.error('Failed to submit questionnaire:', error);\n      if (error.status === 400) {\n        message.error('Please complete all required fields before submitting');\n      } else if (error.status === 401) {\n        message.error('Session expired. Please log in again.');\n      } else {\n        message.error('Failed to submit questionnaire. Please try again.');\n      }\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const proceedWithSubmission = async () => {\n    // Validate all required fields\n    const allRequiredFields = questionnaireSteps.flatMap(step =>\n      step.fields.filter(field => field.required).map(field => field.name)\n    );\n\n    await form.validateFields(allRequiredFields);\n\n    const finalData = form.getFieldsValue();\n\n    // Check completion percentage\n    const completionPercentage = getOverallCompletionPercentage();\n    if (completionPercentage < 80) {\n      const proceed = await new Promise(resolve => {\n        Modal.confirm({\n          title: 'Incomplete Questionnaire',\n          content: `Your questionnaire is only ${completionPercentage}% complete. Are you sure you want to submit?`,\n          okText: 'Submit',\n          cancelText: 'Continue Editing',\n          onOk: () => resolve(true),\n          onCancel: () => resolve(false)\n        });\n      });\n\n      if (!proceed) {\n        return;\n      }\n    }\n\n    const submissionData = {\n      plantCode: workflowData?.assignedPlant,\n      materialCode: workflowData?.materialCode,\n      responses: finalData,\n      completionPercentage,\n      submittedBy: 'current_user',\n      totalQueries: queries.length,\n      openQueries: queries.filter(q => q.status === 'OPEN').length\n    };\n\n    await workflowAPI.submitPlantQuestionnaire(workflowId, submissionData);\n\n    // Clear draft data after successful submission\n    try {\n      localStorage.removeItem(`plant_questionnaire_draft_${workflowId}`);\n    } catch (error) {\n      console.warn('Failed to clear draft data:', error);\n    }\n\n    message.success('Questionnaire submitted successfully');\n\n    if (onComplete) {\n      onComplete(finalData);\n    }\n  };\n\n  const renderField = field => {\n    const fieldQueries = queries.filter(\n      q => q.fieldName === field.name && q.stepNumber === currentStep\n    );\n\n    const hasOpenQuery = fieldQueries.some(q => q.status === 'OPEN');\n    const hasResolvedQuery = fieldQueries.some(q => q.status === 'RESOLVED');\n    const resolvedQuery = fieldQueries.find(q => q.status === 'RESOLVED');\n\n    const isFieldCompleted = formData[field.name] && formData[field.name] !== '';\n\n    const fieldLabel = (\n      <div className=\"modern-field-label\">\n        <div style={{\n          display: 'flex',\n          alignItems: 'flex-start',\n          gap: '8px',\n          flexWrap: 'wrap',\n          marginBottom: '4px'\n        }}>\n          <span style={{ flex: 1, minWidth: 0, lineHeight: '1.5' }}>\n            {field.label}\n          </span>\n          {field.required && <span style={{ color: '#ef4444', flexShrink: 0 }}>*</span>}\n          {field.isCqsAutoPopulated && (\n            <CqsFieldDisplay\n              field={field}\n              cqsData={_cqsData}\n              cqsFieldMapping={workflowData?.cqsFieldMapping || {}}\n              compact={true}\n            />\n          )}\n          {isFieldCompleted && (\n            <Tooltip title=\"Field completed\">\n              <CheckCircleOutlined style={{ color: '#10b981', fontSize: '14px', flexShrink: 0 }} />\n            </Tooltip>\n          )}\n        </div>\n        <div style={{ display: 'flex', gap: '8px', marginTop: '4px', flexWrap: 'wrap' }}>\n          <Button\n            type=\"text\"\n            size=\"small\"\n            icon={<QuestionCircleOutlined />}\n            onClick={() => handleRaiseQuery(field.name)}\n            style={{\n              color: '#667eea',\n              padding: '2px 6px',\n              height: 'auto',\n              fontSize: '12px'\n            }}\n          >\n            Query\n          </Button>\n          {hasOpenQuery && (\n            <Tag color=\"red\" size=\"small\">\n              Query Open\n            </Tag>\n          )}\n          {hasResolvedQuery && !hasOpenQuery && (\n            <Tag color=\"green\" size=\"small\">\n              Query Resolved\n            </Tag>\n          )}\n        </div>\n      </div>\n    );\n\n    // Enhanced validation rules\n    const validationRules = getFieldValidationRules(field);\n\n    const helpContent = resolvedQuery ? (\n      <div\n        style={{\n          marginTop: 8,\n          padding: '12px 16px',\n          background: 'linear-gradient(135deg, #f0fdf4, #dcfce7)',\n          border: '1px solid #bbf7d0',\n          borderRadius: '8px',\n          fontSize: '12px'\n        }}\n      >\n        <div style={{ marginBottom: 6 }}>\n          <Text strong style={{ color: '#059669' }}>\n            Query Response:\n          </Text>\n        </div>\n        <div style={{ marginBottom: 6, color: '#374151' }}>{resolvedQuery.response}</div>\n        <div style={{ fontSize: '10px', color: '#6b7280' }}>\n          Resolved by {resolvedQuery.resolvedBy} on{' '}\n          {new Date(resolvedQuery.resolvedAt).toLocaleDateString()}\n        </div>\n      </div>\n    ) : (\n      getFieldHelpText(field)\n    );\n\n    const commonProps = {\n      name: field.name,\n      label: fieldLabel,\n      rules: validationRules,\n      help: helpContent,\n      'data-field-name': field.name\n    };\n\n    // Get CQS value for this field if it's CQS auto-populated\n    const cqsValue = field.isCqsAutoPopulated && _cqsData?.cqsData ?\n      _cqsData.cqsData[field.name] : null;\n\n    // If this is a CQS auto-populated field with a value, show it as read-only display\n    if (field.isCqsAutoPopulated && cqsValue) {\n      const displayValue = field.type === 'radio' || field.type === 'select' ?\n        field.options?.find(opt => opt.value === cqsValue)?.label || cqsValue :\n        cqsValue;\n\n      return (\n        <Form.Item {...commonProps}>\n          <div className=\"cqs-readonly-field\">\n            <div className=\"cqs-value-display\">\n              {displayValue}\n            </div>\n            <div className=\"cqs-readonly-note\">\n              <Text type=\"secondary\" style={{ fontSize: '12px', fontStyle: 'italic' }}>\n                Auto-populated by CQS system\n              </Text>\n            </div>\n          </div>\n        </Form.Item>\n      );\n    }\n\n    // Only disable if field is explicitly disabled, not just because it's CQS auto-populated\n    const isDisabled = field.disabled || false;\n\n    const inputProps = {\n      className: `modern-input ${field.isCqsAutoPopulated ? 'cqs-auto-populated' : ''}`,\n      disabled: isDisabled,\n      placeholder: field.placeholder || `Enter ${field.label.toLowerCase()}`\n    };\n\n    switch (field.type) {\n      case 'input':\n        return (\n          <Form.Item {...commonProps}>\n            <Input {...inputProps} />\n          </Form.Item>\n        );\n\n      case 'textarea':\n        return (\n          <Form.Item {...commonProps}>\n            <TextArea {...inputProps} rows={4} autoSize={{ minRows: 3, maxRows: 6 }} />\n          </Form.Item>\n        );\n\n      case 'select':\n        return (\n          <Form.Item {...commonProps}>\n            <Select\n              {...inputProps}\n              placeholder={`Select ${field.label.toLowerCase()}`}\n              showSearch\n              optionFilterProp=\"children\"\n            >\n              {field.options?.map(option => (\n                <Option key={option.value} value={option.value}>\n                  {option.label}\n                </Option>\n              ))}\n            </Select>\n          </Form.Item>\n        );\n\n      case 'radio':\n        return (\n          <Form.Item {...commonProps}>\n            <Radio.Group\n              className={`modern-radio-group ${field.isCqsAutoPopulated ? 'cqs-auto-populated' : ''}`}\n              disabled={isDisabled}\n            >\n              <Space direction=\"vertical\" size=\"small\">\n                {field.options?.map(option => (\n                  <Radio key={option.value} value={option.value}>\n                    {option.label}\n                  </Radio>\n                ))}\n              </Space>\n            </Radio.Group>\n          </Form.Item>\n        );\n\n      case 'checkbox':\n        return (\n          <Form.Item {...commonProps} valuePropName=\"checked\">\n            <Checkbox.Group\n              className={`modern-checkbox-group ${field.isCqsAutoPopulated ? 'cqs-auto-populated' : ''}`}\n              disabled={isDisabled}\n            >\n              <Space direction=\"vertical\" size=\"small\">\n                {field.options?.map(option => (\n                  <Checkbox key={option.value} value={option.value}>\n                    {option.label}\n                  </Checkbox>\n                ))}\n              </Space>\n            </Checkbox.Group>\n          </Form.Item>\n        );\n\n      default:\n        return (\n          <Form.Item {...commonProps}>\n            <Input {...inputProps} />\n          </Form.Item>\n        );\n    }\n  };\n\n  if (loading) {\n    return (\n      <div\n        className=\"plant-questionnaire-container\"\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n          minHeight: '100vh',\n          gap: '24px'\n        }}\n      >\n        <div\n          style={{\n            background: 'white',\n            padding: '48px',\n            borderRadius: '16px',\n            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n            textAlign: 'center',\n            maxWidth: '400px'\n          }}\n        >\n          <div style={{ marginBottom: '24px' }}>\n            <div\n              style={{\n                width: '60px',\n                height: '60px',\n                margin: '0 auto 16px',\n                background: 'linear-gradient(135deg, #4f46e5, #7c3aed)',\n                borderRadius: '50%',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center'\n              }}\n            >\n              <FileTextOutlined style={{ fontSize: '24px', color: 'white' }} />\n            </div>\n            <Title level={3} style={{ margin: 0, color: '#1e293b' }}>\n              Loading Questionnaire\n            </Title>\n            <Text type=\"secondary\" style={{ fontSize: '14px' }}>\n              Preparing your workflow data...\n            </Text>\n          </div>\n\n          <div style={{ marginBottom: '16px' }}>\n            <Spin size=\"large\" />\n          </div>\n\n          <div\n            style={{\n              height: '4px',\n              background: '#e2e8f0',\n              borderRadius: '2px',\n              overflow: 'hidden'\n            }}\n          >\n            <div\n              style={{\n                height: '100%',\n                width: '30%',\n                background: 'linear-gradient(135deg, #4f46e5, #7c3aed)',\n                borderRadius: '2px',\n                animation: 'slideInFromLeft 2s ease-in-out infinite'\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!workflowData) {\n    return (\n      <Alert\n        message=\"Workflow Not Found\"\n        description=\"The requested workflow could not be loaded.\"\n        type=\"error\"\n        showIcon\n      />\n    );\n  }\n\n  // Add safety checks for questionnaire steps\n  if (templateLoading) {\n    return (\n      <div\n        className=\"plant-questionnaire-container\"\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n          minHeight: '100vh',\n          gap: '24px'\n        }}\n      >\n        <div\n          style={{\n            background: 'white',\n            padding: '48px',\n            borderRadius: '16px',\n            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n            textAlign: 'center',\n            maxWidth: '400px'\n          }}\n        >\n          <div style={{ marginBottom: '24px' }}>\n            <div\n              style={{\n                width: '60px',\n                height: '60px',\n                margin: '0 auto 16px',\n                background: 'linear-gradient(135deg, #4f46e5, #7c3aed)',\n                borderRadius: '50%',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center'\n              }}\n            >\n              <ExperimentOutlined style={{ fontSize: '24px', color: 'white' }} />\n            </div>\n            <Title level={3} style={{ margin: 0, color: '#1e293b' }}>\n              Loading Template\n            </Title>\n            <Text type=\"secondary\" style={{ fontSize: '14px' }}>\n              Preparing your plant-specific questionnaire template...\n            </Text>\n          </div>\n\n          <div style={{ marginBottom: '16px' }}>\n            <Spin size=\"large\" />\n          </div>\n\n          <div\n            style={{\n              height: '4px',\n              background: '#e2e8f0',\n              borderRadius: '2px',\n              overflow: 'hidden'\n            }}\n          >\n            <div\n              style={{\n                height: '100%',\n                width: '60%',\n                background: 'linear-gradient(135deg, #4f46e5, #7c3aed)',\n                borderRadius: '2px',\n                animation: 'slideInFromLeft 2s ease-in-out infinite'\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!questionnaireSteps || questionnaireSteps.length === 0) {\n    return (\n      <Alert\n        message=\"Template Not Available\"\n        description=\"The questionnaire template could not be loaded. Please try refreshing the page.\"\n        type=\"error\"\n        showIcon\n        action={\n          <Button size=\"small\" onClick={() => window.location.reload()}>\n            Refresh\n          </Button>\n        }\n      />\n    );\n  }\n\n  // const progress = Math.round(((currentStep + 1) / questionnaireSteps.length) * 100); // Not currently used\n  const currentStepData = questionnaireSteps[currentStep] || {\n    title: 'Loading...',\n    description: '',\n    fields: []\n  };\n\n  return (\n    <div className=\"plant-questionnaire-container\">\n      {/* Modern Header */}\n      <div className=\"plant-questionnaire-header\">\n        <div className=\"plant-questionnaire-header-content\">\n          <div className=\"plant-questionnaire-title\">\n            <Avatar size={40} style={{ background: 'linear-gradient(135deg, #667eea, #764ba2)' }}>\n              <DashboardOutlined />\n            </Avatar>\n            <div>\n              <Title level={3} style={{ margin: 0, color: '#1e293b' }}>\n                Plant Questionnaire\n              </Title>\n              <Text type=\"secondary\" style={{ fontSize: '14px' }}>\n                {workflowData?.materialCode} • {workflowData?.assignedPlant}\n              </Text>\n            </div>\n          </div>\n\n          <div className=\"plant-questionnaire-stats\">\n            <div className=\"modern-stats-card\">\n              <div\n                className=\"modern-progress-ring\"\n                style={{ '--progress': getOverallCompletionPercentage() }}\n              >\n                <svg>\n                  <defs>\n                    <linearGradient id=\"progressGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                      <stop offset=\"0%\" stopColor=\"#4f46e5\" />\n                      <stop offset=\"100%\" stopColor=\"#7c3aed\" />\n                    </linearGradient>\n                  </defs>\n                  <circle className=\"progress-circle progress-background\" cx=\"30\" cy=\"30\" r=\"26\" />\n                  <circle className=\"progress-circle progress-foreground\" cx=\"30\" cy=\"30\" r=\"26\" />\n                </svg>\n                <div\n                  style={{\n                    position: 'absolute',\n                    inset: 0,\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    fontSize: '12px',\n                    fontWeight: '600',\n                    color: '#1e293b'\n                  }}\n                >\n                  {getOverallCompletionPercentage()}%\n                </div>\n              </div>\n              <div style={{ textAlign: 'center', marginTop: 8 }}>\n                <Text style={{ fontSize: '11px', color: '#64748b' }}>Overall Progress</Text>\n              </div>\n            </div>\n\n            <div className=\"modern-stats-card\">\n              <div\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  marginBottom: 8\n                }}\n              >\n                <Badge\n                  count={queries.filter(q => q.status === 'OPEN').length}\n                  style={{\n                    backgroundColor:\n                      queries.filter(q => q.status === 'OPEN').length > 0 ? '#ef4444' : '#10b981'\n                  }}\n                >\n                  <Avatar\n                    icon={<QuestionCircleOutlined />}\n                    style={{\n                      backgroundColor:\n                        queries.filter(q => q.status === 'OPEN').length > 0 ? '#fef2f2' : '#f0fdf4',\n                      color:\n                        queries.filter(q => q.status === 'OPEN').length > 0 ? '#ef4444' : '#10b981'\n                    }}\n                  />\n                </Badge>\n              </div>\n              <Text\n                style={{\n                  fontSize: '11px',\n                  color: '#64748b',\n                  display: 'block',\n                  textAlign: 'center'\n                }}\n              >\n                Open Queries\n              </Text>\n            </div>\n\n            <div className=\"modern-stats-card\">\n              <div style={{ textAlign: 'center' }}>\n                <div\n                  className={`modern-completion-badge ${getOverallCompletionPercentage() >= 80\n                    ? 'high'\n                    : getOverallCompletionPercentage() >= 50\n                      ? 'medium'\n                      : 'low'\n                    }`}\n                >\n                  Step {currentStep + 1}/{questionnaireSteps.length}\n                </div>\n                <Text\n                  style={{ fontSize: '11px', color: '#64748b', display: 'block', marginTop: 4 }}\n                >\n                  Current Step\n                </Text>\n              </div>\n            </div>\n\n            {/* Header Actions */}\n            <Space>\n              <Button\n                className=\"modern-btn modern-btn-secondary\"\n                icon={<SaveOutlined />}\n                onClick={() => handleSaveDraft()}\n                loading={saving}\n              >\n                Save Draft\n              </Button>\n              {process.env.NODE_ENV === 'development' && (\n                <Button\n                  className=\"modern-btn modern-btn-secondary\"\n                  icon={<BugOutlined />}\n                  onClick={debugPlantData}\n                  title=\"Debug Plant Data (Ctrl+Shift+D)\"\n                >\n                  Debug\n                </Button>\n              )}\n              {isMobile && (\n                <Button\n                  className=\"modern-btn modern-btn-secondary\"\n                  icon={<MenuOutlined />}\n                  onClick={() => setSidebarVisible(true)}\n                >\n                  Steps\n                </Button>\n              )}\n            </Space>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"plant-questionnaire-main\">\n        {/* Sidebar - Steps Navigation */}\n        {!isMobile && (\n          <div className=\"plant-questionnaire-sidebar\">\n            <Card className=\"modern-steps-card\">\n              <div className=\"modern-steps-header\">\n                <Title level={4} style={{ margin: 0, color: '#1e293b' }}>\n                  Questionnaire Steps\n                </Title>\n                <Text type=\"secondary\" style={{ fontSize: '12px', display: 'block', marginBottom: '4px' }}>\n                  {completedSteps.size} of {questionnaireSteps.length} steps completed\n                </Text>\n                <Text type=\"secondary\" style={{ fontSize: '11px', display: 'block', marginTop: '2px' }}>\n                  {(() => {\n                    const fieldStats = getTotalFieldsPopulated();\n                    return `${fieldStats.populated} of ${fieldStats.total} fields populated`;\n                  })()}\n                </Text>\n              </div>\n\n              <div className=\"modern-steps-list\">\n                {questionnaireSteps.map((step, index) => {\n                  const stepStatus = getStepCompletionStatus(index);\n                  const hasOpenQueries = queries.some(\n                    q => q.stepNumber === index && q.status === 'OPEN'\n                  );\n                  const isActive = index === currentStep;\n                  const isCompleted = stepStatus.isComplete;\n\n                  return (\n                    <div\n                      key={index}\n                      className={`modern-step-item ${isActive ? 'active' : ''} ${isCompleted ? 'completed' : ''}`}\n                      onClick={() => handleStepChange(index)}\n                    >\n                      <div\n                        className={`step-completion-ring ${isCompleted ? 'completed' : ''}`}\n                        style={{\n                          '--completion-angle': `${(stepStatus.requiredCompleted / Math.max(stepStatus.required, 1)) * 360}deg`,\n                          background: isActive ? '#4f46e5' : isCompleted ? '#10b981' : '#f1f5f9',\n                          color: isActive || isCompleted ? 'white' : '#64748b'\n                        }}\n                      >\n                        {isCompleted ? (\n                          <CheckCircleOutlined />\n                        ) : hasOpenQueries ? (\n                          <ExclamationCircleOutlined />\n                        ) : (\n                          stepIcons[step.title] || <FileTextOutlined />\n                        )}\n                      </div>\n                      <div style={{ flex: 1, minWidth: 0 }}>\n                        <div style={{ fontWeight: isActive ? 600 : 400, color: '#1e293b' }}>\n                          {step.title}\n                        </div>\n                        <div style={{ fontSize: '12px', color: '#64748b', marginTop: 2 }}>\n                          {stepStatus.completed}/{stepStatus.total} fields (\n                          {stepStatus.requiredCompleted}/{stepStatus.required} required)\n                          {hasOpenQueries && (\n                            <Tag color=\"red\" size=\"small\" style={{ marginLeft: 4 }}>\n                              {\n                                queries.filter(q => q.stepNumber === index && q.status === 'OPEN')\n                                  .length\n                              }{' '}\n                              queries\n                            </Tag>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </Card>\n\n            {/* Material Context Panel */}\n            <div style={{ marginTop: 16 }}>\n              <MaterialContextPanel workflowData={workflowData} />\n            </div>\n          </div>\n        )}\n\n        {/* Main Form Content */}\n        <div className=\"plant-questionnaire-content\">\n          <Card className=\"modern-form-card\">\n            <div className=\"modern-form-header\">\n              <div>\n                <Title level={2} style={{ margin: 0, color: 'white' }}>\n                  {currentStepData.title}\n                </Title>\n                <Paragraph style={{ margin: '8px 0 0 0', color: 'rgba(255, 255, 255, 0.8)' }}>\n                  {currentStepData.description}\n                </Paragraph>\n              </div>\n\n              <div className=\"modern-progress-container\">\n                <Progress\n                  className=\"modern-progress\"\n                  percent={(() => {\n                    const status = getStepCompletionStatus(currentStep);\n                    return status.required > 0\n                      ? Math.round((status.requiredCompleted / status.required) * 100)\n                      : 100;\n                  })()}\n                  showInfo={false}\n                  strokeColor=\"rgba(255, 255, 255, 0.9)\"\n                  trailColor=\"rgba(255, 255, 255, 0.2)\"\n                />\n                <Text style={{ color: 'rgba(255, 255, 255, 0.8)', fontSize: '12px' }}>\n                  Step Progress:{' '}\n                  {(() => {\n                    const status = getStepCompletionStatus(currentStep);\n                    return `${status.requiredCompleted}/${status.required} required fields`;\n                  })()}\n                </Text>\n              </div>\n            </div>\n\n            {/* Offline Indicator */}\n            {isOffline && (\n              <Alert\n                className=\"modern-alert modern-alert-warning\"\n                message=\"Offline Mode\"\n                description=\"You are currently offline. Changes will be saved locally and synced when connection is restored.\"\n                type=\"warning\"\n                showIcon\n                style={{ margin: '16px 32px' }}\n                closable\n              />\n            )}\n\n\n\n            <div\n              className={`modern-form-content ${currentStep % 2 === 0 ? 'slide-in-from-right' : 'slide-in-from-left'}`}\n            >\n              <Form\n                form={form}\n                layout=\"vertical\"\n                onValuesChange={(changedValues, allValues) => {\n                  setFormData(prev => ({ ...prev, ...allValues }));\n                  setPendingChanges(true);\n                  _setProgressUpdateTrigger(prev => prev + 1);\n\n                  // Trigger completion status update\n                  setTimeout(() => {\n                    if (questionnaireSteps.length > 0) {\n                      const newCompletedSteps = new Set();\n\n                      questionnaireSteps.forEach((step, index) => {\n                        const stepFields = step.fields || [];\n\n                        // Filter out CQS auto-populated fields for step completion calculation\n                        const userEditableFields = stepFields.filter(field => !field.isCqsAutoPopulated && !field.disabled);\n                        const requiredFields = userEditableFields.filter(field => field.required);\n\n                        const completedRequiredFields = requiredFields.filter(field => {\n                          const value = allValues[field.name];\n                          if (Array.isArray(value)) {\n                            return value.length > 0;\n                          }\n                          return value && value !== '' && value !== null && value !== undefined;\n                        });\n\n                        // Mark step as complete based on field completion\n                        if (requiredFields.length > 0) {\n                          // If there are required fields, all must be completed\n                          if (completedRequiredFields.length === requiredFields.length) {\n                            newCompletedSteps.add(index);\n                          }\n                        } else {\n                          // If no required fields, mark complete if at least 50% of user-editable fields are filled\n                          const completedOptionalFields = userEditableFields.filter(field => {\n                            const value = allValues[field.name];\n                            if (Array.isArray(value)) {\n                              return value.length > 0;\n                            }\n                            return value && value !== '' && value !== null && value !== undefined;\n                          });\n\n                          const completionPercentage =\n                            userEditableFields.length > 0\n                              ? (completedOptionalFields.length / userEditableFields.length) * 100\n                              : 0;\n\n                          if (completionPercentage >= 50) {\n                            newCompletedSteps.add(index);\n                          }\n                        }\n                      });\n\n                      // Step completion updated on form change\n\n                      setCompletedSteps(newCompletedSteps);\n                    }\n                  }, 100); // Small delay to ensure form state is updated\n                }}\n              >\n                <Row gutter={[24, 24]}>\n                  {(currentStepData.fields || []).map((field, index) => (\n                    <Col\n                      key={field.name}\n                      xs={24}\n                      sm={field.type === 'textarea' ? 24 : 12}\n                      md={field.type === 'textarea' ? 24 : 12}\n                    >\n                      <div\n                        className={`modern-field-group ${field.required ? 'required' : ''} ${field.isCqsAutoPopulated ? 'cqs-populated' : ''} fade-in-up`}\n                        style={{ animationDelay: `${index * 0.1}s` }}\n                      >\n                        <div className=\"modern-field-header\">\n                          <div style={{ flex: 1, minWidth: 0 }}>{renderField(field)}</div>\n                          <div className=\"modern-field-actions\">\n                            {field.isCqsAutoPopulated && (\n                              <Tooltip title=\"CQS Auto-populated\">\n                                <div\n                                  style={{\n                                    background: 'linear-gradient(135deg, #10b981, #059669)',\n                                    color: 'white',\n                                    padding: '2px 6px',\n                                    borderRadius: '4px',\n                                    fontSize: '10px',\n                                    fontWeight: '500'\n                                  }}\n                                >\n                                  CQS\n                                </div>\n                              </Tooltip>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </Col>\n                  ))}\n                </Row>\n              </Form>\n            </div>\n\n            {/* Navigation */}\n            <div className=\"modern-navigation\">\n              <Button\n                className=\"modern-btn modern-btn-secondary\"\n                icon={<ArrowLeftOutlined />}\n                onClick={handlePrevious}\n                disabled={currentStep === 0}\n                style={{\n                  opacity: currentStep === 0 ? 0.5 : 1,\n                  cursor: currentStep === 0 ? 'not-allowed' : 'pointer'\n                }}\n              >\n                Previous\n              </Button>\n\n              <div style={{ display: 'flex', alignItems: 'center', gap: 16 }}>\n                <div style={{ textAlign: 'center' }}>\n                  <Text type=\"secondary\" style={{ fontSize: '12px', display: 'block' }}>\n                    Step Progress\n                  </Text>\n                  <Text style={{ fontSize: '14px', fontWeight: '600', color: '#1e293b' }}>\n                    {currentStep + 1} of {questionnaireSteps.length}\n                  </Text>\n                </div>\n\n                {pendingChanges && (\n                  <div\n                    style={{\n                      padding: '4px 8px',\n                      background: '#fef3c7',\n                      border: '1px solid #fde68a',\n                      borderRadius: '6px',\n                      fontSize: '11px',\n                      color: '#92400e'\n                    }}\n                  >\n                    Unsaved changes\n                  </div>\n                )}\n\n\n\n                {currentStep === questionnaireSteps.length - 1 ? (\n                  <Button\n                    className={`modern-btn modern-btn-primary ${getOverallCompletionPercentage() === 100 ? 'pulse-glow' : ''}`}\n                    onClick={handleSubmit}\n                    loading={submitting}\n                    size=\"large\"\n                    style={{ minWidth: '160px' }}\n                  >\n                    {submitting ? 'Submitting...' : 'Submit Questionnaire'}\n                  </Button>\n                ) : (\n                  <Button\n                    className=\"modern-btn modern-btn-primary\"\n                    icon={<ArrowRightOutlined />}\n                    onClick={handleNext}\n                    style={{ minWidth: '120px' }}\n                  >\n                    Next Step\n                  </Button>\n                )}\n              </div>\n            </div>\n          </Card>\n        </div>\n      </div>\n\n      {/* Mobile Sidebar Drawer */}\n      <Drawer\n        className=\"modern-drawer\"\n        title=\"Questionnaire Steps\"\n        placement=\"left\"\n        onClose={() => setSidebarVisible(false)}\n        open={sidebarVisible}\n        width={320}\n      >\n        <div className=\"modern-timeline\">\n          <Timeline>\n            {questionnaireSteps.map((step, index) => {\n              const stepStatus = getStepCompletionStatus(index);\n              const hasOpenQueries = queries.some(\n                q => q.stepNumber === index && q.status === 'OPEN'\n              );\n              const isActive = index === currentStep;\n              const isCompleted = stepStatus.isComplete;\n\n              return (\n                <Timeline.Item\n                  key={index}\n                  color={isCompleted ? '#10b981' : isActive ? '#667eea' : '#cbd5e1'}\n                  dot={\n                    isCompleted ? (\n                      <CheckCircleOutlined style={{ color: '#10b981' }} />\n                    ) : hasOpenQueries ? (\n                      <ExclamationCircleOutlined style={{ color: '#ef4444' }} />\n                    ) : (\n                      stepIcons[step.title] || <FileTextOutlined />\n                    )\n                  }\n                >\n                  <div\n                    onClick={() => {\n                      handleStepChange(index);\n                      setSidebarVisible(false);\n                    }}\n                    style={{ cursor: 'pointer', padding: '8px 0' }}\n                  >\n                    <Text strong={isActive} style={{ color: isActive ? '#667eea' : '#1e293b' }}>\n                      {step.title}\n                    </Text>\n                    <div style={{ fontSize: '12px', color: '#64748b', marginTop: 4 }}>\n                      {stepStatus.completed}/{stepStatus.total} fields completed (\n                      {stepStatus.requiredCompleted}/{stepStatus.required} required)\n                      {hasOpenQueries && (\n                        <Tag color=\"red\" size=\"small\" style={{ marginLeft: 4 }}>\n                          {\n                            queries.filter(q => q.stepNumber === index && q.status === 'OPEN')\n                              .length\n                          }{' '}\n                          queries\n                        </Tag>\n                      )}\n                    </div>\n                  </div>\n                </Timeline.Item>\n              );\n            })}\n          </Timeline>\n        </div>\n      </Drawer>\n\n      {/* Modern Floating Completion Indicator */}\n      {!isMobile && (\n        <div className=\"modern-floating-indicator\">\n          <div style={{ textAlign: 'center', marginBottom: 12 }}>\n            <Text strong style={{ color: '#1e293b', fontSize: '14px' }}>\n              Questionnaire Progress\n            </Text>\n          </div>\n          <div style={{ display: 'flex', alignItems: 'center', gap: 12, marginBottom: 8 }}>\n            <div\n              className=\"modern-progress-ring\"\n              style={{\n                '--progress': getOverallCompletionPercentage(),\n                width: '40px',\n                height: '40px'\n              }}\n            >\n              <svg>\n                <circle className=\"progress-circle progress-background\" cx=\"20\" cy=\"20\" r=\"16\" />\n                <circle className=\"progress-circle progress-foreground\" cx=\"20\" cy=\"20\" r=\"16\" />\n              </svg>\n              <div\n                style={{\n                  position: 'absolute',\n                  inset: 0,\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  fontSize: '10px',\n                  fontWeight: '600',\n                  color: '#1e293b'\n                }}\n              >\n                {getOverallCompletionPercentage()}%\n              </div>\n            </div>\n            <div>\n              <div style={{ fontSize: '12px', color: '#1e293b', fontWeight: '500', marginBottom: '4px' }}>\n                {completedSteps.size} of {questionnaireSteps.length} steps\n              </div>\n              <div style={{ fontSize: '11px', color: '#64748b', marginBottom: '2px' }}>\n                {(() => {\n                  const fieldStats = getTotalFieldsPopulated();\n                  return `${fieldStats.populated}/${fieldStats.total} fields`;\n                })()}\n              </div>\n              <div style={{ fontSize: '11px', color: '#64748b' }}>\n                {queries.filter(q => q.status === 'OPEN').length} open queries\n              </div>\n            </div>\n          </div>\n          <div\n            style={{\n              height: '2px',\n              background: '#e2e8f0',\n              borderRadius: '1px',\n              overflow: 'hidden'\n            }}\n          >\n            <div\n              style={{\n                height: '100%',\n                width: `${getOverallCompletionPercentage()}%`,\n                background: 'linear-gradient(135deg, #4f46e5, #7c3aed)',\n                transition: 'width 0.5s ease'\n              }}\n            />\n          </div>\n        </div>\n      )}\n\n      {/* Floating Action Buttons */}\n      <div className=\"modern-floating-actions\">\n        <FloatButton.Group\n          trigger=\"hover\"\n          type=\"primary\"\n          style={{ right: 24 }}\n          icon={<SettingOutlined />}\n        >\n          <FloatButton\n            icon={<SaveOutlined />}\n            tooltip=\"Save Draft\"\n            onClick={() => handleSaveDraft()}\n          />\n          <FloatButton\n            icon={<DashboardOutlined />}\n            tooltip=\"Summary\"\n            onClick={() => {\n              const summaryData = questionnaireSteps.map((step, index) => {\n                const status = getStepCompletionStatus(index);\n                const stepQueries = queries.filter(q => q.stepNumber === index);\n                return {\n                  step: index + 1,\n                  title: step.title,\n                  completed: status.requiredCompleted,\n                  required: status.required,\n                  percentage:\n                    status.required > 0\n                      ? Math.round((status.requiredCompleted / status.required) * 100)\n                      : 100,\n                  openQueries: stepQueries.filter(q => q.status === 'OPEN').length,\n                  resolvedQueries: stepQueries.filter(q => q.status === 'RESOLVED').length\n                };\n              });\n\n              Modal.info({\n                title: 'Questionnaire Summary',\n                width: 600,\n                content: (\n                  <div>\n                    <div style={{ marginBottom: 16 }}>\n                      <Text strong>Overall Progress: {getOverallCompletionPercentage()}%</Text>\n                    </div>\n                    {summaryData.map(step => (\n                      <div\n                        key={step.step}\n                        style={{\n                          marginBottom: 12,\n                          padding: '12px 16px',\n                          background:\n                            step.percentage === 100\n                              ? 'linear-gradient(135deg, #f0fdf4, #dcfce7)'\n                              : 'linear-gradient(135deg, #fffbeb, #fef3c7)',\n                          border: `1px solid ${step.percentage === 100 ? '#bbf7d0' : '#fde68a'}`,\n                          borderRadius: '8px'\n                        }}\n                      >\n                        <div\n                          style={{\n                            display: 'flex',\n                            justifyContent: 'space-between',\n                            alignItems: 'center'\n                          }}\n                        >\n                          <Text strong>\n                            Step {step.step}: {step.title}\n                          </Text>\n                          <Tag color={step.percentage === 100 ? 'green' : 'orange'}>\n                            {step.percentage}%\n                          </Tag>\n                        </div>\n                        <div style={{ fontSize: '12px', color: '#666', marginTop: 4 }}>\n                          {step.completed}/{step.required} required fields completed\n                          {step.openQueries > 0 && (\n                            <span style={{ color: '#ef4444', marginLeft: 8 }}>\n                              • {step.openQueries} open queries\n                            </span>\n                          )}\n                          {step.resolvedQueries > 0 && (\n                            <span style={{ color: '#10b981', marginLeft: 8 }}>\n                              • {step.resolvedQueries} resolved queries\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )\n              });\n            }}\n          />\n          <FloatButton\n            icon={autoSaveEnabled ? <CloudSyncOutlined /> : <DisconnectOutlined />}\n            tooltip={autoSaveEnabled ? 'Auto-save ON' : 'Auto-save OFF'}\n            onClick={() => setAutoSaveEnabled(!autoSaveEnabled)}\n          />\n        </FloatButton.Group>\n      </div>\n\n      {/* Query Raising Modal */}\n      <QueryRaisingModal\n        open={queryModalVisible}\n        onCancel={() => {\n          setQueryModalVisible(false);\n          setSelectedField(null);\n        }}\n        onSubmit={handleQueryCreated}\n        workflowId={workflowId}\n        fieldContext={selectedField}\n      />\n    </div>\n  );\n};\n\nexport default PlantQuestionnaire;\n","import { Typography, Button, Space, Modal, Select, message } from 'antd';\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport PlantErrorBoundary from '../components/ErrorBoundaries/PlantErrorBoundary';\nimport FilterPanel from '../components/Plant/FilterPanel';\nimport PlantDashboard from '../components/Plant/PlantDashboard';\nimport WorkflowTable from '../components/Plant/WorkflowTable';\nimport PlantQuestionnaire from '../components/PlantQuestionnaire';\nimport { PlantOnly } from '../components/RoleBasedComponent';\nimport { usePlantWorkflows } from '../hooks/usePlantWorkflows';\nimport { useRoleBasedAccess } from '../hooks/useRoleBasedAccess';\nimport { useWorkflowFilters } from '../hooks/useWorkflowFilters';\nimport { getCurrentUser, isAuthenticated } from '../services/auth';\nimport { masterDataAPI } from '../services/masterDataAPI';\nimport { userAPI } from '../services/userAPI';\nimport { workflowAPI } from '../services/workflowAPI';\n\nconst { Title } = Typography;\nconst { Option } = Select;\n\nconst PlantView = () => {\n  const [selectedWorkflow, setSelectedWorkflow] = useState(null);\n  const [questionnaireVisible, setQuestionnaireVisible] = useState(false);\n  const [currentPlant, setCurrentPlant] = useState(null);\n  const [userPlantData, setUserPlantData] = useState(null);\n  const [availablePlants, setAvailablePlants] = useState([]);\n\n  // Use role-based access control\n  const { isPlantUser, isAdmin, userPlants, primaryPlant, filterByPlantAccess } = useRoleBasedAccess();\n\n  // Use custom hooks for workflow management and filtering\n  const {\n    workflows,\n    loading,\n    error,\n    dashboardStats,\n    refreshWorkflows\n  } = usePlantWorkflows(currentPlant, userPlantData);\n\n  const {\n    filteredWorkflows,\n    searchText,\n    statusFilter,\n    completionFilter,\n    updateSearchText,\n    updateStatusFilter,\n    updateCompletionFilter,\n    clearAllFilters,\n    applyPreset,\n    saveFilters,\n    filterPresets,\n    filterSummary\n  } = useWorkflowFilters(workflows);\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    const fetchData = async () => {\n      try {\n        await loadUserPlantData(controller.signal);\n      } catch (error) {\n        if (!controller.signal.aborted) {\n          console.error('Error loading user plant data:', error);\n        }\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      controller.abort();\n    };\n  }, []);\n\n  const loadUserPlantData = async signal => {\n    try {\n      // Check if user is authenticated first\n      if (!isAuthenticated()) {\n        console.warn('User is not authenticated');\n        message.error('You are not logged in. Please log in to access the plant dashboard.');\n        return;\n      }\n\n      const currentUser = getCurrentUser();\n      if (!currentUser) {\n        console.warn('No current user found');\n        message.error('Unable to identify current user. Please log in again.');\n        return;\n      }\n\n      console.log('Loading plant data for user:', currentUser);\n\n      // Load user plant assignments and location master data in parallel\n      const [plantData, locations] = await Promise.all([\n        userAPI.getUserPlantAssignments(currentUser, { signal }),\n        masterDataAPI.getAllLocations({ signal })\n      ]);\n\n      console.log('User plant data received:', plantData);\n      console.log('Assigned plants:', plantData?.assignedPlants);\n      console.log('Primary plant:', plantData?.primaryPlant);\n      setUserPlantData(plantData);\n\n      // Set current plant to user's primary plant (or first assigned plant if no primary)\n      const effectivePlant = plantData.primaryPlant || (plantData.assignedPlants && plantData.assignedPlants[0]);\n      if (effectivePlant && plantData.assignedPlants && plantData.assignedPlants.includes(effectivePlant)) {\n        setCurrentPlant(effectivePlant);\n        localStorage.setItem('userPlant', effectivePlant);\n        console.log('Set current plant to primary/effective plant:', effectivePlant);\n      } else if (plantData.assignedPlants && plantData.assignedPlants.length > 0) {\n        // Fallback to first assigned plant if primary is not available\n        const firstPlant = plantData.assignedPlants[0];\n        setCurrentPlant(firstPlant);\n        localStorage.setItem('userPlant', firstPlant);\n        console.log('Set current plant to first assigned plant:', firstPlant);\n      }\n\n      // Update available plants to only show assigned plants with descriptions\n      if (plantData.assignedPlants && plantData.assignedPlants.length > 0) {\n        const plantOptions = plantData.assignedPlants.map(plantCode => {\n          const location = locations.find(loc => loc.locationCode === plantCode);\n          const isPrimary = plantCode === plantData.primaryPlant;\n          return {\n            value: plantCode,\n            label: location\n              ? `${plantCode} - ${location.description}${isPrimary ? ' (Primary)' : ''}`\n              : `${plantCode}${isPrimary ? ' (Primary)' : ''}`\n          };\n        });\n        setAvailablePlants(plantOptions);\n        console.log('Available plants set:', plantOptions);\n      }\n    } catch (error) {\n      console.error('Failed to load user plant data:', error);\n      // Set empty plant data to trigger the \"no assignments\" message\n      setUserPlantData({\n        assignedPlants: [],\n        primaryPlant: null,\n        effectivePlant: null,\n        isPlantUser: false\n      });\n      setAvailablePlants([]);\n      setCurrentPlant(null);\n      message.error('Unable to load plant assignments. Please contact administrator to assign plants to your user.');\n    }\n  };\n\n\n\n  const handlePlantChange = useCallback((newPlantCode) => {\n    // Validate that user is assigned to this plant\n    if (userPlantData && !userPlantData.assignedPlants.includes(newPlantCode)) {\n      message.error(`You are not assigned to plant: ${newPlantCode}`);\n      return;\n    }\n\n    localStorage.setItem('userPlant', newPlantCode);\n    setCurrentPlant(newPlantCode);\n    message.success(`Switched to plant: ${newPlantCode}`);\n  }, [userPlantData]);\n\n  const handleStartQuestionnaire = useCallback((workflow) => {\n    setSelectedWorkflow(workflow);\n    setQuestionnaireVisible(true);\n  }, []);\n\n  const handleQuestionnaireComplete = useCallback((_formData) => {\n    setQuestionnaireVisible(false);\n    setSelectedWorkflow(null);\n    refreshWorkflows(); // Refresh the list\n    message.success('Questionnaire completed successfully!');\n  }, [refreshWorkflows]);\n\n  const handleSaveDraft = useCallback((_formData) => {\n    message.success('Draft saved successfully');\n  }, []);\n\n\n\n  // Check if user is authenticated\n  if (!isAuthenticated()) {\n    return (\n      <PlantOnly>\n        <div style={{ padding: 24, textAlign: 'center' }}>\n          <Title level={3}>Authentication Required</Title>\n          <p>You need to be logged in to access the plant dashboard.</p>\n          <Button\n            type=\"primary\"\n            onClick={() => window.location.href = '/qrmfg/login'}\n          >\n            Go to Login\n          </Button>\n        </div>\n      </PlantOnly>\n    );\n  }\n\n  // Show loading state while plant data is being fetched\n  if (userPlantData === null) {\n    return (\n      <PlantOnly>\n        <div style={{ padding: 24, textAlign: 'center' }}>\n          <Title level={3}>Loading Plant Assignments...</Title>\n          <p>Please wait while we load your plant assignments.</p>\n        </div>\n      </PlantOnly>\n    );\n  }\n\n  // Show message if user has no plant assignments\n  if (userPlantData && (!userPlantData.assignedPlants || userPlantData.assignedPlants.length === 0)) {\n    return (\n      <PlantOnly>\n        <div style={{ padding: 24, textAlign: 'center' }}>\n          <Title level={3}>No Plant Assignments</Title>\n          <p>You are not assigned to any plants. Please contact your administrator to assign plants to your user account.</p>\n          <div style={{ marginTop: 16, padding: 16, background: '#f5f5f5', borderRadius: 4 }}>\n            <p><strong>Debug Info:</strong></p>\n            <p>Current User: {getCurrentUser()}</p>\n            <p>Is Authenticated: {isAuthenticated().toString()}</p>\n            <p>User Plant Data: {JSON.stringify(userPlantData, null, 2)}</p>\n            <Space>\n              <Button\n                onClick={() => {\n                  console.log('Current user:', getCurrentUser());\n                  console.log('User plant data:', userPlantData);\n                  console.log('Available plants:', availablePlants);\n                  loadUserPlantData();\n                }}\n              >\n                Debug & Retry\n              </Button>\n              <Button\n                type=\"primary\"\n                onClick={async () => {\n                  try {\n                    const currentUser = getCurrentUser();\n                    if (!currentUser) {\n                      message.error('No current user found');\n                      return;\n                    }\n\n                    // Try to fix the plant assignments by setting assignedPlants to match primaryPlant\n                    const primaryPlant = '1102'; // From the token validation response\n                    const assignedPlants = [primaryPlant];\n\n                    await userAPI.updateUserPlantAssignments(currentUser, {\n                      assignedPlants,\n                      primaryPlant\n                    });\n\n                    message.success('Plant assignments fixed! Please refresh the page or log out and log back in.');\n                    await loadUserPlantData();\n                  } catch (error) {\n                    console.error('Failed to assign plants:', error);\n                    if (error.status === 403) {\n                      message.error('You need admin permissions to assign plants. Please ask an administrator to assign plants to your user account.');\n                    } else {\n                      message.error(`Failed to assign plants: ${error.message}`);\n                    }\n                  }\n                }}\n              >\n                Fix Plant Assignments (Admin Required)\n              </Button>\n              <Button\n                onClick={() => {\n                  message.info('Logging out to refresh token...');\n                  localStorage.clear();\n                  sessionStorage.clear();\n                  window.location.href = '/qrmfg/login';\n                }}\n              >\n                Logout & Re-login\n              </Button>\n            </Space>\n          </div>\n        </div>\n      </PlantOnly>\n    );\n  }\n\n  return (\n    <PlantOnly>\n      <PlantErrorBoundary plantCode={currentPlant}>\n        <div style={{ padding: 24 }}>\n          {/* Header */}\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              marginBottom: 24\n            }}\n          >\n            <Title level={2} style={{ margin: 0 }}>\n              Plant Dashboard\n            </Title>\n            <div style={{ display: 'flex', alignItems: 'center', gap: 16 }}>\n              <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>\n                <span style={{ fontSize: '14px', fontWeight: '500' }}>Plant:</span>\n                <Select\n                  value={currentPlant}\n                  onChange={handlePlantChange}\n                  style={{ width: 250 }}\n                  size=\"small\"\n                  disabled={!userPlantData || availablePlants.length <= 1}\n                  showSearch\n                  filterOption={(input, option) =>\n                    option?.children?.toLowerCase().includes(input.toLowerCase())\n                  }\n                  placeholder=\"Select assigned plant\"\n                >\n                  {availablePlants.map(plant => (\n                    <Option key={plant.value} value={plant.value}>\n                      {plant.label}\n                    </Option>\n                  ))}\n                </Select>\n              </div>\n              <Space>\n                <Button onClick={refreshWorkflows} loading={loading}>\n                  Refresh Data\n                </Button>\n              </Space>\n            </div>\n          </div>\n\n          {/* Dashboard Statistics */}\n          {currentPlant ? (\n            <PlantDashboard\n              dashboardStats={dashboardStats}\n              loading={loading}\n              error={error}\n              currentPlant={currentPlant}\n              onRefresh={refreshWorkflows}\n            />\n          ) : (\n            <div style={{ textAlign: 'center', padding: '40px 0', color: '#999' }}>\n              <Title level={4}>Select a Plant</Title>\n              <p>Please select a plant from the dropdown above to view the dashboard and assigned materials.</p>\n            </div>\n          )}\n\n          {/* Filter Panel and Workflows Table - only show when plant is selected */}\n          {currentPlant && (\n            <>\n              <FilterPanel\n                searchText={searchText}\n                statusFilter={statusFilter}\n                completionFilter={completionFilter}\n                onSearchTextChange={updateSearchText}\n                onStatusFilterChange={updateStatusFilter}\n                onCompletionFilterChange={updateCompletionFilter}\n                onClearFilters={clearAllFilters}\n                onApplyPreset={applyPreset}\n                onSaveFilters={saveFilters}\n                filterPresets={filterPresets}\n                filterSummary={filterSummary}\n              />\n\n              <WorkflowTable\n                workflows={filteredWorkflows}\n                loading={loading}\n                onStartQuestionnaire={handleStartQuestionnaire}\n                onRefresh={refreshWorkflows}\n              />\n            </>\n          )}\n\n          {/* Questionnaire Modal */}\n          <Modal\n            title={`Material Questionnaire - ${selectedWorkflow?.materialCode}`}\n            open={questionnaireVisible}\n            onCancel={() => {\n              setQuestionnaireVisible(false);\n              setSelectedWorkflow(null);\n            }}\n            footer={null}\n            width=\"95%\"\n            style={{ top: 20 }}\n            destroyOnClose\n          >\n            {selectedWorkflow && (\n              <PlantQuestionnaire\n                workflowId={selectedWorkflow.id}\n                onComplete={handleQuestionnaireComplete}\n                onSaveDraft={handleSaveDraft}\n              />\n            )}\n          </Modal>\n        </div>\n      </PlantErrorBoundary>\n    </PlantOnly>\n  );\n};\n\nexport default PlantView;\n","import { message } from 'antd';\nimport { useState, useEffect, useCallback } from 'react';\n\nimport { WORKFLOW_SPECIFIC_STATES, WORKFLOW_STATES } from '../constants';\nimport { getCurrentUser } from '../services/auth';\nimport { workflowAPI } from '../services/workflowAPI';\nimport { recalculateWorkflowProgress, getTemplateFieldCounts, calculateCorrectFieldCounts } from '../utils/questionnaireUtils';\n\n/**\n * Custom hook for managing plant workflow data and operations\n * Handles workflow fetching, state management, and dashboard statistics\n */\nexport const usePlantWorkflows = (currentPlant, userPlantData) => {\n  const [workflows, setWorkflows] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [dashboardStats, setDashboardStats] = useState({\n    totalWorkflows: 0,\n    completedCount: 0,\n    inProgressCount: 0,\n    draftCount: 0,\n    averageCompletion: 0,\n    completedToday: 0\n  });\n\n    /**\n   * Get current plant from localStorage or default\n   */\n    const getCurrentPlant = useCallback(() => {\n        const storedPlant = localStorage.getItem('userPlant');\n        const storedUser = localStorage.getItem('username');\n    \n        console.log('Plant detection:', {\n          storedPlant,\n          storedUser,\n          localStorage: Object.keys(localStorage)\n        });\n    \n        return storedPlant || '1102';\n      }, []);\n    \n\n  /**\n   * Load plant workflows with proper error handling and AbortController cleanup\n   */\n  const loadPlantWorkflows = useCallback(async (signal) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const plantCode = currentPlant || getCurrentPlant();\n\n      if (!plantCode) {\n        console.warn('No plant code available for loading workflows');\n        setWorkflows([]);\n        setDashboardStats({\n          totalWorkflows: 0,\n          completedCount: 0,\n          inProgressCount: 0,\n          draftCount: 0,\n          averageCompletion: 0,\n          completedToday: 0\n        });\n        return;\n      }\n\n      console.log('Loading workflows for plant:', plantCode);\n\n      let dashboardData;\n      let workflowsWithProgress = [];\n\n      try {\n        // Try to get plant dashboard data with progress information\n        dashboardData = await workflowAPI.getPlantDashboardData(plantCode, { signal });\n        console.log('Received dashboard data:', dashboardData);\n\n        // Transform the data to match the expected format and filter by current plant\n        workflowsWithProgress = dashboardData.workflows\n          .filter(workflow => workflow.plantCode === plantCode) // Only show workflows for current plant\n          .map(workflow => {\n            // Recalculate progress with correct field counts (excluding CQS auto-populated fields)\n            const correctedWorkflow = recalculateWorkflowProgress(workflow, workflow.plantInputs);\n            \n            // Determine the correct completion status based on actual progress\n            let completionStatus;\n            if (workflow.isSubmitted || correctedWorkflow.completionPercentage === 100) {\n              completionStatus = 'COMPLETED';\n            } else if (correctedWorkflow.completionPercentage > 0) {\n              completionStatus = 'IN_PROGRESS';\n            } else {\n              completionStatus = 'DRAFT';\n            }\n\n            return {\n              id: workflow.workflowId,\n              materialCode: workflow.materialCode,\n              plantCode: workflow.plantCode,\n              currentState: workflow.isSubmitted\n                ? WORKFLOW_STATES.COMPLETED\n                : WORKFLOW_SPECIFIC_STATES.PLANT_PENDING,\n              completionStatus,\n              completionPercentage: correctedWorkflow.completionPercentage,\n              totalFields: correctedWorkflow.totalFields,\n              completedFields: correctedWorkflow.completedFields,\n              requiredFields: workflow.requiredFields || 0,\n              completedRequiredFields: workflow.completedRequiredFields || 0,\n              lastModified: workflow.lastModified,\n              submittedAt: workflow.submittedAt,\n              submittedBy: workflow.submittedBy,\n              isSubmitted: workflow.isSubmitted,\n              isCompleted: workflow.isCompleted,\n              openQueries: workflow.openQueries || 0,\n              assignedPlant: workflow.plantCode,\n              materialName: workflow.materialName,\n              itemDescription: workflow.itemDescription\n            };\n          });\n      } catch (plantDataError) {\n        console.warn(\n          'Failed to load plant-specific data, falling back to regular workflows:',\n          plantDataError\n        );\n\n        // Fallback: Load workflows by plant directly\n        try {\n          const plantWorkflows = await workflowAPI.getWorkflowsByPlant(plantCode, { signal });\n          console.log('Fallback: Loaded plant workflows:', plantWorkflows);\n\n          // Add mock progress data to plant workflows and filter by current plant\n          const { totalFields } = getTemplateFieldCounts();\n          \n          workflowsWithProgress = plantWorkflows\n            .filter(workflow => {\n              const workflowPlant = workflow.plantCode || workflow.assignedPlant;\n              return workflowPlant === plantCode; // Only show workflows for current plant\n            })\n            .map(workflow => {\n              // Calculate progress if plant inputs are available\n              const plantInputs = workflow.plantInputs || workflow.plantData?.plantInputs || {};\n              const { completionPercentage, completedFields } = calculateCorrectFieldCounts(plantInputs);\n              \n              // Determine the correct completion status based on actual progress\n              let completionStatus;\n              const isSubmitted = workflow.isSubmitted || workflow.submittedAt;\n              if (isSubmitted || completionPercentage === 100) {\n                completionStatus = 'COMPLETED';\n              } else if (completionPercentage > 0) {\n                completionStatus = 'IN_PROGRESS';\n              } else {\n                completionStatus = 'DRAFT';\n              }\n\n              return {\n                id: workflow.id,\n                materialCode: workflow.materialCode,\n                plantCode: workflow.plantCode || workflow.assignedPlant,\n                currentState: workflow.currentState || workflow.state,\n                completionStatus,\n                completionPercentage,\n                totalFields, // Correct total fields (87 = 34 CQS + 53 plant)\n                completedFields,\n                requiredFields: 50, // Default required\n                completedRequiredFields: 0, // Default completed required\n                lastModified: workflow.lastModified,\n                submittedAt: workflow.submittedAt || null,\n                submittedBy: workflow.submittedBy || null,\n                isSubmitted,\n                isCompleted: workflow.isCompleted || false,\n                openQueries: workflow.openQueries || 0,\n                assignedPlant: workflow.plantCode || workflow.assignedPlant,\n                materialName: workflow.materialName,\n                itemDescription: workflow.itemDescription\n              };\n            });\n\n          console.log('Fallback: Processed workflows:', workflowsWithProgress);\n        } catch (fallbackError) {\n          console.error('Fallback also failed:', fallbackError);\n          workflowsWithProgress = [];\n        }\n\n        // Set default dashboard data for fallback\n        dashboardData = {\n          totalWorkflows: workflowsWithProgress.length,\n          completedCount: 0,\n          inProgressCount: 0,\n          draftCount: workflowsWithProgress.length,\n          averageCompletion: 0\n        };\n      }\n\n      setWorkflows(workflowsWithProgress);\n\n      // Set dashboard stats\n      setDashboardStats({\n        totalWorkflows: dashboardData.totalWorkflows || 0,\n        completedCount: dashboardData.completedCount || 0,\n        inProgressCount: dashboardData.inProgressCount || 0,\n        draftCount: dashboardData.draftCount || 0,\n        averageCompletion: dashboardData.averageCompletion || 0,\n        completedToday: 0 // TODO: Calculate from submittedAt dates\n      });\n    } catch (error) {\n      console.error('Failed to load plant workflows:', error);\n      setError(error.message);\n      message.error('Failed to load workflows');\n      setWorkflows([]);\n      setDashboardStats({\n        totalWorkflows: 0,\n        completedCount: 0,\n        inProgressCount: 0,\n        draftCount: 0,\n        averageCompletion: 0,\n        completedToday: 0\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [currentPlant, getCurrentPlant]);\n\n\n\n  /**\n   * Refresh workflows data\n   */\n  const refreshWorkflows = useCallback(async () => {\n    const controller = new AbortController();\n    await loadPlantWorkflows(controller.signal);\n  }, [loadPlantWorkflows]);\n\n\n  // Load workflows when plant or user data changes\n  useEffect(() => {\n    const controller = new AbortController();\n\n    const fetchWorkflows = async () => {\n      if (userPlantData && currentPlant) {\n        try {\n          await loadPlantWorkflows(controller.signal);\n        } catch (error) {\n          if (!controller.signal.aborted) {\n            console.error('Error loading plant workflows:', error);\n          }\n        }\n      } else {\n        // Clear workflows if no plant is selected\n        setWorkflows([]);\n        setDashboardStats({\n          totalWorkflows: 0,\n          completedCount: 0,\n          inProgressCount: 0,\n          draftCount: 0,\n          averageCompletion: 0,\n          completedToday: 0\n        });\n        setLoading(false);\n      }\n    };\n\n    fetchWorkflows();\n\n    return () => {\n      controller.abort();\n    };\n  }, [userPlantData, currentPlant, loadPlantWorkflows]);\n\n  return {\n    workflows,\n    loading,\n    error,\n    dashboardStats,\n    loadPlantWorkflows,\n    refreshWorkflows\n  };\n};","import { useState, useEffect, useMemo, useCallback } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { COMPLETION_FILTERS } from '../constants';\n\n/**\n * Custom hook for managing workflow filters with URL synchronization\n * Handles filter state, application, and persistence\n */\nexport const useWorkflowFilters = (workflows = []) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  \n  // Filter state\n  const [searchText, setSearchText] = useState(searchParams.get('search') || '');\n  const [statusFilter, setStatusFilter] = useState(searchParams.get('status') || 'all');\n  const [completionFilter, setCompletionFilter] = useState(searchParams.get('completion') || 'all');\n\n  /**\n   * Apply all filters to the workflows data\n   */\n  const filteredWorkflows = useMemo(() => {\n    let filtered = [...workflows];\n\n    // Apply search filter\n    if (searchText) {\n      const searchLower = searchText.toLowerCase();\n      filtered = filtered.filter(\n        workflow =>\n          workflow.materialCode?.toLowerCase().includes(searchLower) ||\n          workflow.plantCode?.toLowerCase().includes(searchLower) ||\n          workflow.materialName?.toLowerCase().includes(searchLower) ||\n          workflow.itemDescription?.toLowerCase().includes(searchLower)\n      );\n    }\n\n    // Apply status filter\n    if (statusFilter !== 'all') {\n      filtered = filtered.filter(workflow => workflow.completionStatus === statusFilter);\n    }\n\n    // Apply completion filter\n    if (completionFilter !== 'all') {\n      if (completionFilter === COMPLETION_FILTERS.COMPLETED) {\n        filtered = filtered.filter(workflow => workflow.completionPercentage === 100);\n      } else if (completionFilter === COMPLETION_FILTERS.IN_PROGRESS) {\n        filtered = filtered.filter(\n          workflow => workflow.completionPercentage > 0 && workflow.completionPercentage < 100\n        );\n      } else if (completionFilter === COMPLETION_FILTERS.NOT_STARTED) {\n        filtered = filtered.filter(workflow => workflow.completionPercentage === 0);\n      }\n    }\n\n    return filtered;\n  }, [workflows, searchText, statusFilter, completionFilter]);\n\n  /**\n   * Update search text filter\n   */\n  const updateSearchText = useCallback((value) => {\n    setSearchText(value);\n  }, []);\n\n  /**\n   * Update status filter\n   */\n  const updateStatusFilter = useCallback((value) => {\n    setStatusFilter(value);\n  }, []);\n\n  /**\n   * Update completion filter\n   */\n  const updateCompletionFilter = useCallback((value) => {\n    setCompletionFilter(value);\n  }, []);\n\n  /**\n   * Clear all filters\n   */\n  const clearAllFilters = useCallback(() => {\n    setSearchText('');\n    setStatusFilter('all');\n    setCompletionFilter('all');\n  }, []);\n\n  /**\n   * Apply multiple filters at once\n   */\n  const applyFilters = useCallback((filters) => {\n    if (filters.searchText !== undefined) {\n      setSearchText(filters.searchText);\n    }\n    if (filters.statusFilter !== undefined) {\n      setStatusFilter(filters.statusFilter);\n    }\n    if (filters.completionFilter !== undefined) {\n      setCompletionFilter(filters.completionFilter);\n    }\n  }, []);\n\n  /**\n   * Get filter presets\n   */\n  const filterPresets = useMemo(() => [\n    {\n      name: 'All Workflows',\n      filters: { searchText: '', statusFilter: 'all', completionFilter: 'all' }\n    },\n    {\n      name: 'In Progress',\n      filters: { searchText: '', statusFilter: 'IN_PROGRESS', completionFilter: 'in-progress' }\n    },\n    {\n      name: 'Completed',\n      filters: { searchText: '', statusFilter: 'COMPLETED', completionFilter: 'completed' }\n    },\n    {\n      name: 'Not Started',\n      filters: { searchText: '', statusFilter: 'DRAFT', completionFilter: 'not-started' }\n    },\n    {\n      name: 'Overdue',\n      filters: { searchText: '', statusFilter: 'all', completionFilter: 'all' }\n    }\n  ], []);\n\n  /**\n   * Apply a filter preset\n   */\n  const applyPreset = useCallback((presetName) => {\n    const preset = filterPresets.find(p => p.name === presetName);\n    if (preset) {\n      applyFilters(preset.filters);\n    }\n  }, [filterPresets, applyFilters]);\n\n  /**\n   * Get current filter summary\n   */\n  const filterSummary = useMemo(() => {\n    const activeFilters = [];\n    \n    if (searchText) {\n      activeFilters.push(`Search: \"${searchText}\"`);\n    }\n    if (statusFilter !== 'all') {\n      activeFilters.push(`Status: ${statusFilter.replace('_', ' ')}`);\n    }\n    if (completionFilter !== 'all') {\n      activeFilters.push(`Completion: ${completionFilter.replace('-', ' ')}`);\n    }\n\n    return {\n      activeFilters,\n      hasActiveFilters: activeFilters.length > 0,\n      totalFiltered: filteredWorkflows.length,\n      totalOriginal: workflows.length\n    };\n  }, [searchText, statusFilter, completionFilter, filteredWorkflows.length, workflows.length]);\n\n  /**\n   * Save current filters to localStorage\n   */\n  const saveFilters = useCallback(() => {\n    const filters = {\n      searchText,\n      statusFilter,\n      completionFilter\n    };\n    localStorage.setItem('workflowFilters', JSON.stringify(filters));\n  }, [searchText, statusFilter, completionFilter]);\n\n  /**\n   * Load filters from localStorage\n   */\n  const loadSavedFilters = useCallback(() => {\n    try {\n      const saved = localStorage.getItem('workflowFilters');\n      if (saved) {\n        const filters = JSON.parse(saved);\n        applyFilters(filters);\n      }\n    } catch (error) {\n      console.warn('Failed to load saved filters:', error);\n    }\n  }, [applyFilters]);\n\n  // Sync filters with URL parameters\n  useEffect(() => {\n    const params = new URLSearchParams();\n    \n    if (searchText) {\n      params.set('search', searchText);\n    }\n    if (statusFilter !== 'all') {\n      params.set('status', statusFilter);\n    }\n    if (completionFilter !== 'all') {\n      params.set('completion', completionFilter);\n    }\n\n    // Update URL without triggering navigation\n    setSearchParams(params, { replace: true });\n  }, [searchText, statusFilter, completionFilter, setSearchParams]);\n\n  return {\n    // Filter state\n    searchText,\n    statusFilter,\n    completionFilter,\n    \n    // Filtered data\n    filteredWorkflows,\n    \n    // Filter actions\n    updateSearchText,\n    updateStatusFilter,\n    updateCompletionFilter,\n    clearAllFilters,\n    applyFilters,\n    \n    // Presets\n    filterPresets,\n    applyPreset,\n    \n    // Persistence\n    saveFilters,\n    loadSavedFilters,\n    \n    // Summary\n    filterSummary\n  };\n};","import { useState, useEffect, useCallback } from 'react';\n\nimport { \n  isAuthenticated, \n  isAdmin, \n  isJvcUser, \n  isCqsUser, \n  isTechUser, \n  isPlantUser, \n  isViewer,\n  hasRole,\n  getPrimaryRoleType,\n  getUserPlantCodes,\n  getPrimaryPlantCode,\n  getCurrentUser\n} from '../services/auth';\nimport RBACService from '../services/rbacService';\n\n/**\n * Custom hook for role-based access control\n * Provides reactive access to user roles and permissions\n */\nexport const useRoleBasedAccess = () => {\n  const [accessSummary, setAccessSummary] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Load user access summary\n  const loadAccessSummary = useCallback(async () => {\n    if (!isAuthenticated()) {\n      setAccessSummary(null);\n      setLoading(false);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const summary = await RBACService.getUserAccessSummary();\n      setAccessSummary(summary);\n    } catch (err) {\n      console.warn('Failed to load access summary, using fallback:', err);\n      setError(err);\n      \n      // Use fallback data\n      const fallbackSummary = RBACService.getFallbackAccessSummary();\n      setAccessSummary(fallbackSummary);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    loadAccessSummary();\n  }, [loadAccessSummary]);\n\n  // Check screen access\n  const checkScreenAccess = useCallback(async (screenRoute) => {\n    try {\n      return await RBACService.hasScreenAccess(screenRoute);\n    } catch (error) {\n      console.warn('Screen access check failed, using fallback:', error);\n      return RBACService.getFallbackScreenAccess(screenRoute);\n    }\n  }, []);\n\n  // Check data access\n  const checkDataAccess = useCallback(async (dataType, context = {}) => {\n    try {\n      return await RBACService.hasDataAccess(dataType, context);\n    } catch (error) {\n      console.warn('Data access check failed, using fallback:', error);\n      return RBACService.getFallbackDataAccess(dataType, context);\n    }\n  }, []);\n\n  // Check plant data access\n  const checkPlantDataAccess = useCallback(async (dataType, plantCode, context = {}) => {\n    try {\n      return await RBACService.hasPlantDataAccess(dataType, plantCode, context);\n    } catch (error) {\n      console.warn('Plant data access check failed, using fallback:', error);\n      return RBACService.getFallbackPlantDataAccess(dataType, plantCode, context);\n    }\n  }, []);\n\n  // Make access decision\n  const makeAccessDecision = useCallback(async (resourceType, resourceId, action, context = {}) => {\n    try {\n      return await RBACService.makeAccessDecision(resourceType, resourceId, action, context);\n    } catch (error) {\n      console.warn('Access decision failed, using fallback:', error);\n      return RBACService.getFallbackAccessDecision(resourceType, resourceId, action, context);\n    }\n  }, []);\n\n  // Filter data by plant access\n  const filterByPlantAccess = useCallback((data, plantExtractor) => {\n    return RBACService.filterDataByPlantAccess(data, plantExtractor);\n  }, []);\n\n  return {\n    // Loading states\n    loading,\n    error,\n    \n    // User info\n    isAuthenticated: isAuthenticated(),\n    currentUser: getCurrentUser(),\n    primaryRole: getPrimaryRoleType(),\n    userPlants: getUserPlantCodes(),\n    primaryPlant: getPrimaryPlantCode(),\n    \n    // Role checks\n    isAdmin: isAdmin(),\n    isJvcUser: isJvcUser(),\n    isCqsUser: isCqsUser(),\n    isTechUser: isTechUser(),\n    isPlantUser: isPlantUser(),\n    isViewer: isViewer(),\n    \n    // Access summary\n    accessSummary,\n    \n    // Helper functions\n    hasRole: (role) => hasRole(role),\n    hasAnyRole: (roles) => roles.some(role => hasRole(role)),\n    hasAllRoles: (roles) => roles.every(role => hasRole(role)),\n    \n    // Async access checks\n    checkScreenAccess,\n    checkDataAccess,\n    checkPlantDataAccess,\n    makeAccessDecision,\n    \n    // Data filtering\n    filterByPlantAccess,\n    \n    // Refresh function\n    refresh: loadAccessSummary\n  };\n};\n\n/**\n * Hook for checking specific screen access\n */\nexport const useScreenAccess = (screenRoute) => {\n  const [hasAccess, setHasAccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const checkAccess = async () => {\n      if (!isAuthenticated() || !screenRoute) {\n        setHasAccess(false);\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const access = await RBACService.hasScreenAccess(screenRoute);\n        setHasAccess(access);\n      } catch (err) {\n        console.warn('Screen access check failed:', err);\n        setError(err);\n        \n        // Use fallback\n        const fallbackAccess = RBACService.getFallbackScreenAccess(screenRoute);\n        setHasAccess(fallbackAccess);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAccess();\n  }, [screenRoute]);\n\n  return { hasAccess, loading, error };\n};\n\n/**\n * Hook for checking data access\n */\nexport const useDataAccess = (dataType, context = {}) => {\n  const [hasAccess, setHasAccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const checkAccess = async () => {\n      if (!isAuthenticated() || !dataType) {\n        setHasAccess(false);\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const access = await RBACService.hasDataAccess(dataType, context);\n        setHasAccess(access);\n      } catch (err) {\n        console.warn('Data access check failed:', err);\n        setError(err);\n        \n        // Use fallback\n        const fallbackAccess = RBACService.getFallbackDataAccess(dataType, context);\n        setHasAccess(fallbackAccess);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAccess();\n  }, [dataType, context]);\n\n  return { hasAccess, loading, error };\n};\n\n/**\n * Hook for plant-specific data filtering\n */\nexport const usePlantDataFilter = (data, plantExtractor) => {\n  const [filteredData, setFilteredData] = useState([]);\n\n  useEffect(() => {\n    if (!Array.isArray(data)) {\n      setFilteredData([]);\n      return;\n    }\n\n    const filtered = RBACService.filterDataByPlantAccess(data, plantExtractor);\n    setFilteredData(filtered);\n  }, [data, plantExtractor]);\n\n  return filteredData;\n};\n\nexport default useRoleBasedAccess;","/**\n * SecureForm Component\n * \n * A wrapper component that provides enhanced security features for forms including:\n * - Input validation and sanitization\n * - XSS prevention\n * - Security audit logging\n * - Real-time validation feedback\n * \n * @component\n * @since 1.0.0\n * @author QRMFG Security Team\n */\n\nimport { Form, Input, message } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { \n  InputSanitizer, \n  ValidationRules, \n  useInputValidation, \n  SecurityAuditLogger \n} from '../utils/inputValidation';\n\nconst { TextArea } = Input;\n\n/**\n * SecureInput Component - Enhanced input with validation and sanitization\n */\nconst SecureInput = React.memo(({ \n  value, \n  onChange, \n  validationType = 'text',\n  componentName = 'SecureInput',\n  fieldName = 'input',\n  onValidationChange,\n  ...props \n}) => {\n  const { validateInput } = useInputValidation();\n  const [validationState, setValidationState] = useState({\n    isValid: true,\n    errors: [],\n    wasModified: false\n  });\n\n  const handleChange = useCallback((e) => {\n    const inputValue = e.target.value;\n    const validation = validateInput(inputValue, validationType);\n    \n    setValidationState(validation);\n    \n    // Log potential security issues\n    if (validation.wasModified) {\n      SecurityAuditLogger.logXSSAttempt(\n        inputValue,\n        validation.sanitizedValue,\n        componentName,\n        fieldName\n      );\n      \n      message.warning('Input was sanitized for security reasons');\n    }\n    \n    // Call parent onChange with sanitized value\n    if (onChange) {\n      onChange({\n        ...e,\n        target: {\n          ...e.target,\n          value: validation.sanitizedValue\n        }\n      });\n    }\n    \n    // Notify parent of validation state\n    if (onValidationChange) {\n      onValidationChange(validation);\n    }\n  }, [onChange, validationType, componentName, fieldName, onValidationChange, validateInput]);\n\n  return (\n    <Input\n      {...props}\n      value={value}\n      onChange={handleChange}\n      status={validationState.isValid ? '' : 'error'}\n      title={validationState.errors.join(', ')}\n    />\n  );\n});\n\n/**\n * SecureTextArea Component - Enhanced textarea with validation and sanitization\n */\nconst SecureTextArea = React.memo(({ \n  value, \n  onChange, \n  validationType = 'richtext',\n  componentName = 'SecureTextArea',\n  fieldName = 'textarea',\n  onValidationChange,\n  ...props \n}) => {\n  const { validateInput } = useInputValidation();\n  const [validationState, setValidationState] = useState({\n    isValid: true,\n    errors: [],\n    wasModified: false\n  });\n\n  const handleChange = useCallback((e) => {\n    const inputValue = e.target.value;\n    const validation = validateInput(inputValue, validationType);\n    \n    setValidationState(validation);\n    \n    // Log potential security issues\n    if (validation.wasModified) {\n      SecurityAuditLogger.logXSSAttempt(\n        inputValue,\n        validation.sanitizedValue,\n        componentName,\n        fieldName\n      );\n      \n      message.warning('Input was sanitized for security reasons');\n    }\n    \n    // Call parent onChange with sanitized value\n    if (onChange) {\n      onChange({\n        ...e,\n        target: {\n          ...e.target,\n          value: validation.sanitizedValue\n        }\n      });\n    }\n    \n    // Notify parent of validation state\n    if (onValidationChange) {\n      onValidationChange(validation);\n    }\n  }, [onChange, validationType, componentName, fieldName, onValidationChange, validateInput]);\n\n  return (\n    <TextArea\n      {...props}\n      value={value}\n      onChange={handleChange}\n      status={validationState.isValid ? '' : 'error'}\n      title={validationState.errors.join(', ')}\n    />\n  );\n});\n\n/**\n * SecureForm Component - Enhanced form with security features\n */\nconst SecureForm = React.memo(({ \n  children, \n  onFinish, \n  componentName = 'SecureForm',\n  enableSecurityLogging = true,\n  ...props \n}) => {\n  const [securityEvents, setSecurityEvents] = useState([]);\n\n  // Handle form submission with security validation\n  const handleFinish = useCallback(async (values) => {\n    try {\n      // Sanitize all form values before submission\n      const sanitizedValues = {};\n      const securityIssues = [];\n\n      Object.keys(values).forEach(key => {\n        const originalValue = values[key];\n        \n        if (typeof originalValue === 'string') {\n          const sanitizedValue = InputSanitizer.sanitizeText(originalValue);\n          sanitizedValues[key] = sanitizedValue;\n          \n          if (sanitizedValue !== originalValue) {\n            securityIssues.push({\n              field: key,\n              originalValue: originalValue.substring(0, 50),\n              sanitizedValue: sanitizedValue.substring(0, 50)\n            });\n          }\n        } else {\n          sanitizedValues[key] = originalValue;\n        }\n      });\n\n      // Log security issues if any\n      if (securityIssues.length > 0 && enableSecurityLogging) {\n        securityIssues.forEach(issue => {\n          SecurityAuditLogger.logXSSAttempt(\n            issue.originalValue,\n            issue.sanitizedValue,\n            componentName,\n            issue.field\n          );\n        });\n        \n        message.warning(`${securityIssues.length} field(s) were sanitized for security`);\n      }\n\n      // Call original onFinish with sanitized values\n      if (onFinish) {\n        await onFinish(sanitizedValues);\n      }\n    } catch (error) {\n      console.error('SecureForm submission error:', error);\n      message.error('Form submission failed');\n      throw error;\n    }\n  }, [onFinish, componentName, enableSecurityLogging]);\n\n  // Track security events\n  useEffect(() => {\n    if (enableSecurityLogging) {\n      const events = SecurityAuditLogger.getRecentEvents();\n      setSecurityEvents(events.slice(-10)); // Keep last 10 events\n    }\n  }, [enableSecurityLogging]);\n\n  return (\n    <Form\n      {...props}\n      onFinish={handleFinish}\n      validateTrigger={['onChange', 'onBlur']}\n    >\n      {children}\n      \n      {/* Development mode security info */}\n      {process.env.NODE_ENV === 'development' && securityEvents.length > 0 && (\n        <div style={{ \n          marginTop: 16, \n          padding: 8, \n          background: '#fff7e6', \n          border: '1px solid #ffd591',\n          borderRadius: 4,\n          fontSize: 12\n        }}>\n          <strong>Security Events (Dev Mode):</strong>\n          <ul style={{ margin: '4px 0', paddingLeft: 16 }}>\n            {securityEvents.slice(-3).map((event, index) => (\n              <li key={index}>\n                {event.type} in {event.component}.{event.field} at {new Date(event.timestamp).toLocaleTimeString()}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </Form>\n  );\n});\n\n// Form.Item wrapper with enhanced validation\nconst SecureFormItem = React.memo(({ \n  children, \n  validationType = 'text',\n  name,\n  rules = [],\n  ...props \n}) => {\n  // Combine custom rules with security validation rules\n  const securityRules = React.useMemo(() => {\n    let baseRules = [];\n    \n    switch (validationType) {\n      case 'username':\n        baseRules = ValidationRules.username;\n        break;\n      case 'email':\n        baseRules = ValidationRules.email;\n        break;\n      case 'password':\n        baseRules = ValidationRules.password;\n        break;\n      case 'projectCode':\n        baseRules = ValidationRules.projectCode;\n        break;\n      case 'materialCode':\n        baseRules = ValidationRules.materialCode;\n        break;\n      case 'plantCode':\n        baseRules = ValidationRules.plantCode;\n        break;\n      case 'text':\n        baseRules = ValidationRules.text(false, 0, 255);\n        break;\n      case 'richtext':\n        baseRules = ValidationRules.richText(false, 0, 1000);\n        break;\n      default:\n        baseRules = [];\n    }\n    \n    return [...baseRules, ...rules];\n  }, [validationType, rules]);\n\n  return (\n    <Form.Item\n      {...props}\n      name={name}\n      rules={securityRules}\n    >\n      {children}\n    </Form.Item>\n  );\n});\n\n// PropTypes\nSecureInput.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  validationType: PropTypes.oneOf(['text', 'username', 'email', 'sql', 'filename', 'url']),\n  componentName: PropTypes.string,\n  fieldName: PropTypes.string,\n  onValidationChange: PropTypes.func\n};\n\nSecureTextArea.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  validationType: PropTypes.oneOf(['text', 'richtext']),\n  componentName: PropTypes.string,\n  fieldName: PropTypes.string,\n  onValidationChange: PropTypes.func\n};\n\nSecureForm.propTypes = {\n  children: PropTypes.node.isRequired,\n  onFinish: PropTypes.func,\n  componentName: PropTypes.string,\n  enableSecurityLogging: PropTypes.bool\n};\n\nSecureFormItem.propTypes = {\n  children: PropTypes.node.isRequired,\n  validationType: PropTypes.string,\n  name: PropTypes.string,\n  rules: PropTypes.array\n};\n\n// Display names\nSecureInput.displayName = 'SecureInput';\nSecureTextArea.displayName = 'SecureTextArea';\nSecureForm.displayName = 'SecureForm';\nSecureFormItem.displayName = 'SecureFormItem';\n\n// Exports\nexport { SecureInput, SecureTextArea, SecureFormItem };\nexport default SecureForm;","/**\r\n * Utility functions for questionnaire field calculations\r\n * Handles CQS auto-populated field exclusions and progress calculations\r\n */\r\n\r\n/**\r\n * Get the default questionnaire template with CQS field markings\r\n * This should match the template structure in PlantQuestionnaire.js\r\n */\r\nexport const getDefaultQuestionnaireTemplate = () => [\r\n  {\r\n    title: 'General',\r\n    fields: [\r\n      { name: 'msds_available', isCqsAutoPopulated: false },\r\n      { name: 'missing_info', isCqsAutoPopulated: false },\r\n      { name: 'sourcing_asked', isCqsAutoPopulated: false },\r\n      { name: 'cas_available', isCqsAutoPopulated: false },\r\n      { name: 'mixture_ingredients', isCqsAutoPopulated: false },\r\n      { name: 'composition_percentage', isCqsAutoPopulated: false },\r\n      { name: 'total_percentage_1', isCqsAutoPopulated: false },\r\n      { name: 'total_percentage', isCqsAutoPopulated: false }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Physical',\r\n    fields: [\r\n      { name: 'is_corrosive', isCqsAutoPopulated: true },\r\n      { name: 'corrosive_storage', isCqsAutoPopulated: false },\r\n      { name: 'highly_toxic', isCqsAutoPopulated: true },\r\n      { name: 'toxic_powder_handling', isCqsAutoPopulated: false },\r\n      { name: 'crushing_facilities', isCqsAutoPopulated: false },\r\n      { name: 'heating_facilities', isCqsAutoPopulated: false },\r\n      { name: 'paste_preparation', isCqsAutoPopulated: false }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Flammability and Explosivity',\r\n    fields: [\r\n      { name: 'flash_point_65', isCqsAutoPopulated: true },\r\n      { name: 'petroleum_class', isCqsAutoPopulated: true },\r\n      { name: 'storage_license', isCqsAutoPopulated: false },\r\n      { name: 'ccoe_license', isCqsAutoPopulated: false },\r\n      { name: 'flash_point_21', isCqsAutoPopulated: true },\r\n      { name: 'flammable_infrastructure', isCqsAutoPopulated: false }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Toxicity',\r\n    fields: [\r\n      { name: 'ld50_oral', isCqsAutoPopulated: true },\r\n      { name: 'ld50_dermal', isCqsAutoPopulated: true },\r\n      { name: 'lc50_inhalation', isCqsAutoPopulated: true },\r\n      { name: 'exposure_minimization', isCqsAutoPopulated: false },\r\n      { name: 'carcinogenic', isCqsAutoPopulated: true },\r\n      { name: 'carcinogenic_control', isCqsAutoPopulated: false }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Storage and Handling',\r\n    fields: [\r\n      { name: 'storage_conditions_stores', isCqsAutoPopulated: false },\r\n      { name: 'storage_conditions_floor', isCqsAutoPopulated: false },\r\n      { name: 'closed_loop_required', isCqsAutoPopulated: false },\r\n      { name: 'work_permit_available', isCqsAutoPopulated: false },\r\n      { name: 'procedures_details', isCqsAutoPopulated: false }\r\n    ]\r\n  },\r\n  {\r\n    title: 'PPE',\r\n    fields: [\r\n      { name: 'recommended_ppe', isCqsAutoPopulated: true },\r\n      { name: 'ppe_in_use', isCqsAutoPopulated: false },\r\n      { name: 'ppe_procurement_date', isCqsAutoPopulated: false }\r\n    ]\r\n  },\r\n  {\r\n    title: 'First Aid',\r\n    fields: [\r\n      { name: 'is_poisonous', isCqsAutoPopulated: true },\r\n      { name: 'antidote_specified', isCqsAutoPopulated: true },\r\n      { name: 'antidote_available', isCqsAutoPopulated: false },\r\n      { name: 'antidote_source', isCqsAutoPopulated: false },\r\n      { name: 'first_aid_capability', isCqsAutoPopulated: false }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Statutory',\r\n    fields: [\r\n      { name: 'cmvr_listed', isCqsAutoPopulated: true },\r\n      { name: 'msihc_listed', isCqsAutoPopulated: true },\r\n      { name: 'factories_act_listed', isCqsAutoPopulated: true },\r\n      { name: 'permissible_concentration', isCqsAutoPopulated: false },\r\n      { name: 'monitoring_details', isCqsAutoPopulated: false }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Others',\r\n    fields: [\r\n      { name: 'plant_inputs_required', isCqsAutoPopulated: false },\r\n      { name: 'gaps_identified', isCqsAutoPopulated: false },\r\n      { name: 'additional_input_1', isCqsAutoPopulated: false },\r\n      { name: 'additional_input_2', isCqsAutoPopulated: false }\r\n    ]\r\n  }\r\n];\r\n\r\n/**\r\n * Calculate correct field counts including ALL fields (both CQS and plant fields)\r\n * @param {Object} plantInputs - The plant input data\r\n * @param {Array} template - Optional template, uses default if not provided\r\n * @returns {Object} - { totalFields, completedFields, completionPercentage }\r\n */\r\nexport const calculateCorrectFieldCounts = (plantInputs = {}, template = null) => {\r\n  const questionnaireTemplate = template || getDefaultQuestionnaireTemplate();\r\n  \r\n  let totalFields = 0;\r\n  let completedFields = 0;\r\n\r\n  questionnaireTemplate.forEach(step => {\r\n    const stepFields = step.fields || [];\r\n    \r\n    // Count ALL fields (both CQS and plant fields)\r\n    totalFields += stepFields.length;\r\n\r\n    // Count completed fields (any field with a value)\r\n    const completedStepFields = stepFields.filter(field => {\r\n      const value = plantInputs[field.name];\r\n      if (Array.isArray(value)) {\r\n        return value.length > 0;\r\n      }\r\n      return value && value !== '' && value !== null && value !== undefined;\r\n    });\r\n\r\n    completedFields += completedStepFields.length;\r\n  });\r\n\r\n  const completionPercentage = totalFields > 0 \r\n    ? Math.round((completedFields / totalFields) * 100) \r\n    : 0;\r\n\r\n  return {\r\n    totalFields,\r\n    completedFields,\r\n    completionPercentage,\r\n    // Keep backward compatibility\r\n    totalUserEditableFields: totalFields,\r\n    completedUserEditableFields: completedFields\r\n  };\r\n};\r\n\r\n/**\r\n * Get total field counts for the questionnaire template\r\n * @param {Array} template - Optional template, uses default if not provided\r\n * @returns {Object} - { totalFields, totalUserEditableFields, totalCqsFields }\r\n */\r\nexport const getTemplateFieldCounts = (template = null) => {\r\n  const questionnaireTemplate = template || getDefaultQuestionnaireTemplate();\r\n  \r\n  let totalFields = 0;\r\n  let totalUserEditableFields = 0;\r\n  let totalCqsFields = 0;\r\n\r\n  questionnaireTemplate.forEach(step => {\r\n    const stepFields = step.fields || [];\r\n    totalFields += stepFields.length;\r\n    \r\n    stepFields.forEach(field => {\r\n      if (field.isCqsAutoPopulated || field.disabled) {\r\n        totalCqsFields++;\r\n      } else {\r\n        totalUserEditableFields++;\r\n      }\r\n    });\r\n  });\r\n\r\n  return {\r\n    totalFields, // 87 total fields\r\n    totalUserEditableFields, // 53 plant fields\r\n    totalCqsFields // 34 CQS fields\r\n  };\r\n};\r\n\r\n/**\r\n * Recalculate workflow progress with correct field counts\r\n * @param {Object} workflow - The workflow object from backend\r\n * @param {Object} plantInputs - The plant input data (optional)\r\n * @returns {Object} - Updated workflow with correct field counts\r\n */\r\nexport const recalculateWorkflowProgress = (workflow, plantInputs = null) => {\r\n  // If we have plant inputs, calculate based on actual data\r\n  if (plantInputs) {\r\n    const { totalFields, completedFields, completionPercentage } = \r\n      calculateCorrectFieldCounts(plantInputs);\r\n    \r\n    return {\r\n      ...workflow,\r\n      totalFields,\r\n      completedFields,\r\n      completionPercentage\r\n    };\r\n  }\r\n\r\n  // Otherwise, just fix the total field count and recalculate percentage\r\n  const { totalFields } = getTemplateFieldCounts();\r\n  \r\n  // Assume the backend's completed count is correct but total is wrong\r\n  const backendCompletedFields = workflow.completedFields || 0;\r\n  const correctedCompletionPercentage = totalFields > 0 \r\n    ? Math.round((backendCompletedFields / totalFields) * 100) \r\n    : 0;\r\n\r\n  return {\r\n    ...workflow,\r\n    totalFields, // Now uses 87 total fields instead of 53\r\n    completionPercentage: correctedCompletionPercentage\r\n  };\r\n};","import apiClient from '../api/client';\nimport { getToken, isAuthenticated } from '../services/auth';\n\n/**\n * User API service providing user management functionality\n * Migrated to use unified APIClient with standardized error handling\n *\n * @namespace userAPI\n */\nexport const userAPI = {\n  /**\n   * Get current user's plant assignments from backend API\n   * @param {string} username - Username to get plant assignments for\n   * @param {Object} options - Additional options including signal for AbortController\n   * @returns {Promise<Object>} Plant assignment data\n   */\n  getUserPlantAssignments: async (username, options = {}) => {\n    try {\n      console.log('Getting plant assignments for user:', username);\n      console.log('Is authenticated:', isAuthenticated());\n\n      // Check if user is authenticated first\n      if (!isAuthenticated()) {\n        console.warn('User is not authenticated, cannot get plant assignments');\n        return {\n          assignedPlants: [],\n          primaryPlant: null,\n          effectivePlant: null,\n          isPlantUser: false\n        };\n      }\n\n      // Primary method: Get plant info from JWT token validation\n      const token = getToken();\n      console.log('Retrieved token:', token ? 'Token found' : 'No token found');\n\n      if (token) {\n        try {\n          const validationResponse = await apiClient.post('/auth/validate', { token }, options);\n          console.log('Token validation response:', validationResponse);\n          console.log('Plant codes in token:', validationResponse.plantCodes);\n          console.log('Primary plant in token:', validationResponse.primaryPlant);\n          console.log('Is plant user:', validationResponse.isPlantUser);\n\n          if (validationResponse.valid) {\n            // Check if we have plant data in the token\n            if (validationResponse.plantCodes && validationResponse.plantCodes.length > 0) {\n              console.log('Plant assignments from token:', validationResponse);\n              return {\n                assignedPlants: validationResponse.plantCodes || [],\n                primaryPlant: validationResponse.primaryPlant || null,\n                effectivePlant: validationResponse.primaryPlant || (validationResponse.plantCodes && validationResponse.plantCodes[0]) || null,\n                isPlantUser: validationResponse.isPlantUser || false\n              };\n            }\n\n            // Handle case where user has primaryPlant but empty plantCodes array\n            if (validationResponse.primaryPlant && validationResponse.isPlantUser) {\n              console.log('User has primary plant but empty plantCodes, using primary plant as assigned plant:', validationResponse.primaryPlant);\n              return {\n                assignedPlants: [validationResponse.primaryPlant],\n                primaryPlant: validationResponse.primaryPlant,\n                effectivePlant: validationResponse.primaryPlant,\n                isPlantUser: validationResponse.isPlantUser || false\n              };\n            }\n\n            // If no plant data in token but token is valid, user might not have plants assigned\n            console.log('Token is valid but no plant data found in token');\n          }\n        } catch (tokenError) {\n          console.warn('Failed to validate token for plant assignments:', tokenError);\n        }\n      }\n\n      // Fallback: try to get from stored user data (check multiple storage keys)\n      const possibleKeys = ['userData', 'qrmfg_user_data', 'user_info'];\n      for (const key of possibleKeys) {\n        const storedUserData = localStorage.getItem(key) || sessionStorage.getItem(key);\n        if (storedUserData) {\n          try {\n            const userData = JSON.parse(storedUserData);\n            if (userData.plantCodes || userData.assignedPlants) {\n              console.log('Plant assignments from stored data:', userData);\n              return {\n                assignedPlants: userData.plantCodes || userData.assignedPlants || [],\n                primaryPlant: userData.primaryPlant || null,\n                effectivePlant: userData.primaryPlant || ((userData.plantCodes || userData.assignedPlants) && (userData.plantCodes || userData.assignedPlants)[0]) || null,\n                isPlantUser: userData.isPlantUser || false\n              };\n            }\n          } catch (parseError) {\n            console.warn(`Failed to parse stored user data from ${key}:`, parseError);\n          }\n        }\n      }\n\n      // Last resort: Try admin endpoints only if user might have admin access\n      try {\n        // Only try admin endpoints if we think the user might be an admin\n        const adminToken = getToken();\n        const validationResponse = await apiClient.post('/auth/validate', { token: adminToken }, options);\n        if (validationResponse.valid && validationResponse.isAdmin) {\n          console.log('User appears to be admin, trying admin endpoints...');\n\n          const userDetails = await apiClient.get('/admin/users', options);\n          const currentUser = userDetails.users?.find(user => user.username === username);\n\n          if (currentUser && currentUser.assignedPlants) {\n            console.log('Admin endpoint: Using user details for plant assignments:', currentUser);\n\n            return {\n              assignedPlants: currentUser.assignedPlants || [],\n              primaryPlant: currentUser.primaryPlant || null,\n              effectivePlant: currentUser.primaryPlant || (currentUser.assignedPlants && currentUser.assignedPlants[0]) || null,\n              isPlantUser: (currentUser.assignedPlants && currentUser.assignedPlants.length > 0) || false\n            };\n          }\n        }\n      } catch (adminError) {\n        console.warn('Admin endpoints not accessible (expected for non-admin users):', adminError.message);\n      }\n\n      // If no plant data available, return empty structure\n      console.warn('No plant assignment data available for user:', username);\n      return {\n        assignedPlants: [],\n        primaryPlant: null,\n        effectivePlant: null,\n        isPlantUser: false\n      };\n    } catch (error) {\n      console.error('Error getting user plant assignments:', error);\n      // Return empty structure on error to prevent crashes\n      return {\n        assignedPlants: [],\n        primaryPlant: null,\n        effectivePlant: null,\n        isPlantUser: false\n      };\n    }\n  },\n\n  /**\n   * Update user's plant assignments\n   * @param {string} username - Username to update plant assignments for\n   * @param {Object} plantData - Plant assignment data\n   * @returns {Promise<Object>} Updated plant assignments\n   */\n  updateUserPlantAssignments: (username, plantData) =>\n    apiClient.put(`/admin/users/${encodeURIComponent(username)}/plants`, plantData),\n\n  /**\n   * Check if user is assigned to a specific plant\n   * @param {string} username - Username to check\n   * @param {string} plantCode - Plant code to check assignment for\n   * @returns {Promise<boolean>} True if user is assigned to plant\n   */\n  checkUserPlantAssignment: (username, plantCode) =>\n    apiClient.get(\n      `/admin/users/${encodeURIComponent(username)}/plants/${encodeURIComponent(plantCode)}/check`\n    ),\n\n  /**\n   * Get user information by ID\n   * @param {string} id - User ID\n   * @returns {Promise<Object>} User information\n   */\n  getUserById: id => apiClient.get(`/admin/users/${id}`),\n\n  /**\n   * Get all users (cached for 5 minutes)\n   * @param {Object} options - Additional options including signal for AbortController\n   * @returns {Promise<Array>} Array of all users\n   */\n  getAllUsers: (options = {}) => apiClient.get('/admin/users', {\n    cacheTTL: 5 * 60 * 1000, // Cache for 5 minutes\n    ...options\n  }),\n\n  /**\n   * Get all users without cache (for real-time data)\n   * @param {Object} options - Additional options including signal for AbortController\n   * @returns {Promise<Array>} Array of all users\n   */\n  getAllUsersRealTime: (options = {}) => apiClient.get('/admin/users', {\n    useCache: false,\n    ...options\n  })\n};\n","import apiClient from '../api/client';\n\nexport const masterDataAPI = {\n  // Location Master (Plants) endpoints\n  getAllLocations: async () => {\n    try {\n      return await apiClient.get('/master-data/locations');\n    } catch (error) {\n      console.warn('Main locations endpoint failed, trying fallback:', error);\n      try {\n        return await apiClient.get('/master-data/locations/fallback');\n      } catch (fallbackError) {\n        console.warn('Fallback endpoint failed, trying simple endpoint:', fallbackError);\n        try {\n          return await apiClient.get('/simple-locations');\n        } catch (simpleError) {\n          console.error('All locations endpoints failed:', simpleError);\n          throw simpleError;\n        }\n      }\n    }\n  },\n\n  getLocationByCode: locationCode =>\n    apiClient.get(`/master-data/locations/${encodeURIComponent(locationCode)}`),\n\n  searchLocations: searchTerm =>\n    apiClient.get(`/master-data/locations/search?term=${encodeURIComponent(searchTerm)}`),\n\n  createLocation: locationData => apiClient.post('/master-data/locations', locationData),\n\n  updateLocation: (locationCode, locationData) =>\n    apiClient.put(`/master-data/locations/${encodeURIComponent(locationCode)}`, locationData),\n\n  deleteLocation: locationCode =>\n    apiClient.delete(`/master-data/locations/${encodeURIComponent(locationCode)}`),\n\n\n\n  // Project Item Master endpoints\n  getAllProjectItems: () => apiClient.get('/master-data/project-items'),\n\n  getItemsByProject: projectCode =>\n    apiClient.get(`/master-data/project-items/projects/${encodeURIComponent(projectCode)}`),\n\n  getProjectsByItem: itemCode =>\n    apiClient.get(`/master-data/project-items/items/${encodeURIComponent(itemCode)}`),\n\n  getAllProjectCodes: () => apiClient.get('/master-data/project-codes'),\n\n  getAllItemCodes: () => apiClient.get('/master-data/item-codes'),\n\n  getItemCodesByProject: projectCode =>\n    apiClient.get(`/master-data/project-codes/${encodeURIComponent(projectCode)}/items`),\n\n  // Test endpoints\n  testLocationMaster: () => apiClient.get('/master-data/locations/test'),\n\n  testSimpleLocation: () => apiClient.get('/simple-locations/test'),\n\n  diagnosticLocationMaster: () => apiClient.get('/master-data/locations/diagnostic'),\n\n  getSimpleLocationCount: () => apiClient.get('/simple-locations/count')\n};\n"],"names":["_ref","children","plantCode","_jsx","RouteErrorBoundary","routeName","errorContext","feature","level","Search","Input","Option","Select","FilterPanel","React","searchText","statusFilter","completionFilter","onSearchTextChange","onStatusFilterChange","onCompletionFilterChange","onClearFilters","onApplyPreset","onSaveFilters","filterPresets","filterSummary","handleSearchChange","useCallback","value","handleStatusChange","handleCompletionChange","handleClearFilters","handlePresetClick","presetName","handleSaveFilters","_jsxs","Card","title","style","display","alignItems","gap","FilterOutlined","hasActiveFilters","Tag","color","marginLeft","activeFilters","length","size","marginBottom","extra","Space","Button","icon","SaveOutlined","onClick","disabled","ClearOutlined","Row","gutter","Col","xs","sm","md","lg","fontSize","fontWeight","placeholder","onChange","e","target","width","allowClear","enterButton","SearchOutlined","_Fragment","Divider","margin","wrap","map","preset","type","name","filter","index","marginTop","totalFiltered","totalOriginal","textAlign","displayName","defaultProps","PlantDashboard","dashboardStats","loading","error","currentPlant","onRefresh","getProgressColor","useMemo","percentage","completionStats","totalWorkflows","completedCount","inProgressCount","draftCount","completionRate","inProgressRate","draftRate","Math","round","getStatisticColor","total","inProgress","completed","average","Alert","message","description","showIcon","action","border","background","cursor","Statistic","prefix","ClockCircleOutlined","valueStyle","ExclamationCircleOutlined","CheckCircleOutlined","averageCompletion","suffix","BarChartOutlined","Progress","percent","strokeColor","format","WorkflowTable","workflows","onStartQuestionnaire","onViewWorkflow","getStatusColor","status","DRAFT","IN_PROGRESS","COMPLETED","getCompletionColor","getDaysInState","lastModified","now","Date","modified","diffTime","abs","ceil","handleStartQuestionnaire","workflow","handleViewWorkflow","console","log","id","columns","dataIndex","key","sorter","a","b","materialCode","localeCompare","filterDropdown","_ref2","setSelectedKeys","selectedKeys","confirm","clearFilters","padding","onPressEnter","filterIcon","filtered","undefined","onFilter","record","toLowerCase","includes","render","text","materialName","itemDescription","_ref3","filters","completionStatus","replace","completionPercentage","_","completedFields","totalFields","days","openQueries","count","FormOutlined","isSubmitted","EyeOutlined","getRowClassName","paginationConfig","pageSize","PAGINATION","DEFAULT_PAGE_SIZE","showSizeChanger","showQuickJumper","showTotal","range","pageSizeOptions","Table","dataSource","rowKey","pagination","rowClassName","scroll","x","bordered","justifyContent","Text","Title","Typography","CqsFieldDisplay","_cqsData$cqsData","field","cqsData","cqsFieldMapping","showDetails","compact","cqsValue","hasValue","label","isCqsAutoPopulated","config","InfoCircleOutlined","Tooltip","borderRadius","strong","className","align","flex","direction","italic","Panel","Collapse","workflowData","setLoading","useState","jvcDocuments","setJvcDocuments","expanded","setExpanded","loadJvcDocuments","async","projectCode","documents","workflowAPI","getReusableDocuments","getWorkflowDocuments","useEffect","formatDate","dateString","toLocaleDateString","year","month","day","hour","minute","height","daysInCurrentState","calculateDaysInState","isOverdue","Badge","position","top","activeKey","ghost","header","FileTextOutlined","Descriptions","column","Item","assignedPlant","TeamOutlined","initiatedBy","CalendarOutlined","createdAt","WarningOutlined","state","JVC_PENDING","PLANT_PENDING","CQS_PENDING","TECH_PENDING","getStateName","totalQueries","Spin","doc","_doc$fileType","styles","body","originalFileName","fileName","sourceDescription","documentSource","fileType","toUpperCase","fileSize","toFixed","uploadedBy","DownloadOutlined","documentId","filename","blob","downloadDocument","url","window","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","revokeObjectURL","success","handleDocumentDownload","materialCategory","supplierName","supplierCode","supplierContact","purchaseOrder","quantityOrdered","expectedDelivery","expectedUsage","applicationArea","processRequirements","backgroundColor","regulatoryRequirements","specialInstructions","urgencyLevel","businessImpact","costCenter","jvcNotes","whiteSpace","knownProperties","Object","keys","entries","str","specifications","JSON","stringify","String","safetyNotes","TextArea","open","visible","onCancel","onSubmit","workflowId","fieldContext","form","Form","useForm","uploadedDocuments","setUploadedDocuments","createdQueryId","setCreatedQueryId","handleCancel","resetFields","getPriorityColor","priority","LOW","MEDIUM","HIGH","URGENT","Modal","QuestionCircleOutlined","footer","documentMessage","queryToReturn","submit","destroyOnClose","stepTitle","SecureForm","layout","onFinish","queryData","question","values","assignedTeam","priorityLevel","fieldName","stepNumber","queryCategory","category","createdQuery","queryAPI","createQuery","initialValues","componentName","enableSecurityLogging","_fieldContext$stepTit","_fieldContext$label","fieldLabel","cqsScore","forEach","keyword","techScore","jvcScore","maxScore","max","primaryTeam","confidence","CQS","TECH","JVC","getRecommendedTeam","rules","required","help","showSearch","optionFilterProp","filterOption","input","option","props","indexOf","SecureFormItem","validationType","SecureInput","Radio","SecureTextArea","rows","showCount","maxLength","QueryDocumentUpload","queryId","context","onUploadComplete","prev","maxFiles","items","PaperClipOutlined","paddingLeft","Paragraph","onComplete","onSaveDraft","currentStep","setCurrentStep","saving","setSaving","submitting","setSubmitting","setWorkflowData","formData","setFormData","completedSteps","setCompletedSteps","Set","queryModalVisible","setQueryModalVisible","selectedField","setSelectedField","queries","setQueries","autoSaveEnabled","setAutoSaveEnabled","isOffline","setIsOffline","navigator","onLine","pendingChanges","setPendingChanges","sidebarVisible","setSidebarVisible","_progressUpdateTrigger","_setProgressUpdateTrigger","isMobile","useResponsive","screenSize","setScreenSize","innerWidth","UI_CONFIG","MOBILE_BREAKPOINT","isTablet","TABLET_BREAKPOINT","isDesktop","handleResize","addEventListener","removeEventListener","questionnaireSteps","setQuestionnaireSteps","templateLoading","setTemplateLoading","_cqsData","setCqsData","_plantSpecificData","setPlantSpecificData","cqsFormData","setCqsFormData","stepIcons","General","Physical","ExperimentOutlined","FireOutlined","Toxicity","SafetyOutlined","BookOutlined","PPE","MedicineBoxOutlined","Statutory","Others","SettingOutlined","Safety","Environmental","BulbOutlined","Quality","RocketOutlined","loadQuestionnaireTemplate","_cqsResponse2","warn","getDefaultTemplate","template","getQuestionnaireTemplate","templateType","steps","Array","isArray","Error","cqsResponse","getCqsData","processedSteps","step","fields","_cqsResponse","isCqsField","cqsAutoPopulated","extractedCqsFormData","flatMap","find","f","setFieldsValue","setTimeout","getFieldsValue","plantData","getOrCreatePlantSpecificData","plantInputs","mergedFormData","options","getOverallCompletionPercentage","currentFormValues","currentData","_index","stepFields","completedStepFields","debugPlantData","debugInfo","info","warning","handleSaveDraft","silent","arguments","currentValues","updatedFormData","validatedFormData","draftKey","draftData","timestamp","from","version","lastSyncAttempt","syncStatus","sessionId","localStorage","setItem","localStorageError","responses","modifiedBy","responseCount","response","saveDraftPlantResponses","hasChanges","savedFields","serverError","data","handleNext","handlePrevious","handleStepChange","getTotalFieldsPopulated","populated","populatedFields","populatedStepFields","handleOnline","notification","WifiOutlined","duration","handleOffline","DisconnectOutlined","handleKeyDown","event","ctrlKey","metaKey","preventDefault","shiftKey","content","loadWorkflowData","getWorkflow","initialData","existingData","fieldValue","add","prevFormData","mergedData","loadQueries","workflowQueries","getQueriesByWorkflow","autoSaveTimer","AUTO_SAVE","INTERVAL","clearTimeout","debouncedSaveTimer","DEBOUNCE_DELAY","mergedValues","newCompletedSteps","userEditableFields","requiredFields","completedRequiredFields","completedOptionalFields","recoverDraftData","savedDraft","getItem","parse","draftTimestamp","currentTime","_ref4","recoveredFields","draftAge","placement","removeItem","removeError","getStepCompletionStatus","stepIndex","optional","requiredCompleted","optionalCompleted","isComplete","hasOpenQueries","hasResolvedQueries","openQueriesCount","resolvedQueriesCount","requiredCompletionPercentage","optionalFields","stepQueries","q","resolvedQueries","scrollToResolvedQuery","fieldElement","querySelector","scrollIntoView","behavior","block","inline","transition","resolvedQueriesInCurrentStep","hasBeenViewed","latestResolvedQuery","sort","resolvedAt","proceedWithSubmission","allRequiredFields","validateFields","finalData","Promise","resolve","okText","cancelText","onOk","submissionData","submittedBy","submitPlantQuestionnaire","renderField","_field$options2","_field$options3","_field$options4","fieldQueries","hasOpenQuery","some","hasResolvedQuery","resolvedQuery","isFieldCompleted","flexWrap","minWidth","lineHeight","flexShrink","currentValue","getFieldValue","materialContext","materialType","handleRaiseQuery","validationRules","push","pattern","min","getFieldValidationRules","helpContent","resolvedBy","msds_available","cas_available","is_corrosive","highly_toxic","flash_point_65","petroleum_class","ld50_oral","ld50_dermal","lc50_inhalation","carcinogenic","recommended_ppe","is_poisonous","cmvr_listed","msihc_listed","factories_act_listed","getFieldHelpText","commonProps","_field$options","_field$options$find","displayValue","opt","fontStyle","isDisabled","inputProps","autoSize","minRows","maxRows","valuePropName","Checkbox","Group","flexDirection","minHeight","boxShadow","maxWidth","overflow","animation","location","reload","currentStepData","Avatar","DashboardOutlined","x1","y1","x2","y2","offset","stopColor","cx","cy","r","inset","process","MenuOutlined","fieldStats","stepStatus","isActive","isCompleted","MaterialContextPanel","showInfo","trailColor","closable","onValuesChange","changedValues","allValues","animationDelay","ArrowLeftOutlined","opacity","ArrowRightOutlined","Drawer","onClose","Timeline","dot","FloatButton","trigger","right","tooltip","summaryData","CloudSyncOutlined","QueryRaisingModal","_queryData","PlantView","selectedWorkflow","setSelectedWorkflow","questionnaireVisible","setQuestionnaireVisible","setCurrentPlant","userPlantData","setUserPlantData","availablePlants","setAvailablePlants","isPlantUser","isAdmin","userPlants","primaryPlant","filterByPlantAccess","useRoleBasedAccess","refreshWorkflows","usePlantWorkflows","setWorkflows","setError","setDashboardStats","completedToday","getCurrentPlant","storedPlant","storedUser","loadPlantWorkflows","dashboardData","workflowsWithProgress","getPlantDashboardData","signal","correctedWorkflow","recalculateWorkflowProgress","currentState","WORKFLOW_STATES","WORKFLOW_SPECIFIC_STATES","submittedAt","plantDataError","plantWorkflows","getWorkflowsByPlant","getTemplateFieldCounts","_workflow$plantData","calculateCorrectFieldCounts","fallbackError","controller","AbortController","aborted","fetchWorkflows","abort","filteredWorkflows","updateSearchText","updateStatusFilter","updateCompletionFilter","clearAllFilters","applyPreset","saveFilters","searchParams","setSearchParams","useSearchParams","setSearchText","get","setStatusFilter","setCompletionFilter","searchLower","_workflow$materialCod","_workflow$plantCode","_workflow$materialNam","_workflow$itemDescrip","COMPLETION_FILTERS","NOT_STARTED","applyFilters","p","loadSavedFilters","saved","params","URLSearchParams","set","useWorkflowFilters","loadUserPlantData","fetchData","isAuthenticated","currentUser","getCurrentUser","locations","all","userAPI","getUserPlantAssignments","masterDataAPI","getAllLocations","assignedPlants","effectivePlant","firstPlant","plantOptions","loc","locationCode","isPrimary","handlePlantChange","newPlantCode","handleQuestionnaireComplete","_formData","PlantOnly","PlantErrorBoundary","_option$children","plant","PlantQuestionnaire","toString","updateUserPlantAssignments","clear","sessionStorage","accessSummary","setAccessSummary","loadAccessSummary","summary","RBACService","getUserAccessSummary","err","fallbackSummary","getFallbackAccessSummary","checkScreenAccess","hasScreenAccess","screenRoute","getFallbackScreenAccess","checkDataAccess","dataType","hasDataAccess","getFallbackDataAccess","checkPlantDataAccess","hasPlantDataAccess","getFallbackPlantDataAccess","makeAccessDecision","resourceType","resourceId","getFallbackAccessDecision","plantExtractor","filterDataByPlantAccess","primaryRole","getPrimaryRoleType","getUserPlantCodes","getPrimaryPlantCode","isJvcUser","isCqsUser","isTechUser","isViewer","hasRole","role","hasAnyRole","roles","hasAllRoles","every","refresh","onValidationChange","validateInput","useInputValidation","validationState","setValidationState","isValid","errors","wasModified","handleChange","inputValue","validation","SecurityAuditLogger","logXSSAttempt","sanitizedValue","join","securityEvents","setSecurityEvents","handleFinish","sanitizedValues","securityIssues","originalValue","InputSanitizer","sanitizeText","substring","issue","events","getRecentEvents","slice","validateTrigger","securityRules","baseRules","ValidationRules","username","email","password","richText","totalUserEditableFields","completedUserEditableFields","totalCqsFields","backendCompletedFields","correctedCompletionPercentage","token","getToken","validationResponse","apiClient","post","plantCodes","valid","tokenError","possibleKeys","storedUserData","userData","parseError","adminToken","_userDetails$users","users","user","adminError","put","encodeURIComponent","checkUserPlantAssignment","getUserById","getAllUsers","cacheTTL","getAllUsersRealTime","useCache","simpleError","getLocationByCode","searchLocations","searchTerm","createLocation","locationData","updateLocation","deleteLocation","delete","getAllProjectItems","getItemsByProject","getProjectsByItem","itemCode","getAllProjectCodes","getAllItemCodes","getItemCodesByProject","testLocationMaster","testSimpleLocation","diagnosticLocationMaster","getSimpleLocationCount"],"sourceRoot":""}