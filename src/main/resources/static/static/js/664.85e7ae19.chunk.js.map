{"version":3,"file":"static/js/664.85e7ae19.chunk.js","mappings":"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","sources":["constants/roles.js","constants/index.js","services/queryAPI.js","components/QueryWidget.js","screens/WorkflowPage.js"],"sourcesContent":["/**\n * Role constants that match the backend RoleConstants.java\n */\nexport const ROLES = {\n  ADMIN: 'ADMIN',\n  JVC_USER: 'JVC_USER',\n  PLANT_USER: 'PLANT_USER',\n  CQS_USER: 'CQS_USER',\n  TECH_USER: 'TECH_USER',\n  VIEWER: 'VIEWER'\n};\n\n/**\n * Role types for backend compatibility\n */\nexport const ROLE_TYPES = {\n  ADMIN: 'ADMIN',\n  JVC_ROLE: 'JVC_ROLE',\n  PLANT_ROLE: 'PLANT_ROLE',\n  CQS_ROLE: 'CQS_ROLE',\n  TECH_ROLE: 'TECH_ROLE',\n  VIEWER_ROLE: 'VIEWER_ROLE'\n};\n\n/**\n * Role display names\n */\nexport const ROLE_DISPLAY_NAMES = {\n  [ROLES.ADMIN]: 'Administrator',\n  [ROLES.JVC_USER]: 'JVC User',\n  [ROLES.PLANT_USER]: 'Plant User',\n  [ROLES.CQS_USER]: 'CQS User',\n  [ROLES.TECH_USER]: 'Technical User',\n  [ROLES.VIEWER]: 'Viewer'\n};\n\n/**\n * Role descriptions\n */\nexport const ROLE_DESCRIPTIONS = {\n  [ROLES.ADMIN]: 'Full system access with administrative privileges',\n  [ROLES.JVC_USER]: 'Joint Venture Company user with workflow initiation rights',\n  [ROLES.PLANT_USER]: 'Plant-specific user with questionnaire completion rights',\n  [ROLES.CQS_USER]: 'Corporate Quality Services user with query management rights',\n  [ROLES.TECH_USER]: 'Technical user with system monitoring and audit access',\n  [ROLES.VIEWER]: 'Read-only access to assigned content'\n};\n\n/**\n * Role hierarchy (higher number = more privileges)\n */\nexport const ROLE_HIERARCHY = {\n  [ROLES.VIEWER]: 1,\n  [ROLES.PLANT_USER]: 2,\n  [ROLES.CQS_USER]: 3,\n  [ROLES.JVC_USER]: 3,\n  [ROLES.TECH_USER]: 4,\n  [ROLES.ADMIN]: 5\n};\n\n/**\n * Screen access mapping by role\n */\nexport const SCREEN_ACCESS = {\n  [ROLES.ADMIN]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/admin',\n    '/qrmfg/jvc',\n    '/qrmfg/cqs',\n    '/qrmfg/tech',\n    '/qrmfg/plant',\n    '/qrmfg/workflows',\n    '/qrmfg/workflow-monitoring',\n    '/qrmfg/reports',\n    '/qrmfg/users',\n    '/qrmfg/roles',\n    '/qrmfg/sessions',\n    '/qrmfg/user-role-management',\n    '/qrmfg/auditlogs',\n    '/qrmfg/settings'\n  ],\n  [ROLES.JVC_USER]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/jvc',\n    '/qrmfg/workflows',\n    '/qrmfg/reports',\n    '/qrmfg/settings'\n  ],\n  [ROLES.CQS_USER]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/cqs',\n    '/qrmfg/workflows',\n    '/qrmfg/reports',\n    '/qrmfg/settings'\n  ],\n  [ROLES.TECH_USER]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/tech',\n    '/qrmfg/workflows',\n    '/qrmfg/workflow-monitoring',\n    '/qrmfg/reports',\n    '/qrmfg/auditlogs',\n    '/qrmfg/settings'\n  ],\n  [ROLES.PLANT_USER]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/plant',\n    '/qrmfg/workflows',\n    '/qrmfg/reports',\n    '/qrmfg/settings'\n  ],\n  [ROLES.VIEWER]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/settings'\n  ]\n};\n\n/**\n * Data access permissions by role\n */\nexport const DATA_ACCESS = {\n  [ROLES.ADMIN]: ['*'], // All data\n  [ROLES.JVC_USER]: ['workflow', 'document', 'query', 'jvc'],\n  [ROLES.CQS_USER]: ['workflow', 'document', 'query', 'cqs'],\n  [ROLES.TECH_USER]: ['workflow', 'document', 'query', 'audit', 'system', 'tech'],\n  [ROLES.PLANT_USER]: ['workflow', 'document', 'query', 'plant'],\n  [ROLES.VIEWER]: ['workflow:read', 'document:read']\n};\n\n/**\n * Action permissions by role\n */\nexport const ACTION_PERMISSIONS = {\n  [ROLES.ADMIN]: ['*'], // All actions\n  [ROLES.JVC_USER]: ['create', 'read', 'update', 'initiate'],\n  [ROLES.CQS_USER]: ['create', 'read', 'update', 'respond'],\n  [ROLES.TECH_USER]: ['create', 'read', 'update', 'monitor', 'audit'],\n  [ROLES.PLANT_USER]: ['read', 'update', 'complete'],\n  [ROLES.VIEWER]: ['read']\n};\n\n/**\n * Helper functions\n */\nexport const getRoleDisplayName = (role) => {\n  return ROLE_DISPLAY_NAMES[role] || role;\n};\n\nexport const getRoleDescription = (role) => {\n  return ROLE_DESCRIPTIONS[role] || 'No description available';\n};\n\nexport const getRoleHierarchy = (role) => {\n  return ROLE_HIERARCHY[role] || 0;\n};\n\nexport const hasHigherPrivilege = (role1, role2) => {\n  return getRoleHierarchy(role1) > getRoleHierarchy(role2);\n};\n\nexport const getScreensForRole = (role) => {\n  return SCREEN_ACCESS[role] || [];\n};\n\nexport const getDataAccessForRole = (role) => {\n  return DATA_ACCESS[role] || [];\n};\n\nexport const getActionPermissionsForRole = (role) => {\n  return ACTION_PERMISSIONS[role] || [];\n};\n\nexport const canAccessScreen = (role, screen) => {\n  const screens = getScreensForRole(role);\n  return screens.includes('*') || screens.includes(screen);\n};\n\nexport const canAccessData = (role, dataType) => {\n  const dataAccess = getDataAccessForRole(role);\n  return dataAccess.includes('*') || \n         dataAccess.includes(dataType) || \n         dataAccess.some(access => access.startsWith(`${dataType}:`));\n};\n\nexport const canPerformAction = (role, action) => {\n  const actions = getActionPermissionsForRole(role);\n  return actions.includes('*') || actions.includes(action);\n};","// Application Constants\n\n// API Configuration\nexport const API_CONFIG = {\n  TIMEOUT: 30000, // 30 seconds\n  BASE_URL: process.env.REACT_APP_API_BASE_URL || '/qrmfg/api/v1',\n  RETRY_ATTEMPTS: 3\n};\n\n// Authentication\nexport const AUTH_CONFIG = {\n  TOKEN_KEY: 'qrmfg_secure_token',\n  LOGIN_PATH: '/qrmfg/login',\n  DEFAULT_REDIRECT: '/qrmfg'\n};\n\n// UI Constants\nexport const UI_CONFIG = {\n  MOBILE_BREAKPOINT: 768,\n  TABLET_BREAKPOINT: 1024,\n  PAGE_SIZE: 10,\n  DEBOUNCE_DELAY: 300\n};\n\n// Workflow States\nexport const WORKFLOW_STATES = {\n  INITIATED: 'INITIATED',\n  IN_PROGRESS: 'IN_PROGRESS',\n  PENDING_REVIEW: 'PENDING_REVIEW',\n  APPROVED: 'APPROVED',\n  REJECTED: 'REJECTED',\n  COMPLETED: 'COMPLETED'\n};\n\n// Query States\nexport const QUERY_STATES = {\n  OPEN: 'OPEN',\n  IN_PROGRESS: 'IN_PROGRESS',\n  RESOLVED: 'RESOLVED',\n  CLOSED: 'CLOSED'\n};\n\n// Priority Levels\nexport const PRIORITY_LEVELS = {\n  LOW: 'LOW',\n  MEDIUM: 'MEDIUM',\n  HIGH: 'HIGH',\n  URGENT: 'URGENT',\n  CRITICAL: 'CRITICAL'\n};\n\n// Teams\nexport const TEAMS = {\n  CQS: 'CQS',\n  TECH: 'TECH',\n  JVC: 'JVC'\n};\n\n// Error Severity\nexport const ERROR_SEVERITY = {\n  LOW: 'LOW',\n  MEDIUM: 'MEDIUM',\n  HIGH: 'HIGH',\n  CRITICAL: 'CRITICAL'\n};\n\n// Error Categories\nexport const ERROR_CATEGORY = {\n  APPLICATION: 'APPLICATION',\n  COMPONENT: 'COMPONENT',\n  API: 'API',\n  ROUTE: 'ROUTE',\n  ASYNC: 'ASYNC',\n  AUTHENTICATION: 'AUTHENTICATION'\n};\n\n// Status Colors\nexport const STATUS_COLORS = {\n  [WORKFLOW_STATES.INITIATED]: 'blue',\n  [WORKFLOW_STATES.IN_PROGRESS]: 'orange',\n  [WORKFLOW_STATES.PENDING_REVIEW]: 'purple',\n  [WORKFLOW_STATES.APPROVED]: 'green',\n  [WORKFLOW_STATES.REJECTED]: 'red',\n  [WORKFLOW_STATES.COMPLETED]: 'green'\n};\n\n// Priority Colors\nexport const PRIORITY_COLORS = {\n  [PRIORITY_LEVELS.LOW]: 'green',\n  [PRIORITY_LEVELS.MEDIUM]: 'blue',\n  [PRIORITY_LEVELS.HIGH]: 'orange',\n  [PRIORITY_LEVELS.URGENT]: 'red',\n  [PRIORITY_LEVELS.CRITICAL]: 'red'\n};\n\n// Form Validation\nexport const VALIDATION = {\n  MIN_PASSWORD_LENGTH: 8,\n  MAX_FILE_SIZE: 10 * 1024 * 1024, // 10MB\n  ALLOWED_FILE_TYPES: ['.pdf', '.doc', '.docx', '.xls', '.xlsx', '.jpg', '.jpeg', '.png'],\n  MAX_COMMENT_LENGTH: 1000,\n  MAX_DESCRIPTION_LENGTH: 500\n};\n\n// Date Formats\nexport const DATE_FORMATS = {\n  DISPLAY: 'DD/MM/YYYY',\n  DISPLAY_WITH_TIME: 'DD/MM/YYYY HH:mm',\n  API: 'YYYY-MM-DD',\n  ISO: 'YYYY-MM-DDTHH:mm:ss.SSSZ'\n};\n\n// Local Storage Keys\nexport const STORAGE_KEYS = {\n  USER_PREFERENCES: 'qrmfg_user_preferences',\n  THEME: 'qrmfg_theme',\n  LANGUAGE: 'qrmfg_language'\n};\n\n// Animation Delays\nexport const ANIMATION = {\n  FADE_IN_DELAY: 0.1, // seconds\n  STAGGER_DELAY: 0.05, // seconds\n  TRANSITION_DURATION: 0.3 // seconds\n};\n\n// Notification Types\nexport const NOTIFICATION_TYPES = {\n  SUCCESS: 'success',\n  ERROR: 'error',\n  WARNING: 'warning',\n  INFO: 'info'\n};\n\n// Component Names (for error boundaries)\nexport const COMPONENT_NAMES = {\n  USER_TABLE: 'UserTable',\n  USER_MODAL: 'UserModal',\n  PLANT_ASSIGNMENT_FORM: 'PlantAssignmentForm',\n  PLANT_DASHBOARD: 'PlantDashboard',\n  WORKFLOW_TABLE: 'WorkflowTable',\n  FILTER_PANEL: 'FilterPanel'\n};\n\n// File size constants\nexport const FILE_SIZE = {\n  MAX_UPLOAD_SIZE: 25 * 1024 * 1024, // 25MB\n  BYTES_PER_KB: 1024,\n  BYTES_PER_MB: 1024 * 1024,\n  BYTES_PER_GB: 1024 * 1024 * 1024\n};\n\n// Workflow specific states\nexport const WORKFLOW_SPECIFIC_STATES = {\n  JVC_PENDING: 'JVC_PENDING',\n  PLANT_PENDING: 'PLANT_PENDING',\n  CQS_PENDING: 'CQS_PENDING',\n  TECH_PENDING: 'TECH_PENDING',\n  DRAFT: 'DRAFT',\n  IN_PROGRESS: 'IN_PROGRESS',\n  COMPLETED: 'COMPLETED'\n};\n\n// Query status\nexport const QUERY_STATUS = {\n  OPEN: 'OPEN',\n  RESOLVED: 'RESOLVED',\n  CLOSED: 'CLOSED'\n};\n\n// Query status groups for filtering\nexport const QUERY_STATUS_GROUPS = {\n  ACTIVE: ['OPEN'],\n  INACTIVE: ['RESOLVED', 'CLOSED']\n};\n\n// Team names\nexport const TEAM_NAMES = {\n  CQS: 'CQS',\n  TECH: 'TECH',\n  JVC: 'JVC',\n  PLANT: 'PLANT'\n};\n\n// Auto-save intervals\nexport const AUTO_SAVE = {\n  INTERVAL: 40000, // 40 seconds\n  DEBOUNCE_DELAY: 15000 // 15 seconds\n};\n\n// Pagination defaults\nexport const PAGINATION = {\n  DEFAULT_PAGE_SIZE: 10,\n  SMALL_PAGE_SIZE: 5,\n  LARGE_PAGE_SIZE: 15,\n  SHOW_SIZE_CHANGER: true,\n  SHOW_QUICK_JUMPER: true\n};\n\n// Completion filter options\nexport const COMPLETION_FILTERS = {\n  ALL: 'all',\n  COMPLETED: 'completed',\n  IN_PROGRESS: 'in-progress',\n  NOT_STARTED: 'not-started'\n};\n\n// Tab keys\nexport const TAB_KEYS = {\n  INITIATE: 'initiate',\n  PENDING: 'pending',\n  COMPLETED: 'completed',\n  QUERIES: 'queries',\n  HISTORY: 'history'\n};\n\n// Re-export role constants\nexport * from './roles';\n","import apiClient from '../api/client';\n\n/**\n * Query API service providing query management functionality\n * Migrated to use unified APIClient with standardized error handling\n *\n * @namespace queryAPI\n */\nexport const queryAPI = {\n  // Query CRUD operations\n  /**\n   * Create a new query for a workflow\n   * @param {string} workflowId - Workflow ID to create query for\n   * @param {Object} queryData - Query data\n   * @returns {Promise<Object>} Created query object\n   */\n  createQuery: (workflowId, queryData) =>\n    apiClient.post(`/queries/workflow/${workflowId}`, queryData),\n\n  /**\n   * Get query by ID\n   * @param {string} id - Query ID\n   * @returns {Promise<Object>} Query object\n   */\n  getQuery: id => apiClient.get(`/queries/${id}`),\n\n  /**\n   * Update query by ID\n   * @param {string} id - Query ID\n   * @param {Object} queryData - Updated query data\n   * @returns {Promise<Object>} Updated query object\n   */\n  updateQuery: (id, queryData) => apiClient.put(`/queries/${id}`, queryData),\n\n  /**\n   * Delete query by ID\n   * @param {string} id - Query ID\n   * @returns {Promise<void>} Promise that resolves when query is deleted\n   */\n  deleteQuery: id => apiClient.delete(`/queries/${id}`),\n\n  // Query resolution\n  /**\n   * Resolve a query\n   * @param {string} id - Query ID\n   * @param {Object} resolutionData - Resolution data\n   * @returns {Promise<Object>} Resolved query object\n   */\n  resolveQuery: (id, resolutionData) => apiClient.post(`/queries/${id}/resolve`, resolutionData),\n\n  /**\n   * Reopen a resolved query\n   * @param {string} id - Query ID\n   * @param {string} reason - Reason for reopening\n   * @returns {Promise<Object>} Reopened query object\n   */\n  reopenQuery: (id, reason) => apiClient.post(`/queries/${id}/reopen`, { reason }),\n\n  // Query assignment\n  /**\n   * Assign query to team/user\n   * @param {string} id - Query ID\n   * @param {Object} assignmentData - Assignment data\n   * @returns {Promise<Object>} Assigned query object\n   */\n  assignQuery: (id, assignmentData) => apiClient.post(`/queries/${id}/assign`, assignmentData),\n\n  /**\n   * Reassign query to different team\n   * @param {string} id - Query ID\n   * @param {string} newTeam - New team to assign to\n   * @param {string} reason - Reason for reassignment\n   * @returns {Promise<Object>} Reassigned query object\n   */\n  reassignQuery: (id, newTeam, reason) =>\n    apiClient.put(`/queries/${id}/assign`, { team: newTeam, reason }),\n\n  // Query search and filtering\n  /**\n   * Get all queries from all time\n   * @returns {Promise<Array>} Array of all queries\n   */\n  getAllQueries: () => apiClient.get('/queries'),\n\n  /**\n   * Get queries for a specific workflow\n   * @param {string} workflowId - Workflow ID\n   * @returns {Promise<Array>} Array of queries for the workflow\n   */\n  getQueriesByWorkflow: workflowId => apiClient.get(`/queries/workflow/${workflowId}`),\n\n  /**\n   * Get queries assigned to a team\n   * @param {string} team - Team name\n   * @returns {Promise<Array>} Array of queries for the team\n   */\n  getQueriesByTeam: team => apiClient.get(`/queries/team/${team}`),\n\n  /**\n   * Get queries by status\n   * @param {string} status - Query status\n   * @returns {Promise<Array>} Array of queries with the specified status\n   */\n  getQueriesByStatus: status => apiClient.get(`/queries/status/${status}`),\n\n  /**\n   * Get queries raised by current user\n   * @param {string} username - Username (unused in current implementation)\n   * @returns {Promise<Array>} Array of queries raised by user\n   */\n  getQueriesByUser: _username => apiClient.get(`/queries/my-raised`),\n\n  /**\n   * Search queries with parameters\n   * @param {Object} searchParams - Search parameters\n   * @returns {Promise<Array>} Array of matching queries\n   */\n  searchQueries: searchParams => {\n    const queryString = new URLSearchParams(searchParams).toString();\n    return apiClient.get(`/queries/search?${queryString}`);\n  },\n\n  // Query statistics\n  /**\n   * Get query statistics for time range\n   * @param {number} timeRange - Number of days to look back\n   * @returns {Promise<Object>} Query statistics\n   */\n  getQueryStats: timeRange => apiClient.get(`/queries/recent?days=${timeRange}`),\n\n  /**\n   * Get query counts by team\n   * @param {string} team - Team name\n   * @returns {Promise<number>} Number of open queries for team\n   */\n  getQueryCountsByTeam: team => apiClient.get(`/queries/stats/count-open/${team}`),\n\n  /**\n   * Get average resolution time by team\n   * @param {string} team - Team name\n   * @returns {Promise<number>} Average resolution time in hours\n   */\n  getAvgResolutionTimeByTeam: team => apiClient.get(`/queries/stats/avg-resolution-time/${team}`),\n\n  /**\n   * Get overdue queries\n   * @param {number} dayThreshold - Days threshold for overdue (default: 3)\n   * @returns {Promise<Array>} Array of overdue queries\n   */\n  getOverdueQueries: (_dayThreshold = 3) => apiClient.get('/queries/overdue'),\n\n  // Team-specific statistics\n  /**\n   * Get overdue queries count by team\n   * @param {string} team - Team name\n   * @returns {Promise<number>} Number of overdue queries for team\n   */\n  getOverdueQueriesCountByTeam: team => apiClient.get(`/queries/stats/overdue-count/${team}`),\n\n  /**\n   * Get queries resolved today by team\n   * @param {string} team - Team name\n   * @returns {Promise<number>} Number of queries resolved today by team\n   */\n  getQueriesResolvedTodayByTeam: team => apiClient.get(`/queries/stats/resolved-today/${team}`),\n\n  // Query SLA tracking\n  /**\n   * Get query SLA status\n   * @param {string} id - Query ID\n   * @returns {Promise<boolean>} True if query is overdue\n   */\n  getQuerySLAStatus: id => apiClient.get(`/queries/${id}/is-overdue`),\n\n  /**\n   * Get queries nearing SLA deadline\n   * @param {number} hoursThreshold - Hours threshold (default: 24)\n   * @returns {Promise<Array>} Array of queries needing attention\n   */\n  getQueriesNearingSLA: (_hoursThreshold = 24) => apiClient.get('/queries/needing-attention'),\n\n  // Query comments/updates (not implemented in backend yet)\n  /**\n   * Add comment to query\n   * @param {string} id - Query ID\n   * @param {string} comment - Comment text\n   * @returns {Promise<Object>} Added comment object\n   */\n  addQueryComment: (id, comment) => apiClient.post(`/queries/${id}/comments`, { comment }),\n\n  /**\n   * Get comments for query\n   * @param {string} id - Query ID\n   * @returns {Promise<Array>} Array of comments for the query\n   */\n  getQueryComments: id => apiClient.get(`/queries/${id}/comments`),\n\n  // Query priority management\n  /**\n   * Update query priority\n   * @param {string} id - Query ID\n   * @param {string} priority - New priority level\n   * @returns {Promise<Object>} Updated query object\n   */\n  updateQueryPriority: (id, priority) => apiClient.put(`/queries/${id}/priority`, { priority }),\n\n  /**\n   * Escalate query priority\n   * @param {string} id - Query ID\n   * @param {string} escalationReason - Reason for escalation\n   * @returns {Promise<Object>} Escalated query object\n   */\n  escalateQuery: (id, _escalationReason) =>\n    apiClient.put(`/queries/${id}/priority`, { priorityLevel: 'HIGH' }),\n\n  // Query document management\n  /**\n   * Upload documents to a query\n   * @param {string} queryId - Query ID\n   * @param {Array<File>} files - Files to upload\n   * @returns {Promise<Array>} Array of uploaded document objects\n   */\n  uploadQueryDocuments: (queryId, files) => {\n    return apiClient.upload(`/queries/${queryId}/documents`, files);\n  },\n\n  /**\n   * Upload documents to a query response\n   * @param {string} queryId - Query ID\n   * @param {string} responseId - Response ID\n   * @param {Array<File>} files - Files to upload\n   * @returns {Promise<Array>} Array of uploaded document objects\n   */\n  uploadResponseDocuments: (queryId, responseId, files) => {\n    return apiClient.upload(`/queries/${queryId}/responses/${responseId}/documents`, files);\n  },\n\n  /**\n   * Get all documents associated with a query\n   * @param {string} queryId - Query ID\n   * @returns {Promise<Array>} Array of document objects\n   */\n  getQueryDocuments: (queryId) => apiClient.get(`/queries/${queryId}/documents`),\n\n  /**\n   * Download a query document\n   * @param {string} queryId - Query ID\n   * @param {string} documentId - Document ID\n   * @returns {Promise<Blob>} Document file blob\n   */\n  downloadQueryDocument: (queryId, documentId) => {\n    return apiClient.download(`/queries/${queryId}/documents/${documentId}/download`);\n  },\n\n  /**\n   * Delete a query document\n   * @param {string} queryId - Query ID\n   * @param {string} documentId - Document ID\n   * @returns {Promise<void>} Promise that resolves when document is deleted\n   */\n  deleteQueryDocument: (queryId, documentId) => {\n    return apiClient.delete(`/queries/${queryId}/documents/${documentId}`);\n  },\n\n  // Enhanced Query Status Management (New APIs)\n\n  /**\n   * Close query without resolution\n   * @param {string} queryId - Query ID\n   * @param {string} reason - Reason for closing\n   * @returns {Promise<Object>} Updated query object\n   */\n  closeQuery: (queryId, reason) => \n    apiClient.post(`/queries/${queryId}/close`, { reason }),\n\n  /**\n   * Check if plant can edit form while queries are active\n   * @param {string} workflowId - Workflow ID\n   * @returns {Promise<Object>} Object with canEdit boolean\n   */\n  canPlantEditForm: (workflowId) => \n    apiClient.get(`/queries/workflow/${workflowId}/can-edit`),\n\n  /**\n   * Get comprehensive query status summary for workflow\n   * @param {string} workflowId - Workflow ID\n   * @returns {Promise<Object>} Query status summary\n   */\n  getQueryStatusSummary: (workflowId) => \n    apiClient.get(`/queries/workflow/${workflowId}/status-summary`)\n};","import { PlusOutlined, FilterOutlined, ReloadOutlined, CheckCircleOutlined, ClockCircleOutlined, UserOutlined, PaperClipOutlined } from '@ant-design/icons';\nimport { Card, Tabs, Tag, Button, Space, Modal, Form, Input, Select, Badge, Row, Col, Typography, Divider, Empty, List } from 'antd';\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport { UI_CONFIG, QUERY_STATUS, QUERY_STATUS_GROUPS, TEAM_NAMES } from '../constants';\nimport { queryAPI } from '../services/queryAPI';\n\n// Hook to detect screen size\nconst useResponsive = () => {\n  const [screenSize, setScreenSize] = useState({\n    isMobile: window.innerWidth <= UI_CONFIG.MOBILE_BREAKPOINT,\n    isTablet:\n      window.innerWidth > UI_CONFIG.MOBILE_BREAKPOINT &&\n      window.innerWidth <= UI_CONFIG.TABLET_BREAKPOINT,\n    isDesktop: window.innerWidth > UI_CONFIG.TABLET_BREAKPOINT\n  });\n\n  useEffect(() => {\n    const handleResize = () => {\n      setScreenSize({\n        isMobile: window.innerWidth <= UI_CONFIG.MOBILE_BREAKPOINT,\n        isTablet:\n          window.innerWidth > UI_CONFIG.MOBILE_BREAKPOINT &&\n          window.innerWidth <= UI_CONFIG.TABLET_BREAKPOINT,\n        isDesktop: window.innerWidth > UI_CONFIG.TABLET_BREAKPOINT\n      });\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return screenSize;\n};\n\nconst { TabPane } = Tabs;\nconst { TextArea } = Input;\nconst { Option } = Select;\nconst { Text } = Typography;\n\nconst QueryWidget = ({ workflowId, userRole }) => {\n  const [loading, setLoading] = useState(false);\n  const [queries, setQueries] = useState({\n    all: [],\n    open: [],\n    resolved: [],\n    myQueries: []\n  });\n  const [filteredQueries, setFilteredQueries] = useState({\n    all: [],\n    open: [],\n    resolved: [],\n    myQueries: []\n  });\n  const [createModalVisible, setCreateModalVisible] = useState(false);\n  const [resolveModalVisible, setResolveModalVisible] = useState(false);\n  const [selectedQuery, setSelectedQuery] = useState(null);\n  const [form] = Form.useForm();\n  const [resolveForm] = Form.useForm();\n  const { isMobile } = useResponsive();\n  \n  // Filter states\n  const [filters, setFilters] = useState({\n    team: 'all',\n    status: 'all',\n    priority: 'all',\n    dateRange: 'all',\n    materialCode: '',\n    projectCode: '',\n    plantCode: ''\n  });\n\n  useEffect(() => {\n    // Always load all queries, not just for a specific workflow\n    const controller = new AbortController();\n\n    const loadQueriesWithAbort = async () => {\n      try {\n        setLoading(true);\n        // Use the general queries endpoint to get all queries from all time\n        const allQueries = await queryAPI.getAllQueries({\n          signal: controller.signal\n        });\n\n        if (!controller.signal.aborted) {\n          const queriesData = {\n            all: allQueries,\n            open: allQueries.filter(q => QUERY_STATUS_GROUPS.ACTIVE.includes(q.status)),\n            resolved: allQueries.filter(q => QUERY_STATUS_GROUPS.INACTIVE.includes(q.status)),\n            myQueries: allQueries.filter(q => q.createdBy === getCurrentUser())\n          };\n          setQueries(queriesData);\n          setFilteredQueries(queriesData);\n        }\n      } catch (error) {\n        if (!controller.signal.aborted) {\n          console.error('Failed to load queries:', error);\n        }\n      } finally {\n        if (!controller.signal.aborted) {\n          setLoading(false);\n        }\n      }\n    };\n\n    loadQueriesWithAbort();\n\n    return () => {\n      controller.abort();\n    };\n  }, []); // Remove workflowId dependency to load all queries\n\n  const loadQueries = useCallback(\n    async signal => {\n      try {\n        setLoading(true);\n        // Load all queries from all time\n        const allQueries = await queryAPI.getAllQueries({ signal });\n\n        if (!signal?.aborted) {\n          const queriesData = {\n            all: allQueries,\n            open: allQueries.filter(q => QUERY_STATUS_GROUPS.ACTIVE.includes(q.status)),\n            resolved: allQueries.filter(q => QUERY_STATUS_GROUPS.INACTIVE.includes(q.status)),\n            myQueries: allQueries.filter(q => q.createdBy === getCurrentUser())\n          };\n          setQueries(queriesData);\n          setFilteredQueries(queriesData);\n        }\n      } catch (error) {\n        if (!signal?.aborted) {\n          console.error('Failed to load queries:', error);\n        }\n      } finally {\n        if (!signal?.aborted) {\n          setLoading(false);\n        }\n      }\n    },\n    [] // Remove workflowId dependency\n  );\n\n  const getCurrentUser = () => {\n    // Get current user from auth context or localStorage\n    return localStorage.getItem('username') || 'current_user';\n  };\n\n  const getStatusColor = status => {\n    const colors = {\n      OPEN: 'red',\n      RESOLVED: 'green',\n      CLOSED: 'gray'\n    };\n    return colors[status] || 'default';\n  };\n\n  const getTeamColor = team => {\n    const colors = {\n      CQS: 'blue',\n      TECH: 'purple',\n      JVC: 'orange',\n      PLANT: 'green'\n    };\n    return colors[team] || 'default';\n  };\n\n  const getPriorityColor = priority => {\n    const colors = {\n      LOW: 'blue',\n      MEDIUM: 'orange',\n      HIGH: 'red',\n      URGENT: 'purple'\n    };\n    return colors[priority] || 'default';\n  };\n\n  const getDaysOpenColor = days => {\n    if (days >= 7) return '#ff4d4f';\n    if (days >= 3) return '#faad14';\n    return '#52c41a';\n  };\n\n  const renderQueryCard = (query) => {\n    const isResolved = query.status === 'RESOLVED';\n    \n    return (\n      <Card \n        key={query.id}\n        size=\"small\" \n        style={{ \n          marginBottom: 16, \n          border: '1px solid #f0f0f0', \n          borderRadius: '8px',\n          boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\n        }}\n      >\n        <div>\n          {/* Header with Query ID and Status */}\n          <div style={{ marginBottom: 12 }}>\n            <Space wrap>\n              <Text strong style={{ fontSize: '16px' }}>Query #{query.id}</Text>\n              <Tag color={getStatusColor(query.status)}>{query.status}</Tag>\n              <Tag color={getTeamColor(query.assignedTeam)}>{query.assignedTeam}</Tag>\n              {query.priorityLevel && (\n                <Tag color={getPriorityColor(query.priorityLevel)}>{query.priorityLevel}</Tag>\n              )}\n            </Space>\n          </div>\n\n          {/* Material and Project Context */}\n          <div style={{ marginBottom: 12, padding: '8px', background: '#fafafa', borderRadius: '4px' }}>\n            <Row gutter={16}>\n              {query.materialCode && (\n                <Col span={8}>\n                  <Text strong style={{ color: '#1890ff' }}>Material:</Text>\n                  <div style={{ fontSize: '14px' }}>{query.materialCode}</div>\n                  {query.materialName && (\n                    <div style={{ fontSize: '12px', color: '#666' }}>{query.materialName}</div>\n                  )}\n                </Col>\n              )}\n              {query.projectCode && (\n                <Col span={8}>\n                  <Text strong style={{ color: '#1890ff' }}>Project:</Text>\n                  <div style={{ fontSize: '14px' }}>{query.projectCode}</div>\n                </Col>\n              )}\n              {query.assignedPlant && (\n                <Col span={8}>\n                  <Text strong style={{ color: '#1890ff' }}>Plant:</Text>\n                  <div style={{ fontSize: '14px' }}>{query.assignedPlant}</div>\n                </Col>\n              )}\n            </Row>\n          </div>\n\n          {/* Original Question Section */}\n          {query.originalQuestion && (\n            <div style={{ marginBottom: 12, padding: '8px', background: '#f6ffed', borderRadius: '4px', border: '1px solid #b7eb8f' }}>\n              <Text strong style={{ color: '#52c41a' }}>Original Questionnaire Question:</Text>\n              <div style={{ fontSize: '14px', fontStyle: 'italic', marginTop: '4px' }}>\n                {query.originalQuestion}\n              </div>\n            </div>\n          )}\n\n          {/* Query Text (What was asked) */}\n          <div style={{ marginBottom: 12, padding: '8px', background: '#fff7e6', borderRadius: '4px', border: '1px solid #ffd591' }}>\n            <Text strong style={{ color: '#fa8c16' }}>Query Text (What was asked):</Text>\n            <div style={{ fontSize: '14px', marginTop: '4px', whiteSpace: 'pre-wrap' }}>\n              {query.question || 'No query text available'}\n            </div>\n          </div>\n\n          {/* Query Metadata */}\n          <div style={{ fontSize: '12px', color: '#666', marginBottom: 12 }}>\n            <Row gutter={16}>\n              <Col span={8}>\n                <UserOutlined /> <strong>Raised by:</strong> {query.raisedBy}\n              </Col>\n              <Col span={8}>\n                <ClockCircleOutlined /> <strong>Created:</strong> {query.createdAt && new Date(query.createdAt).toLocaleString()}\n              </Col>\n              <Col span={8}>\n                <strong>Days open:</strong> <span style={{ color: getDaysOpenColor(query.daysOpen || 0) }}>{query.daysOpen || 0}</span>\n              </Col>\n            </Row>\n          </div>\n\n          {/* Resolution Section */}\n          {query.response && (\n            <div style={{ marginTop: 12, padding: '12px', background: '#f0f9ff', borderRadius: '6px', borderLeft: '4px solid #1890ff' }}>\n              <div style={{ marginBottom: 8 }}>\n                <Text strong style={{ fontSize: '15px', color: '#1890ff' }}>Resolution:</Text>\n              </div>\n              <div style={{ marginBottom: 8, fontSize: '14px', whiteSpace: 'pre-wrap' }}>\n                {query.response}\n              </div>\n              <div style={{ fontSize: '12px', color: '#666' }}>\n                <Row gutter={16}>\n                  <Col span={12}>\n                    <UserOutlined /> <strong>Resolved by:</strong> {query.resolvedBy}\n                  </Col>\n                  <Col span={12}>\n                    <ClockCircleOutlined /> <strong>Resolved on:</strong> {query.resolvedAt && new Date(query.resolvedAt).toLocaleString()}\n                  </Col>\n                </Row>\n              </div>\n            </div>\n          )}\n\n          {/* Actions */}\n          <div style={{ marginTop: 12, textAlign: 'right' }}>\n            <Space>\n              {query.status === QUERY_STATUS.OPEN && canResolveQuery(query) && (\n                <Button\n                  size=\"small\"\n                  type=\"primary\"\n                  icon={<CheckCircleOutlined />}\n                  onClick={() => {\n                    setSelectedQuery(query);\n                    setResolveModalVisible(true);\n                  }}\n                >\n                  Resolve\n                </Button>\n              )}\n              {QUERY_STATUS_GROUPS.INACTIVE.includes(query.status) && (\n                <Button\n                  size=\"small\"\n                  type=\"link\"\n                  onClick={() => {\n                    setSelectedQuery(query);\n                    setResolveModalVisible(true);\n                  }}\n                >\n                  View Details\n                </Button>\n              )}\n            </Space>\n          </div>\n\n          {/* Query Category if available */}\n          {query.queryCategory && (\n            <div style={{ marginTop: 8 }}>\n              <Text strong style={{ fontSize: '12px', color: '#722ed1' }}>Category: </Text>\n              <Tag color=\"purple\">{query.queryCategory}</Tag>\n            </div>\n          )}\n        </div>\n      </Card>\n    );\n  };\n\n  // Filter queries based on current filter settings\n  const applyFilters = useCallback(() => {\n    const filterQueries = (queryList) => {\n      return queryList.filter(query => {\n        // Team filter\n        if (filters.team !== 'all' && query.assignedTeam !== filters.team) {\n          return false;\n        }\n\n        // Status filter\n        if (filters.status !== 'all' && query.status !== filters.status) {\n          return false;\n        }\n\n        // Priority filter\n        if (filters.priority !== 'all' && query.priorityLevel !== filters.priority) {\n          return false;\n        }\n\n        // Material Code filter\n        if (filters.materialCode && !query.materialCode?.toLowerCase().includes(filters.materialCode.toLowerCase())) {\n          return false;\n        }\n\n        // Project Code filter (if available)\n        if (filters.projectCode && query.projectCode && !query.projectCode.toLowerCase().includes(filters.projectCode.toLowerCase())) {\n          return false;\n        }\n\n        // Plant Code filter\n        if (filters.plantCode && !query.assignedPlant?.toLowerCase().includes(filters.plantCode.toLowerCase())) {\n          return false;\n        }\n\n        // Date Range filter\n        if (filters.dateRange !== 'all') {\n          const queryDate = new Date(query.createdAt);\n          const now = new Date();\n          let startDate;\n\n          switch (filters.dateRange) {\n            case 'today':\n              startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n              break;\n            case 'week':\n              startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n              break;\n            case 'month':\n              startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n              break;\n            case '3months':\n              startDate = new Date(now.getFullYear(), now.getMonth() - 3, 1);\n              break;\n            default:\n              return true;\n          }\n\n          if (queryDate < startDate) {\n            return false;\n          }\n        }\n\n        return true;\n      });\n    };\n\n    setFilteredQueries({\n      all: filterQueries(queries.all),\n      open: filterQueries(queries.open),\n      resolved: filterQueries(queries.resolved),\n      myQueries: filterQueries(queries.myQueries)\n    });\n  }, [queries, filters]);\n\n  // Apply filters whenever queries or filters change\n  useEffect(() => {\n    applyFilters();\n  }, [queries, filters, applyFilters]);\n\n  const handleCreateQuery = async values => {\n    try {\n      await queryAPI.createQuery({\n        workflowId,\n        ...values,\n        createdBy: getCurrentUser()\n      });\n      setCreateModalVisible(false);\n      form.resetFields();\n      loadQueries();\n    } catch (error) {\n      console.error('Failed to create query:', error);\n    }\n  };\n\n  const handleResolveQuery = async values => {\n    try {\n      await queryAPI.resolveQuery(selectedQuery.id, {\n        resolution: values.resolution,\n        resolvedBy: getCurrentUser()\n      });\n      setResolveModalVisible(false);\n      resolveForm.resetFields();\n      setSelectedQuery(null);\n      loadQueries();\n    } catch (error) {\n      console.error('Failed to resolve query:', error);\n    }\n  };\n\n\n\n\n\n  const canCreateQuery = () => {\n    return [TEAM_NAMES.PLANT, TEAM_NAMES.JVC].includes(userRole);\n  };\n\n  const canResolveQuery = query => {\n    return query.assignedTeam === userRole || userRole === 'ADMIN';\n  };\n\n\n\n  const getTabCount = queryList => {\n    return queryList.length > 0 ? queryList.length : null;\n  };\n\n  return (\n    <Card\n      title=\"Queries\"\n      extra={\n        <Space>\n          <Button\n            icon={<ReloadOutlined />}\n            onClick={() => {\n              const controller = new AbortController();\n              loadQueries(controller.signal);\n            }}\n          >\n            Refresh\n          </Button>\n          {canCreateQuery() && (\n            <Button\n              type=\"primary\"\n              icon={<PlusOutlined />}\n              onClick={() => setCreateModalVisible(true)}\n            >\n              Raise Query\n            </Button>\n          )}\n        </Space>\n      }\n    >\n      {/* Filter Controls */}\n      <Card size=\"small\" style={{ marginBottom: 16, background: '#fafafa' }}>\n        <Row gutter={[16, 8]} align=\"middle\">\n          <Col xs={24} sm={6} md={4}>\n            <Select\n              placeholder=\"Team\"\n              value={filters.team}\n              onChange={value => setFilters({ ...filters, team: value })}\n              style={{ width: '100%' }}\n              size=\"small\"\n            >\n              <Select.Option value=\"all\">All Teams</Select.Option>\n              <Select.Option value=\"CQS\">CQS</Select.Option>\n              <Select.Option value=\"TECH\">TECH</Select.Option>\n              <Select.Option value=\"JVC\">JVC</Select.Option>\n              <Select.Option value=\"PLANT\">PLANT</Select.Option>\n            </Select>\n          </Col>\n          <Col xs={24} sm={6} md={4}>\n            <Select\n              placeholder=\"Status\"\n              value={filters.status}\n              onChange={value => setFilters({ ...filters, status: value })}\n              style={{ width: '100%' }}\n              size=\"small\"\n            >\n              <Select.Option value=\"all\">All Status</Select.Option>\n              <Select.Option value=\"OPEN\">Open</Select.Option>\n              <Select.Option value=\"RESOLVED\">Resolved</Select.Option>\n              <Select.Option value=\"CLOSED\">Closed</Select.Option>\n            </Select>\n          </Col>\n          <Col xs={24} sm={6} md={4}>\n            <Select\n              placeholder=\"Priority\"\n              value={filters.priority}\n              onChange={value => setFilters({ ...filters, priority: value })}\n              style={{ width: '100%' }}\n              size=\"small\"\n            >\n              <Select.Option value=\"all\">All Priority</Select.Option>\n              <Select.Option value=\"LOW\">Low</Select.Option>\n              <Select.Option value=\"MEDIUM\">Medium</Select.Option>\n              <Select.Option value=\"HIGH\">High</Select.Option>\n              <Select.Option value=\"URGENT\">Urgent</Select.Option>\n            </Select>\n          </Col>\n          <Col xs={24} sm={6} md={4}>\n            <Select\n              placeholder=\"Date Range\"\n              value={filters.dateRange}\n              onChange={value => setFilters({ ...filters, dateRange: value })}\n              style={{ width: '100%' }}\n              size=\"small\"\n            >\n              <Select.Option value=\"all\">All Time</Select.Option>\n              <Select.Option value=\"today\">Today</Select.Option>\n              <Select.Option value=\"week\">Past Week</Select.Option>\n              <Select.Option value=\"month\">Past Month</Select.Option>\n              <Select.Option value=\"3months\">Past 3 Months</Select.Option>\n            </Select>\n          </Col>\n          <Col xs={24} sm={12} md={4}>\n            <Input\n              placeholder=\"Material Code\"\n              value={filters.materialCode}\n              onChange={e => setFilters({ ...filters, materialCode: e.target.value })}\n              size=\"small\"\n            />\n          </Col>\n          <Col xs={24} sm={12} md={4}>\n            <Input\n              placeholder=\"Project Code\"\n              value={filters.projectCode}\n              onChange={e => setFilters({ ...filters, projectCode: e.target.value })}\n              size=\"small\"\n            />\n          </Col>\n          <Col xs={24} sm={12} md={4}>\n            <Input\n              placeholder=\"Plant Code\"\n              value={filters.plantCode}\n              onChange={e => setFilters({ ...filters, plantCode: e.target.value })}\n              size=\"small\"\n            />\n          </Col>\n          <Col xs={24} sm={12} md={4}>\n            <Button\n              icon={<FilterOutlined />}\n              onClick={() => setFilters({\n                team: 'all',\n                status: 'all',\n                priority: 'all',\n                dateRange: 'all',\n                materialCode: '',\n                projectCode: '',\n                plantCode: ''\n              })}\n              size=\"small\"\n            >\n              Clear\n            </Button>\n          </Col>\n        </Row>\n      </Card>\n\n      <Tabs\n        defaultActiveKey=\"all\"\n        className={isMobile ? 'query-widget-mobile' : ''}\n        size={isMobile ? 'small' : 'default'}\n      >\n        <TabPane\n          tab={\n            <Badge count={getTabCount(filteredQueries.all)} size=\"small\">\n              <span>All Queries</span>\n            </Badge>\n          }\n          key=\"all\"\n        >\n          {filteredQueries.all.length > 0 ? (\n            <div style={{ maxHeight: '600px', overflowY: 'auto' }}>\n              {filteredQueries.all.map(query => renderQueryCard(query))}\n            </div>\n          ) : (\n            <Empty description=\"No queries found\" />\n          )}\n        </TabPane>\n\n        <TabPane\n          tab={\n            <Badge count={getTabCount(filteredQueries.open)} size=\"small\">\n              <span style={{ color: '#ff4d4f' }}>Open</span>\n            </Badge>\n          }\n          key=\"open\"\n        >\n          {filteredQueries.open.length > 0 ? (\n            <div style={{ maxHeight: '600px', overflowY: 'auto' }}>\n              {filteredQueries.open.map(query => renderQueryCard(query))}\n            </div>\n          ) : (\n            <Empty description=\"No open queries found\" />\n          )}\n        </TabPane>\n\n        <TabPane\n          tab={\n            <Badge count={getTabCount(filteredQueries.resolved)} size=\"small\">\n              <span style={{ color: '#52c41a' }}>Resolved</span>\n            </Badge>\n          }\n          key=\"resolved\"\n        >\n          {filteredQueries.resolved.length > 0 ? (\n            <div style={{ maxHeight: '600px', overflowY: 'auto' }}>\n              {filteredQueries.resolved.map(query => renderQueryCard(query))}\n            </div>\n          ) : (\n            <Empty description=\"No resolved queries found\" />\n          )}\n        </TabPane>\n\n        <TabPane\n          tab={\n            <Badge count={getTabCount(filteredQueries.myQueries)} size=\"small\">\n              <span>My Queries</span>\n            </Badge>\n          }\n          key=\"my\"\n        >\n          {filteredQueries.myQueries.length > 0 ? (\n            <div style={{ maxHeight: '600px', overflowY: 'auto' }}>\n              {filteredQueries.myQueries.map(query => renderQueryCard(query))}\n            </div>\n          ) : (\n            <Empty description=\"No queries raised by you found\" />\n          )}\n        </TabPane>\n      </Tabs>\n\n      {/* Create Query Modal */}\n      <Modal\n        title=\"Raise New Query\"\n        open={createModalVisible}\n        onCancel={() => {\n          setCreateModalVisible(false);\n          form.resetFields();\n        }}\n        onOk={() => form.submit()}\n        width={600}\n      >\n        <Form form={form} layout=\"vertical\" onFinish={handleCreateQuery}>\n          <Form.Item\n            name=\"assignedTeam\"\n            label=\"Assign to Team\"\n            rules={[{ required: true, message: 'Please select a team' }]}\n          >\n            <Select placeholder=\"Select team\">\n              <Option value=\"CQS\">CQS Team</Option>\n              <Option value=\"TECH\">Tech Team</Option>\n              <Option value=\"JVC\">JVC Team</Option>\n            </Select>\n          </Form.Item>\n\n          <Form.Item\n            name=\"fieldContext\"\n            label=\"Field Context\"\n            help=\"Which field or section is this query about?\"\n          >\n            <Input placeholder=\"e.g., Material Name, Safety Data, etc.\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"question\"\n            label=\"Question\"\n            rules={[{ required: true, message: 'Please enter your question' }]}\n          >\n            <TextArea rows={4} placeholder=\"Describe your question or issue in detail...\" />\n          </Form.Item>\n\n          <Form.Item name=\"priority\" label=\"Priority\" initialValue=\"MEDIUM\">\n            <Select>\n              <Option value=\"LOW\">Low</Option>\n              <Option value=\"MEDIUM\">Medium</Option>\n              <Option value=\"HIGH\">High</Option>\n              <Option value=\"URGENT\">Urgent</Option>\n            </Select>\n          </Form.Item>\n        </Form>\n      </Modal>\n\n      {/* Resolve Query Modal */}\n      <Modal\n        title={`Resolve Query #${selectedQuery?.id}`}\n        open={resolveModalVisible}\n        onCancel={() => {\n          setResolveModalVisible(false);\n          resolveForm.resetFields();\n          setSelectedQuery(null);\n        }}\n        onOk={() => resolveForm.submit()}\n        width={600}\n      >\n        {selectedQuery && (\n          <>\n            <div style={{ marginBottom: 16, padding: 12, background: '#f5f5f5', borderRadius: 4 }}>\n              <strong>Question:</strong> {selectedQuery.question}\n              {selectedQuery.fieldContext && (\n                <div>\n                  <strong>Field Context:</strong> {selectedQuery.fieldContext}\n                </div>\n              )}\n            </div>\n\n            <Form form={resolveForm} layout=\"vertical\" onFinish={handleResolveQuery}>\n              <Form.Item\n                name=\"resolution\"\n                label=\"Resolution\"\n                rules={[{ required: true, message: 'Please provide a resolution' }]}\n              >\n                <TextArea\n                  rows={6}\n                  placeholder=\"Provide detailed resolution or answer to the query...\"\n                />\n              </Form.Item>\n            </Form>\n          </>\n        )}\n      </Modal>\n\n\n    </Card>\n  );\n};\n\nexport default QueryWidget;\n","import {\n  DashboardOutlined,\n  QuestionCircleOutlined,\n  ReloadOutlined,\n  FileTextOutlined,\n  InfoCircleOutlined,\n  FilterOutlined\n} from '@ant-design/icons';\nimport {\n  Tabs,\n  Card,\n  Row,\n  Col,\n  Typography,\n  Table,\n  Tag,\n  Button,\n  message,\n  Space,\n  Badge,\n  Modal,\n  Descriptions,\n  Select,\n  DatePicker\n} from 'antd';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport apiClient from '../api/client';\nimport QueryWidget from '../components/QueryWidget';\nimport { PAGINATION, WORKFLOW_STATES } from '../constants';\nimport { getCurrentUser, getUserRole } from '../services/auth';\n\nimport QuestionnaireViewerPage from './QuestionnaireViewerPage';\n\n// Test auth imports removed - files not found\n\nconst { TabPane } = Tabs;\nconst { Title, Text } = Typography;\nconst { Option } = Select;\nconst { RangePicker } = DatePicker;\n\nconst WorkflowPage = () => {\n  const navigate = useNavigate();\n  const [activeTab, setActiveTab] = useState('dashboard');\n  const [selectedWorkflowId, setSelectedWorkflowId] = useState(null);\n  const [selectedWorkflow, setSelectedWorkflow] = useState(null);\n  const [detailsModalVisible, setDetailsModalVisible] = useState(false);\n  const [questionnaireModalVisible, setQuestionnaireModalVisible] = useState(false);\n  const [questionnaireWorkflowId, setQuestionnaireWorkflowId] = useState(null);\n\n  // All Workflows State (for dashboard)\n  const [allWorkflows, setAllWorkflows] = useState([]);\n  const [filteredWorkflows, setFilteredWorkflows] = useState([]);\n  const [dashboardLoading, setDashboardLoading] = useState(false);\n\n  // Date filtering state\n  const [dateFilter, setDateFilter] = useState('all_time');\n  const [customDateRange, setCustomDateRange] = useState(null);\n\n  const currentUser = getCurrentUser();\n  const userRole = getUserRole();\n\n  // Debug logging\n  console.log('WorkflowPage - currentUser:', currentUser);\n  console.log('WorkflowPage - userRole:', userRole);\n\n  // Apply date filtering to workflows\n  const applyDateFilter = useCallback((workflows, filter, customRange) => {\n    // Ensure workflows is always an array\n    const safeWorkflows = Array.isArray(workflows) ? workflows : [];\n    const now = new Date();\n    let startDate;\n\n    switch (filter) {\n      case 'all_time':\n        // Show all data without any date filtering\n        setFilteredWorkflows(safeWorkflows);\n        return;\n      case 'current_month':\n        startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n        break;\n      case 'past_3_months':\n        startDate = new Date(now.getFullYear(), now.getMonth() - 3, 1);\n        break;\n      case 'past_6_months':\n        startDate = new Date(now.getFullYear(), now.getMonth() - 6, 1);\n        break;\n      case 'past_12_months':\n        startDate = new Date(now.getFullYear(), now.getMonth() - 12, 1);\n        break;\n      case 'custom':\n        if (customRange && customRange.length === 2) {\n          startDate = customRange[0].toDate();\n          const endDate = customRange[1].toDate();\n          const filtered = safeWorkflows.filter(w => {\n            const workflowDate = new Date(w.createdAt);\n            return workflowDate >= startDate && workflowDate <= endDate;\n          });\n          setFilteredWorkflows(filtered);\n          return;\n        }\n        break;\n      default:\n        setFilteredWorkflows(safeWorkflows);\n        return;\n    }\n\n    if (startDate) {\n      const filtered = safeWorkflows.filter(w => {\n        const workflowDate = new Date(w.createdAt);\n        return workflowDate >= startDate;\n      });\n      setFilteredWorkflows(filtered);\n    } else {\n      setFilteredWorkflows(safeWorkflows);\n    }\n  }, []);\n\n  // Fetch all workflows for dashboard\n  const fetchAllWorkflows = useCallback(async signal => {\n    setDashboardLoading(true);\n    try {\n      const response = await apiClient.get('/workflows', { signal });\n      if (!signal?.aborted) {\n        // Ensure response is always an array\n        const safeResponse = Array.isArray(response) ? response : [];\n        setAllWorkflows(safeResponse);\n        applyDateFilter(safeResponse, dateFilter, customDateRange);\n      }\n    } catch (error) {\n      if (!signal?.aborted) {\n        console.error('Error fetching workflows:', error);\n        message.error('Failed to fetch workflows');\n        // Set empty arrays on error\n        setAllWorkflows([]);\n        setFilteredWorkflows([]);\n      }\n    } finally {\n      if (!signal?.aborted) {\n        setDashboardLoading(false);\n      }\n    }\n  }, [dateFilter, customDateRange, applyDateFilter]);\n\n  // Handle date filter change\n  const handleDateFilterChange = (value) => {\n    setDateFilter(value);\n    if (value !== 'custom') {\n      setCustomDateRange(null);\n    }\n    applyDateFilter(allWorkflows, value, customDateRange);\n  };\n\n  // Handle custom date range change\n  const handleCustomDateRangeChange = (dates) => {\n    setCustomDateRange(dates);\n    if (dates && dates.length === 2) {\n      applyDateFilter(allWorkflows, 'custom', dates);\n    }\n  };\n\n  useEffect(() => {\n    const controller = new AbortController();\n    fetchAllWorkflows(controller.signal);\n\n    return () => {\n      controller.abort();\n    };\n  }, [fetchAllWorkflows]);\n\n  // Apply date filter when dateFilter or customDateRange changes\n  useEffect(() => {\n    if (allWorkflows.length > 0) {\n      applyDateFilter(allWorkflows, dateFilter, customDateRange);\n    }\n  }, [dateFilter, customDateRange, allWorkflows, applyDateFilter]);\n\n  const handleTabChange = key => {\n    setActiveTab(key);\n  };\n\n  const showWorkflowDetails = workflow => {\n    setSelectedWorkflow(workflow);\n    setDetailsModalVisible(true);\n  };\n\n  const openQuestionnaire = workflowId => {\n    // Open questionnaire in modal overlay\n    setQuestionnaireWorkflowId(workflowId);\n    setQuestionnaireModalVisible(true);\n  };\n\n\n\n  const downloadExcelReport = async workflowId => {\n    try {\n      const response = await apiClient.get(`/workflows/${workflowId}/excel-report`, {\n        responseType: 'blob'\n      });\n\n      // Create download link\n      const url = window.URL.createObjectURL(new Blob([response]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `QRMFG_Report_Workflow_${workflowId}.xlsx`;\n      document.body.appendChild(link);\n      link.click();\n\n      // Cleanup\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(link);\n\n      message.success('Excel report downloaded successfully');\n    } catch (error) {\n      message.error('Failed to download Excel report');\n    }\n  };\n\n  const closeDetailsModal = () => {\n    setDetailsModalVisible(false);\n    setSelectedWorkflow(null);\n  };\n\n  // Dashboard Table Columns - Optimized for no horizontal scrolling\n  const dashboardColumns = [\n    {\n      title: 'ID',\n      dataIndex: 'id',\n      key: 'id',\n      width: 80,\n      render: id => (\n        <Text\n          style={{\n            fontFamily: 'monospace',\n            fontSize: '13px',\n            fontWeight: 600,\n            color: '#495057',\n            padding: '4px 8px',\n            background: '#f8f9fa',\n            borderRadius: '4px',\n            border: '1px solid #e9ecef'\n          }}\n        >\n          #{id}\n        </Text>\n      )\n    },\n    {\n      title: 'Project',\n      dataIndex: 'projectCode',\n      key: 'projectCode',\n      width: 80,\n      render: text => <Text strong>{text}</Text>\n    },\n    {\n      title: 'Material',\n      dataIndex: 'materialCode',\n      key: 'materialCode',\n      width: 90,\n      render: text => <Text strong>{text}</Text>\n    },\n    {\n      title: 'Description',\n      dataIndex: 'materialName',\n      key: 'materialName',\n      width: 100,\n      ellipsis: true,\n      render: text => text || 'No description'\n    },\n    {\n      title: 'Plant',\n      dataIndex: 'assignedPlant',\n      key: 'assignedPlant',\n      width: 70,\n      render: plant => <Tag color=\"green\">{plant}</Tag>\n    },\n    {\n      title: 'Status',\n      dataIndex: 'state',\n      key: 'state',\n      width: 100,\n      render: state => {\n        const stateConfig = {\n          JVC_PENDING: { color: 'orange', text: 'JVC' },\n          PLANT_PENDING: { color: 'blue', text: 'Plant' },\n          CQS_PENDING: { color: 'purple', text: 'CQS' },\n          TECH_PENDING: { color: 'cyan', text: 'Tech' },\n          [WORKFLOW_STATES.COMPLETED]: { color: 'green', text: 'Done' }\n        };\n        const config = stateConfig[state] || { color: 'default', text: state };\n        return <Tag color={config.color}>{config.text}</Tag>;\n      }\n    },\n    {\n      title: 'Start Date',\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      width: 90,\n      render: date => date ? new Date(date).toLocaleDateString('en-GB') : 'N/A'\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      width: 180,\n      render: (_, record) => (\n        <Space size=\"small\">\n          <Button\n            size=\"small\"\n            icon={<FileTextOutlined />}\n            onClick={() => openQuestionnaire(record.id)}\n            title=\"Open Questionnaire\"\n          >\n            Quest.\n          </Button>\n          <Button\n            size=\"small\"\n            type=\"default\"\n            style={{ backgroundColor: '#52c41a', borderColor: '#52c41a', color: 'white' }}\n            onClick={() => downloadExcelReport(record.id)}\n            title=\"Download Excel Report\"\n          >\n            Excel\n          </Button>\n        </Space>\n      )\n    }\n  ];\n\n  // Calculate analytics for filtered workflows\n  const calculateAnalytics = (workflows) => {\n    const total = workflows.length;\n    const completed = workflows.filter(w => w.state === WORKFLOW_STATES.COMPLETED).length;\n    const jvcPending = workflows.filter(w => w.state === 'JVC_PENDING').length;\n    const plantPending = workflows.filter(w => w.state === 'PLANT_PENDING').length;\n    const cqsPending = workflows.filter(w => w.state === 'CQS_PENDING').length;\n    const techPending = workflows.filter(w => w.state === 'TECH_PENDING').length;\n    const overdue = workflows.filter(w => (w.daysPending || 0) > 7).length;\n\n    return { total, completed, jvcPending, plantPending, cqsPending, techPending, overdue };\n  };\n\n  // Render Dashboard Tab\n  const renderDashboardTab = () => {\n    const analytics = calculateAnalytics(filteredWorkflows);\n\n    return (\n      <div>\n        {/* Header Section with Date Filters */}\n        <div style={{ marginBottom: 24 }}>\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 16 }}>\n            {/* <Title level={3} style={{ margin: 0, color: '#1a1a1a', fontSize: '20px', fontWeight: 600 }}>\n              Dashboard\n            </Title> */}\n            <Button\n              icon={<ReloadOutlined />}\n              onClick={() => {\n                const controller = new AbortController();\n                fetchAllWorkflows(controller.signal);\n              }}\n              loading={dashboardLoading}\n              type=\"default\"\n            >\n              Refresh\n            </Button>\n          </div>\n\n          {/* Date Filter Controls */}\n          <div style={{\n            padding: '16px 24px',\n            background: '#f8f9fa',\n            borderRadius: '8px',\n            border: '1px solid #e9ecef',\n            marginBottom: '24px'\n          }}>\n            <Space align=\"center\">\n              <FilterOutlined style={{ color: '#495057' }} />\n              <Text style={{ color: '#495057', fontSize: '14px', fontWeight: 500 }}>Filter by:</Text>\n              <Select\n                value={dateFilter}\n                onChange={handleDateFilterChange}\n                size=\"middle\"\n                style={{ width: 160 }}\n              >\n                <Option value=\"all_time\">All Time</Option>\n                <Option value=\"current_month\">Current Month</Option>\n                <Option value=\"past_3_months\">Past 3 Months</Option>\n                <Option value=\"past_6_months\">Past 6 Months</Option>\n                <Option value=\"past_12_months\">Past 12 Months</Option>\n                <Option value=\"custom\">Custom Range</Option>\n              </Select>\n              {dateFilter === 'custom' && (\n                <RangePicker\n                  value={customDateRange}\n                  onChange={handleCustomDateRangeChange}\n                  size=\"middle\"\n                  style={{ width: 260 }}\n                />\n              )}\n            </Space>\n          </div>\n        </div>\n\n        {/* Analytics Cards */}\n        <div style={{ marginBottom: '32px' }}>\n          <Row gutter={[20, 16]}>\n            <Col xs={24} sm={12} md={8} lg={6} xl={4}>\n              <Card\n                style={{\n                  borderRadius: '8px',\n                  border: '1px solid #e8e9ea',\n                  boxShadow: 'none',\n                  background: '#ffffff'\n                }}\n                bodyStyle={{ padding: '24px 20px' }}\n              >\n                <div style={{ textAlign: 'center' }}>\n                  <div style={{ fontSize: '32px', fontWeight: 700, marginBottom: '8px', color: '#1a1a1a' }}>\n                    {analytics.total}\n                  </div>\n                  <div style={{ fontSize: '14px', color: '#666', fontWeight: 500 }}>Total Projects</div>\n                </div>\n              </Card>\n            </Col>\n            <Col xs={24} sm={12} md={8} lg={6} xl={4}>\n              <Card\n                style={{\n                  borderRadius: '8px',\n                  border: '1px solid #d4edda',\n                  boxShadow: 'none',\n                  background: '#f8fff9'\n                }}\n                bodyStyle={{ padding: '24px 20px' }}\n              >\n                <div style={{ textAlign: 'center' }}>\n                  <div style={{ fontSize: '32px', fontWeight: 700, marginBottom: '8px', color: '#28a745' }}>\n                    {analytics.completed}\n                  </div>\n                  <div style={{ fontSize: '14px', color: '#155724', fontWeight: 500 }}>Completed</div>\n                </div>\n              </Card>\n            </Col>\n            <Col xs={24} sm={12} md={8} lg={6} xl={4}>\n              <Card\n                style={{\n                  borderRadius: '8px',\n                  border: '1px solid #f5c6cb',\n                  boxShadow: 'none',\n                  background: '#fdf2f2'\n                }}\n                bodyStyle={{ padding: '24px 20px' }}\n              >\n                <div style={{ textAlign: 'center' }}>\n                  <div style={{ fontSize: '32px', fontWeight: 700, marginBottom: '8px', color: '#dc3545' }}>\n                    {analytics.jvcPending}\n                  </div>\n                  <div style={{ fontSize: '14px', color: '#721c24', fontWeight: 500 }}>JVC Pending</div>\n                </div>\n              </Card>\n            </Col>\n            <Col xs={24} sm={12} md={8} lg={6} xl={4}>\n              <Card\n                style={{\n                  borderRadius: '8px',\n                  border: '1px solid #bee5eb',\n                  boxShadow: 'none',\n                  background: '#f1f9fa'\n                }}\n                bodyStyle={{ padding: '24px 20px' }}\n              >\n                <div style={{ textAlign: 'center' }}>\n                  <div style={{ fontSize: '32px', fontWeight: 700, marginBottom: '8px', color: '#17a2b8' }}>\n                    {analytics.plantPending}\n                  </div>\n                  <div style={{ fontSize: '14px', color: '#0c5460', fontWeight: 500 }}>Plant Pending</div>\n                </div>\n              </Card>\n            </Col>\n            <Col xs={24} sm={12} md={8} lg={6} xl={4}>\n              <Card\n                style={{\n                  borderRadius: '8px',\n                  border: '1px solid #d1ecf1',\n                  boxShadow: 'none',\n                  background: '#f8f9fa'\n                }}\n                bodyStyle={{ padding: '24px 20px' }}\n              >\n                <div style={{ textAlign: 'center' }}>\n                  <div style={{ fontSize: '32px', fontWeight: 700, marginBottom: '8px', color: '#6c757d' }}>\n                    {analytics.cqsPending}\n                  </div>\n                  <div style={{ fontSize: '14px', color: '#495057', fontWeight: 500 }}>CQS Pending</div>\n                </div>\n              </Card>\n            </Col>\n            <Col xs={24} sm={12} md={8} lg={6} xl={4}>\n              <Card\n                style={{\n                  borderRadius: '8px',\n                  border: '1px solid #ffeaa7',\n                  boxShadow: 'none',\n                  background: '#fffbf0'\n                }}\n                bodyStyle={{ padding: '24px 20px' }}\n              >\n                <div style={{ textAlign: 'center' }}>\n                  <div style={{ fontSize: '32px', fontWeight: 700, marginBottom: '8px', color: '#fd7e14' }}>\n                    {analytics.overdue}\n                  </div>\n                  <div style={{ fontSize: '14px', color: '#8a4a00', fontWeight: 500 }}>Overdue</div>\n                </div>\n              </Card>\n            </Col>\n          </Row>\n        </div>\n\n        {/* Data Table */}\n        <div style={{\n          background: '#fff',\n          border: '1px solid #e8e9ea',\n          borderRadius: '8px',\n          boxShadow: '0 2px 8px rgba(0, 0, 0, 0.06)'\n        }}>\n          <div style={{\n            padding: '20px 24px',\n            borderBottom: '1px solid #e8e9ea',\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center'\n          }}>\n            <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n              <FileTextOutlined style={{ color: '#495057', fontSize: '16px' }} />\n              <span style={{ fontSize: '16px', fontWeight: 600, color: '#1a1a1a' }}>\n                Workflows\n              </span>\n              <span style={{ \n                fontSize: '14px', \n                color: '#6c757d',\n                background: '#f8f9fa',\n                padding: '2px 8px',\n                borderRadius: '12px',\n                fontWeight: 500\n              }}>\n                {filteredWorkflows.length}\n              </span>\n            </div>\n          </div>\n          <Table\n            columns={dashboardColumns}\n            dataSource={filteredWorkflows}\n            rowKey=\"id\"\n            loading={dashboardLoading}\n            pagination={{\n              pageSize: PAGINATION.LARGE_PAGE_SIZE,\n              showSizeChanger: true,\n              showQuickJumper: true,\n              showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} items`,\n              style: { padding: '16px 24px', borderTop: '1px solid #e8e9ea' }\n            }}\n            size=\"middle\"\n            onRow={(record) => ({\n              onClick: () => {\n                setSelectedWorkflowId(record.id);\n                showWorkflowDetails(record);\n              },\n              style: {\n                cursor: 'pointer'\n              }\n            })}\n          />\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div style={{\n      padding: '0',\n      background: '#f5f5f5',\n      minHeight: '100vh'\n    }}>\n      {/* Clean Header */}\n      <div style={{\n        background: '#fff',\n        borderBottom: '1px solid #e8e9ea',\n        padding: '24px 40px',\n        marginBottom: '0'\n      }}>\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <div>\n            <Title level={2} style={{ color: '#1a1a1a', margin: 0, fontWeight: 600, fontSize: '24px' }}>\n              Workflow Management\n            </Title>\n          </div>\n          <div style={{\n            textAlign: 'right',\n            padding: '12px 20px',\n            background: '#f8f9fa',\n            borderRadius: '8px',\n            border: '1px solid #e9ecef'\n          }}>\n            <Text style={{ color: '#495057', fontSize: '14px', fontWeight: 500 }}>\n              {currentUser} ({userRole})\n            </Text>\n          </div>\n        </div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div style={{\n        background: '#fff',\n        borderBottom: '1px solid #e8e9ea',\n        marginBottom: '24px'\n      }}>\n        <Tabs\n          activeKey={activeTab}\n          onChange={handleTabChange}\n          size=\"large\"\n          style={{ margin: 0 }}\n          tabBarStyle={{\n            margin: 0,\n            padding: '0 24px',\n            background: 'transparent',\n            borderBottom: 'none'\n          }}\n        >\n          <TabPane\n            tab={\n              <span>\n                <DashboardOutlined />\n                Dashboard\n              </span>\n            }\n            key=\"dashboard\"\n          >\n            {renderDashboardTab()}\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <QuestionCircleOutlined />\n                Queries\n              </span>\n            }\n            key=\"queries\"\n          >\n            <Row gutter={[16, 16]}>\n              <Col span={24}>\n                <QueryWidget workflowId={selectedWorkflowId} userRole={userRole} />\n              </Col>\n            </Row>\n          </TabPane>\n        </Tabs>\n      </div>\n\n      {/* Workflow Details Modal */}\n      <Modal\n        title={\n          <Space>\n            <InfoCircleOutlined />\n            Workflow Details\n            {selectedWorkflow && (\n              <Badge count={selectedWorkflow.id} style={{ backgroundColor: '#1890ff' }} />\n            )}\n          </Space>\n        }\n        open={detailsModalVisible}\n        onCancel={closeDetailsModal}\n        footer={[\n          <Button key=\"close\" onClick={closeDetailsModal}>\n            Close\n          </Button>,\n          selectedWorkflow && (\n            <Button\n              key=\"questionnaire\"\n              type=\"primary\"\n              icon={<FileTextOutlined />}\n              onClick={() => {\n                openQuestionnaire(selectedWorkflow.id);\n                closeDetailsModal();\n              }}\n            >\n              Open Questionnaire\n            </Button>\n          ),\n          selectedWorkflow && (\n            <Button\n              key=\"excel-report\"\n              type=\"default\"\n              style={{ backgroundColor: '#52c41a', borderColor: '#52c41a', color: 'white' }}\n              onClick={() => {\n                downloadExcelReport(selectedWorkflow.id);\n                closeDetailsModal();\n              }}\n            >\n              Download Excel Report\n            </Button>\n          )\n        ]}\n        width={800}\n      >\n        {selectedWorkflow && (\n          <Descriptions column={2} bordered size=\"small\">\n            <Descriptions.Item label=\"Workflow ID\">{selectedWorkflow.id}</Descriptions.Item>\n            <Descriptions.Item label=\"Status\">\n              <Tag color=\"blue\">{selectedWorkflow.state}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Material Code\">\n              {selectedWorkflow.materialCode}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Material Name\">\n              {selectedWorkflow.materialName || 'Not available'}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Project Code\">\n              {selectedWorkflow.projectCode}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Assigned Plant\">\n              <Tag color=\"green\">{selectedWorkflow.assignedPlant}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Days Pending\">\n              <Tag color={(selectedWorkflow.daysPending || 0) > 7 ? 'red' : 'green'}>\n                {selectedWorkflow.daysPending || 0} days\n              </Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Initiated By\">\n              {selectedWorkflow.initiatedBy}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Created At\">\n              {selectedWorkflow.createdAt\n                ? new Date(selectedWorkflow.createdAt).toLocaleString()\n                : 'N/A'}\n            </Descriptions.Item>\n          </Descriptions>\n        )}\n      </Modal>\n\n      {/* Questionnaire Modal */}\n      <Modal\n        title=\"QRMFG Questionnaire Viewer\"\n        open={questionnaireModalVisible}\n        onCancel={() => setQuestionnaireModalVisible(false)}\n        footer={null}\n        width=\"90%\"\n        style={{ top: 20 }}\n        bodyStyle={{ padding: 0, height: 'calc(100vh - 200px)', overflow: 'hidden' }}\n      >\n        {questionnaireWorkflowId && (\n          <div style={{ height: '100%', overflow: 'auto' }}>\n            <QuestionnaireViewerPage\n              workflowId={questionnaireWorkflowId}\n              onClose={() => setQuestionnaireModalVisible(false)}\n            />\n          </div>\n        )}\n      </Modal>\n    </div>\n  );\n};\n\nexport default WorkflowPage;"],"names":["UI_CONFIG","MOBILE_BREAKPOINT","TABLET_BREAKPOINT","PAGE_SIZE","DEBOUNCE_DELAY","WORKFLOW_STATES","INITIATED","IN_PROGRESS","PENDING_REVIEW","APPROVED","REJECTED","COMPLETED","PRIORITY_LEVELS","LOW","MEDIUM","HIGH","URGENT","CRITICAL","FILE_SIZE","MAX_UPLOAD_SIZE","BYTES_PER_KB","BYTES_PER_MB","BYTES_PER_GB","WORKFLOW_SPECIFIC_STATES","JVC_PENDING","PLANT_PENDING","CQS_PENDING","TECH_PENDING","DRAFT","QUERY_STATUS","OPEN","RESOLVED","CLOSED","QUERY_STATUS_GROUPS","ACTIVE","INACTIVE","TEAM_NAMES","CQS","TECH","JVC","PLANT","AUTO_SAVE","INTERVAL","PAGINATION","DEFAULT_PAGE_SIZE","SMALL_PAGE_SIZE","LARGE_PAGE_SIZE","SHOW_SIZE_CHANGER","SHOW_QUICK_JUMPER","COMPLETION_FILTERS","ALL","NOT_STARTED","TAB_KEYS","INITIATE","PENDING","QUERIES","HISTORY","queryAPI","createQuery","workflowId","queryData","apiClient","post","getQuery","id","get","updateQuery","put","deleteQuery","delete","resolveQuery","resolutionData","reopenQuery","reason","assignQuery","assignmentData","reassignQuery","newTeam","team","getAllQueries","getQueriesByWorkflow","getQueriesByTeam","getQueriesByStatus","status","getQueriesByUser","_username","searchQueries","searchParams","queryString","URLSearchParams","toString","getQueryStats","timeRange","getQueryCountsByTeam","getAvgResolutionTimeByTeam","getOverdueQueries","getOverdueQueriesCountByTeam","getQueriesResolvedTodayByTeam","getQuerySLAStatus","getQueriesNearingSLA","addQueryComment","comment","getQueryComments","updateQueryPriority","priority","escalateQuery","_escalationReason","priorityLevel","uploadQueryDocuments","queryId","files","upload","uploadResponseDocuments","responseId","getQueryDocuments","downloadQueryDocument","documentId","download","deleteQueryDocument","closeQuery","canPlantEditForm","getQueryStatusSummary","TabPane","Tabs","TextArea","Input","Option","Select","Text","Typography","_ref","userRole","loading","setLoading","useState","queries","setQueries","all","open","resolved","myQueries","filteredQueries","setFilteredQueries","createModalVisible","setCreateModalVisible","resolveModalVisible","setResolveModalVisible","selectedQuery","setSelectedQuery","form","Form","useForm","resolveForm","isMobile","useResponsive","screenSize","setScreenSize","window","innerWidth","isTablet","isDesktop","useEffect","handleResize","addEventListener","removeEventListener","filters","setFilters","dateRange","materialCode","projectCode","plantCode","controller","AbortController","async","allQueries","signal","aborted","queriesData","filter","q","includes","createdBy","getCurrentUser","error","console","loadQueriesWithAbort","abort","loadQueries","useCallback","localStorage","getItem","renderQueryCard","query","_jsx","Card","size","style","marginBottom","border","borderRadius","boxShadow","children","_jsxs","Space","wrap","strong","fontSize","Tag","color","assignedTeam","padding","background","Row","gutter","Col","span","materialName","assignedPlant","originalQuestion","fontStyle","marginTop","whiteSpace","question","UserOutlined","raisedBy","ClockCircleOutlined","createdAt","Date","toLocaleString","days","daysOpen","response","borderLeft","resolvedBy","resolvedAt","textAlign","canResolveQuery","Button","type","icon","CheckCircleOutlined","onClick","queryCategory","applyFilters","filterQueries","queryList","_query$materialCode","_query$assignedPlant","toLowerCase","queryDate","now","startDate","getFullYear","getMonth","getDate","getTime","getTabCount","length","title","extra","ReloadOutlined","PlusOutlined","align","xs","sm","md","placeholder","value","onChange","width","e","target","FilterOutlined","defaultActiveKey","className","tab","Badge","count","maxHeight","overflowY","map","Empty","description","Modal","onCancel","resetFields","onOk","submit","layout","onFinish","values","Item","name","label","rules","required","message","help","rows","initialValue","_Fragment","fieldContext","resolution","Title","RangePicker","DatePicker","WorkflowPage","useNavigate","activeTab","setActiveTab","selectedWorkflowId","setSelectedWorkflowId","selectedWorkflow","setSelectedWorkflow","detailsModalVisible","setDetailsModalVisible","questionnaireModalVisible","setQuestionnaireModalVisible","questionnaireWorkflowId","setQuestionnaireWorkflowId","allWorkflows","setAllWorkflows","filteredWorkflows","setFilteredWorkflows","dashboardLoading","setDashboardLoading","dateFilter","setDateFilter","customDateRange","setCustomDateRange","currentUser","getUserRole","log","applyDateFilter","workflows","customRange","safeWorkflows","Array","isArray","toDate","endDate","filtered","w","workflowDate","fetchAllWorkflows","safeResponse","handleDateFilterChange","handleCustomDateRangeChange","dates","openQuestionnaire","downloadExcelReport","responseType","url","URL","createObjectURL","Blob","link","document","createElement","href","body","appendChild","click","revokeObjectURL","removeChild","success","closeDetailsModal","dashboardColumns","dataIndex","key","render","fontFamily","fontWeight","text","ellipsis","plant","state","config","date","toLocaleDateString","_","record","FileTextOutlined","backgroundColor","borderColor","minHeight","borderBottom","display","justifyContent","alignItems","level","margin","activeKey","tabBarStyle","DashboardOutlined","renderDashboardTab","analytics","total","completed","jvcPending","plantPending","cqsPending","techPending","overdue","daysPending","lg","xl","bodyStyle","gap","Table","columns","dataSource","rowKey","pagination","pageSize","showSizeChanger","showQuickJumper","showTotal","range","borderTop","onRow","cursor","QuestionCircleOutlined","QueryWidget","InfoCircleOutlined","footer","Descriptions","column","bordered","initiatedBy","top","height","overflow","QuestionnaireViewerPage","onClose"],"sourceRoot":""}