{"version":3,"file":"static/js/70.a87df0a0.chunk.js","mappings":"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","sources":["hooks/useRoleBasedAccess.js","screens/CQSView.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\nimport { \n  isAuthenticated, \n  isAdmin, \n  isJvcUser, \n  isCqsUser, \n  isTechUser, \n  isPlantUser, \n  isViewer,\n  hasRole,\n  getPrimaryRoleType,\n  getUserPlantCodes,\n  getPrimaryPlantCode,\n  getCurrentUser\n} from '../services/auth';\nimport RBACService from '../services/rbacService';\n\n/**\n * Custom hook for role-based access control\n * Provides reactive access to user roles and permissions\n */\nexport const useRoleBasedAccess = () => {\n  const [accessSummary, setAccessSummary] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Load user access summary\n  const loadAccessSummary = useCallback(async () => {\n    if (!isAuthenticated()) {\n      setAccessSummary(null);\n      setLoading(false);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const summary = await RBACService.getUserAccessSummary();\n      setAccessSummary(summary);\n    } catch (err) {\n      console.warn('Failed to load access summary, using fallback:', err);\n      setError(err);\n      \n      // Use fallback data\n      const fallbackSummary = RBACService.getFallbackAccessSummary();\n      setAccessSummary(fallbackSummary);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    loadAccessSummary();\n  }, [loadAccessSummary]);\n\n  // Check screen access\n  const checkScreenAccess = useCallback(async (screenRoute) => {\n    try {\n      return await RBACService.hasScreenAccess(screenRoute);\n    } catch (error) {\n      console.warn('Screen access check failed, using fallback:', error);\n      return RBACService.getFallbackScreenAccess(screenRoute);\n    }\n  }, []);\n\n  // Check data access\n  const checkDataAccess = useCallback(async (dataType, context = {}) => {\n    try {\n      return await RBACService.hasDataAccess(dataType, context);\n    } catch (error) {\n      console.warn('Data access check failed, using fallback:', error);\n      return RBACService.getFallbackDataAccess(dataType, context);\n    }\n  }, []);\n\n  // Check plant data access\n  const checkPlantDataAccess = useCallback(async (dataType, plantCode, context = {}) => {\n    try {\n      return await RBACService.hasPlantDataAccess(dataType, plantCode, context);\n    } catch (error) {\n      console.warn('Plant data access check failed, using fallback:', error);\n      return RBACService.getFallbackPlantDataAccess(dataType, plantCode, context);\n    }\n  }, []);\n\n  // Make access decision\n  const makeAccessDecision = useCallback(async (resourceType, resourceId, action, context = {}) => {\n    try {\n      return await RBACService.makeAccessDecision(resourceType, resourceId, action, context);\n    } catch (error) {\n      console.warn('Access decision failed, using fallback:', error);\n      return RBACService.getFallbackAccessDecision(resourceType, resourceId, action, context);\n    }\n  }, []);\n\n  // Filter data by plant access\n  const filterByPlantAccess = useCallback((data, plantExtractor) => {\n    return RBACService.filterDataByPlantAccess(data, plantExtractor);\n  }, []);\n\n  return {\n    // Loading states\n    loading,\n    error,\n    \n    // User info\n    isAuthenticated: isAuthenticated(),\n    currentUser: getCurrentUser(),\n    primaryRole: getPrimaryRoleType(),\n    userPlants: getUserPlantCodes(),\n    primaryPlant: getPrimaryPlantCode(),\n    \n    // Role checks\n    isAdmin: isAdmin(),\n    isJvcUser: isJvcUser(),\n    isCqsUser: isCqsUser(),\n    isTechUser: isTechUser(),\n    isPlantUser: isPlantUser(),\n    isViewer: isViewer(),\n    \n    // Access summary\n    accessSummary,\n    \n    // Helper functions\n    hasRole: (role) => hasRole(role),\n    hasAnyRole: (roles) => roles.some(role => hasRole(role)),\n    hasAllRoles: (roles) => roles.every(role => hasRole(role)),\n    \n    // Async access checks\n    checkScreenAccess,\n    checkDataAccess,\n    checkPlantDataAccess,\n    makeAccessDecision,\n    \n    // Data filtering\n    filterByPlantAccess,\n    \n    // Refresh function\n    refresh: loadAccessSummary\n  };\n};\n\n/**\n * Hook for checking specific screen access\n */\nexport const useScreenAccess = (screenRoute) => {\n  const [hasAccess, setHasAccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const checkAccess = async () => {\n      if (!isAuthenticated() || !screenRoute) {\n        setHasAccess(false);\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const access = await RBACService.hasScreenAccess(screenRoute);\n        setHasAccess(access);\n      } catch (err) {\n        console.warn('Screen access check failed:', err);\n        setError(err);\n        \n        // Use fallback\n        const fallbackAccess = RBACService.getFallbackScreenAccess(screenRoute);\n        setHasAccess(fallbackAccess);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAccess();\n  }, [screenRoute]);\n\n  return { hasAccess, loading, error };\n};\n\n/**\n * Hook for checking data access\n */\nexport const useDataAccess = (dataType, context = {}) => {\n  const [hasAccess, setHasAccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const checkAccess = async () => {\n      if (!isAuthenticated() || !dataType) {\n        setHasAccess(false);\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const access = await RBACService.hasDataAccess(dataType, context);\n        setHasAccess(access);\n      } catch (err) {\n        console.warn('Data access check failed:', err);\n        setError(err);\n        \n        // Use fallback\n        const fallbackAccess = RBACService.getFallbackDataAccess(dataType, context);\n        setHasAccess(fallbackAccess);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAccess();\n  }, [dataType, context]);\n\n  return { hasAccess, loading, error };\n};\n\n/**\n * Hook for plant-specific data filtering\n */\nexport const usePlantDataFilter = (data, plantExtractor) => {\n  const [filteredData, setFilteredData] = useState([]);\n\n  useEffect(() => {\n    if (!Array.isArray(data)) {\n      setFilteredData([]);\n      return;\n    }\n\n    const filtered = RBACService.filterDataByPlantAccess(data, plantExtractor);\n    setFilteredData(filtered);\n  }, [data, plantExtractor]);\n\n  return filteredData;\n};\n\nexport default useRoleBasedAccess;","import {\n  MessageOutlined,\n  ClockCircleOutlined,\n  CheckCircleOutlined,\n  ExclamationCircleOutlined,\n  ReloadOutlined,\n  HistoryOutlined\n} from '@ant-design/icons';\nimport { Typography, Row, Col, Card, Statistic, Tabs, Alert, Space, Button } from 'antd';\nimport React, { useState, useEffect } from 'react';\n\nimport apiClient from '../api/client';\nimport QueryHistoryTracker from '../components/QueryHistoryTracker';\nimport QueryInbox from '../components/QueryInbox';\nimport { CqsOnly } from '../components/RoleBasedComponent';\nimport { TEAM_NAMES } from '../constants';\nimport { useRoleBasedAccess } from '../hooks/useRoleBasedAccess';\n\nconst { Title } = Typography;\nconst { TabPane } = Tabs;\n\nconst CQSView = () => {\n  const [queryStats, setQueryStats] = useState({\n    totalQueries: 0,\n    openQueries: 0,\n    resolvedToday: 0,\n    overdueQueries: 0,\n    avgResolutionTime: 0,\n    highPriorityQueries: 0\n  });\n\n  // Use role-based access control\n  const { isCqsUser, isAdmin } = useRoleBasedAccess();\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    loadDashboardStats(controller.signal);\n\n    return () => {\n      controller.abort();\n    };\n  }, []);\n\n  const loadDashboardStats = async signal => {\n    try {\n      const [openCount, resolvedToday, overdueQueries, avgTime, highPriorityQueries] =\n        await Promise.all([\n          apiClient.get('/queries/stats/count-open/CQS', { signal }).catch(() => 0),\n          apiClient.get('/queries/stats/resolved-today', { signal }).catch(() => 0),\n          apiClient\n            .get('/queries/overdue', { signal })\n            .then(data =>\n              Array.isArray(data) ? data.filter(q => q.assignedTeam === TEAM_NAMES.CQS).length : 0\n            )\n            .catch(() => 0),\n          apiClient.get('/queries/stats/avg-resolution-time/CQS', { signal }).catch(() => 0),\n          apiClient\n            .get('/queries/high-priority', { signal })\n            .then(data =>\n              Array.isArray(data) ? data.filter(q => q.assignedTeam === TEAM_NAMES.CQS).length : 0\n            )\n            .catch(() => 0)\n        ]);\n\n      setQueryStats({\n        totalQueries: openCount + resolvedToday,\n        openQueries: openCount,\n        resolvedToday,\n        overdueQueries,\n        avgResolutionTime: avgTime,\n        highPriorityQueries\n      });\n    } catch (error) {\n      console.error('Failed to load dashboard stats:', error);\n    }\n  };\n\n  return (\n    <CqsOnly>\n      <div style={{ padding: 24 }}>\n        <Title level={2}>CQS Dashboard</Title>\n\n      {/* Enhanced Quick Stats */}\n      <Row gutter={16} style={{ marginBottom: 16 }}>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Open Queries\"\n              value={queryStats.openQueries}\n              prefix={<MessageOutlined />}\n              valueStyle={{ color: '#cf1322' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Resolved Today\"\n              value={queryStats.resolvedToday}\n              prefix={<CheckCircleOutlined />}\n              valueStyle={{ color: '#3f8600' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Overdue\"\n              value={queryStats.overdueQueries}\n              prefix={<ExclamationCircleOutlined />}\n              valueStyle={{ color: queryStats.overdueQueries > 0 ? '#cf1322' : '#3f8600' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Avg Resolution\"\n              value={queryStats.avgResolutionTime}\n              precision={1}\n              suffix=\"hrs\"\n              prefix={<ClockCircleOutlined />}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Alerts for urgent items */}\n      {queryStats.overdueQueries > 0 && (\n        <Alert\n          message={`${queryStats.overdueQueries} queries are overdue (>3 days)`}\n          description=\"These queries require immediate attention to maintain SLA compliance.\"\n          type=\"error\"\n          showIcon\n          style={{ marginBottom: 16 }}\n          action={\n            <Button size=\"small\" danger>\n              View Overdue\n            </Button>\n          }\n        />\n      )}\n\n      {queryStats.highPriorityQueries > 0 && (\n        <Alert\n          message={`${queryStats.highPriorityQueries} high priority queries pending`}\n          description=\"These queries have been marked as high priority and need urgent resolution.\"\n          type=\"warning\"\n          showIcon\n          style={{ marginBottom: 16 }}\n          action={\n            <Button size=\"small\" type=\"primary\">\n              View High Priority\n            </Button>\n          }\n        />\n      )}\n\n      {/* Enhanced Main Content Tabs */}\n      <Tabs\n        defaultActiveKey=\"queries\"\n        size=\"large\"\n        tabBarExtraContent={\n          <Space>\n            <Button icon={<ReloadOutlined />} onClick={loadDashboardStats} size=\"small\">\n              Refresh Stats\n            </Button>\n          </Space>\n        }\n      >\n        <TabPane\n          tab={\n            <Space>\n              <MessageOutlined />\n              <span>Query Inbox</span>\n              {queryStats.openQueries > 0 && (\n                <span\n                  style={{\n                    background: '#ff4d4f',\n                    color: 'white',\n                    borderRadius: '10px',\n                    padding: '2px 6px',\n                    fontSize: '12px'\n                  }}\n                >\n                  {queryStats.openQueries}\n                </span>\n              )}\n            </Space>\n          }\n          key=\"queries\"\n        >\n          <QueryInbox team=\"CQS\" userRole=\"CQS_USER\" />\n        </TabPane>\n\n        <TabPane\n          tab={\n            <Space>\n              <HistoryOutlined />\n              <span>Query History</span>\n            </Space>\n          }\n          key=\"history\"\n        >\n          <QueryHistoryTracker />\n        </TabPane>\n      </Tabs>\n      </div>\n    </CqsOnly>\n  );\n};\n\nexport default CQSView;\n"],"names":["useRoleBasedAccess","accessSummary","setAccessSummary","useState","loading","setLoading","error","setError","loadAccessSummary","useCallback","async","isAuthenticated","summary","RBACService","getUserAccessSummary","err","console","warn","fallbackSummary","getFallbackAccessSummary","useEffect","checkScreenAccess","hasScreenAccess","screenRoute","getFallbackScreenAccess","checkDataAccess","dataType","context","arguments","length","undefined","hasDataAccess","getFallbackDataAccess","checkPlantDataAccess","plantCode","hasPlantDataAccess","getFallbackPlantDataAccess","makeAccessDecision","resourceType","resourceId","action","getFallbackAccessDecision","filterByPlantAccess","data","plantExtractor","filterDataByPlantAccess","currentUser","getCurrentUser","primaryRole","getPrimaryRoleType","userPlants","getUserPlantCodes","primaryPlant","getPrimaryPlantCode","isAdmin","isJvcUser","isCqsUser","isTechUser","isPlantUser","isViewer","hasRole","role","hasAnyRole","roles","some","hasAllRoles","every","refresh","Title","Typography","TabPane","Tabs","CQSView","queryStats","setQueryStats","totalQueries","openQueries","resolvedToday","overdueQueries","avgResolutionTime","highPriorityQueries","controller","AbortController","loadDashboardStats","signal","abort","openCount","avgTime","Promise","all","apiClient","get","catch","then","Array","isArray","filter","q","assignedTeam","TEAM_NAMES","CQS","_jsx","CqsOnly","children","_jsxs","style","padding","level","Row","gutter","marginBottom","Col","span","Card","Statistic","title","value","prefix","MessageOutlined","valueStyle","color","CheckCircleOutlined","ExclamationCircleOutlined","precision","suffix","ClockCircleOutlined","Alert","message","description","type","showIcon","Button","size","danger","defaultActiveKey","tabBarExtraContent","Space","icon","ReloadOutlined","onClick","tab","background","borderRadius","fontSize","QueryInbox","team","userRole","HistoryOutlined","QueryHistoryTracker"],"sourceRoot":""}