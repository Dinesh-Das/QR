{"version":3,"file":"static/js/862.8f3d5c1e.chunk.js","mappings":"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","sources":["hooks/useRoleBasedAccess.js","components/SecureForm.js","utils/questionnaireUtils.js","services/userAPI.js","services/workflowAPI.js","services/masterDataAPI.js","components/ErrorBoundaries/PlantErrorBoundary.js","components/Plant/PlantDashboard.js","components/Plant/WorkflowTable.js","components/CqsFieldDisplay.js","components/MaterialContextPanel.js","components/QueryRaisingModal.js","components/PlantQuestionnaire.js","screens/PlantView.js","hooks/usePlantWorkflows.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\nimport { \n  isAuthenticated, \n  isAdmin, \n  isJvcUser, \n  isCqsUser, \n  isTechUser, \n  isPlantUser, \n  isViewer,\n  hasRole,\n  getPrimaryRoleType,\n  getUserPlantCodes,\n  getPrimaryPlantCode,\n  getCurrentUser\n} from '../services/auth';\nimport RBACService from '../services/rbacService';\n\n/**\n * Custom hook for role-based access control\n * Provides reactive access to user roles and permissions\n */\nexport const useRoleBasedAccess = () => {\n  const [accessSummary, setAccessSummary] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Load user access summary\n  const loadAccessSummary = useCallback(async () => {\n    if (!isAuthenticated()) {\n      setAccessSummary(null);\n      setLoading(false);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const summary = await RBACService.getUserAccessSummary();\n      setAccessSummary(summary);\n    } catch (err) {\n      console.warn('Failed to load access summary, using fallback:', err);\n      setError(err);\n      \n      // Use fallback data\n      const fallbackSummary = RBACService.getFallbackAccessSummary();\n      setAccessSummary(fallbackSummary);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    loadAccessSummary();\n  }, [loadAccessSummary]);\n\n  // Check screen access\n  const checkScreenAccess = useCallback(async (screenRoute) => {\n    try {\n      return await RBACService.hasScreenAccess(screenRoute);\n    } catch (error) {\n      console.warn('Screen access check failed, using fallback:', error);\n      return RBACService.getFallbackScreenAccess(screenRoute);\n    }\n  }, []);\n\n  // Check data access\n  const checkDataAccess = useCallback(async (dataType, context = {}) => {\n    try {\n      return await RBACService.hasDataAccess(dataType, context);\n    } catch (error) {\n      console.warn('Data access check failed, using fallback:', error);\n      return RBACService.getFallbackDataAccess(dataType, context);\n    }\n  }, []);\n\n  // Check plant data access\n  const checkPlantDataAccess = useCallback(async (dataType, plantCode, context = {}) => {\n    try {\n      return await RBACService.hasPlantDataAccess(dataType, plantCode, context);\n    } catch (error) {\n      console.warn('Plant data access check failed, using fallback:', error);\n      return RBACService.getFallbackPlantDataAccess(dataType, plantCode, context);\n    }\n  }, []);\n\n  // Make access decision\n  const makeAccessDecision = useCallback(async (resourceType, resourceId, action, context = {}) => {\n    try {\n      return await RBACService.makeAccessDecision(resourceType, resourceId, action, context);\n    } catch (error) {\n      console.warn('Access decision failed, using fallback:', error);\n      return RBACService.getFallbackAccessDecision(resourceType, resourceId, action, context);\n    }\n  }, []);\n\n  // Filter data by plant access\n  const filterByPlantAccess = useCallback((data, plantExtractor) => {\n    return RBACService.filterDataByPlantAccess(data, plantExtractor);\n  }, []);\n\n  return {\n    // Loading states\n    loading,\n    error,\n    \n    // User info\n    isAuthenticated: isAuthenticated(),\n    currentUser: getCurrentUser(),\n    primaryRole: getPrimaryRoleType(),\n    userPlants: getUserPlantCodes(),\n    primaryPlant: getPrimaryPlantCode(),\n    \n    // Role checks\n    isAdmin: isAdmin(),\n    isJvcUser: isJvcUser(),\n    isCqsUser: isCqsUser(),\n    isTechUser: isTechUser(),\n    isPlantUser: isPlantUser(),\n    isViewer: isViewer(),\n    \n    // Access summary\n    accessSummary,\n    \n    // Helper functions\n    hasRole: (role) => hasRole(role),\n    hasAnyRole: (roles) => roles.some(role => hasRole(role)),\n    hasAllRoles: (roles) => roles.every(role => hasRole(role)),\n    \n    // Async access checks\n    checkScreenAccess,\n    checkDataAccess,\n    checkPlantDataAccess,\n    makeAccessDecision,\n    \n    // Data filtering\n    filterByPlantAccess,\n    \n    // Refresh function\n    refresh: loadAccessSummary\n  };\n};\n\n/**\n * Hook for checking specific screen access\n */\nexport const useScreenAccess = (screenRoute) => {\n  const [hasAccess, setHasAccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const checkAccess = async () => {\n      if (!isAuthenticated() || !screenRoute) {\n        setHasAccess(false);\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const access = await RBACService.hasScreenAccess(screenRoute);\n        setHasAccess(access);\n      } catch (err) {\n        console.warn('Screen access check failed:', err);\n        setError(err);\n        \n        // Use fallback\n        const fallbackAccess = RBACService.getFallbackScreenAccess(screenRoute);\n        setHasAccess(fallbackAccess);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAccess();\n  }, [screenRoute]);\n\n  return { hasAccess, loading, error };\n};\n\n/**\n * Hook for checking data access\n */\nexport const useDataAccess = (dataType, context = {}) => {\n  const [hasAccess, setHasAccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const checkAccess = async () => {\n      if (!isAuthenticated() || !dataType) {\n        setHasAccess(false);\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const access = await RBACService.hasDataAccess(dataType, context);\n        setHasAccess(access);\n      } catch (err) {\n        console.warn('Data access check failed:', err);\n        setError(err);\n        \n        // Use fallback\n        const fallbackAccess = RBACService.getFallbackDataAccess(dataType, context);\n        setHasAccess(fallbackAccess);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAccess();\n  }, [dataType, context]);\n\n  return { hasAccess, loading, error };\n};\n\n/**\n * Hook for plant-specific data filtering\n */\nexport const usePlantDataFilter = (data, plantExtractor) => {\n  const [filteredData, setFilteredData] = useState([]);\n\n  useEffect(() => {\n    if (!Array.isArray(data)) {\n      setFilteredData([]);\n      return;\n    }\n\n    const filtered = RBACService.filterDataByPlantAccess(data, plantExtractor);\n    setFilteredData(filtered);\n  }, [data, plantExtractor]);\n\n  return filteredData;\n};\n\nexport default useRoleBasedAccess;","/**\n * SecureForm Component\n * \n * A wrapper component that provides enhanced security features for forms including:\n * - Input validation and sanitization\n * - XSS prevention\n * - Security audit logging\n * - Real-time validation feedback\n * \n * @component\n * @since 1.0.0\n * @author QRMFG Security Team\n */\n\nimport { Form, Input, message } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { \n  InputSanitizer, \n  ValidationRules, \n  useInputValidation, \n  SecurityAuditLogger \n} from '../utils/inputValidation';\n\nconst { TextArea } = Input;\n\n/**\n * SecureInput Component - Enhanced input with validation and sanitization\n */\nconst SecureInput = React.memo(({ \n  value, \n  onChange, \n  validationType = 'text',\n  componentName = 'SecureInput',\n  fieldName = 'input',\n  onValidationChange,\n  ...props \n}) => {\n  const { validateInput } = useInputValidation();\n  const [validationState, setValidationState] = useState({\n    isValid: true,\n    errors: [],\n    wasModified: false\n  });\n\n  const handleChange = useCallback((e) => {\n    const inputValue = e.target.value;\n    const validation = validateInput(inputValue, validationType);\n    \n    setValidationState(validation);\n    \n    // Log potential security issues\n    if (validation.wasModified) {\n      SecurityAuditLogger.logXSSAttempt(\n        inputValue,\n        validation.sanitizedValue,\n        componentName,\n        fieldName\n      );\n      \n      message.warning('Input was sanitized for security reasons');\n    }\n    \n    // Call parent onChange with sanitized value\n    if (onChange) {\n      onChange({\n        ...e,\n        target: {\n          ...e.target,\n          value: validation.sanitizedValue\n        }\n      });\n    }\n    \n    // Notify parent of validation state\n    if (onValidationChange) {\n      onValidationChange(validation);\n    }\n  }, [onChange, validationType, componentName, fieldName, onValidationChange, validateInput]);\n\n  return (\n    <Input\n      {...props}\n      value={value}\n      onChange={handleChange}\n      status={validationState.isValid ? '' : 'error'}\n      title={validationState.errors.join(', ')}\n    />\n  );\n});\n\n/**\n * SecureTextArea Component - Enhanced textarea with validation and sanitization\n */\nconst SecureTextArea = React.memo(({ \n  value, \n  onChange, \n  validationType = 'richtext',\n  componentName = 'SecureTextArea',\n  fieldName = 'textarea',\n  onValidationChange,\n  ...props \n}) => {\n  const { validateInput } = useInputValidation();\n  const [validationState, setValidationState] = useState({\n    isValid: true,\n    errors: [],\n    wasModified: false\n  });\n\n  const handleChange = useCallback((e) => {\n    const inputValue = e.target.value;\n    const validation = validateInput(inputValue, validationType);\n    \n    setValidationState(validation);\n    \n    // Log potential security issues\n    if (validation.wasModified) {\n      SecurityAuditLogger.logXSSAttempt(\n        inputValue,\n        validation.sanitizedValue,\n        componentName,\n        fieldName\n      );\n      \n      message.warning('Input was sanitized for security reasons');\n    }\n    \n    // Call parent onChange with sanitized value\n    if (onChange) {\n      onChange({\n        ...e,\n        target: {\n          ...e.target,\n          value: validation.sanitizedValue\n        }\n      });\n    }\n    \n    // Notify parent of validation state\n    if (onValidationChange) {\n      onValidationChange(validation);\n    }\n  }, [onChange, validationType, componentName, fieldName, onValidationChange, validateInput]);\n\n  return (\n    <TextArea\n      {...props}\n      value={value}\n      onChange={handleChange}\n      status={validationState.isValid ? '' : 'error'}\n      title={validationState.errors.join(', ')}\n    />\n  );\n});\n\n/**\n * SecureForm Component - Enhanced form with security features\n */\nconst SecureForm = React.memo(({ \n  children, \n  onFinish, \n  componentName = 'SecureForm',\n  enableSecurityLogging = true,\n  ...props \n}) => {\n  const [securityEvents, setSecurityEvents] = useState([]);\n\n  // Handle form submission with security validation\n  const handleFinish = useCallback(async (values) => {\n    try {\n      // Sanitize all form values before submission\n      const sanitizedValues = {};\n      const securityIssues = [];\n\n      Object.keys(values).forEach(key => {\n        const originalValue = values[key];\n        \n        if (typeof originalValue === 'string') {\n          const sanitizedValue = InputSanitizer.sanitizeText(originalValue);\n          sanitizedValues[key] = sanitizedValue;\n          \n          if (sanitizedValue !== originalValue) {\n            securityIssues.push({\n              field: key,\n              originalValue: originalValue.substring(0, 50),\n              sanitizedValue: sanitizedValue.substring(0, 50)\n            });\n          }\n        } else {\n          sanitizedValues[key] = originalValue;\n        }\n      });\n\n      // Log security issues if any\n      if (securityIssues.length > 0 && enableSecurityLogging) {\n        securityIssues.forEach(issue => {\n          SecurityAuditLogger.logXSSAttempt(\n            issue.originalValue,\n            issue.sanitizedValue,\n            componentName,\n            issue.field\n          );\n        });\n        \n        message.warning(`${securityIssues.length} field(s) were sanitized for security`);\n      }\n\n      // Call original onFinish with sanitized values\n      if (onFinish) {\n        await onFinish(sanitizedValues);\n      }\n    } catch (error) {\n      console.error('SecureForm submission error:', error);\n      message.error('Form submission failed');\n      throw error;\n    }\n  }, [onFinish, componentName, enableSecurityLogging]);\n\n  // Track security events\n  useEffect(() => {\n    if (enableSecurityLogging) {\n      const events = SecurityAuditLogger.getRecentEvents();\n      setSecurityEvents(events.slice(-10)); // Keep last 10 events\n    }\n  }, [enableSecurityLogging]);\n\n  return (\n    <Form\n      {...props}\n      onFinish={handleFinish}\n      validateTrigger={['onChange', 'onBlur']}\n    >\n      {children}\n      \n      {/* Development mode security info */}\n      {process.env.NODE_ENV === 'development' && securityEvents.length > 0 && (\n        <div style={{ \n          marginTop: 16, \n          padding: 8, \n          background: '#fff7e6', \n          border: '1px solid #ffd591',\n          borderRadius: 4,\n          fontSize: 12\n        }}>\n          <strong>Security Events (Dev Mode):</strong>\n          <ul style={{ margin: '4px 0', paddingLeft: 16 }}>\n            {securityEvents.slice(-3).map((event, index) => (\n              <li key={index}>\n                {event.type} in {event.component}.{event.field} at {new Date(event.timestamp).toLocaleTimeString()}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </Form>\n  );\n});\n\n// Form.Item wrapper with enhanced validation\nconst SecureFormItem = React.memo(({ \n  children, \n  validationType = 'text',\n  name,\n  rules = [],\n  ...props \n}) => {\n  // Combine custom rules with security validation rules\n  const securityRules = React.useMemo(() => {\n    let baseRules = [];\n    \n    switch (validationType) {\n      case 'username':\n        baseRules = ValidationRules.username;\n        break;\n      case 'email':\n        baseRules = ValidationRules.email;\n        break;\n      case 'password':\n        baseRules = ValidationRules.password;\n        break;\n      case 'projectCode':\n        baseRules = ValidationRules.projectCode;\n        break;\n      case 'materialCode':\n        baseRules = ValidationRules.materialCode;\n        break;\n      case 'plantCode':\n        baseRules = ValidationRules.plantCode;\n        break;\n      case 'text':\n        baseRules = ValidationRules.text(false, 0, 255);\n        break;\n      case 'richtext':\n        baseRules = ValidationRules.richText(false, 0, 1000);\n        break;\n      default:\n        baseRules = [];\n    }\n    \n    return [...baseRules, ...rules];\n  }, [validationType, rules]);\n\n  return (\n    <Form.Item\n      {...props}\n      name={name}\n      rules={securityRules}\n    >\n      {children}\n    </Form.Item>\n  );\n});\n\n// PropTypes\nSecureInput.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  validationType: PropTypes.oneOf(['text', 'username', 'email', 'sql', 'filename', 'url']),\n  componentName: PropTypes.string,\n  fieldName: PropTypes.string,\n  onValidationChange: PropTypes.func\n};\n\nSecureTextArea.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  validationType: PropTypes.oneOf(['text', 'richtext']),\n  componentName: PropTypes.string,\n  fieldName: PropTypes.string,\n  onValidationChange: PropTypes.func\n};\n\nSecureForm.propTypes = {\n  children: PropTypes.node.isRequired,\n  onFinish: PropTypes.func,\n  componentName: PropTypes.string,\n  enableSecurityLogging: PropTypes.bool\n};\n\nSecureFormItem.propTypes = {\n  children: PropTypes.node.isRequired,\n  validationType: PropTypes.string,\n  name: PropTypes.string,\n  rules: PropTypes.array\n};\n\n// Display names\nSecureInput.displayName = 'SecureInput';\nSecureTextArea.displayName = 'SecureTextArea';\nSecureForm.displayName = 'SecureForm';\nSecureFormItem.displayName = 'SecureFormItem';\n\n// Exports\nexport { SecureInput, SecureTextArea, SecureFormItem };\nexport default SecureForm;","/**\r\n * Utility functions for questionnaire field calculations\r\n * Handles CQS auto-populated field exclusions and progress calculations\r\n */\r\n\r\n/**\r\n * Get the default questionnaire template with CQS field markings\r\n * This should match the template structure in PlantQuestionnaire.js\r\n */\r\nexport const getDefaultQuestionnaireTemplate = () => [\r\n  {\r\n    title: 'General',\r\n    fields: [\r\n      { name: 'msds_available', isCqsAutoPopulated: false },\r\n      { name: 'missing_info', isCqsAutoPopulated: false },\r\n      { name: 'sourcing_asked', isCqsAutoPopulated: false },\r\n      { name: 'cas_available', isCqsAutoPopulated: false },\r\n      { name: 'mixture_ingredients', isCqsAutoPopulated: false },\r\n      { name: 'composition_percentage', isCqsAutoPopulated: false },\r\n      { name: 'total_percentage_1', isCqsAutoPopulated: false },\r\n      { name: 'total_percentage', isCqsAutoPopulated: false }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Physical',\r\n    fields: [\r\n      { name: 'is_corrosive', isCqsAutoPopulated: true },\r\n      { name: 'corrosive_storage', isCqsAutoPopulated: false },\r\n      { name: 'highly_toxic', isCqsAutoPopulated: true },\r\n      { name: 'toxic_powder_handling', isCqsAutoPopulated: false },\r\n      { name: 'crushing_facilities', isCqsAutoPopulated: false },\r\n      { name: 'heating_facilities', isCqsAutoPopulated: false },\r\n      { name: 'paste_preparation', isCqsAutoPopulated: false }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Flammability and Explosivity',\r\n    fields: [\r\n      { name: 'flash_point_65', isCqsAutoPopulated: true },\r\n      { name: 'petroleum_class', isCqsAutoPopulated: true },\r\n      { name: 'storage_license', isCqsAutoPopulated: false },\r\n      { name: 'ccoe_license', isCqsAutoPopulated: false },\r\n      { name: 'flash_point_21', isCqsAutoPopulated: true },\r\n      { name: 'flammable_infrastructure', isCqsAutoPopulated: false }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Toxicity',\r\n    fields: [\r\n      { name: 'ld50_oral', isCqsAutoPopulated: true },\r\n      { name: 'ld50_dermal', isCqsAutoPopulated: true },\r\n      { name: 'lc50_inhalation', isCqsAutoPopulated: true },\r\n      { name: 'exposure_minimization', isCqsAutoPopulated: false },\r\n      { name: 'carcinogenic', isCqsAutoPopulated: true },\r\n      { name: 'carcinogenic_control', isCqsAutoPopulated: false }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Process Safety Management',\r\n    fields: [\r\n      { name: 'psm_tier1_outdoor', isCqsAutoPopulated: true },\r\n      { name: 'psm_tier1_indoor', isCqsAutoPopulated: true },\r\n      { name: 'psm_tier2_outdoor', isCqsAutoPopulated: true },\r\n      { name: 'psm_tier2_indoor', isCqsAutoPopulated: true }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Storage and Handling',\r\n    fields: [\r\n      { name: 'storage_conditions_stores', isCqsAutoPopulated: false },\r\n      { name: 'storage_conditions_floor', isCqsAutoPopulated: false },\r\n      { name: 'closed_loop_required', isCqsAutoPopulated: false },\r\n      { name: 'work_permit_available', isCqsAutoPopulated: false },\r\n      { name: 'procedures_details', isCqsAutoPopulated: false }\r\n    ]\r\n  },\r\n  {\r\n    title: 'PPE',\r\n    fields: [\r\n      { name: 'recommended_ppe', isCqsAutoPopulated: true },\r\n      { name: 'ppe_in_use', isCqsAutoPopulated: false },\r\n      { name: 'ppe_procurement_date', isCqsAutoPopulated: false }\r\n    ]\r\n  },\r\n  {\r\n    title: 'First Aid',\r\n    fields: [\r\n      { name: 'is_poisonous', isCqsAutoPopulated: true },\r\n      { name: 'antidote_specified', isCqsAutoPopulated: true },\r\n      { name: 'antidote_available', isCqsAutoPopulated: false },\r\n      { name: 'antidote_source', isCqsAutoPopulated: false },\r\n      { name: 'first_aid_capability', isCqsAutoPopulated: false }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Statutory',\r\n    fields: [\r\n      { name: 'cmvr_listed', isCqsAutoPopulated: true },\r\n      { name: 'msihc_listed', isCqsAutoPopulated: true },\r\n      { name: 'factories_act_listed', isCqsAutoPopulated: true },\r\n      { name: 'permissible_concentration', isCqsAutoPopulated: false },\r\n      { name: 'monitoring_details', isCqsAutoPopulated: false }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Others',\r\n    fields: [\r\n      { name: 'plant_inputs_required', isCqsAutoPopulated: false },\r\n      { name: 'gaps_identified', isCqsAutoPopulated: false },\r\n      { name: 'additional_input_1', isCqsAutoPopulated: false },\r\n      { name: 'additional_input_2', isCqsAutoPopulated: false }\r\n    ]\r\n  }\r\n];\r\n\r\n/**\r\n * Calculate correct field counts including ALL fields (both CQS and plant fields)\r\n * @param {Object} plantInputs - The plant input data\r\n * @param {Array} template - Optional template, uses default if not provided\r\n * @returns {Object} - { totalFields, completedFields, completionPercentage }\r\n */\r\nexport const calculateCorrectFieldCounts = (plantInputs = {}, template = null) => {\r\n  const questionnaireTemplate = template || getDefaultQuestionnaireTemplate();\r\n  \r\n  let totalFields = 0;\r\n  let completedFields = 0;\r\n\r\n  questionnaireTemplate.forEach(step => {\r\n    const stepFields = step.fields || [];\r\n    \r\n    // Count ALL fields (both CQS and plant fields)\r\n    totalFields += stepFields.length;\r\n\r\n    // Count completed fields (any field with a value)\r\n    const completedStepFields = stepFields.filter(field => {\r\n      const value = plantInputs[field.name];\r\n      if (Array.isArray(value)) {\r\n        return value.length > 0;\r\n      }\r\n      return value && value !== '' && value !== null && value !== undefined;\r\n    });\r\n\r\n    completedFields += completedStepFields.length;\r\n  });\r\n\r\n  const completionPercentage = totalFields > 0 \r\n    ? Math.round((completedFields / totalFields) * 100) \r\n    : 0;\r\n\r\n  return {\r\n    totalFields,\r\n    completedFields,\r\n    completionPercentage,\r\n    // Keep backward compatibility\r\n    totalUserEditableFields: totalFields,\r\n    completedUserEditableFields: completedFields\r\n  };\r\n};\r\n\r\n/**\r\n * Get total field counts for the questionnaire template\r\n * @param {Array} template - Optional template, uses default if not provided\r\n * @returns {Object} - { totalFields, totalUserEditableFields, totalCqsFields }\r\n */\r\nexport const getTemplateFieldCounts = (template = null) => {\r\n  const questionnaireTemplate = template || getDefaultQuestionnaireTemplate();\r\n  \r\n  let totalFields = 0;\r\n  let totalUserEditableFields = 0;\r\n  let totalCqsFields = 0;\r\n\r\n  questionnaireTemplate.forEach(step => {\r\n    const stepFields = step.fields || [];\r\n    totalFields += stepFields.length;\r\n    \r\n    stepFields.forEach(field => {\r\n      if (field.isCqsAutoPopulated || field.disabled) {\r\n        totalCqsFields++;\r\n      } else {\r\n        totalUserEditableFields++;\r\n      }\r\n    });\r\n  });\r\n\r\n  return {\r\n    totalFields, // 87 total fields\r\n    totalUserEditableFields, // 53 plant fields\r\n    totalCqsFields // 34 CQS fields\r\n  };\r\n};\r\n\r\n/**\r\n * Recalculate workflow progress with correct field counts\r\n * @param {Object} workflow - The workflow object from backend\r\n * @param {Object} plantInputs - The plant input data (optional)\r\n * @returns {Object} - Updated workflow with correct field counts\r\n */\r\nexport const recalculateWorkflowProgress = (workflow, plantInputs = null) => {\r\n  // If we have plant inputs, calculate based on actual data\r\n  if (plantInputs) {\r\n    const { totalFields, completedFields, completionPercentage } = \r\n      calculateCorrectFieldCounts(plantInputs);\r\n    \r\n    return {\r\n      ...workflow,\r\n      totalFields,\r\n      completedFields,\r\n      completionPercentage\r\n    };\r\n  }\r\n\r\n  // Otherwise, just fix the total field count and recalculate percentage\r\n  const { totalFields } = getTemplateFieldCounts();\r\n  \r\n  // Assume the backend's completed count is correct but total is wrong\r\n  const backendCompletedFields = workflow.completedFields || 0;\r\n  const correctedCompletionPercentage = totalFields > 0 \r\n    ? Math.round((backendCompletedFields / totalFields) * 100) \r\n    : 0;\r\n\r\n  return {\r\n    ...workflow,\r\n    totalFields, // Now uses 87 total fields instead of 53\r\n    completionPercentage: correctedCompletionPercentage\r\n  };\r\n};","import apiClient from '../api/client';\nimport { getToken, isAuthenticated } from '../services/auth';\n\n/**\n * User API service providing user management functionality\n * Migrated to use unified APIClient with standardized error handling\n *\n * @namespace userAPI\n */\nexport const userAPI = {\n  /**\n   * Get current user's plant assignments from backend API\n   * @param {string} username - Username to get plant assignments for\n   * @param {Object} options - Additional options including signal for AbortController\n   * @returns {Promise<Object>} Plant assignment data\n   */\n  getUserPlantAssignments: async (username, options = {}) => {\n    try {\n      console.log('Getting plant assignments for user:', username);\n      console.log('Is authenticated:', isAuthenticated());\n\n      // Check if user is authenticated first\n      if (!isAuthenticated()) {\n        console.warn('User is not authenticated, cannot get plant assignments');\n        return {\n          assignedPlants: [],\n          primaryPlant: null,\n          effectivePlant: null,\n          isPlantUser: false\n        };\n      }\n\n      // Primary method: Get plant info from JWT token validation\n      const token = getToken();\n      console.log('Retrieved token:', token ? 'Token found' : 'No token found');\n\n      if (token) {\n        try {\n          const validationResponse = await apiClient.post('/auth/validate', { token }, options);\n          console.log('Token validation response:', validationResponse);\n          console.log('Plant codes in token:', validationResponse.plantCodes);\n          console.log('Primary plant in token:', validationResponse.primaryPlant);\n          console.log('Is plant user:', validationResponse.isPlantUser);\n\n          if (validationResponse.valid) {\n            // Check if we have plant data in the token\n            if (validationResponse.plantCodes && validationResponse.plantCodes.length > 0) {\n              console.log('Plant assignments from token:', validationResponse);\n              return {\n                assignedPlants: validationResponse.plantCodes || [],\n                primaryPlant: validationResponse.primaryPlant || null,\n                effectivePlant: validationResponse.primaryPlant || (validationResponse.plantCodes && validationResponse.plantCodes[0]) || null,\n                isPlantUser: validationResponse.isPlantUser || false\n              };\n            }\n\n            // Handle case where user has primaryPlant but empty plantCodes array\n            if (validationResponse.primaryPlant && validationResponse.isPlantUser) {\n              console.log('User has primary plant but empty plantCodes, using primary plant as assigned plant:', validationResponse.primaryPlant);\n              return {\n                assignedPlants: [validationResponse.primaryPlant],\n                primaryPlant: validationResponse.primaryPlant,\n                effectivePlant: validationResponse.primaryPlant,\n                isPlantUser: validationResponse.isPlantUser || false\n              };\n            }\n\n            // If no plant data in token but token is valid, user might not have plants assigned\n            console.log('Token is valid but no plant data found in token');\n          }\n        } catch (tokenError) {\n          console.warn('Failed to validate token for plant assignments:', tokenError);\n        }\n      }\n\n      // Fallback: try to get from stored user data (check multiple storage keys)\n      const possibleKeys = ['userData', 'qrmfg_user_data', 'user_info'];\n      for (const key of possibleKeys) {\n        const storedUserData = localStorage.getItem(key) || sessionStorage.getItem(key);\n        if (storedUserData) {\n          try {\n            const userData = JSON.parse(storedUserData);\n            if (userData.plantCodes || userData.assignedPlants) {\n              console.log('Plant assignments from stored data:', userData);\n              return {\n                assignedPlants: userData.plantCodes || userData.assignedPlants || [],\n                primaryPlant: userData.primaryPlant || null,\n                effectivePlant: userData.primaryPlant || ((userData.plantCodes || userData.assignedPlants) && (userData.plantCodes || userData.assignedPlants)[0]) || null,\n                isPlantUser: userData.isPlantUser || false\n              };\n            }\n          } catch (parseError) {\n            console.warn(`Failed to parse stored user data from ${key}:`, parseError);\n          }\n        }\n      }\n\n      // Last resort: Try admin endpoints only if user might have admin access\n      try {\n        // Only try admin endpoints if we think the user might be an admin\n        const adminToken = getToken();\n        const validationResponse = await apiClient.post('/auth/validate', { token: adminToken }, options);\n        if (validationResponse.valid && validationResponse.isAdmin) {\n          console.log('User appears to be admin, trying admin endpoints...');\n\n          const userDetails = await apiClient.get('/admin/users', options);\n          const currentUser = userDetails.users?.find(user => user.username === username);\n\n          if (currentUser && currentUser.assignedPlants) {\n            console.log('Admin endpoint: Using user details for plant assignments:', currentUser);\n\n            return {\n              assignedPlants: currentUser.assignedPlants || [],\n              primaryPlant: currentUser.primaryPlant || null,\n              effectivePlant: currentUser.primaryPlant || (currentUser.assignedPlants && currentUser.assignedPlants[0]) || null,\n              isPlantUser: (currentUser.assignedPlants && currentUser.assignedPlants.length > 0) || false\n            };\n          }\n        }\n      } catch (adminError) {\n        console.warn('Admin endpoints not accessible (expected for non-admin users):', adminError.message);\n      }\n\n      // If no plant data available, return empty structure\n      console.warn('No plant assignment data available for user:', username);\n      return {\n        assignedPlants: [],\n        primaryPlant: null,\n        effectivePlant: null,\n        isPlantUser: false\n      };\n    } catch (error) {\n      console.error('Error getting user plant assignments:', error);\n      // Return empty structure on error to prevent crashes\n      return {\n        assignedPlants: [],\n        primaryPlant: null,\n        effectivePlant: null,\n        isPlantUser: false\n      };\n    }\n  },\n\n  /**\n   * Update user's plant assignments\n   * @param {string} username - Username to update plant assignments for\n   * @param {Object} plantData - Plant assignment data\n   * @returns {Promise<Object>} Updated plant assignments\n   */\n  updateUserPlantAssignments: (username, plantData) =>\n    apiClient.put(`/admin/users/${encodeURIComponent(username)}/plants`, plantData),\n\n  /**\n   * Check if user is assigned to a specific plant\n   * @param {string} username - Username to check\n   * @param {string} plantCode - Plant code to check assignment for\n   * @returns {Promise<boolean>} True if user is assigned to plant\n   */\n  checkUserPlantAssignment: (username, plantCode) =>\n    apiClient.get(\n      `/admin/users/${encodeURIComponent(username)}/plants/${encodeURIComponent(plantCode)}/check`\n    ),\n\n  /**\n   * Get user information by ID\n   * @param {string} id - User ID\n   * @returns {Promise<Object>} User information\n   */\n  getUserById: id => apiClient.get(`/admin/users/${id}`),\n\n  /**\n   * Get all users (cached for 5 minutes)\n   * @param {Object} options - Additional options including signal for AbortController\n   * @returns {Promise<Array>} Array of all users\n   */\n  getAllUsers: (options = {}) => apiClient.get('/admin/users', {\n    cacheTTL: 5 * 60 * 1000, // Cache for 5 minutes\n    ...options\n  }),\n\n  /**\n   * Get all users without cache (for real-time data)\n   * @param {Object} options - Additional options including signal for AbortController\n   * @returns {Promise<Array>} Array of all users\n   */\n  getAllUsersRealTime: (options = {}) => apiClient.get('/admin/users', {\n    useCache: false,\n    ...options\n  })\n};\n","import apiClient from '../api/client';\n\n/**\n * Workflow API service providing comprehensive workflow management functionality\n * Migrated to use unified APIClient with standardized error handling\n *\n * @namespace workflowAPI\n */\nexport const workflowAPI = {\n  // Dashboard endpoints\n  /**\n   * Get dashboard summary data\n   * @returns {Promise<Object>} Dashboard summary data\n   */\n  getDashboardSummary: () => apiClient.get('/dashboard/summary'),\n\n  /**\n   * Get overdue workflows based on day threshold\n   * @param {number} dayThreshold - Number of days to consider as overdue (default: 3)\n   * @returns {Promise<Array>} Array of overdue workflows\n   */\n  getOverdueWorkflows: (dayThreshold = 3) =>\n    apiClient.get(`/workflows/overdue?days=${dayThreshold}`),\n\n  /**\n   * Get recent workflow activity\n   * @param {number} days - Number of days to look back (default: 7)\n   * @returns {Promise<Array>} Array of recent workflows\n   */\n  getRecentActivity: (days = 7) => apiClient.get(`/workflows/recent/created?days=${days}`),\n\n  /**\n   * Get workflow counts grouped by state\n   * @returns {Promise<Object>} Workflow counts by state\n   */\n  getWorkflowCountsByState: () => apiClient.get('/dashboard/counts-by-state'),\n\n  /**\n   * Get workflows for a specific plant\n   * @param {string} plantName - Name of the plant\n   * @returns {Promise<Array>} Array of workflows for the plant\n   */\n  getWorkflowsByPlant: plantName =>\n    apiClient.get(`/workflows/plant/${encodeURIComponent(plantName)}`),\n\n  // Workflow CRUD operations\n  /**\n   * Create a new workflow\n   * @param {Object} workflowData - Workflow data to create\n   * @returns {Promise<Object>} Created workflow object\n   */\n  createWorkflow: workflowData => apiClient.post('/workflows', workflowData),\n\n  /**\n   * Get workflow by ID\n   * @param {string} id - Workflow ID\n   * @returns {Promise<Object>} Workflow object\n   */\n  getWorkflow: id => apiClient.get(`/workflows/${id}`),\n\n  /**\n   * Update workflow by ID\n   * @param {string} id - Workflow ID\n   * @param {Object} workflowData - Updated workflow data\n   * @returns {Promise<Object>} Updated workflow object\n   */\n  updateWorkflow: (id, workflowData) => apiClient.put(`/workflows/${id}`, workflowData),\n\n  /**\n   * Delete workflow by ID\n   * @param {string} id - Workflow ID\n   * @returns {Promise<void>} Promise that resolves when workflow is deleted\n   */\n  deleteWorkflow: id => apiClient.delete(`/workflows/${id}`),\n\n  // Workflow state management\n  /**\n   * Transition workflow to a new state\n   * @param {string} id - Workflow ID\n   * @param {string} newState - New state to transition to\n   * @param {string} comment - Comment for the transition\n   * @returns {Promise<Object>} Updated workflow object\n   */\n  transitionWorkflowState: (id, newState, comment) =>\n    apiClient.put(`/workflows/${id}/transition`, { newState, comment }),\n\n  /**\n   * Extend workflow deadline\n   * @param {string} id - Workflow ID\n   * @param {Object} extensionData - Extension data including new deadline\n   * @returns {Promise<Object>} Updated workflow object\n   */\n  extendWorkflow: (id, extensionData) => apiClient.put(`/workflows/${id}/extend`, extensionData),\n\n  /**\n   * Complete workflow\n   * @param {string} id - Workflow ID\n   * @param {Object} completionData - Completion data\n   * @returns {Promise<Object>} Completed workflow object\n   */\n  completeWorkflow: (id, completionData) =>\n    apiClient.put(`/workflows/${id}/complete`, completionData),\n\n  /**\n   * Smart plant extension - only extend to plants that don't have workflows yet\n   * Enhanced to handle document reuse information and provide detailed results\n   * @param {Object} extensionData - Extension data with projectCode, materialCode, and plantCodes\n   * @returns {Promise<Object>} Smart extension result with created, duplicate, failed workflows, and document reuse information\n   */\n  extendToMultiplePlantsSmartly: async (extensionData) => {\n    try {\n      const result = await apiClient.withRetry(\n        () => apiClient.post('/workflows/extend-to-plants', extensionData),\n        3, // maxRetries\n        1000 // baseDelay in ms\n      );\n\n      // Enhanced result includes document reuse information\n      return {\n        ...result,\n        documentReuse: result.documentReuse || {\n          totalReusedDocuments: 0,\n          reusedDocuments: [],\n          reuseStrategy: 'NONE',\n          sourceDescription: 'No documents available for reuse'\n        }\n      };\n    } catch (error) {\n      console.error('[WorkflowAPI] Smart extension failed:', error);\n      throw {\n        ...error,\n        context: 'SMART_PLANT_EXTENSION',\n        extensionData\n      };\n    }\n  },\n\n  // Workflow search and filtering\n  /**\n   * Search workflows with advanced filters\n   * @param {Object} searchParams - Search parameters and filters\n   * @returns {Promise<Array>} Array of matching workflows\n   */\n  searchWorkflows: searchParams => apiClient.post('/workflows/search', searchParams),\n\n  /**\n   * Get workflows by state\n   * @param {string} state - Workflow state\n   * @returns {Promise<Array>} Array of workflows in the specified state\n   */\n  getWorkflowsByState: state => apiClient.get(`/workflows/state/${state}`),\n\n  /**\n   * Get workflows initiated by a specific user\n   * @param {string} username - Username of the initiator\n   * @returns {Promise<Array>} Array of workflows initiated by the user\n   */\n  getWorkflowsByUser: username =>\n    apiClient.get(`/workflows/initiated-by/${encodeURIComponent(username)}`),\n\n  // Workflow validation\n  canTransitionTo: (id, newState) => apiClient.get(`/workflows/${id}/can-transition/${newState}`),\n\n  isReadyForCompletion: id => apiClient.get(`/workflows/${id}/ready-for-completion`),\n\n  checkWorkflowExists: (projectCode, materialCode, plantCode) =>\n    apiClient.get(\n      `/workflows/check-exists?projectCode=${encodeURIComponent(projectCode)}&materialCode=${encodeURIComponent(materialCode)}&plantCode=${encodeURIComponent(plantCode)}`\n    ),\n\n  // Workflow statistics\n  getWorkflowStats: timeRange => apiClient.get(`/workflows/stats?range=${timeRange}`),\n\n  getCompletionRateByPlant: () => apiClient.get('/workflows/completion-rate-by-plant'),\n\n  getWorkflowCompletionTrend: (months = 6) =>\n    apiClient.get(`/workflows/completion-trend?months=${months}`),\n\n  // State-based queries\n  getPendingWorkflows: () => apiClient.get('/workflows/pending'),\n\n  getWorkflowsWithOpenQueries: () => apiClient.get('/workflows/with-open-queries'),\n\n  // Count endpoints\n  getCountByState: state => apiClient.get(`/workflows/stats/count-by-state/${state}`),\n\n  getOverdueCount: () => apiClient.get('/workflows/stats/overdue-count'),\n\n  getWorkflowsWithOpenQueriesCount: () => apiClient.get('/workflows/stats/with-open-queries-count'),\n\n  // Recent workflows\n  getRecentlyCreated: (days = 7) => apiClient.get(`/workflows/recent/created?days=${days}`),\n\n  getRecentlyCompleted: (days = 7) => apiClient.get(`/workflows/recent/completed?days=${days}`),\n\n  // Questionnaire and draft management\n  saveDraftResponses: (workflowId, draftData) =>\n    apiClient.post(`/workflows/${workflowId}/draft-responses`, draftData),\n\n  getDraftResponses: workflowId => apiClient.get(`/workflows/${workflowId}/draft-responses`),\n\n  submitQuestionnaire: (workflowId, questionnaireData) =>\n    apiClient.post(`/workflows/${workflowId}/submit-questionnaire`, questionnaireData),\n\n  // Document management\n  getWorkflowDocuments: workflowId => apiClient.get(`/workflows/${workflowId}/documents`),\n\n  // Enhanced document management - get all related documents (workflow + query documents)\n  getAllWorkflowRelatedDocuments: async (workflowId) => {\n    try {\n      return await apiClient.withRetry(\n        () => apiClient.get(`/workflows/${workflowId}/documents/all`),\n        2, // maxRetries for document operations\n        500 // shorter delay for document operations\n      );\n    } catch (error) {\n      console.error(`[WorkflowAPI] Failed to get all documents for workflow ${workflowId}:`, error);\n      throw {\n        ...error,\n        context: 'GET_ALL_WORKFLOW_DOCUMENTS',\n        workflowId\n      };\n    }\n  },\n\n  // Export workflow documents as ZIP with retry functionality\n  exportWorkflowDocuments: async (workflowId, includeQueryDocuments = true) => {\n    try {\n      return await apiClient.withRetry(\n        () => apiClient.download(`/workflows/${workflowId}/documents/export?includeQueryDocuments=${includeQueryDocuments}`),\n        2, // maxRetries for download operations\n        1000 // longer delay for file operations\n      );\n    } catch (error) {\n      console.error(`[WorkflowAPI] Failed to export documents for workflow ${workflowId}:`, error);\n      throw {\n        ...error,\n        context: 'EXPORT_WORKFLOW_DOCUMENTS',\n         workflowId,\n         includeQueryDocuments\n      };\n    }\n  },\n\n  // Get unified document search results across all document types\n  searchUnifiedDocuments: async (searchParams) => {\n    try {\n      return await apiClient.withRetry(\n        () => apiClient.post('/documents/search/unified', searchParams),\n        2, // maxRetries\n        500 // baseDelay\n      );\n    } catch (error) {\n      console.error('[WorkflowAPI] Unified document search failed:', error);\n      throw {\n        ...error,\n        context: 'UNIFIED_DOCUMENT_SEARCH',\n         searchParams\n      };\n    }\n  },\n\n  // Get comprehensive document information for a project/material combination\n  getUnifiedDocumentInfo: async (projectCode, materialCode) => {\n    try {\n      return await apiClient.withRetry(\n        () => apiClient.get(\n          `/documents/unified-info?projectCode=${encodeURIComponent(projectCode)}&materialCode=${encodeURIComponent(materialCode)}`\n        ),\n        2, // maxRetries\n        500 // baseDelay\n      );\n    } catch (error) {\n      console.error(`[WorkflowAPI] Failed to get unified document info for ${projectCode}/${materialCode}:`, error);\n      throw {\n        ...error,\n        context: 'GET_UNIFIED_DOCUMENT_INFO',\n         projectCode,\n         materialCode\n      };\n    }\n  },\n\n  getReusableDocuments: async (projectCode, materialCode) => {\n    try {\n      return await apiClient.withRetry(\n        () => apiClient.get(\n          `/workflows/documents/reusable?projectCode=${encodeURIComponent(projectCode)}&materialCode=${encodeURIComponent(materialCode)}`\n        ),\n        2, // maxRetries\n        500 // baseDelay\n      );\n    } catch (error) {\n      console.error(`[WorkflowAPI] Failed to get reusable documents for ${projectCode}/${materialCode}:`, error);\n      throw {\n        ...error,\n        context: 'GET_REUSABLE_DOCUMENTS',\n         projectCode,\n         materialCode\n      };\n    }\n  },\n\n  downloadDocument: async (documentId) => {\n    try {\n      return await apiClient.withRetry(\n        () => apiClient.download(`/workflows/documents/${documentId}/download`),\n        3, // more retries for downloads as they can be flaky\n        1000 // longer delay for file operations\n      );\n    } catch (error) {\n      console.error(`[WorkflowAPI] Failed to download document ${documentId}:`, error);\n      throw {\n        ...error,\n        context: 'DOWNLOAD_DOCUMENT',\n        documentId\n      };\n    }\n  },\n\n  uploadDocument: async (workflowId, file, metadata) => {\n    try {\n      return await apiClient.withRetry(\n        () => apiClient.upload(`/workflows/${workflowId}/documents`, file, {\n          metadata: JSON.stringify(metadata)\n        }),\n        2, // fewer retries for uploads to avoid duplicate uploads\n        1000 // longer delay for file operations\n      );\n    } catch (error) {\n      console.error(`[WorkflowAPI] Failed to upload document to workflow ${workflowId}:`, error);\n      throw {\n        ...error,\n        context: 'UPLOAD_DOCUMENT',\n         workflowId,\n        fileName: file?.name || 'unknown'\n      };\n    }\n  },\n\n  // Bulk document operations with enhanced error handling\n  uploadMultipleDocuments: async (workflowId, files, metadata = {}) => {\n    const results = [];\n    const errors = [];\n\n    for (const file of files) {\n      try {\n        const result = await workflowAPI.uploadDocument(workflowId, file, metadata);\n        results.push({ file: file.name, result, success: true });\n      } catch (error) {\n        console.error(`[WorkflowAPI] Failed to upload ${file.name}:`, error);\n        errors.push({ file: file.name, error, success: false });\n      }\n    }\n\n    return {\n      successful: results,\n      failed: errors,\n      totalFiles: files.length,\n      successCount: results.length,\n      failureCount: errors.length\n    };\n  },\n\n  // Retry failed document operations\n  retryDocumentOperation: async (operationType, operationData, maxRetries = 3) => {\n    let lastError;\n    \n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        switch (operationType) {\n          case 'UPLOAD':\n            return await workflowAPI.uploadDocument(\n              operationData.workflowId, \n              operationData.file, \n              operationData.metadata\n            );\n          case 'DOWNLOAD':\n            return await workflowAPI.downloadDocument(operationData.documentId);\n          case 'GET_DOCUMENTS':\n            return await workflowAPI.getAllWorkflowRelatedDocuments(operationData.workflowId);\n          default:\n            throw new Error(`Unknown operation type: ${operationType}`);\n        }\n      } catch (error) {\n        lastError = error;\n        console.warn(`[WorkflowAPI] Retry attempt ${attempt}/${maxRetries} failed for ${operationType}:`, error);\n        \n        if (attempt < maxRetries) {\n          // Exponential backoff\n          const delay = Math.pow(2, attempt) * 1000;\n          await new Promise(resolve => setTimeout(resolve, delay));\n        }\n      }\n    }\n\n    throw {\n      ...lastError,\n      context: 'RETRY_OPERATION_FAILED',\n       operationType,\n       maxRetries,\n      finalAttempt: true\n    };\n  },\n\n  // Material name management from ProjectItemMaster\n  updateAllMaterialNamesFromProjectItemMaster: () =>\n    apiClient.post('/workflows/update-material-names'),\n\n  updateMaterialNameFromProjectItemMaster: workflowId =>\n    apiClient.post(`/workflows/${workflowId}/update-material-name`),\n\n  // Plant Questionnaire endpoints\n  getQuestionnaireTemplate: ({ materialCode, plantCode, templateType = 'PLANT_QUESTIONNAIRE' }) =>\n    apiClient.get(\n      `/plant-questionnaire/template?materialCode=${encodeURIComponent(materialCode)}&plantCode=${encodeURIComponent(plantCode)}&templateType=${encodeURIComponent(templateType)}`\n    ),\n\n  getCqsData: ({ materialCode, plantCode }) =>\n    apiClient.get(\n      `/plant-questionnaire/cqs-data?materialCode=${encodeURIComponent(materialCode)}&plantCode=${encodeURIComponent(plantCode)}`\n    ),\n\n  // New unified questionnaire endpoint\n  getQuestionnaireData: (workflowId) =>\n    apiClient.get(`/api/v1/questionnaire/${workflowId}`),\n\n  getQuestionnaireForEdit: (workflowId) =>\n    apiClient.get(`/api/v1/questionnaire/${workflowId}/edit`),\n\n  getPlantSpecificData: ({ plantCode, materialCode }) =>\n    apiClient.get(\n      `/plant-questionnaire/plant-data?plantCode=${encodeURIComponent(plantCode)}&materialCode=${encodeURIComponent(materialCode)}`\n    ),\n\n  getOrCreatePlantSpecificData: ({ plantCode, materialCode, workflowId }) =>\n    apiClient.post(\n      `/plant-questionnaire/plant-data/init?plantCode=${encodeURIComponent(plantCode)}&materialCode=${encodeURIComponent(materialCode)}&workflowId=${workflowId}`\n    ),\n\n  savePlantSpecificData: (plantSpecificData, modifiedBy = 'SYSTEM') =>\n    apiClient.post(\n      `/plant-questionnaire/plant-data/save?modifiedBy=${encodeURIComponent(modifiedBy)}`,\n      plantSpecificData\n    ),\n\n  saveDraftPlantResponses: (workflowId, draftData) =>\n    apiClient.post(`/plant-questionnaire/draft?workflowId=${workflowId}`, draftData),\n\n\n\n  submitPlantQuestionnaire: (workflowId, submissionData) =>\n    apiClient.post(`/plant-questionnaire/submit?workflowId=${workflowId}`, submissionData),\n\n  getPlantQuestionnaireStats: ({ plantCode, materialCode }) => {\n    const params = new URLSearchParams({ plantCode });\n    if (materialCode) {\n      params.append('materialCode', materialCode);\n    }\n    return apiClient.get(`/plant-questionnaire/stats?${params.toString()}`);\n  },\n\n  // Plant Dashboard with progress information\n  getPlantDashboardData: plantCode =>\n    apiClient.get(`/plant-questionnaire/dashboard?plantCode=${encodeURIComponent(plantCode)}`),\n\n  // Initialize sample plant data for testing\n  initializeSamplePlantData: plantCode =>\n    apiClient.post(\n      `/plant-questionnaire/init-sample-data?plantCode=${encodeURIComponent(plantCode)}`\n    ),\n\n  // Document management utility methods\n  /**\n   * Get document reuse statistics for a project/material combination\n   * @param {string} projectCode - Project code\n   * @param {string} materialCode - Material code\n   * @returns {Promise<Object>} Document reuse statistics\n   */\n  getDocumentReuseStats: async (projectCode, materialCode) => {\n    try {\n      return await apiClient.withRetry(\n        () => apiClient.get(\n          `/workflows/documents/reuse-stats?projectCode=${encodeURIComponent(projectCode)}&materialCode=${encodeURIComponent(materialCode)}`\n        ),\n        2, // maxRetries\n        500 // baseDelay\n      );\n    } catch (error) {\n      console.error(`[WorkflowAPI] Failed to get document reuse stats for ${projectCode}/${materialCode}:`, error);\n      throw {\n        ...error,\n        context: 'GET_DOCUMENT_REUSE_STATS',\n         projectCode,\n         materialCode\n      };\n    }\n  },\n\n  /**\n   * Validate document reuse eligibility before workflow extension\n   * @param {string} projectCode - Project code\n   * @param {string} materialCode - Material code\n   * @param {Array<string>} plantCodes - Plant codes to extend to\n   * @returns {Promise<Object>} Document reuse validation result\n   */\n  validateDocumentReuse: async (projectCode, materialCode, plantCodes) => {\n    try {\n      return await apiClient.withRetry(\n        () => apiClient.post('/workflows/documents/validate-reuse', {\n          projectCode,\n          materialCode,\n          plantCodes\n        }),\n        2, // maxRetries\n        500 // baseDelay\n      );\n    } catch (error) {\n      console.error(`[WorkflowAPI] Failed to validate document reuse for ${projectCode}/${materialCode}:`, error);\n      throw {\n        ...error,\n        context: 'VALIDATE_DOCUMENT_REUSE',\n         projectCode,\n         materialCode,\n         plantCodes\n      };\n    }\n  },\n\n  /**\n   * Get document access audit log\n   * @param {string} workflowId - Workflow ID\n   * @param {Object} options - Query options (dateRange, documentId, etc.)\n   * @returns {Promise<Array>} Document access audit log\n   */\n  getDocumentAuditLog: async (workflowId, options = {}) => {\n    try {\n      const queryParams = new URLSearchParams(options).toString();\n      return await apiClient.withRetry(\n        () => apiClient.get(`/workflows/${workflowId}/documents/audit-log?${queryParams}`),\n        2, // maxRetries\n        500 // baseDelay\n      );\n    } catch (error) {\n      console.error(`[WorkflowAPI] Failed to get document audit log for workflow ${workflowId}:`, error);\n      throw {\n        ...error,\n        context: 'GET_DOCUMENT_AUDIT_LOG',\n         workflowId,\n         options\n      };\n    }\n  },\n\n  /**\n   * Enhanced error handler for document operations\n   * Provides user-friendly error messages and recovery suggestions\n   * @param {Error} error - The error object\n   * @param {string} operation - The operation that failed\n   * @returns {Object} Enhanced error information\n   */\n  handleDocumentError: (error, operation) => {\n    const enhancedError = {\n      originalError: error,\n       operation,\n      timestamp: new Date().toISOString(),\n      userMessage: 'An error occurred with document operation',\n      technicalMessage: error.message,\n      recoveryActions: [],\n      retryable: false\n    };\n\n    // Determine user-friendly message and recovery actions based on error type\n    switch (error.context) {\n      case 'UPLOAD_DOCUMENT':\n        enhancedError.userMessage = 'Failed to upload document. Please check file size and format.';\n        enhancedError.recoveryActions = [\n          'Verify file is under 25MB',\n          'Check file format is supported (PDF, DOCX, XLSX, JPG, PNG)',\n          'Try uploading again',\n          'Contact support if problem persists'\n        ];\n        enhancedError.retryable = true;\n        break;\n\n      case 'DOWNLOAD_DOCUMENT':\n        enhancedError.userMessage = 'Failed to download document. Please try again.';\n        enhancedError.recoveryActions = [\n          'Check your internet connection',\n          'Try downloading again',\n          'Contact support if document is corrupted'\n        ];\n        enhancedError.retryable = true;\n        break;\n\n      case 'GET_ALL_WORKFLOW_DOCUMENTS':\n        enhancedError.userMessage = 'Failed to load workflow documents.';\n        enhancedError.recoveryActions = [\n          'Refresh the page',\n          'Check your internet connection',\n          'Contact support if problem persists'\n        ];\n        enhancedError.retryable = true;\n        break;\n\n      case 'SMART_PLANT_EXTENSION':\n        enhancedError.userMessage = 'Failed to extend workflow to plants. Some documents may not have been reused.';\n        enhancedError.recoveryActions = [\n          'Check if workflows were created successfully',\n          'Manually upload documents if needed',\n          'Try the extension again',\n          'Contact support for assistance'\n        ];\n        enhancedError.retryable = true;\n        break;\n\n      case 'UNIFIED_DOCUMENT_SEARCH':\n        enhancedError.userMessage = 'Document search failed. Please try again.';\n        enhancedError.recoveryActions = [\n          'Simplify your search terms',\n          'Try searching again',\n          'Use individual document lists instead'\n        ];\n        enhancedError.retryable = true;\n        break;\n\n      default:\n        if (error.type === 'NETWORK') {\n          enhancedError.userMessage = 'Network error occurred. Please check your connection.';\n          enhancedError.retryable = true;\n        } else if (error.type === 'TIMEOUT') {\n          enhancedError.userMessage = 'Operation timed out. Please try again.';\n          enhancedError.retryable = true;\n        } else if (error.status === 413) {\n          enhancedError.userMessage = 'File is too large. Please use a smaller file.';\n          enhancedError.retryable = false;\n        } else if (error.status === 415) {\n          enhancedError.userMessage = 'File type not supported. Please use PDF, DOCX, XLSX, JPG, or PNG.';\n          enhancedError.retryable = false;\n        }\n        break;\n    }\n\n    return enhancedError;\n  }\n};\n","import apiClient from '../api/client';\n\nexport const masterDataAPI = {\n  // Location Master (Plants) endpoints\n  getAllLocations: async () => {\n    try {\n      return await apiClient.get('/master-data/locations');\n    } catch (error) {\n      console.warn('Main locations endpoint failed, trying fallback:', error);\n      try {\n        return await apiClient.get('/master-data/locations/fallback');\n      } catch (fallbackError) {\n        console.warn('Fallback endpoint failed, trying simple endpoint:', fallbackError);\n        try {\n          return await apiClient.get('/simple-locations');\n        } catch (simpleError) {\n          console.error('All locations endpoints failed:', simpleError);\n          throw simpleError;\n        }\n      }\n    }\n  },\n\n  getLocationByCode: locationCode =>\n    apiClient.get(`/master-data/locations/${encodeURIComponent(locationCode)}`),\n\n  searchLocations: searchTerm =>\n    apiClient.get(`/master-data/locations/search?term=${encodeURIComponent(searchTerm)}`),\n\n  createLocation: locationData => apiClient.post('/master-data/locations', locationData),\n\n  updateLocation: (locationCode, locationData) =>\n    apiClient.put(`/master-data/locations/${encodeURIComponent(locationCode)}`, locationData),\n\n  deleteLocation: locationCode =>\n    apiClient.delete(`/master-data/locations/${encodeURIComponent(locationCode)}`),\n\n\n\n  // Project Item Master endpoints\n  getAllProjectItems: () => apiClient.get('/master-data/project-items'),\n\n  getItemsByProject: projectCode =>\n    apiClient.get(`/master-data/project-items/projects/${encodeURIComponent(projectCode)}`),\n\n  getProjectsByItem: itemCode =>\n    apiClient.get(`/master-data/project-items/items/${encodeURIComponent(itemCode)}`),\n\n  getAllProjectCodes: () => apiClient.get('/master-data/project-codes'),\n\n  getAllItemCodes: () => apiClient.get('/master-data/item-codes'),\n\n  getItemCodesByProject: projectCode =>\n    apiClient.get(`/master-data/project-codes/${encodeURIComponent(projectCode)}/items`),\n\n  // Test endpoints\n  testLocationMaster: () => apiClient.get('/master-data/locations/test'),\n\n  testSimpleLocation: () => apiClient.get('/simple-locations/test'),\n\n  diagnosticLocationMaster: () => apiClient.get('/master-data/locations/diagnostic'),\n\n  getSimpleLocationCount: () => apiClient.get('/simple-locations/count')\n};\n","import React from 'react';\n\nimport { RouteErrorBoundary } from './RouteErrorBoundary';\n\n/**\n * Plant-specific error boundary for handling errors within plant workflow management\n * Extends RouteErrorBoundary with plant-specific context\n */\nexport const PlantErrorBoundary = ({ children, plantCode }) => (\n  <RouteErrorBoundary \n    routeName=\"Plant Dashboard\" \n    errorContext={{ \n      plantCode,\n      feature: 'plant-workflow-management',\n      level: 'plant'\n    }}\n  >\n    {children}\n  </RouteErrorBoundary>\n);\n\nexport default PlantErrorBoundary;","import {\n  ClockCircleOutlined,\n  CheckCircleOutlined,\n  ExclamationCircleOutlined,\n  BarChartOutlined\n} from '@ant-design/icons';\nimport { Card, Row, Col, Statistic, Progress, Alert } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { useMemo } from 'react';\n\n/**\n * PlantDashboard component displays summary statistics and progress for plant workflows\n * Optimized with React.memo and useMemo for performance\n */\nconst PlantDashboard = React.memo(({ \n  dashboardStats, \n  loading, \n  error, \n  currentPlant,\n  onRefresh \n}) => {\n  /**\n   * Calculate progress color based on completion percentage\n   */\n  const getProgressColor = useMemo(() => (percentage) => {\n    if (percentage >= 80) return '#52c41a'; // Green\n    if (percentage >= 60) return '#1890ff'; // Blue\n    if (percentage >= 40) return '#faad14'; // Yellow\n    if (percentage >= 20) return '#fa8c16'; // Orange\n    return '#ff4d4f'; // Red\n  }, []);\n\n  /**\n   * Calculate completion rate statistics\n   */\n  const completionStats = useMemo(() => {\n    const { totalWorkflows, completedCount, inProgressCount, draftCount } = dashboardStats;\n    \n    if (totalWorkflows === 0) {\n      return {\n        completionRate: 0,\n        inProgressRate: 0,\n        draftRate: 0\n      };\n    }\n\n    return {\n      completionRate: Math.round((completedCount / totalWorkflows) * 100),\n      inProgressRate: Math.round((inProgressCount / totalWorkflows) * 100),\n      draftRate: Math.round((draftCount / totalWorkflows) * 100)\n    };\n  }, [dashboardStats]);\n\n  /**\n   * Get status color for statistics\n   */\n  const getStatisticColor = useMemo(() => (type) => {\n    const colors = {\n      total: '#1890ff',\n      inProgress: '#fa8c16',\n      completed: '#52c41a',\n      average: '#52c41a'\n    };\n    return colors[type] || '#1890ff';\n  }, []);\n\n  if (error) {\n    return (\n      <Alert\n        message=\"Dashboard Error\"\n        description={`Failed to load dashboard data: ${error}`}\n        type=\"error\"\n        showIcon\n        style={{ marginBottom: 24 }}\n        action={\n          onRefresh && (\n            <button onClick={onRefresh} style={{ border: 'none', background: 'none', color: '#1890ff', cursor: 'pointer' }}>\n              Retry\n            </button>\n          )\n        }\n      />\n    );\n  }\n\n  return (\n    <div style={{ marginBottom: 24 }}>\n      {/* Main Statistics Row */}\n      <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>\n        <Col xs={12} sm={6} md={6} lg={6}>\n          <Card loading={loading}>\n            <Statistic\n              title=\"Total Materials\"\n              value={dashboardStats.totalWorkflows || 0}\n              prefix={<ClockCircleOutlined />}\n              valueStyle={{ color: getStatisticColor('total') }}\n            />\n          </Card>\n        </Col>\n        <Col xs={12} sm={6} md={6} lg={6}>\n          <Card loading={loading}>\n            <Statistic\n              title=\"In Progress\"\n              value={dashboardStats.inProgressCount || 0}\n              prefix={<ExclamationCircleOutlined />}\n              valueStyle={{ color: getStatisticColor('inProgress') }}\n            />\n          </Card>\n        </Col>\n        <Col xs={12} sm={6} md={6} lg={6}>\n          <Card loading={loading}>\n            <Statistic\n              title=\"Completed\"\n              value={dashboardStats.completedCount || 0}\n              prefix={<CheckCircleOutlined />}\n              valueStyle={{ color: getStatisticColor('completed') }}\n            />\n          </Card>\n        </Col>\n        <Col xs={12} sm={6} md={6} lg={6}>\n          <Card loading={loading}>\n            <Statistic\n              title=\"Average Progress\"\n              value={dashboardStats.averageCompletion || 0}\n              suffix=\"%\"\n              prefix={<BarChartOutlined />}\n              valueStyle={{ color: getStatisticColor('average') }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Progress Breakdown Row */}\n      <Row gutter={[16, 16]}>\n        <Col xs={24} sm={12} md={8} lg={8}>\n          <Card \n            title=\"Completion Rate\" \n            loading={loading}\n            size=\"small\"\n          >\n            <Progress\n              type=\"circle\"\n              percent={completionStats.completionRate}\n              strokeColor={getProgressColor(completionStats.completionRate)}\n              format={(percent) => `${percent}%`}\n              size={80}\n            />\n            <div style={{ textAlign: 'center', marginTop: 8, fontSize: '12px', color: '#666' }}>\n              {dashboardStats.completedCount} of {dashboardStats.totalWorkflows} completed\n            </div>\n          </Card>\n        </Col>\n        <Col xs={24} sm={12} md={8} lg={8}>\n          <Card \n            title=\"In Progress Rate\" \n            loading={loading}\n            size=\"small\"\n          >\n            <Progress\n              type=\"circle\"\n              percent={completionStats.inProgressRate}\n              strokeColor=\"#fa8c16\"\n              format={(percent) => `${percent}%`}\n              size={80}\n            />\n            <div style={{ textAlign: 'center', marginTop: 8, fontSize: '12px', color: '#666' }}>\n              {dashboardStats.inProgressCount} workflows active\n            </div>\n          </Card>\n        </Col>\n        <Col xs={24} sm={12} md={8} lg={8}>\n          <Card \n            title=\"Draft Rate\" \n            loading={loading}\n            size=\"small\"\n          >\n            <Progress\n              type=\"circle\"\n              percent={completionStats.draftRate}\n              strokeColor=\"#ff4d4f\"\n              format={(percent) => `${percent}%`}\n              size={80}\n            />\n            <div style={{ textAlign: 'center', marginTop: 8, fontSize: '12px', color: '#666' }}>\n              {dashboardStats.draftCount} not started\n            </div>\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Plant Information */}\n      {currentPlant && (\n        <Alert\n          message={`Plant Dashboard - ${currentPlant}`}\n          description=\"Overview of all assigned materials and their completion status for the selected plant.\"\n          type=\"info\"\n          showIcon\n          style={{ marginTop: 16 }}\n        />\n      )}\n    </div>\n  );\n});\n\nPlantDashboard.displayName = 'PlantDashboard';\n\nPlantDashboard.propTypes = {\n  dashboardStats: PropTypes.shape({\n    totalWorkflows: PropTypes.number,\n    completedCount: PropTypes.number,\n    inProgressCount: PropTypes.number,\n    draftCount: PropTypes.number,\n    averageCompletion: PropTypes.number,\n    completedToday: PropTypes.number\n  }).isRequired,\n  loading: PropTypes.bool,\n  error: PropTypes.string,\n  currentPlant: PropTypes.string,\n  onRefresh: PropTypes.func\n};\n\nPlantDashboard.defaultProps = {\n  loading: false,\n  error: null,\n  currentPlant: null,\n  onRefresh: null\n};\n\nexport default PlantDashboard;","import {\n  FormOutlined,\n  SearchOutlined\n} from '@ant-design/icons';\nimport { Table, Button, Space, Tag, Progress, Input } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { useMemo, useCallback } from 'react';\n\nimport { PAGINATION } from '../../constants';\n\n/**\n * WorkflowTable component displays workflows in a table format with sorting, filtering, and actions\n * Optimized with React.memo and performance optimizations\n */\nconst WorkflowTable = React.memo(({ \n  workflows, \n  loading, \n  onStartQuestionnaire, \n  onRefresh \n}) => {\n  /**\n   * Get status color for workflow status tags\n   */\n  const getStatusColor = useCallback((status) => {\n    const colors = {\n      DRAFT: 'default',\n      IN_PROGRESS: 'processing',\n      COMPLETED: 'success'\n    };\n    return colors[status] || 'default';\n  }, []);\n\n  /**\n   * Get completion color based on percentage\n   */\n  const getCompletionColor = useCallback((percentage) => {\n    if (percentage === 100) return '#52c41a';\n    if (percentage >= 75) return '#1890ff';\n    if (percentage >= 50) return '#faad14';\n    if (percentage >= 25) return '#fa8c16';\n    return '#ff4d4f';\n  }, []);\n\n  /**\n   * Calculate days in current state\n   */\n  const getDaysInState = useCallback((lastModified) => {\n    if (!lastModified) return 0;\n    const now = new Date();\n    const modified = new Date(lastModified);\n    const diffTime = Math.abs(now - modified);\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  }, []);\n\n  /**\n   * Handle start questionnaire action\n   */\n  const handleStartQuestionnaire = useCallback((workflow) => {\n    if (onStartQuestionnaire) {\n      onStartQuestionnaire(workflow);\n    }\n  }, [onStartQuestionnaire]);\n\n\n\n  /**\n   * Table columns configuration with memoization\n   */\n  const columns = useMemo(() => [\n    {\n      title: 'Material Code',\n      dataIndex: 'materialCode',\n      key: 'materialCode',\n      width: 140,\n      sorter: (a, b) => a.materialCode.localeCompare(b.materialCode),\n      filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n        <div style={{ padding: 8 }}>\n          <Input\n            placeholder=\"Search Material Code\"\n            value={selectedKeys[0]}\n            onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n            onPressEnter={() => confirm()}\n            style={{ width: 188, marginBottom: 8, display: 'block' }}\n          />\n          <Space>\n            <Button\n              type=\"primary\"\n              onClick={() => confirm()}\n              icon={<SearchOutlined />}\n              size=\"small\"\n              style={{ width: 90 }}\n            >\n              Search\n            </Button>\n            <Button onClick={() => clearFilters()} size=\"small\" style={{ width: 90 }}>\n              Reset\n            </Button>\n          </Space>\n        </div>\n      ),\n      filterIcon: filtered => (\n        <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />\n      ),\n      onFilter: (value, record) => record.materialCode.toLowerCase().includes(value.toLowerCase()),\n      render: (text, record) => (\n        <div>\n          <div style={{ fontWeight: 'bold' }}>{text}</div>\n          <div style={{ fontSize: '12px', color: '#666' }}>\n            {record.materialName || record.itemDescription || 'Material Name'}\n          </div>\n        </div>\n      )\n    },\n    {\n      title: 'Plant Code',\n      dataIndex: 'plantCode',\n      key: 'plantCode',\n      width: 120,\n      sorter: (a, b) => (a.plantCode || '').localeCompare(b.plantCode || ''),\n      filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n        <div style={{ padding: 8 }}>\n          <Input\n            placeholder=\"Search Plant Code\"\n            value={selectedKeys[0]}\n            onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n            onPressEnter={() => confirm()}\n            style={{ width: 188, marginBottom: 8, display: 'block' }}\n          />\n          <Space>\n            <Button\n              type=\"primary\"\n              onClick={() => confirm()}\n              icon={<SearchOutlined />}\n              size=\"small\"\n              style={{ width: 90 }}\n            >\n              Search\n            </Button>\n            <Button onClick={() => clearFilters()} size=\"small\" style={{ width: 90 }}>\n              Reset\n            </Button>\n          </Space>\n        </div>\n      ),\n      filterIcon: filtered => (\n        <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />\n      ),\n      onFilter: (value, record) =>\n        (record.plantCode || '').toLowerCase().includes(value.toLowerCase()),\n      render: text => (\n        <Tag color=\"blue\" style={{ fontWeight: 'bold' }}>\n          {text || 'N/A'}\n        </Tag>\n      )\n    },\n\n    {\n      title: 'Status',\n      dataIndex: 'completionStatus',\n      key: 'completionStatus',\n      width: 120,\n      filters: [\n        { text: 'Draft', value: 'DRAFT' },\n        { text: 'In Progress', value: 'IN_PROGRESS' },\n        { text: 'Completed', value: 'COMPLETED' }\n      ],\n      onFilter: (value, record) => record.completionStatus === value,\n      render: status => <Tag color={getStatusColor(status)}>{status.replace('_', ' ')}</Tag>\n    },\n    {\n      title: 'Progress',\n      key: 'progress',\n      width: 150,\n      sorter: (a, b) => a.completionPercentage - b.completionPercentage,\n      render: (_, record) => {\n        const percentage = record.completionPercentage || 0;\n        return (\n          <div>\n            <Progress\n              percent={percentage}\n              size=\"small\"\n              strokeColor={getCompletionColor(percentage)}\n              format={() => `${percentage}%`}\n            />\n            <div style={{ fontSize: '11px', color: '#666', marginTop: 2 }}>\n              {record.completedFields || 0} / {record.totalFields || 0} fields\n            </div>\n          </div>\n        );\n      }\n    },\n    {\n      title: 'Days Pending',\n      key: 'daysPending',\n      width: 100,\n      sorter: (a, b) => getDaysInState(a.lastModified) - getDaysInState(b.lastModified),\n      render: (_, record) => {\n        const days = getDaysInState(record.lastModified);\n        return <span style={{ color: days > 3 ? '#ff4d4f' : 'inherit' }}>{days}</span>;\n      }\n    },\n    {\n      title: 'Open Queries',\n      dataIndex: 'openQueries',\n      key: 'openQueries',\n      width: 100,\n      sorter: (a, b) => (a.openQueries || 0) - (b.openQueries || 0),\n      render: count => (count > 0 ? <Tag color=\"red\">{count}</Tag> : <Tag color=\"green\">0</Tag>)\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      width: 150,\n      render: (_, record) => (\n        <Space>\n          <Button\n            type=\"primary\"\n            size=\"small\"\n            icon={<FormOutlined />}\n            onClick={() => handleStartQuestionnaire(record)}\n            disabled={record.isSubmitted || record.completionStatus === 'COMPLETED'}\n          >\n            {record.completionPercentage > 0 ? 'Continue' : 'Start'}\n          </Button>\n\n        </Space>\n      )\n    }\n  ], [getStatusColor, getCompletionColor, getDaysInState, handleStartQuestionnaire]);\n\n  /**\n   * Row class name for styling overdue rows\n   */\n  const getRowClassName = useCallback((record) => {\n    const days = getDaysInState(record.lastModified);\n    return days > 3 ? 'overdue-row' : '';\n  }, [getDaysInState]);\n\n  /**\n   * Pagination configuration\n   */\n  const paginationConfig = useMemo(() => ({\n    pageSize: PAGINATION.DEFAULT_PAGE_SIZE,\n    showSizeChanger: true,\n    showQuickJumper: true,\n    showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} materials`,\n    pageSizeOptions: ['10', '20', '50', '100']\n  }), []);\n\n  return (\n    <>\n      <Table\n        dataSource={workflows}\n        columns={columns}\n        loading={loading}\n        rowKey=\"id\"\n        pagination={paginationConfig}\n        rowClassName={getRowClassName}\n        scroll={{ x: 1200 }}\n        size=\"small\"\n        bordered\n        title={() => (\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n            <span style={{ fontWeight: 'bold' }}>\n              Assigned Materials ({workflows.length})\n            </span>\n            {onRefresh && (\n              <Button onClick={onRefresh} loading={loading} size=\"small\">\n                Refresh\n              </Button>\n            )}\n          </div>\n        )}\n      />\n      \n      {/* Custom styles for overdue rows */}\n      <style>{`\n        .overdue-row {\n          background-color: #fff2f0;\n        }\n        .overdue-row:hover {\n          background-color: #ffebe6 !important;\n        }\n        .ant-table-tbody > tr.overdue-row > td {\n          border-bottom: 1px solid #ffccc7;\n        }\n      `}</style>\n    </>\n  );\n});\n\nWorkflowTable.displayName = 'WorkflowTable';\n\nWorkflowTable.propTypes = {\n  workflows: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    materialCode: PropTypes.string.isRequired,\n    plantCode: PropTypes.string,\n\n    completionStatus: PropTypes.string.isRequired,\n    completionPercentage: PropTypes.number,\n    totalFields: PropTypes.number,\n    completedFields: PropTypes.number,\n    lastModified: PropTypes.string,\n    openQueries: PropTypes.number,\n    isSubmitted: PropTypes.bool,\n    materialName: PropTypes.string,\n    itemDescription: PropTypes.string\n  })).isRequired,\n  loading: PropTypes.bool,\n  onStartQuestionnaire: PropTypes.func,\n  onRefresh: PropTypes.func\n};\n\nWorkflowTable.defaultProps = {\n  loading: false,\n  onStartQuestionnaire: null,\n  onRefresh: null\n};\n\nexport default WorkflowTable;","import { \r\n  CheckCircleOutlined, \r\n  ExclamationCircleOutlined, \r\n  InfoCircleOutlined,\r\n  DatabaseOutlined,\r\n  SyncOutlined \r\n} from '@ant-design/icons';\r\nimport { Card, Tag, Tooltip, Space, Typography, Row, Col, Progress, Alert } from 'antd';\r\nimport React from 'react';\r\n\r\nconst { Text, Title } = Typography;\r\n\r\nconst CqsFieldDisplay = ({ \r\n  field, \r\n  cqsData, \r\n  cqsFieldMapping = {}, \r\n  showDetails = false,\r\n  compact = false \r\n}) => {\r\n  \r\n  // Get CQS value for this field\r\n  const cqsValue = cqsData?.cqsData?.[field.name];\r\n  const hasValue = cqsValue !== null && cqsValue !== undefined && cqsValue !== '';\r\n  const displayName = cqsFieldMapping[field.name] || field.label || field.name;\r\n  \r\n  // Determine status\r\n  const getStatus = () => {\r\n    if (!field.isCqsAutoPopulated) return 'plant-input';\r\n    if (hasValue) return 'populated';\r\n    return 'pending';\r\n  };\r\n  \r\n  const status = getStatus();\r\n  \r\n  // Status configurations\r\n  const statusConfig = {\r\n    'populated': {\r\n      color: 'success',\r\n      icon: <CheckCircleOutlined />,\r\n      text: 'Auto-Populated',\r\n      description: 'Value automatically populated from CQS system'\r\n    },\r\n    'pending': {\r\n      color: 'warning', \r\n      icon: <ExclamationCircleOutlined />,\r\n      text: 'Pending CQS',\r\n      description: 'Waiting for CQS system to provide value'\r\n    },\r\n    'plant-input': {\r\n      color: 'processing',\r\n      icon: <InfoCircleOutlined />,\r\n      text: 'Plant Input',\r\n      description: 'Value to be provided by plant personnel'\r\n    }\r\n  };\r\n  \r\n  const config = statusConfig[status];\r\n  \r\n  if (compact) {\r\n    return (\r\n      <Space size=\"small\">\r\n        {field.isCqsAutoPopulated && (\r\n          <Tooltip title={`${config.description}${hasValue ? ` - Value: ${cqsValue}` : ''}`}>\r\n            <Tag \r\n              color={config.color} \r\n              icon={config.icon}\r\n              size=\"small\"\r\n              style={{ \r\n                fontWeight: 'bold',\r\n                borderRadius: '12px'\r\n              }}\r\n            >\r\n              CQS {hasValue ? '✓' : '⏳'}\r\n            </Tag>\r\n          </Tooltip>\r\n        )}\r\n        {hasValue && (\r\n          <Text \r\n            strong \r\n            style={{ \r\n              color: '#52c41a',\r\n              background: '#f6ffed',\r\n              padding: '2px 6px',\r\n              borderRadius: '4px',\r\n              fontSize: '12px'\r\n            }}\r\n          >\r\n            {cqsValue}\r\n          </Text>\r\n        )}\r\n      </Space>\r\n    );\r\n  }\r\n  \r\n  if (!showDetails && !field.isCqsAutoPopulated) {\r\n    return null; // Don't show non-CQS fields in CQS display mode\r\n  }\r\n  \r\n  return (\r\n    <Card \r\n      size=\"small\" \r\n      className={`cqs-field-card ${status}`}\r\n      style={{ marginBottom: 8 }}\r\n    >\r\n      <Row gutter={[16, 8]} align=\"middle\">\r\n        <Col flex=\"auto\">\r\n          <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\r\n            <Space>\r\n              <Tooltip title={config.description}>\r\n                <Tag \r\n                  color={config.color} \r\n                  icon={config.icon}\r\n                >\r\n                  {config.text}\r\n                </Tag>\r\n              </Tooltip>\r\n              <Text strong>{displayName}</Text>\r\n            </Space>\r\n            \r\n            {showDetails && (\r\n              <Text type=\"secondary\" style={{ fontSize: '12px' }}>\r\n                Field: {field.name}\r\n              </Text>\r\n            )}\r\n          </Space>\r\n        </Col>\r\n        \r\n        <Col>\r\n          <Space direction=\"vertical\" align=\"end\" size=\"small\">\r\n            {hasValue ? (\r\n              <Text strong style={{ color: '#52c41a' }}>\r\n                {cqsValue}\r\n              </Text>\r\n            ) : field.isCqsAutoPopulated ? (\r\n              <Text type=\"secondary\" italic>\r\n                Pending\r\n              </Text>\r\n            ) : (\r\n              <Text type=\"secondary\">\r\n                Plant Input Required\r\n              </Text>\r\n            )}\r\n          </Space>\r\n        </Col>\r\n      </Row>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst CqsDataSummary = ({ \r\n  cqsData, \r\n  template, \r\n  cqsFieldMapping = {},\r\n  showAllFields = false \r\n}) => {\r\n  \r\n  if (!cqsData) {\r\n    return (\r\n      <Alert\r\n        message=\"CQS Data Not Available\"\r\n        description=\"CQS integration is pending implementation\"\r\n        type=\"info\"\r\n        icon={<DatabaseOutlined />}\r\n        showIcon\r\n      />\r\n    );\r\n  }\r\n  \r\n  // Calculate statistics\r\n  const totalCqsFields = cqsData.totalFields || 0;\r\n  const populatedFields = cqsData.populatedFields || 0;\r\n  const completionPercentage = cqsData.completionPercentage || 0;\r\n  \r\n  // Get all CQS fields from template\r\n  const cqsFields = [];\r\n  if (template?.steps) {\r\n    template.steps.forEach(step => {\r\n      if (step.fields) {\r\n        step.fields.forEach(field => {\r\n          if (field.isCqsAutoPopulated || showAllFields) {\r\n            cqsFields.push({\r\n              ...field,\r\n              stepTitle: step.title,\r\n              stepNumber: step.stepNumber\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n  \r\n  return (\r\n    <Card \r\n      title={\r\n        <Space>\r\n          <DatabaseOutlined />\r\n          <span>CQS Auto-Population Status</span>\r\n          <Tag color={cqsData.syncStatus === 'ACTIVE' ? 'success' : 'warning'}>\r\n            {cqsData.syncStatus || 'UNKNOWN'}\r\n          </Tag>\r\n        </Space>\r\n      }\r\n      extra={\r\n        <Tooltip title=\"Refresh CQS Data\">\r\n          <SyncOutlined />\r\n        </Tooltip>\r\n      }\r\n    >\r\n      <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\r\n        \r\n        {/* Progress Summary */}\r\n        <Row gutter={[16, 16]}>\r\n          <Col span={24}>\r\n            <Title level={5}>Completion Progress</Title>\r\n            <Progress \r\n              percent={Math.round(completionPercentage)} \r\n              status={completionPercentage === 100 ? 'success' : 'active'}\r\n              format={() => `${populatedFields}/${totalCqsFields} fields`}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        \r\n        {/* Statistics */}\r\n        <Row gutter={[16, 16]}>\r\n          <Col span={8}>\r\n            <Card size=\"small\">\r\n              <Text type=\"secondary\">Total CQS Fields</Text>\r\n              <br />\r\n              <Text strong style={{ fontSize: '18px' }}>{totalCqsFields}</Text>\r\n            </Card>\r\n          </Col>\r\n          <Col span={8}>\r\n            <Card size=\"small\">\r\n              <Text type=\"secondary\">Populated</Text>\r\n              <br />\r\n              <Text strong style={{ fontSize: '18px', color: '#52c41a' }}>\r\n                {populatedFields}\r\n              </Text>\r\n            </Card>\r\n          </Col>\r\n          <Col span={8}>\r\n            <Card size=\"small\">\r\n              <Text type=\"secondary\">Pending</Text>\r\n              <br />\r\n              <Text strong style={{ fontSize: '18px', color: '#faad14' }}>\r\n                {totalCqsFields - populatedFields}\r\n              </Text>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        \r\n        {/* Sync Status */}\r\n        {cqsData.syncMessage && (\r\n          <Alert\r\n            message={cqsData.syncMessage}\r\n            type={cqsData.syncStatus === 'ACTIVE' ? 'success' : 'info'}\r\n            showIcon\r\n          />\r\n        )}\r\n        \r\n        {/* CQS Fields List */}\r\n        {cqsFields.length > 0 && (\r\n          <div>\r\n            <Title level={5}>CQS Auto-Populated Fields</Title>\r\n            <Space direction=\"vertical\" style={{ width: '100%' }}>\r\n              {cqsFields.map((field, index) => (\r\n                <CqsFieldDisplay\r\n                  key={`${field.name}-${index}`}\r\n                  field={field}\r\n                  cqsData={cqsData}\r\n                  cqsFieldMapping={cqsFieldMapping}\r\n                  showDetails={true}\r\n                />\r\n              ))}\r\n            </Space>\r\n          </div>\r\n        )}\r\n        \r\n      </Space>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport { CqsFieldDisplay, CqsDataSummary };\r\nexport default CqsFieldDisplay;","import {\n  InfoCircleOutlined,\n  FileTextOutlined,\n  TeamOutlined,\n  CalendarOutlined,\n  DownloadOutlined,\n  WarningOutlined\n} from '@ant-design/icons';\nimport {\n  Card,\n  Descriptions,\n  Tag,\n  Space,\n  Button,\n  Collapse,\n  Alert,\n  Divider,\n  Typography,\n  Tooltip,\n  Badge,\n  Spin,\n  Progress,\n  message\n} from 'antd';\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport { workflowAPI } from '../services/workflowAPI';\n\nconst { Panel } = Collapse;\nconst { Text } = Typography;\n\nconst MaterialContextPanel = ({ workflowData }) => {\n  const [loading, setLoading] = useState(false);\n  const [jvcDocuments, setJvcDocuments] = useState([]);\n  const [expanded, setExpanded] = useState(['basic', 'workflow', 'jvc-data']);\n\n  const loadJvcDocuments = useCallback(async () => {\n    try {\n      setLoading(true);\n      \n      // Get reusable documents for the same project/material combination\n      if (workflowData?.projectCode && workflowData?.materialCode) {\n        const documents = await workflowAPI.getReusableDocuments(\n          workflowData.projectCode, \n          workflowData.materialCode\n        );\n        setJvcDocuments(documents || []);\n      } else {\n        // Fallback to workflow documents if project/material codes are not available\n        const documents = await workflowAPI.getWorkflowDocuments(workflowData.id);\n        setJvcDocuments(documents || []);\n      }\n    } catch (error) {\n      console.error('Failed to load JVC documents:', error);\n      setJvcDocuments([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [workflowData?.id, workflowData?.projectCode, workflowData?.materialCode]);\n\n  useEffect(() => {\n    if (workflowData?.id) {\n      loadJvcDocuments();\n    }\n  }, [workflowData?.id, workflowData?.projectCode, workflowData?.materialCode, loadJvcDocuments]);\n\n  const getStateColor = state => {\n    const colors = {\n      JVC_PENDING: 'blue',\n      PLANT_PENDING: 'orange',\n      CQS_PENDING: 'purple',\n      TECH_PENDING: 'cyan',\n      COMPLETED: 'green'\n    };\n    return colors[state] || 'default';\n  };\n\n  const getStateName = state => {\n    const names = {\n      JVC_PENDING: 'JVC Pending',\n      PLANT_PENDING: 'Plant Pending',\n      CQS_PENDING: 'CQS Pending',\n      TECH_PENDING: 'Tech Pending',\n      COMPLETED: 'Completed'\n    };\n    return names[state] || state;\n  };\n\n  const formatDate = dateString => {\n    if (!dateString) {\n      return 'N/A';\n    }\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const calculateDaysInState = lastModified => {\n    if (!lastModified) {\n      return 0;\n    }\n    const now = new Date();\n    const modified = new Date(lastModified);\n    const diffTime = Math.abs(now - modified);\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  };\n\n  const handleDocumentDownload = async (documentId, filename) => {\n    try {\n      console.log('Downloading document:', { documentId, filename });\n      const blob = await workflowAPI.downloadDocument(documentId);\n      console.log('Download blob received:', blob);\n      \n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = filename || `document_${documentId}`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n      \n      message.success(`Downloaded ${filename || 'document'}`);\n    } catch (error) {\n      console.error('Failed to download document:', error);\n      message.error(`Failed to download document: ${error.message || 'Unknown error'}`);\n    }\n  };\n\n\n\n  if (!workflowData) {\n    return (\n      <Card title=\"Material Context\" style={{ height: 'fit-content' }}>\n        <Alert\n          message=\"No Material Data\"\n          description=\"Material context will appear here once a workflow is selected.\"\n          type=\"info\"\n          showIcon\n        />\n      </Card>\n    );\n  }\n\n  const daysInCurrentState = calculateDaysInState(workflowData.lastModified);\n  const isOverdue = daysInCurrentState > 3;\n\n  return (\n    <Card\n      title={\n        <Space>\n          <InfoCircleOutlined />\n          Material Context\n          {isOverdue && <Badge status=\"error\" text={`${daysInCurrentState} days`} />}\n        </Space>\n      }\n      style={{ height: 'fit-content', position: 'sticky', top: 24 }}\n      size=\"small\"\n    >\n      <Collapse activeKey={expanded} onChange={setExpanded} ghost size=\"small\">\n        {/* Basic Material Information */}\n        <Panel\n          header={\n            <Space>\n              <FileTextOutlined />\n              <strong>Basic Information</strong>\n            </Space>\n          }\n          key=\"basic\"\n        >\n          <Descriptions column={1} size=\"small\">\n            <Descriptions.Item label=\"Material Code\">\n              <Text strong>{workflowData.materialCode}</Text>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Material Name\">\n              {workflowData.materialName || 'Not specified'}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Assigned Plant\">\n              <Tag color=\"blue\">{workflowData.assignedPlant}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Initiated By\">\n              <Space>\n                <TeamOutlined />\n                {workflowData.initiatedBy}\n              </Space>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Created\">\n              <Space>\n                <CalendarOutlined />\n                {formatDate(workflowData.createdAt)}\n              </Space>\n            </Descriptions.Item>\n          </Descriptions>\n        </Panel>\n\n        {/* Workflow Status */}\n        <Panel\n          header={\n            <Space>\n              <TeamOutlined />\n              <strong>Workflow Status</strong>\n              {isOverdue && <WarningOutlined style={{ color: '#ff4d4f' }} />}\n            </Space>\n          }\n          key=\"workflow\"\n        >\n          <Space direction=\"vertical\" style={{ width: '100%' }}>\n            <div>\n              <Text strong>Current State:</Text>\n              <div style={{ marginTop: 4 }}>\n                <Tag color={getStateColor(workflowData.state)}>\n                  {getStateName(workflowData.state)}\n                </Tag>\n              </div>\n            </div>\n\n            <div>\n              <Text strong>Time in Current State:</Text>\n              <div style={{ marginTop: 4 }}>\n                <Text style={{ color: isOverdue ? '#ff4d4f' : 'inherit' }}>\n                  {daysInCurrentState} day{daysInCurrentState !== 1 ? 's' : ''}\n                  {isOverdue && ' (Overdue)'}\n                </Text>\n              </div>\n            </div>\n\n            <div>\n              <Text strong>Last Modified:</Text>\n              <div style={{ marginTop: 4 }}>\n                <Text type=\"secondary\">{formatDate(workflowData.lastModified)}</Text>\n              </div>\n            </div>\n\n            {workflowData.totalQueries > 0 && (\n              <div>\n                <Text strong>Queries:</Text>\n                <div style={{ marginTop: 4 }}>\n                  <Space>\n                    <Tag color=\"red\">{workflowData.openQueries || 0} Open</Tag>\n                    <Tag color=\"green\">\n                      {(workflowData.totalQueries || 0) - (workflowData.openQueries || 0)} Resolved\n                    </Tag>\n                  </Space>\n                </div>\n              </div>\n            )}\n\n            {/* Progress indicator */}\n            {workflowData.completionPercentage !== undefined && (\n              <div>\n                <Text strong>Completion Progress:</Text>\n                <div style={{ marginTop: 4 }}>\n                  <Progress\n                    percent={workflowData.completionPercentage}\n                    size=\"small\"\n                    status={workflowData.completionPercentage === 100 ? 'success' : 'active'}\n                  />\n                </div>\n              </div>\n            )}\n          </Space>\n        </Panel>\n\n        {/* JVC Provided Documents */}\n        <Panel\n          header={\n            <Space>\n              <FileTextOutlined />\n              <strong>JVC Documents</strong>\n              <Badge count={jvcDocuments.length} size=\"small\" />\n            </Space>\n          }\n          key=\"documents\"\n        >\n          {loading ? (\n            <div style={{ textAlign: 'center', padding: '20px' }}>\n              <Spin size=\"small\" />\n            </div>\n          ) : jvcDocuments.length > 0 ? (\n            <Space direction=\"vertical\" style={{ width: '100%' }}>\n              {jvcDocuments.map((doc, index) => (\n                <Card\n                  key={doc.id || index}\n                  size=\"small\"\n                  style={{ marginBottom: 8 }}\n                  styles={{ body: { padding: '8px 12px' } }}\n                >\n                  <div style={{ marginBottom: 4 }}>\n                    <Text strong style={{ fontSize: '12px' }}>\n                      {doc.originalFileName || doc.fileName || `Document ${index + 1}`}\n                    </Text>\n                  </div>\n                  <div style={{ marginBottom: 8 }}>\n                    <Text type=\"secondary\" style={{ fontSize: '11px' }}>\n                      {doc.sourceDescription || \n                       `${doc.documentSource || 'Document'} • ${doc.fileType?.toUpperCase() || 'File'} • ${\n                         doc.fileSize ? `${(doc.fileSize / 1024 / 1024).toFixed(1)} MB` : 'Unknown size'\n                       } • Uploaded by ${doc.uploadedBy || 'Unknown'}`}\n                    </Text>\n                  </div>\n                  <div style={{ textAlign: 'right' }}>\n                    <Tooltip title=\"Download document\">\n                      <Button\n                        type=\"primary\"\n                        size=\"small\"\n                        icon={<DownloadOutlined />}\n                        onClick={() => handleDocumentDownload(doc.id, doc.originalFileName || doc.fileName)}\n                      >\n                        Download\n                      </Button>\n                    </Tooltip>\n                  </div>\n                </Card>\n              ))}\n            </Space>\n          ) : (\n            <Alert\n              message=\"No Documents\"\n              description=\"No documents have been provided by the JVC team for this material.\"\n              type=\"info\"\n              showIcon\n              size=\"small\"\n            />\n          )}\n        </Panel>\n\n        {/* Enhanced JVC Material Data */}\n        <Panel\n          header={\n            <Space>\n              <InfoCircleOutlined />\n              <strong>JVC Material Data</strong>\n              <Tooltip title=\"Information provided by JVC team for questionnaire completion\">\n                <InfoCircleOutlined style={{ fontSize: '12px', color: '#1890ff' }} />\n              </Tooltip>\n            </Space>\n          }\n          key=\"jvc-data\"\n        >\n          <Descriptions column={1} size=\"small\">\n            <Descriptions.Item label=\"Material Category\">\n              <Tag color=\"blue\">{workflowData.materialCategory || 'Not specified'}</Tag>\n            </Descriptions.Item>\n\n            <Descriptions.Item label=\"Supplier Information\">\n              <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Supplier Name:\n                  </Text>\n                  <div style={{ fontSize: '12px' }}>\n                    {workflowData.supplierName || 'Not specified'}\n                  </div>\n                </div>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Supplier Code:\n                  </Text>\n                  <div style={{ fontSize: '12px' }}>\n                    {workflowData.supplierCode || 'Not specified'}\n                  </div>\n                </div>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Contact Info:\n                  </Text>\n                  <div style={{ fontSize: '12px' }}>\n                    {workflowData.supplierContact || 'Not provided'}\n                  </div>\n                </div>\n              </Space>\n            </Descriptions.Item>\n\n            <Descriptions.Item label=\"Purchase Information\">\n              <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Purchase Order:\n                  </Text>\n                  <div style={{ fontSize: '12px' }}>\n                    {workflowData.purchaseOrder || 'Not specified'}\n                  </div>\n                </div>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Quantity Ordered:\n                  </Text>\n                  <div style={{ fontSize: '12px' }}>\n                    {workflowData.quantityOrdered || 'Not specified'}\n                  </div>\n                </div>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Expected Delivery:\n                  </Text>\n                  <div style={{ fontSize: '12px' }}>\n                    {workflowData.expectedDelivery\n                      ? formatDate(workflowData.expectedDelivery)\n                      : 'Not specified'}\n                  </div>\n                </div>\n              </Space>\n            </Descriptions.Item>\n\n            <Descriptions.Item label=\"Usage & Application\">\n              <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Expected Usage:\n                  </Text>\n                  <div style={{ fontSize: '12px' }}>\n                    {workflowData.expectedUsage || 'Not specified'}\n                  </div>\n                </div>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Application Area:\n                  </Text>\n                  <div style={{ fontSize: '12px' }}>\n                    {workflowData.applicationArea || 'Not specified'}\n                  </div>\n                </div>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Process Requirements:\n                  </Text>\n                  <div style={{ fontSize: '12px' }}>\n                    {workflowData.processRequirements || 'Standard processing'}\n                  </div>\n                </div>\n              </Space>\n            </Descriptions.Item>\n\n            <Descriptions.Item label=\"Regulatory Requirements\">\n              <div\n                style={{\n                  padding: '6px 8px',\n                  backgroundColor: '#fff7e6',\n                  border: '1px solid #ffd591',\n                  borderRadius: '4px',\n                  fontSize: '12px'\n                }}\n              >\n                {workflowData.regulatoryRequirements || 'Standard compliance required'}\n              </div>\n            </Descriptions.Item>\n\n            <Descriptions.Item label=\"Special Instructions\">\n              {workflowData.specialInstructions ? (\n                <div\n                  style={{\n                    padding: '6px 8px',\n                    backgroundColor: '#f6ffed',\n                    border: '1px solid #b7eb8f',\n                    borderRadius: '4px',\n                    fontSize: '12px'\n                  }}\n                >\n                  {workflowData.specialInstructions}\n                </div>\n              ) : (\n                <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                  None\n                </Text>\n              )}\n            </Descriptions.Item>\n\n            <Descriptions.Item label=\"Priority & Impact\">\n              <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Urgency Level:\n                  </Text>\n                  <div style={{ marginTop: 2 }}>\n                    <Tag\n                      color={\n                        workflowData.urgencyLevel === 'HIGH'\n                          ? 'red'\n                          : workflowData.urgencyLevel === 'MEDIUM'\n                            ? 'orange'\n                            : 'green'\n                      }\n                    >\n                      {workflowData.urgencyLevel || 'NORMAL'}\n                    </Tag>\n                  </div>\n                </div>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Business Impact:\n                  </Text>\n                  <div style={{ fontSize: '12px', marginTop: 2 }}>\n                    {workflowData.businessImpact || 'Standard processing'}\n                  </div>\n                </div>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Cost Center:\n                  </Text>\n                  <div style={{ fontSize: '12px', marginTop: 2 }}>\n                    {workflowData.costCenter || 'Not specified'}\n                  </div>\n                </div>\n              </Space>\n            </Descriptions.Item>\n          </Descriptions>\n\n          {workflowData.jvcNotes && (\n            <div style={{ marginTop: 12 }}>\n              <Text strong style={{ fontSize: '12px' }}>\n                JVC Notes:\n              </Text>\n              <div\n                style={{\n                  marginTop: 4,\n                  padding: '8px',\n                  backgroundColor: '#f6ffed',\n                  border: '1px solid #b7eb8f',\n                  borderRadius: '4px',\n                  fontSize: '12px',\n                  whiteSpace: 'pre-wrap'\n                }}\n              >\n                {workflowData.jvcNotes}\n              </div>\n            </div>\n          )}\n\n          {/* Known Material Properties */}\n          {workflowData.knownProperties && Object.keys(workflowData.knownProperties).length > 0 && (\n            <div style={{ marginTop: 12 }}>\n              <Text strong style={{ fontSize: '12px' }}>\n                Known Properties:\n              </Text>\n              <div\n                style={{\n                  marginTop: 4,\n                  padding: '8px',\n                  backgroundColor: '#f0f5ff',\n                  border: '1px solid #adc6ff',\n                  borderRadius: '4px',\n                  fontSize: '11px'\n                }}\n              >\n                {Object.entries(workflowData.knownProperties).map(([key, value]) => (\n                  <div key={key} style={{ marginBottom: 2 }}>\n                    <strong>\n                      {key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}:\n                    </strong>{' '}\n                    {value}\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Additional Context for Plant Team */}\n          <Divider style={{ margin: '12px 0 8px 0' }} />\n          <div style={{ fontSize: '11px', color: '#666' }}>\n            <Text strong>For Plant Team Reference:</Text>\n            <ul style={{ margin: '4px 0 0 16px', padding: 0 }}>\n              <li>Review all JVC-provided information before starting questionnaire</li>\n              <li>Use this context when raising queries to other teams</li>\n              <li>Reference material ID and supplier details in communications</li>\n              <li>Contact JVC team for clarification on any provided data</li>\n              <li>Consider regulatory requirements when completing safety sections</li>\n            </ul>\n          </div>\n        </Panel>\n\n        {/* Material Specifications */}\n        {workflowData.specifications && (\n          <Panel\n            header={\n              <Space>\n                <InfoCircleOutlined />\n                <strong>Technical Specifications</strong>\n              </Space>\n            }\n            key=\"specifications\"\n          >\n            <Descriptions column={1} size=\"small\">\n              {Object.entries(workflowData.specifications).map(([key, value]) => (\n                <Descriptions.Item\n                  key={key}\n                  label={key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}\n                >\n                  {typeof value === 'object' ? JSON.stringify(value) : String(value)}\n                </Descriptions.Item>\n              ))}\n            </Descriptions>\n          </Panel>\n        )}\n\n        {/* Safety Notes */}\n        {workflowData.safetyNotes && (\n          <Panel\n            header={\n              <Space>\n                <WarningOutlined />\n                <strong>Safety Notes</strong>\n              </Space>\n            }\n            key=\"safety\"\n          >\n            <Alert\n              message=\"Important Safety Information\"\n              description={workflowData.safetyNotes}\n              type=\"warning\"\n              showIcon\n              size=\"small\"\n            />\n          </Panel>\n        )}\n      </Collapse>\n\n      <Divider style={{ margin: '12px 0' }} />\n{/* \n      Quick Actions\n      <Space direction=\"vertical\" style={{ width: '100%' }}>\n        <Text strong style={{ fontSize: '12px' }}>\n          Quick Actions:\n        </Text>\n        <Space wrap>\n          <Button size=\"small\" type=\"link\" style={{ padding: '0 4px', height: 'auto' }}>\n            View Full History\n          </Button>\n          <Button size=\"small\" type=\"link\" style={{ padding: '0 4px', height: 'auto' }}>\n            Contact JVC\n          </Button>\n          <Button size=\"small\" type=\"link\" style={{ padding: '0 4px', height: 'auto' }}>\n            Export Data\n          </Button>\n        </Space>\n      </Space> */}\n    </Card>\n  );\n};\n\nexport default MaterialContextPanel;\n","import {\n  QuestionCircleOutlined,\n  InfoCircleOutlined,\n  ExclamationCircleOutlined,\n  PaperClipOutlined\n} from '@ant-design/icons';\nimport {\n  Modal,\n  Form,\n  Input,\n  Select,\n  Radio,\n  Button,\n  Space,\n  Alert,\n  Divider,\n  Tag,\n  message,\n  Collapse\n} from 'antd';\nimport React, { useState } from 'react';\n\nimport { queryAPI } from '../services/queryAPI';\n\nimport QueryDocumentUpload from './QueryDocumentUpload';\nimport SecureForm, { SecureInput, SecureTextArea, SecureFormItem } from './SecureForm';\n\nconst { TextArea } = Input;\nconst { Option } = Select;\n\nconst QueryRaisingModal = ({ open, visible, onCancel, onSubmit, workflowId, fieldContext }) => {\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n  const [uploadedDocuments, setUploadedDocuments] = useState([]);\n  const [createdQueryId, setCreatedQueryId] = useState(null);\n\n  console.log('QueryRaisingModal props:', { open, visible, workflowId, fieldContext });\n\n  const handleSubmit = async values => {\n    try {\n      setLoading(true);\n\n      const queryData = {\n        question: values.question,\n        assignedTeam: values.assignedTeam, // This should be 'CQS', 'TECH', or 'JVC'\n        priorityLevel: values.priority || 'MEDIUM',\n        fieldName: fieldContext?.name,\n        stepNumber: fieldContext?.stepNumber,\n        stepTitle: fieldContext?.stepTitle,\n        // originalQuestion will be fetched automatically from the template based on fieldName\n        queryCategory: values.category || 'GENERAL'\n      };\n\n      const createdQuery = await queryAPI.createQuery(workflowId, queryData);\n      setCreatedQueryId(createdQuery.id);\n\n      message.success('Query created successfully! You can now attach documents if needed.');\n      \n      // Don't close the modal immediately - allow user to upload documents\n      // The modal will close when they click \"Done\" or \"Cancel\"\n      \n    } catch (error) {\n      console.error('Failed to create query:', error);\n      message.error('Failed to raise query. Please try again.');\n      setLoading(false);\n    }\n  };\n\n  // const getCurrentUser = () => { // Not currently used\n  //   return localStorage.getItem('username') || 'current_user';\n  // };\n\n  const handleCancel = () => {\n    form.resetFields();\n    setUploadedDocuments([]);\n    setCreatedQueryId(null);\n    onCancel();\n  };\n\n  // Handle document upload completion\n  const handleDocumentUpload = (documents) => {\n    setUploadedDocuments(prev => [...prev, ...documents]);\n    message.success(`${documents.length} document(s) uploaded successfully`);\n  };\n\n  // const getTeamDescription = team => { // Not currently used\n  //   const descriptions = {\n  //     CQS: 'Chemical Quality & Safety team - for safety data, hazard classifications, and regulatory compliance questions',\n  //     TECH: 'Technical team - for technical specifications, physical properties, and process-related questions',\n  //     JVC: 'JVC team - for material identification, supplier information, and general material questions'\n  //   };\n  //   return descriptions[team] || '';\n  // };\n\n  const getPriorityColor = priority => {\n    const colors = {\n      LOW: 'green',\n      MEDIUM: 'blue',\n      HIGH: 'orange',\n      URGENT: 'red'\n    };\n    return colors[priority] || 'default';\n  };\n\n  const getRecommendedTeam = fieldContext => {\n    if (!fieldContext || !fieldContext.name) {\n      return null;\n    }\n\n    const fieldName = fieldContext.name.toLowerCase();\n    const stepTitle = fieldContext.stepTitle?.toLowerCase() || '';\n    const fieldLabel = fieldContext.label?.toLowerCase() || '';\n\n    // Enhanced smart team recommendation with confidence scoring\n    // const recommendations = []; // Not currently used\n\n    // CQS Team scoring\n    let cqsScore = 0;\n    const cqsKeywords = [\n      'hazard',\n      'safety',\n      'precautionary',\n      'environmental',\n      'toxic',\n      'corrosive',\n      'flammable',\n      'classification',\n      'ghs',\n      'signal',\n      'statement'\n    ];\n    cqsKeywords.forEach(keyword => {\n      if (\n        fieldName.includes(keyword) ||\n        stepTitle.includes(keyword) ||\n        fieldLabel.includes(keyword)\n      ) {\n        cqsScore += 1;\n      }\n    });\n\n    // Technical Team scoring\n    let techScore = 0;\n    const techKeywords = [\n      'physical',\n      'boiling',\n      'melting',\n      'technical',\n      'properties',\n      'temperature',\n      'state',\n      'color',\n      'odor',\n      'specification'\n    ];\n    techKeywords.forEach(keyword => {\n      if (\n        fieldName.includes(keyword) ||\n        stepTitle.includes(keyword) ||\n        fieldLabel.includes(keyword)\n      ) {\n        techScore += 1;\n      }\n    });\n\n    // JVC Team scoring\n    let jvcScore = 0;\n    const jvcKeywords = [\n      'material',\n      'supplier',\n      'cas',\n      'basic',\n      'information',\n      'name',\n      'identification',\n      'type'\n    ];\n    jvcKeywords.forEach(keyword => {\n      if (\n        fieldName.includes(keyword) ||\n        stepTitle.includes(keyword) ||\n        fieldLabel.includes(keyword)\n      ) {\n        jvcScore += 1;\n      }\n    });\n\n    // Determine primary recommendation\n    const maxScore = Math.max(cqsScore, techScore, jvcScore);\n    let primaryTeam = 'CQS'; // Default to CQS for safety\n    let confidence = 'Medium';\n\n    if (maxScore === 0) {\n      confidence = 'Low';\n    } else if (maxScore >= 3) {\n      confidence = 'High';\n    }\n\n    if (cqsScore === maxScore) {\n      primaryTeam = 'CQS';\n    } else if (techScore === maxScore) {\n      primaryTeam = 'TECH';\n    } else if (jvcScore === maxScore) {\n      primaryTeam = 'JVC';\n    }\n\n    const teamDescriptions = {\n      CQS: 'Chemical Quality & Safety team - handles safety data, hazard classifications, and regulatory compliance',\n      TECH: 'Technical team - handles technical specifications, physical properties, and process-related questions',\n      JVC: 'JVC team - handles material identification, supplier information, and general material questions'\n    };\n\n    return (\n      <div>\n        <div style={{ marginBottom: 8 }}>\n          <strong\n            style={{\n              color:\n                confidence === 'High' ? '#52c41a' : confidence === 'Medium' ? '#1890ff' : '#faad14'\n            }}\n          >\n            {primaryTeam} Team\n          </strong>{' '}\n          is recommended ({confidence} confidence)\n        </div>\n        <div style={{ fontSize: '12px', color: '#666', marginBottom: 8 }}>\n          {teamDescriptions[primaryTeam]}\n        </div>\n        <div style={{ fontSize: '11px', color: '#999' }}>\n          Based on field: \"<em>{fieldContext.label}</em>\" in step: \"\n          <em>{fieldContext.stepTitle}</em>\"\n        </div>\n        {confidence === 'Low' && (\n          <div style={{ fontSize: '11px', color: '#fa8c16', marginTop: 4 }}>\n            💡 Consider the nature of your question when selecting the team\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <Modal\n      title={\n        <Space>\n          <QuestionCircleOutlined />\n          Raise Query\n        </Space>\n      }\n      open={open || visible}\n      onCancel={handleCancel}\n      footer={\n        createdQueryId ? [\n          <Button key=\"done\" type=\"primary\" onClick={() => {\n            const documentMessage = uploadedDocuments.length > 0 \n              ? ` with ${uploadedDocuments.length} document(s) attached`\n              : '';\n            message.success(`Query completed${documentMessage}`);\n            \n            form.resetFields();\n            setUploadedDocuments([]);\n            const queryToReturn = { id: createdQueryId, documents: uploadedDocuments };\n            setCreatedQueryId(null);\n            setLoading(false);\n            \n            if (onSubmit) {\n              onSubmit(queryToReturn);\n            }\n          }}>\n            Done\n          </Button>\n        ] : [\n          <Button key=\"cancel\" onClick={handleCancel}>\n            Cancel\n          </Button>,\n          <Button key=\"submit\" type=\"primary\" loading={loading} onClick={() => form.submit()}>\n            Create Query\n          </Button>\n        ]\n      }\n      width={600}\n      destroyOnClose\n    >\n      {/* Field Context Information */}\n      {fieldContext && (\n        <Alert\n          message=\"Field Context\"\n          description={\n            <div>\n              <p>\n                <strong>Step:</strong> {fieldContext.stepTitle}\n              </p>\n              <p>\n                <strong>Field:</strong> {fieldContext.label}\n              </p>\n              {fieldContext.placeholder && (\n                <p>\n                  <strong>Expected:</strong> {fieldContext.placeholder}\n                </p>\n              )}\n            </div>\n          }\n          type=\"info\"\n          icon={<InfoCircleOutlined />}\n          style={{ marginBottom: 16 }}\n        />\n      )}\n\n      <SecureForm\n        form={form}\n        layout=\"vertical\"\n        onFinish={handleSubmit}\n        initialValues={{\n          priority: 'MEDIUM',\n          fieldContext: fieldContext?.label\n        }}\n        componentName=\"QueryRaisingModal\"\n        enableSecurityLogging={true}\n        disabled={createdQueryId !== null}\n      >\n        {/* Smart Team Recommendation */}\n        {fieldContext && (\n          <Alert\n            message=\"Recommended Team\"\n            description={getRecommendedTeam(fieldContext)}\n            type=\"info\"\n            style={{ marginBottom: 16 }}\n            showIcon\n          />\n        )}\n\n        {/* Team Selection with Enhanced Context */}\n        <Form.Item\n          name=\"assignedTeam\"\n          label=\"Assign to Team\"\n          rules={[{ required: true, message: 'Please select a team to assign this query to' }]}\n          help=\"Choose the most appropriate team based on your question type. Consider the field context and question nature.\"\n        >\n          <Select\n            placeholder=\"Select team to handle this query\"\n            size=\"large\"\n            showSearch\n            optionFilterProp=\"children\"\n            filterOption={(input, option) =>\n              option.children.props.children[0].props.children\n                .toLowerCase()\n                .indexOf(input.toLowerCase()) >= 0\n            }\n          >\n            <Option value=\"CQS\">\n              <div>\n                <div style={{ fontWeight: 'bold', color: '#722ed1' }}>CQS Team</div>\n                <div style={{ fontSize: '12px', color: '#666', marginBottom: '4px' }}>\n                  Safety data, hazard classifications, regulatory compliance\n                </div>\n                <div style={{ fontSize: '11px', color: '#999' }}>\n                  Best for: Safety measures, hazard statements, environmental impact\n                </div>\n              </div>\n            </Option>\n            <Option value=\"TECH\">\n              <div>\n                <div style={{ fontWeight: 'bold', color: '#13c2c2' }}>Technical Team</div>\n                <div style={{ fontSize: '12px', color: '#666', marginBottom: '4px' }}>\n                  Technical specs, physical properties, processes\n                </div>\n                <div style={{ fontSize: '11px', color: '#999' }}>\n                  Best for: Physical properties, technical specifications, processes\n                </div>\n              </div>\n            </Option>\n            <Option value=\"JVC\">\n              <div>\n                <div style={{ fontWeight: 'bold', color: '#1890ff' }}>JVC Team</div>\n                <div style={{ fontSize: '12px', color: '#666', marginBottom: '4px' }}>\n                  Material identification, supplier info, general questions\n                </div>\n                <div style={{ fontSize: '11px', color: '#999' }}>\n                  Best for: Material details, supplier information, general clarifications\n                </div>\n              </div>\n            </Option>\n          </Select>\n        </Form.Item>\n\n        {/* Field Context (editable) */}\n        <SecureFormItem\n          name=\"fieldContext\"\n          label=\"Field Context\"\n          help=\"Specify which field or section this query relates to\"\n          validationType=\"text\"\n        >\n          <SecureInput\n            placeholder=\"e.g., Material Name, Safety Classification, Storage Conditions\"\n            prefix={<InfoCircleOutlined />}\n            validationType=\"text\"\n            componentName=\"QueryRaisingModal\"\n            fieldName=\"fieldContext\"\n          />\n        </SecureFormItem>\n\n        {/* Query Category */}\n        <Form.Item\n          name=\"category\"\n          label=\"Query Category\"\n          help=\"Categorize your query for better tracking and resolution\"\n        >\n          <Select\n            placeholder=\"Select query category\"\n            size=\"large\"\n            allowClear\n          >\n            <Option value=\"GENERAL\">General Question</Option>\n            <Option value=\"TECHNICAL\">Technical Specification</Option>\n            <Option value=\"SAFETY\">Safety & Compliance</Option>\n            <Option value=\"REGULATORY\">Regulatory Information</Option>\n            <Option value=\"ENVIRONMENTAL\">Environmental Impact</Option>\n            <Option value=\"TRANSPORTATION\">Transportation & Storage</Option>\n            <Option value=\"SUPPLIER\">Supplier Information</Option>\n            <Option value=\"CLARIFICATION\">Clarification Request</Option>\n          </Select>\n        </Form.Item>\n\n        {/* Priority Selection */}\n        <Form.Item\n          name=\"priority\"\n          label=\"Priority Level\"\n          help=\"Select the urgency level for this query\"\n        >\n          <Radio.Group>\n            <Space direction=\"vertical\">\n              <Radio value=\"LOW\">\n                <Tag color={getPriorityColor('LOW')}>LOW</Tag>\n                <span style={{ marginLeft: 8 }}>General information, non-blocking</span>\n              </Radio>\n              <Radio value=\"MEDIUM\">\n                <Tag color={getPriorityColor('MEDIUM')}>MEDIUM</Tag>\n                <span style={{ marginLeft: 8 }}>Standard clarification needed</span>\n              </Radio>\n              <Radio value=\"HIGH\">\n                <Tag color={getPriorityColor('HIGH')}>HIGH</Tag>\n                <span style={{ marginLeft: 8 }}>Important for completion</span>\n              </Radio>\n              <Radio value=\"URGENT\">\n                <Tag color={getPriorityColor('URGENT')}>URGENT</Tag>\n                <span style={{ marginLeft: 8 }}>Blocking progress, needs immediate attention</span>\n              </Radio>\n            </Space>\n          </Radio.Group>\n        </Form.Item>\n\n        <Divider />\n\n        {/* Question Text */}\n        <SecureFormItem\n          name=\"question\"\n          label=\"Your Question\"\n          validationType=\"richtext\"\n          help=\"Be specific and provide context to help the assigned team understand your question\"\n        >\n          <SecureTextArea\n            rows={6}\n            placeholder=\"Describe your question in detail. Include:\n• What specific information you need\n• Why you need this information\n• Any relevant context or background\n• What you've already tried or researched\"\n            showCount\n            maxLength={1000}\n            validationType=\"richtext\"\n            componentName=\"QueryRaisingModal\"\n            fieldName=\"question\"\n          />\n        </SecureFormItem>\n\n        {/* Document Upload Section */}\n        {createdQueryId ? (\n          <div style={{ marginTop: 16 }}>\n            <Alert\n              message=\"Query Created Successfully!\"\n              description=\"Your query has been created. You can now attach supporting documents if needed, or click 'Done' to finish.\"\n              type=\"success\"\n              showIcon\n              style={{ marginBottom: 16 }}\n            />\n            <QueryDocumentUpload\n              queryId={createdQueryId}\n              context=\"query\"\n              onUploadComplete={handleDocumentUpload}\n              maxFiles={5}\n              disabled={false}\n            />\n          </div>\n        ) : (\n          <Collapse\n            size=\"small\"\n            ghost\n            items={[\n              {\n                key: 'documents',\n                label: (\n                  <Space>\n                    <PaperClipOutlined />\n                    <span>Supporting Documents</span>\n                    <Tag color=\"blue\">Available after query creation</Tag>\n                  </Space>\n                ),\n                children: (\n                  <Alert\n                    message=\"Document Attachment\"\n                    description=\"After creating your query, you'll be able to attach supporting documents to provide additional context. Documents help the assigned team better understand your question.\"\n                    type=\"info\"\n                    showIcon\n                  />\n                )\n              }\n            ]}\n          />\n        )}\n\n        <Divider />\n\n        {/* Guidelines */}\n        <Alert\n          message=\"Query Guidelines\"\n          description={\n            <ul style={{ margin: 0, paddingLeft: 20 }}>\n              <li>Be specific and clear in your question</li>\n              <li>Include relevant context and background information</li>\n              <li>Mention any documentation or resources you've already checked</li>\n              <li>For urgent queries, explain why immediate attention is needed</li>\n              <li>Use appropriate technical terminology when relevant</li>\n            </ul>\n          }\n          type=\"info\"\n          showIcon\n          icon={<ExclamationCircleOutlined />}\n        />\n      </SecureForm>\n    </Modal>\n  );\n};\n\nexport default QueryRaisingModal;\n","import {\n  SaveOutlined,\n  QuestionCircleOutlined,\n  CheckCircleOutlined,\n\n  ExclamationCircleOutlined,\n  ArrowLeftOutlined,\n  ArrowRightOutlined,\n  CloudSyncOutlined,\n  WifiOutlined,\n  DisconnectOutlined,\n  MenuOutlined,\n  DashboardOutlined,\n  FileTextOutlined,\n  SafetyOutlined,\n  ExperimentOutlined,\n  FireOutlined,\n  MedicineBoxOutlined,\n  BookOutlined,\n  SettingOutlined,\n  BulbOutlined,\n  RocketOutlined\n} from '@ant-design/icons';\nimport {\n  Card,\n  Form,\n  Input,\n  Select,\n  Radio,\n  Checkbox,\n  Button,\n  Row,\n  Col,\n  Progress,\n  message,\n  Spin,\n  Alert,\n  Space,\n  Tooltip,\n  Badge,\n  notification,\n  Typography,\n  Tag,\n  Modal,\n  FloatButton,\n  Drawer,\n  Timeline,\n  Avatar\n} from 'antd';\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport { UI_CONFIG, AUTO_SAVE } from '../constants';\nimport { queryAPI } from '../services/queryAPI';\nimport { workflowAPI } from '../services/workflowAPI';\n\nimport { CqsFieldDisplay, CqsDataSummary } from './CqsFieldDisplay';\nimport MaterialContextPanel from './MaterialContextPanel';\nimport QueryRaisingModal from './QueryRaisingModal';\nimport './PlantQuestionnaire.css';\nimport './CqsFieldDisplay.css';\n\n// const { Step } = Steps; // Not currently used\nconst { TextArea } = Input;\nconst { Option } = Select;\nconst { Text, Title, Paragraph } = Typography;\n\n// Hook to detect screen size\nconst useResponsive = () => {\n  const [screenSize, setScreenSize] = useState({\n    isMobile: window.innerWidth <= UI_CONFIG.MOBILE_BREAKPOINT,\n    isTablet:\n      window.innerWidth > UI_CONFIG.MOBILE_BREAKPOINT &&\n      window.innerWidth <= UI_CONFIG.TABLET_BREAKPOINT,\n    isDesktop: window.innerWidth > UI_CONFIG.TABLET_BREAKPOINT\n  });\n\n  useEffect(() => {\n    const handleResize = () => {\n      setScreenSize({\n        isMobile: window.innerWidth <= UI_CONFIG.MOBILE_BREAKPOINT,\n        isTablet:\n          window.innerWidth > UI_CONFIG.MOBILE_BREAKPOINT &&\n          window.innerWidth <= UI_CONFIG.TABLET_BREAKPOINT,\n        isDesktop: window.innerWidth > UI_CONFIG.TABLET_BREAKPOINT\n      });\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return screenSize;\n};\n\nconst PlantQuestionnaire = ({ workflowId, onComplete, onSaveDraft }) => {\n  const [form] = Form.useForm();\n  const [currentStep, setCurrentStep] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [submitting, setSubmitting] = useState(false);\n  const [workflowData, setWorkflowData] = useState(null);\n  const [formData, setFormData] = useState({});\n  const [completedSteps, setCompletedSteps] = useState(new Set());\n  const [queryModalVisible, setQueryModalVisible] = useState(false);\n  const [selectedField, setSelectedField] = useState(null);\n  const [queries, setQueries] = useState([]);\n  const [autoSaveEnabled, setAutoSaveEnabled] = useState(true);\n  const [isOffline, setIsOffline] = useState(!navigator.onLine);\n  const [pendingChanges, setPendingChanges] = useState(false);\n  const [sidebarVisible, setSidebarVisible] = useState(false);\n  const [isReadOnly, setIsReadOnly] = useState(false);\n  // const [compactMode, setCompactMode] = useState(false); // Not currently used\n  const [_progressUpdateTrigger, _setProgressUpdateTrigger] = useState(0);\n  const { isMobile } = useResponsive();\n\n  // Define questionnaire steps (loaded from backend template)\n  const [questionnaireSteps, setQuestionnaireSteps] = useState([]);\n  const [templateLoading, setTemplateLoading] = useState(true);\n  // eslint-disable-next-line no-unused-vars\n  const [_cqsData, setCqsData] = useState({}); // Used for CQS auto-population (pending implementation)\n  // eslint-disable-next-line no-unused-vars\n  const [_plantSpecificData, setPlantSpecificData] = useState({}); // Used for plant-specific data loading\n  const [cqsFormData, setCqsFormData] = useState({}); // Store CQS form data separately\n\n  // Step icons mapping for modern UI\n  const stepIcons = {\n    General: <FileTextOutlined />,\n    Physical: <ExperimentOutlined />,\n    'Flammability and Explosivity': <FireOutlined />,\n    Toxicity: <SafetyOutlined />,\n    'Storage and Handling': <BookOutlined />,\n    PPE: <SafetyOutlined />,\n    'First Aid': <MedicineBoxOutlined />,\n    Statutory: <BookOutlined />,\n    Others: <SettingOutlined />,\n    Safety: <SafetyOutlined />,\n    Environmental: <BulbOutlined />,\n    Quality: <RocketOutlined />\n  };\n\n  // Load questionnaire template from backend\n  const loadQuestionnaireTemplate = useCallback(async () => {\n    try {\n      setTemplateLoading(true);\n\n      if (!workflowData?.materialCode || !workflowData?.assignedPlant) {\n        console.warn('Missing required data for template loading:', {\n          materialCode: workflowData?.materialCode,\n          assignedPlant: workflowData?.assignedPlant\n        });\n        setQuestionnaireSteps(getDefaultTemplate());\n        return;\n      }\n\n      console.log('Loading questionnaire template for:', {\n        materialCode: workflowData.materialCode,\n        plantCode: workflowData.assignedPlant\n      });\n\n      const template = await workflowAPI.getQuestionnaireTemplate({\n        materialCode: workflowData.materialCode,\n        plantCode: workflowData.assignedPlant,\n        templateType: 'PLANT_QUESTIONNAIRE'\n      });\n\n      console.log('Received template:', template);\n\n      // Validate template structure\n      if (!template || !template.steps || !Array.isArray(template.steps)) {\n        console.error('Invalid template structure:', template);\n        throw new Error('Invalid template structure received from backend');\n      }\n\n      // Load CQS data first\n      let cqsResponse = {};\n      try {\n        cqsResponse = await workflowAPI.getCqsData({\n          materialCode: workflowData?.materialCode,\n          plantCode: workflowData?.assignedPlant\n        });\n\n        console.log('CQS Response:', cqsResponse);\n        setCqsData(cqsResponse || {});\n      } catch (error) {\n        console.error('Failed to load CQS data:', error);\n        // Continue with empty CQS data\n      }\n\n      // Process template to include CQS auto-populated fields with actual values\n      const processedSteps = template.steps.map(step => ({\n        ...step,\n        title: step.title || step.stepTitle || `Step ${step.stepNumber || 'Unknown'}`,\n        description: step.description || '',\n        fields: (step.fields || []).map(field => {\n          const isCqsField = field.cqsAutoPopulated || field.isCqsAutoPopulated || false;\n          let cqsValue = null;\n\n          // Get actual CQS value for this field\n          if (isCqsField && cqsResponse?.cqsData && cqsResponse.cqsData[field.name]) {\n            cqsValue = cqsResponse.cqsData[field.name];\n          }\n\n          return {\n            ...field,\n            isCqsAutoPopulated: isCqsField,\n            cqsValue,\n            // Only disable if CQS value is available, otherwise allow manual input\n            disabled: isCqsField && cqsValue !== null && cqsValue !== undefined,\n            placeholder: isCqsField && cqsValue\n              ? `Auto-populated by CQS: ${cqsValue}`\n              : isCqsField\n                ? 'CQS data not available - manual input required'\n                : field.placeholder\n          };\n        })\n      }));\n\n      console.log('Processed steps:', processedSteps);\n      setQuestionnaireSteps(processedSteps);\n\n      // Update form with CQS data - auto-populate CQS fields\n      const extractedCqsFormData = {};\n      if (cqsResponse?.cqsData) {\n        Object.entries(cqsResponse.cqsData).forEach(([key, value]) => {\n          if (value !== null && value !== undefined && value !== '') {\n            // Find the field to check if it's CQS auto-populated\n            const field = processedSteps.flatMap(step => step.fields || [])\n              .find(f => f.name === key);\n            if (field && (field.cqsAutoPopulated || field.isCqsAutoPopulated)) {\n              extractedCqsFormData[key] = value;\n            }\n          }\n        });\n      }\n\n      // Store CQS form data in state for later use\n      setCqsFormData(extractedCqsFormData);\n\n      if (Object.keys(extractedCqsFormData).length > 0) {\n        console.log('Setting CQS form data:', extractedCqsFormData);\n        setFormData(prev => ({ ...prev, ...extractedCqsFormData }));\n        form.setFieldsValue(extractedCqsFormData);\n\n\n      }\n\n      // Load plant-specific data\n      try {\n        const plantData = await workflowAPI.getOrCreatePlantSpecificData({\n          plantCode: workflowData?.assignedPlant,\n          materialCode: workflowData?.materialCode,\n          workflowId\n        });\n\n        setPlantSpecificData(plantData || {});\n\n        // If plant data exists, merge with CQS data (CQS takes precedence)\n        if (plantData?.plantInputs) {\n          const mergedFormData = { ...plantData.plantInputs, ...extractedCqsFormData };\n          setFormData(prev => ({ ...prev, ...mergedFormData }));\n          form.setFieldsValue(mergedFormData);\n        } else if (Object.keys(extractedCqsFormData).length > 0) {\n          // If no plant data but CQS data exists, ensure CQS data is set\n          form.setFieldsValue(extractedCqsFormData);\n        }\n      } catch (error) {\n        console.error('Failed to load plant-specific data:', error);\n        // If plant data loading fails, ensure CQS data is still set\n        if (Object.keys(extractedCqsFormData).length > 0) {\n          form.setFieldsValue(extractedCqsFormData);\n        }\n      }\n    } catch (error) {\n      console.error('Failed to load questionnaire template:', error);\n      message.error(`Failed to load questionnaire template: ${error.message}`);\n      // Fallback to default template if backend fails\n      console.log('Using fallback template');\n      setQuestionnaireSteps(getDefaultTemplate());\n    } finally {\n      setTemplateLoading(false);\n    }\n  }, [workflowData, workflowId, form]);\n\n\n  // Save plant-specific data with composite key\n  // const savePlantSpecificData = async data => { // Not currently used\n  //   try {\n  //     const plantSpecificPayload = {\n  //       plantCode: workflowData?.assignedPlant,\n  //       materialCode: workflowData?.materialCode,\n\n  //       workflowId: workflowId,\n  //       cqsInputs: cqsData,\n  //       plantInputs: data,\n  //       totalFields: Object.keys(data).length,\n  //       completedFields: Object.values(data).filter(\n  //         value => value !== null && value !== undefined && value !== ''\n  //       ).length\n  //     };\n\n  //     await workflowAPI.savePlantSpecificData(plantSpecificPayload, 'current_user');\n  //   } catch (error) {\n  //     console.error('Failed to save plant-specific data:', error);\n  //     throw error;\n  //   }\n  // };\n\n  // Default template fallback - Updated to match actual 87 questions\n  const getDefaultTemplate = () => [\n    {\n      title: 'General',\n      description: 'General information about MSDS availability and completeness',\n      fields: [\n        {\n          name: 'msds_available',\n          label: 'Is 16 Section MSDS of the raw material available?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'missing_info',\n          label: 'Which information in any one of the 16 sections is not available in full?',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Describe missing information'\n        },\n        {\n          name: 'sourcing_asked',\n          label:\n            'Has the identified missing / more information required from the supplier asked thru Sourcing?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'cas_available',\n          label: 'Is CAS number of the raw material based on the pure substance available?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'mixture_ingredients',\n          label: 'For mixtures, are ingredients of mixture available?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'composition_percentage',\n          label: 'Is % age composition substances in the mixture available?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'total_percentage_1',\n          label:\n            'Is the total %age of all substances in the mixture equal to 100?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'total_percentage',\n          label:\n            'If not what is the % of substances not available?',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Provide details about percentage composition'\n        }\n      ]\n    },\n    {\n      title: 'Physical',\n      description: 'Physical properties and handling requirements',\n      fields: [\n        {\n          name: 'is_corrosive',\n          label: 'Is the material corrosive?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'corrosive_storage',\n          label:\n            'Does the plant have acid and alkali proof storage facilities to store a corrosive raw material?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'highly_toxic',\n          label: 'Is the material highly toxic?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'toxic_powder_handling',\n          label:\n            'Does the plant have facilities to handle fine powder of highly toxic raw material?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'crushing_facilities',\n          label: 'Does the plant have facilities to crush the stone like solid raw material?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'heating_facilities',\n          label:\n            'Does the plant have facilities to heat/melt the raw material if required for charging the same in a batch?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'paste_preparation',\n          label:\n            'Does the plant have facilities to prepare paste of raw material if required for charging the same in a batch?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        }\n      ]\n    },\n    {\n      title: 'Flammability and Explosivity',\n      description: 'Flammability, explosivity and fire safety measures',\n      fields: [\n        {\n          name: 'flash_point_65',\n          label: 'Is Flash point of the raw material given and less than or equal to 65 degree C?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'petroleum_class',\n          label:\n            'Is the raw material is to be catgorised as ClassC / Class B / Class A substance as per Petroleum Act / Rules?',\n          type: 'select',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'class_a', label: 'Class A' },\n            { value: 'class_b', label: 'Class B' },\n            { value: 'class_c', label: 'Class C' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'storage_license',\n          label: 'Does all the plants have the capacity and license to store the raw material?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'ccoe_license',\n          label:\n            'If no, has the plant applied for CCoE license and by when expected to receive the license?',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Provide details about CCoE license application'\n        },\n        {\n          name: 'flash_point_21',\n          label: 'Is Flash point of the raw material given is less than 21 degree C?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'flammable_infrastructure',\n          label:\n            \"If yes, does plant have infrastructure to comply State Factories Rule for handling 'Flammable liquids'?\",\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        }\n      ]\n    },\n    {\n      title: 'Toxicity',\n      description: 'Toxicity assessment and exposure control',\n      fields: [\n        {\n          name: 'ld50_oral',\n          label:\n            'Is LD 50 (oral) value available and higher than the threshold limit of 200 mg/Kg BW?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'ld50_dermal',\n          label: 'Is LD 50 (Dermal) value available and higher than 1000 mg/Kg BW?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'lc50_inhalation',\n          label: 'Is LC50 Inhalation value available and higher than 10 mg/L?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'exposure_minimization',\n          label:\n            'If no, in any of the above three cases (where avaialble) then does the plant have facilities and /or procedure to minmise the exposure of workman?',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Describe exposure minimization procedures'\n        },\n        {\n          name: 'carcinogenic',\n          label: 'Is the RM a suspect Carcinogenic?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'carcinogenic_control',\n          label:\n            'If yes, plant has adequate facilities and /or procedure to minimse the exposure of workman?',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Describe carcinogenic exposure control measures'\n        }\n      ]\n    },\n    {\n      title: 'Process Safety Management',\n      description: 'Process safety management thresholds (CQS auto-populated)',\n      fields: [\n        {\n          name: 'psm_tier1_outdoor',\n          label: 'PSM Tier I Outdoor - Threshold quantity (kgs)',\n          type: 'input',\n          required: false,\n          isCqsAutoPopulated: true\n        },\n        {\n          name: 'psm_tier1_indoor',\n          label: 'PSM Tier I Indoor - Threshold quantity (kgs)',\n          type: 'input',\n          required: false,\n          isCqsAutoPopulated: true\n        },\n        {\n          name: 'psm_tier2_outdoor',\n          label: 'PSM Tier II Outdoor - Threshold quantity (kgs)',\n          type: 'input',\n          required: false,\n          isCqsAutoPopulated: true\n        },\n        {\n          name: 'psm_tier2_indoor',\n          label: 'PSM Tier II Indoor - Threshold quantity (kgs)',\n          type: 'input',\n          required: false,\n          isCqsAutoPopulated: true\n        }\n      ]\n    },\n    {\n      title: 'Storage and Handling',\n      description: 'Storage and handling procedures',\n      fields: [\n        {\n          name: 'storage_conditions_stores',\n          label: 'Are any storage conditions required and available in the plant stores?',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Describe storage conditions in plant stores'\n        },\n        {\n          name: 'storage_conditions_floor',\n          label: 'Are any storage conditions required and available in the shop floor?',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Describe storage conditions on shop floor'\n        },\n        {\n          name: 'closed_loop_required',\n          label: 'Does it require closed loop handling system during charging?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'work_permit_available',\n          label:\n            'Does the plant have required Work permit and /or WI/SOP to handle the raw material adequately?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'procedures_details',\n          label: 'If, yes specify the procedures',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Specify the procedures and work permits'\n        }\n      ]\n    },\n    {\n      title: 'PPE',\n      description: 'Personal protective equipment requirements',\n      fields: [\n        {\n          name: 'recommended_ppe',\n          label: 'Recommended specific PPEs based on MSDS',\n          type: 'textarea',\n          required: false,\n          isCqsAutoPopulated: true\n        },\n        {\n          name: 'ppe_in_use',\n          label:\n            'Are recommended PPE as per MSDS to handle the RM is already in use at the plants?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'partial', label: 'Partially' }\n          ]\n        },\n        {\n          name: 'ppe_procurement_date',\n          label: 'If no, by when the plant can procure the require PPE?',\n          type: 'input',\n          required: false,\n          placeholder: 'Enter expected procurement date'\n        }\n      ]\n    },\n    {\n      title: 'First Aid',\n      description: 'First aid measures and emergency response',\n      fields: [\n        {\n          name: 'is_poisonous',\n          label: 'Is the raw material poisonous as per the MSDS?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'antidote_specified',\n          label:\n            'Is the name of antidote required to counter the impact of the material given in the MSDS?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'antidote_available',\n          label: 'Is the above specified antidote available in the plants?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'antidote_source',\n          label:\n            'If the specified antidote is not available then what is source and who will obtain the antidote in the plant?',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Describe antidote source and procurement plan'\n        },\n        {\n          name: 'first_aid_capability',\n          label:\n            'Does the plant has capability to provide the first aid mentioned in the MSDS with the existing control measures?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        }\n      ]\n    },\n    {\n      title: 'Statutory',\n      description: 'Statutory compliance and regulatory requirements',\n      fields: [\n        {\n          name: 'cmvr_listed',\n          label: 'Is the RM or any of its ingredient listed in Table 3 of Rule 137 (CMVR)',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'msihc_listed',\n          label: 'Is the RM or any of its ingredient listed in part II of Schedule I of MSIHC Rule',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'factories_act_listed',\n          label: 'Is the RM or any of its ingredients listed in Schedule II of Factories Act',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'permissible_concentration',\n          label:\n            'With the current infrastructure, is the concentration of RM / ingredients listed in Schedule II of Factories Act within permissible concentrations as per Factories Act in the work area.',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'monitoring_details',\n          label:\n            'Mention details of work area monitoring results and describe infrastructure used for handling',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Provide monitoring details and infrastructure description'\n        }\n      ]\n    },\n    {\n      title: 'Others',\n      description: 'Additional inputs and gap analysis',\n      fields: [\n        {\n          name: 'plant_inputs_required',\n          label: 'Inputs required from plants based on the above assessment?',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Describe inputs required from plants'\n        },\n        {\n          name: 'gaps_identified',\n          label: 'Gaps identified vis-à-vis existing controls / protocols',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Identify gaps in existing controls and protocols'\n        },\n        {\n          name: 'additional_input_1',\n          label: 'Additional Input 1',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Additional input field 1'\n        },\n        {\n          name: 'additional_input_2',\n          label: 'Additional Input 2',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Additional input field 2'\n        }\n      ]\n    }\n  ];\n\n  // Function definitions (moved here to avoid hoisting issues)\n  const getOverallCompletionPercentage = useCallback(() => {\n    if (!questionnaireSteps || questionnaireSteps.length === 0 || !form) {\n      return 0;\n    }\n\n    let totalFields = 0;\n    let completedFields = 0;\n\n    // Get current form values including any unsaved changes\n    try {\n      const currentFormValues = form.getFieldsValue();\n      const currentData = { ...formData, ...currentFormValues, ...cqsFormData };\n\n      questionnaireSteps.forEach((step, _index) => {\n        const stepFields = step.fields || [];\n\n        // Count ALL fields (both CQS and plant fields) in total\n        totalFields += stepFields.length;\n\n        const completedStepFields = stepFields.filter(field => {\n          const value = currentData[field.name];\n          \n          // For CQS fields, check if they have auto-populated values\n          if (field.isCqsAutoPopulated || field.cqsAutoPopulated) {\n            // CQS field is completed if it has a value from CQS data or manual input\n            const cqsValue = cqsFormData[field.name];\n            const manualValue = currentData[field.name];\n            const finalValue = manualValue || cqsValue;\n            \n            if (Array.isArray(finalValue)) {\n              return finalValue.length > 0;\n            }\n            return finalValue && finalValue !== '' && finalValue !== null && \n                   finalValue !== undefined && finalValue !== 'Data not available';\n          }\n          \n          // For plant fields, check if user has provided a value\n          if (Array.isArray(value)) {\n            return value.length > 0;\n          }\n          return value && value !== '' && value !== null && value !== undefined;\n        });\n\n        completedFields += completedStepFields.length;\n      });\n\n      const percentage = totalFields > 0 ? Math.round((completedFields / totalFields) * 100) : 0;\n\n\n      console.log(`  - Completed fields: ${completedFields}`);\n      console.log(`  - Completion percentage: ${percentage}%`);\n      console.log(`  - CQS form data size: ${Object.keys(cqsFormData).length}`);\n      console.log(`  - Current form data size: ${Object.keys(currentData).length}`);\n\n      return percentage;\n    } catch (error) {\n      console.error('Error calculating overall completion:', error);\n      return 0;\n    }\n  }, [questionnaireSteps, formData, form, cqsFormData]);\n\n  // Load plant-specific data from backend\n  const loadPlantSpecificData = useCallback(async () => {\n    try {\n      if (!workflowData?.assignedPlant || !workflowData?.materialCode) {\n        console.warn('Missing plant or material code for loading plant data');\n        return;\n      }\n\n      console.log('Loading plant-specific data for:', {\n        plantCode: workflowData.assignedPlant,\n        materialCode: workflowData.materialCode,\n        workflowId\n      });\n\n      const plantData = await workflowAPI.getPlantSpecificData({\n        plantCode: workflowData.assignedPlant,\n        materialCode: workflowData.materialCode\n      });\n\n      if (plantData && plantData.plantInputs && Object.keys(plantData.plantInputs).length > 0) {\n        console.log('Found existing plant data:', plantData.plantInputs);\n        \n        // CRITICAL: Only load data if it matches current material\n        if (plantData.materialCode === workflowData.materialCode) {\n          setFormData(prev => ({ ...prev, ...plantData.plantInputs }));\n          form.setFieldsValue(plantData.plantInputs);\n          \n          // Check if questionnaire is submitted/read-only\n          if (plantData.submittedAt) {\n            setIsReadOnly(true);\n            message.info('This questionnaire has been submitted and is read-only');\n          }\n        } else {\n          console.warn('Plant data material mismatch - not loading data');\n          // Ensure form is clean for different material\n          setFormData({});\n          form.resetFields();\n          setIsReadOnly(false);\n        }\n      } else {\n        console.log('No existing plant data found - starting fresh');\n        // Ensure form is clean for new material\n        setFormData({});\n        form.resetFields();\n        setIsReadOnly(false);\n      }\n    } catch (error) {\n      console.error('Failed to load plant-specific data:', error);\n      // Start fresh if loading fails\n      setFormData({});\n      form.resetFields();\n    }\n  }, [workflowData, workflowId, form]);\n\n\n\n  const handleSaveDraft = useCallback(\n    async (silent = false) => {\n      try {\n        setSaving(true);\n        const currentValues = form.getFieldsValue();\n        const updatedFormData = { ...formData, ...currentValues };\n\n        // Enhanced validation before saving\n        const validatedFormData = {};\n        Object.entries(updatedFormData).forEach(([key, value]) => {\n          if (value !== null && value !== undefined && value !== '') {\n            validatedFormData[key] = value;\n          }\n        });\n\n        // Save to local storage as backup with enhanced metadata\n        // CRITICAL: Use material-specific key to prevent data cross-contamination\n        const draftKey = `plant_questionnaire_draft_${workflowId}_${workflowData?.materialCode}_${workflowData?.assignedPlant}`;\n        const draftData = {\n          formData: validatedFormData,\n          currentStep,\n          timestamp: Date.now(),\n          completedSteps: Array.from(completedSteps),\n          version: '2.0',\n          materialCode: workflowData?.materialCode,\n          materialName: workflowData?.materialName,\n          assignedPlant: workflowData?.assignedPlant,\n          workflowId,\n          lastSyncAttempt: Date.now(),\n          syncStatus: isOffline ? 'pending' : 'synced',\n          totalFields: Object.keys(validatedFormData).length,\n          completionPercentage: getOverallCompletionPercentage(),\n          sessionId: Date.now()\n        };\n\n        try {\n          localStorage.setItem(draftKey, JSON.stringify(draftData));\n        } catch (localStorageError) {\n          console.warn('Failed to save draft to local storage:', localStorageError);\n        }\n\n        // Save to server if online\n        if (!isOffline) {\n          try {\n            const draftData = {\n              plantCode: workflowData?.assignedPlant,\n              materialCode: workflowData?.materialCode,\n              responses: validatedFormData, // CRITICAL FIX: Use validatedFormData instead of updatedFormData\n              currentStep,\n              completedSteps: Array.from(completedSteps),\n              modifiedBy: 'current_user'\n            };\n\n            console.log('PlantQuestionnaire: Saving draft with data:', {\n              plantCode: draftData.plantCode,\n              materialCode: draftData.materialCode,\n              responseCount: Object.keys(draftData.responses || {}).length,\n              workflowId\n            });\n            \n\n\n            const response = await workflowAPI.saveDraftPlantResponses(workflowId, draftData);\n\n            console.log('PlantQuestionnaire: Draft save response:', response);\n\n            if (!silent) {\n              if (response.success) {\n                if (response.hasChanges) {\n                  message.success(`Draft saved successfully (${response.savedFields || 0} fields)`);\n                } else {\n                  // Don't show message for no changes to reduce noise\n                  console.log('No changes detected - draft not saved');\n                }\n              } else {\n                message.warning(response.message || 'Draft save may have failed');\n              }\n            }\n          } catch (serverError) {\n            console.error('Failed to save draft to server:', serverError);\n            setPendingChanges(true);\n\n            if (!silent) {\n              // Check if it's a specific error response\n              if (serverError.response && serverError.response.data && serverError.response.data.message) {\n                message.error(`Draft save failed: ${serverError.response.data.message}`);\n              } else {\n                message.warning('Draft saved locally. Will sync when connection is restored.');\n              }\n            }\n          }\n        } else {\n          setPendingChanges(true);\n          if (!silent) {\n            message.info('Draft saved locally. Will sync when online.');\n          }\n        }\n\n        setFormData(updatedFormData);\n\n        if (onSaveDraft) {\n          onSaveDraft(updatedFormData);\n        }\n      } catch (error) {\n        console.error('Failed to save draft:', error);\n        if (!silent) {\n          message.error('Failed to save draft. Please try again.');\n        }\n      } finally {\n        setSaving(false);\n      }\n    },\n    [form, formData, workflowId, onSaveDraft, currentStep, completedSteps, isOffline, workflowData, getOverallCompletionPercentage]\n  );\n\n  const handleNext = useCallback(async () => {\n    if (currentStep < questionnaireSteps.length - 1) {\n      // Save current form data before moving to next step\n      try {\n        const currentValues = form.getFieldsValue();\n        const updatedFormData = { ...formData, ...currentValues };\n        setFormData(updatedFormData);\n\n        // Save to database\n        await handleSaveDraft(true); // Silent save\n\n        setCurrentStep(currentStep + 1);\n      } catch (error) {\n        console.error('Failed to save data before moving to next step:', error);\n        message.warning('Failed to save current data. Please try again.');\n      }\n    }\n  }, [currentStep, questionnaireSteps.length, form, formData, handleSaveDraft]);\n\n  const handlePrevious = useCallback(async () => {\n    if (currentStep > 0) {\n      // Save current form data before moving to previous step\n      try {\n        const currentValues = form.getFieldsValue();\n        const updatedFormData = { ...formData, ...currentValues };\n        setFormData(updatedFormData);\n\n        // Save to database\n        await handleSaveDraft(true); // Silent save\n\n        setCurrentStep(currentStep - 1);\n      } catch (error) {\n        console.error('Failed to save data before moving to previous step:', error);\n        message.warning('Failed to save current data. Please try again.');\n      }\n    }\n  }, [currentStep, form, formData, handleSaveDraft]);\n\n  const handleStepChange = useCallback(\n    async (step) => {\n      if (step >= 0 && step < questionnaireSteps.length) {\n        // Save current form data before changing step\n        try {\n          const currentValues = form.getFieldsValue();\n          const updatedFormData = { ...formData, ...currentValues };\n          setFormData(updatedFormData);\n\n          // Save to database\n          await handleSaveDraft(true); // Silent save\n\n          setCurrentStep(step);\n        } catch (error) {\n          console.error('Failed to save data before changing step:', error);\n          message.warning('Failed to save current data. Please try again.');\n        }\n      }\n    },\n    [questionnaireSteps.length, form, formData, handleSaveDraft]\n  );\n\n  // Helper function definitions\n  // const getStepForField = fieldName => { // Not currently used\n  //   for (let i = 0; i < questionnaireSteps.length; i++) {\n  //     if (questionnaireSteps[i].fields.some(field => field.name === fieldName)) {\n  //       return i;\n  //     }\n  //   }\n  //   return 0;\n  // };\n\n\n\n  const getTotalFieldsPopulated = useCallback(() => {\n    if (!questionnaireSteps || questionnaireSteps.length === 0 || !form) {\n      return { total: 0, populated: 0 };\n    }\n\n    let totalFields = 0;\n    let populatedFields = 0;\n\n    try {\n      // Get current form values including any unsaved changes\n      const currentFormValues = form.getFieldsValue();\n      const currentData = { ...formData, ...currentFormValues };\n\n      questionnaireSteps.forEach(step => {\n        const stepFields = step.fields || [];\n\n        // Count ALL fields (both CQS and plant fields) in total\n        totalFields += stepFields.length;\n\n        const populatedStepFields = stepFields.filter(field => {\n          const value = currentData[field.name];\n          if (Array.isArray(value)) {\n            return value.length > 0;\n          }\n          return value && value !== '' && value !== null && value !== undefined;\n        });\n\n        populatedFields += populatedStepFields.length;\n      });\n\n      // Total fields populated calculated (including both CQS and plant fields)\n\n      return { total: totalFields, populated: populatedFields };\n    } catch (error) {\n      console.error('Error calculating total fields populated:', error);\n      return { total: 0, populated: 0 };\n    }\n  }, [questionnaireSteps, formData, form]);\n\n  // Network status monitoring with enhanced offline handling\n  useEffect(() => {\n    const handleOnline = () => {\n      setIsOffline(false);\n      notification.success({\n        message: 'Connection Restored',\n        description: 'You are back online. Syncing your changes...',\n        icon: <WifiOutlined style={{ color: '#52c41a' }} />,\n        duration: 3\n      });\n\n      if (pendingChanges) {\n        handleSaveDraft(true); // Auto-sync when back online\n        setPendingChanges(false);\n      }\n    };\n\n    const handleOffline = () => {\n      setIsOffline(true);\n      notification.warning({\n        message: 'Connection Lost',\n        description:\n          'You are offline. Changes will be saved locally and synced when connection is restored.',\n        icon: <DisconnectOutlined style={{ color: '#fa8c16' }} />,\n        duration: 5\n      });\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, [pendingChanges, handleSaveDraft]);\n\n  // Enhanced keyboard navigation\n  useEffect(() => {\n    const handleKeyDown = event => {\n      // Ctrl/Cmd + S to save draft\n      if ((event.ctrlKey || event.metaKey) && event.key === 's') {\n        event.preventDefault();\n        handleSaveDraft();\n      }\n\n\n\n      // Ctrl/Cmd + Right Arrow to go to next step\n      if ((event.ctrlKey || event.metaKey) && event.key === 'ArrowRight') {\n        event.preventDefault();\n        if (currentStep < questionnaireSteps.length - 1) {\n          handleNext();\n        }\n      }\n\n      // Ctrl/Cmd + Left Arrow to go to previous step\n      if ((event.ctrlKey || event.metaKey) && event.key === 'ArrowLeft') {\n        event.preventDefault();\n        if (currentStep > 0) {\n          handlePrevious();\n        }\n      }\n\n      // F1 to show help/shortcuts\n      if (event.key === 'F1') {\n        event.preventDefault();\n        Modal.info({\n          title: 'Keyboard Shortcuts',\n          content: (\n            <div>\n              <p>\n                <strong>Ctrl/Cmd + S:</strong> Save draft\n              </p>\n              <p>\n                <strong>Ctrl/Cmd + →:</strong> Next step\n              </p>\n              <p>\n                <strong>Ctrl/Cmd + ←:</strong> Previous step\n              </p>\n              <p>\n                <strong>Tab:</strong> Navigate between fields\n              </p>\n              <p>\n                <strong>Enter:</strong> Submit form or proceed\n              </p>\n              <p>\n                <strong>Esc:</strong> Close modals\n              </p>\n            </div>\n          )\n        });\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [currentStep, questionnaireSteps.length, handleNext, handlePrevious, handleSaveDraft]);\n\n  // Define functions before useEffect hooks that depend on them\n  const loadWorkflowData = useCallback(async () => {\n    try {\n      setLoading(true);\n      const workflow = await workflowAPI.getWorkflow(workflowId);\n      setWorkflowData(workflow);\n\n      // Pre-populate material name from workflow data (from ProjectItemMaster)\n      const initialData = {};\n      if (workflow.materialName) {\n        initialData.materialName = workflow.materialName;\n      }\n\n      // Load existing responses if any\n      if (workflow.responses && workflow.responses.length > 0) {\n        const existingData = { ...initialData };\n        const completed = new Set();\n\n        workflow.responses.forEach(response => {\n          existingData[response.fieldName] = response.fieldValue;\n          completed.add(response.stepNumber);\n        });\n\n        // Merge with existing form data (which may include CQS values)\n        setFormData(prevFormData => {\n          const mergedData = { ...existingData, ...prevFormData };\n          form.setFieldsValue(mergedData);\n          return mergedData;\n        });\n        setCompletedSteps(completed);\n      } else {\n        // Set initial data even if no responses exist, but preserve existing form data (CQS values)\n        setFormData(prevFormData => {\n          const mergedData = { ...initialData, ...prevFormData };\n          form.setFieldsValue(mergedData);\n          return mergedData;\n        });\n      }\n    } catch (error) {\n      console.error('Failed to load workflow data:', error);\n      message.error('Failed to load workflow data');\n    } finally {\n      setLoading(false);\n    }\n  }, [workflowId, form]);\n\n  const loadQueries = useCallback(async () => {\n    try {\n      const workflowQueries = await queryAPI.getQueriesByWorkflow(workflowId);\n      setQueries(workflowQueries);\n    } catch (error) {\n      console.error('Failed to load queries:', error);\n    }\n  }, [workflowId]);\n\n  // Load workflow data and existing responses\n  useEffect(() => {\n    if (workflowId) {\n      loadWorkflowData();\n      loadQueries();\n    }\n  }, [workflowId, loadWorkflowData, loadQueries]);\n\n  // Load questionnaire template when workflow data is available\n  useEffect(() => {\n    if (workflowData && workflowData.materialCode && workflowData.assignedPlant) {\n      loadQuestionnaireTemplate();\n      loadPlantSpecificData();\n    }\n  }, [workflowData, loadQuestionnaireTemplate, loadPlantSpecificData]);\n\n  // Auto-save functionality with recovery\n  useEffect(() => {\n    if (autoSaveEnabled && Object.keys(formData).length > 0) {\n      const autoSaveTimer = setTimeout(() => {\n        handleSaveDraft(true); // Silent save\n      }, AUTO_SAVE.INTERVAL); // Auto-save every 30 seconds\n\n      return () => clearTimeout(autoSaveTimer);\n    }\n  }, [formData, autoSaveEnabled, handleSaveDraft]);\n\n  // Debounced auto-save for real-time changes (saves data as user types)\n  useEffect(() => {\n    if (autoSaveEnabled && Object.keys(formData).length > 0) {\n      const debouncedSaveTimer = setTimeout(() => {\n        handleSaveDraft(true); // Silent save\n      }, AUTO_SAVE.DEBOUNCE_DELAY); // Save after 2 seconds of inactivity\n\n      return () => clearTimeout(debouncedSaveTimer);\n    }\n  }, [formData, autoSaveEnabled, handleSaveDraft]);\n\n  // Ensure CQS values are always applied to the form\n  useEffect(() => {\n    if (Object.keys(cqsFormData).length > 0) {\n      console.log('Applying CQS form data from useEffect:', cqsFormData);\n      // Get current form values\n      const currentValues = form.getFieldsValue();\n      // Merge with CQS data (CQS takes precedence)\n      const mergedValues = { ...currentValues, ...cqsFormData };\n      // Set the merged values\n      form.setFieldsValue(mergedValues);\n      setFormData(prev => ({ ...prev, ...cqsFormData }));\n    }\n  }, [cqsFormData, form]);\n\n  // Track form data changes and update completed steps\n  useEffect(() => {\n    if (questionnaireSteps.length > 0) {\n      const newCompletedSteps = new Set();\n\n      // Get current form values including any unsaved changes\n      const currentFormValues = form.getFieldsValue();\n      const currentData = { ...formData, ...currentFormValues };\n\n      questionnaireSteps.forEach((step, index) => {\n        const stepFields = step.fields || [];\n\n        // Filter out CQS auto-populated fields for step completion calculation\n        const userEditableFields = stepFields.filter(field => !field.isCqsAutoPopulated && !field.disabled);\n        const requiredFields = userEditableFields.filter(field => field.required);\n\n        const completedRequiredFields = requiredFields.filter(field => {\n          const value = currentData[field.name];\n          if (Array.isArray(value)) {\n            return value.length > 0;\n          }\n          return value && value !== '' && value !== null && value !== undefined;\n        });\n\n        // Mark step as complete based on field completion\n        if (requiredFields.length > 0) {\n          // If there are required fields, all must be completed\n          if (completedRequiredFields.length === requiredFields.length) {\n            newCompletedSteps.add(index);\n          }\n        } else {\n          // If no required fields, mark complete if at least 50% of user-editable fields are filled\n          const completedOptionalFields = userEditableFields.filter(field => {\n            const value = currentData[field.name];\n            if (Array.isArray(value)) {\n              return value.length > 0;\n            }\n            return value && value !== '' && value !== null && value !== undefined;\n          });\n\n          const completionPercentage =\n            userEditableFields.length > 0 ? (completedOptionalFields.length / userEditableFields.length) * 100 : 0;\n\n          if (completionPercentage >= 50) {\n            newCompletedSteps.add(index);\n          }\n        }\n\n        // Step completion calculated (excluding CQS auto-populated fields)\n      });\n\n      // Step completion updated\n\n      setCompletedSteps(newCompletedSteps);\n    }\n  }, [formData, questionnaireSteps, form]);\n\n  // Enhanced form validation with field-specific rules\n  const getFieldValidationRules = field => {\n    const rules = [];\n\n    if (field.required) {\n      rules.push({\n        required: true,\n        message: `${field.label} is required for MSDS completion`\n      });\n    }\n\n    // Add specific validation based on field type and name\n    switch (field.name) {\n      case 'casNumber':\n        rules.push({\n          pattern: /^\\d{1,7}-\\d{2}-\\d$/,\n          message:\n            'Please enter a valid CAS number format (e.g., 64-17-5). If unknown, raise a query to the Technical team.'\n        });\n        break;\n      case 'boilingPoint':\n      case 'meltingPoint':\n        rules.push({\n          pattern: /^-?\\d+(\\.\\d+)?$/,\n          message: 'Please enter a valid temperature in Celsius (e.g., 100.5 or -10)'\n        });\n        break;\n      case 'materialName':\n        rules.push({\n          min: 2,\n          message: 'Material name must be at least 2 characters'\n        });\n        rules.push({\n          max: 200,\n          message: 'Material name cannot exceed 200 characters'\n        });\n        break;\n      case 'supplierName':\n        rules.push({\n          min: 2,\n          message: 'Supplier name must be at least 2 characters'\n        });\n        rules.push({\n          max: 100,\n          message: 'Supplier name cannot exceed 100 characters'\n        });\n        break;\n      case 'missing_info':\n      case 'exposure_minimization':\n      case 'carcinogenic_control':\n      case 'storage_conditions_stores':\n      case 'storage_conditions_floor':\n      case 'procedures_details':\n      case 'antidote_source':\n      case 'monitoring_details':\n      case 'plant_inputs_required':\n      case 'gaps_identified':\n      case 'additional_input_1':\n      case 'additional_input_2':\n        rules.push({\n          min: 10,\n          message: `${field.label} must be at least 10 characters for regulatory compliance`\n        });\n        rules.push({\n          max: 2000,\n          message: `${field.label} cannot exceed 2000 characters`\n        });\n        break;\n      default:\n        break;\n    }\n\n    return rules;\n  };\n\n  // Get contextual help text for fields\n  const getFieldHelpText = field => {\n    const helpTexts = {\n      msds_available:\n        'Material Safety Data Sheet with all 16 sections as per regulatory requirements',\n      cas_available:\n        'Chemical Abstracts Service number - unique identifier for chemical substances',\n      is_corrosive: 'Corrosive materials can cause damage to skin, eyes, and respiratory system',\n      highly_toxic: 'Materials with high toxicity require special handling and safety measures',\n      flash_point_65:\n        'Flash point indicates fire hazard - materials with flash point ≤65°C are flammable',\n      petroleum_class:\n        'Classification under Petroleum Act determines storage and handling requirements',\n      ld50_oral: 'Lethal Dose 50 (oral) - dose that kills 50% of test animals when ingested',\n      ld50_dermal:\n        'Lethal Dose 50 (dermal) - dose that kills 50% of test animals through skin contact',\n      lc50_inhalation:\n        'Lethal Concentration 50 (inhalation) - concentration that kills 50% through inhalation',\n      carcinogenic: 'Materials suspected to cause cancer require enhanced safety protocols',\n      recommended_ppe: 'Personal Protective Equipment recommendations based on material hazards',\n      is_poisonous: 'Poisonous materials require specific antidotes and first aid procedures',\n      cmvr_listed:\n        'Chemical Manufacture and Verification Rules listing affects regulatory compliance',\n      msihc_listed: 'Manufacture, Storage and Import of Hazardous Chemical Rules listing',\n      factories_act_listed: 'Factories Act Schedule II listing requires workplace monitoring'\n    };\n\n    return helpTexts[field.name] || field.help;\n  };\n\n  // Enhanced auto-recovery on component mount with improved error handling\n  useEffect(() => {\n    const recoverDraftData = () => {\n      try {\n        // CRITICAL: Use material-specific key to prevent data cross-contamination\n        const draftKey = `plant_questionnaire_draft_${workflowId}_${workflowData?.materialCode}_${workflowData?.assignedPlant}`;\n        const savedDraft = localStorage.getItem(draftKey);\n\n        if (savedDraft) {\n          const draftData = JSON.parse(savedDraft);\n          const draftTimestamp = draftData.timestamp;\n          const currentTime = Date.now();\n\n          // CRITICAL: Validate that draft belongs to current material/plant combination\n          const isDraftValid = draftData.materialCode === workflowData?.materialCode && \n                              draftData.assignedPlant === workflowData?.assignedPlant &&\n                              draftData.workflowId === workflowId;\n\n          if (!isDraftValid) {\n            console.warn('Draft data mismatch - clearing invalid draft:', {\n              draftMaterial: draftData.materialCode,\n              currentMaterial: workflowData?.materialCode,\n              draftPlant: draftData.assignedPlant,\n              currentPlant: workflowData?.assignedPlant\n            });\n            localStorage.removeItem(draftKey);\n            return;\n          }\n\n          // Only recover if draft is less than 7 days old (extended from 24 hours)\n          if (currentTime - draftTimestamp < 7 * 24 * 60 * 60 * 1000) {\n            // Enhanced validation of draft data integrity\n            if (draftData.formData && typeof draftData.formData === 'object') {\n              // Validate each field value before setting\n              const validatedFormData = {};\n              Object.entries(draftData.formData).forEach(([key, value]) => {\n                if (value !== null && value !== undefined && value !== '') {\n                  validatedFormData[key] = value;\n                }\n              });\n\n              setFormData(prev => ({ ...prev, ...validatedFormData }));\n              form.setFieldsValue(validatedFormData);\n\n              if (\n                typeof draftData.currentStep === 'number' &&\n                draftData.currentStep >= 0 &&\n                draftData.currentStep < questionnaireSteps.length\n              ) {\n                setCurrentStep(draftData.currentStep);\n              }\n\n              if (Array.isArray(draftData.completedSteps)) {\n                setCompletedSteps(new Set(draftData.completedSteps));\n              }\n\n              // Check if there are pending changes to sync\n              if (draftData.syncStatus === 'pending') {\n                setPendingChanges(true);\n              }\n\n              const recoveredFields = Object.keys(validatedFormData).length;\n              const draftAge = Math.round((currentTime - draftTimestamp) / (1000 * 60 * 60));\n\n              notification.success({\n                message: 'Draft Recovered',\n                description: `${recoveredFields} fields restored from ${draftAge} hours ago. Your progress has been preserved.`,\n                duration: 6,\n                placement: 'topRight'\n              });\n            } else {\n              // Remove corrupted draft\n              localStorage.removeItem(draftKey);\n              notification.warning({\n                message: 'Draft Recovery Failed',\n                description: 'Previous draft data was corrupted and has been cleared.',\n                duration: 4\n              });\n            }\n          } else {\n            // Remove old draft\n            localStorage.removeItem(draftKey);\n            const draftAge = Math.round((currentTime - draftTimestamp) / (1000 * 60 * 60 * 24));\n            notification.info({\n              message: 'Old Draft Cleared',\n              description: `Draft from ${draftAge} days ago was automatically removed.`,\n              duration: 3\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Failed to recover draft data:', error);\n        // Remove corrupted draft\n        try {\n          const draftKey = `plant_questionnaire_draft_${workflowId}_${workflowData?.materialCode}_${workflowData?.assignedPlant}`;\n          localStorage.removeItem(draftKey);\n          notification.error({\n            message: 'Draft Recovery Error',\n            description: 'Failed to recover previous draft. Starting fresh.',\n            duration: 4\n          });\n        } catch (removeError) {\n          console.error('Failed to remove corrupted draft:', removeError);\n        }\n      }\n    };\n\n    if (workflowId && !workflowData) {\n      recoverDraftData();\n    }\n  }, [workflowId, workflowData, form, questionnaireSteps.length]);\n\n  // Enhanced step completion tracking with validation\n  const getStepCompletionStatus = useCallback(stepIndex => {\n    if (!questionnaireSteps[stepIndex] || !questionnaireSteps[stepIndex].fields) {\n      return {\n        total: 0,\n        required: 0,\n        optional: 0,\n        completed: 0,\n        requiredCompleted: 0,\n        optionalCompleted: 0,\n        isComplete: false,\n        hasOpenQueries: false,\n        hasResolvedQueries: false,\n        openQueriesCount: 0,\n        resolvedQueriesCount: 0,\n        completionPercentage: 0,\n        requiredCompletionPercentage: 0\n      };\n    }\n\n    const stepFields = questionnaireSteps[stepIndex].fields;\n\n    // Filter out CQS auto-populated fields for step completion calculation\n    const userEditableFields = stepFields.filter(field => !field.isCqsAutoPopulated && !field.disabled);\n    const requiredFields = userEditableFields.filter(field => field.required);\n    const optionalFields = userEditableFields.filter(field => !field.required);\n\n    // Get current form values including any unsaved changes\n    const currentFormValues = form.getFieldsValue();\n    const currentData = { ...formData, ...currentFormValues };\n\n    const completedRequiredFields = requiredFields.filter(field => {\n      const value = currentData[field.name];\n      if (Array.isArray(value)) {\n        return value.length > 0;\n      }\n      return value && value !== '' && value !== null && value !== undefined;\n    });\n\n    const completedOptionalFields = optionalFields.filter(field => {\n      const value = currentData[field.name];\n      if (Array.isArray(value)) {\n        return value.length > 0;\n      }\n      return value && value !== '' && value !== null && value !== undefined;\n    });\n\n    const stepQueries = queries.filter(q => q.stepNumber === stepIndex);\n    const openQueries = stepQueries.filter(q => q.status === 'OPEN');\n    const resolvedQueries = stepQueries.filter(q => q.status === 'RESOLVED');\n\n    return {\n      total: userEditableFields.length,\n      required: requiredFields.length,\n      optional: optionalFields.length,\n      completed: completedRequiredFields.length + completedOptionalFields.length,\n      requiredCompleted: completedRequiredFields.length,\n      optionalCompleted: completedOptionalFields.length,\n      isComplete:\n        requiredFields.length > 0\n          ? completedRequiredFields.length === requiredFields.length\n          : userEditableFields.length > 0 &&\n          (completedRequiredFields.length + completedOptionalFields.length) / userEditableFields.length >=\n          0.5,\n      hasOpenQueries: openQueries.length > 0,\n      hasResolvedQueries: resolvedQueries.length > 0,\n      openQueriesCount: openQueries.length,\n      resolvedQueriesCount: resolvedQueries.length,\n      completionPercentage:\n        userEditableFields.length > 0\n          ? Math.round(\n            ((completedRequiredFields.length + completedOptionalFields.length) /\n              userEditableFields.length) *\n            100\n          )\n          : 100,\n      requiredCompletionPercentage:\n        requiredFields.length > 0\n          ? Math.round((completedRequiredFields.length / requiredFields.length) * 100)\n          : 100\n    };\n  }, [questionnaireSteps, formData, form, queries]);\n\n  const handleRaiseQuery = fieldName => {\n    console.log('handleRaiseQuery called with fieldName:', fieldName);\n    const field = questionnaireSteps[currentStep].fields.find(f => f.name === fieldName);\n    const currentValue = formData[fieldName] || form.getFieldValue(fieldName);\n\n    console.log('Found field:', field);\n    console.log('Current value:', currentValue);\n\n    setSelectedField({\n      ...field,\n      stepNumber: currentStep,\n      stepTitle: questionnaireSteps[currentStep].title,\n      currentValue,\n      materialContext: {\n        materialCode: workflowData?.materialCode,\n        materialName: workflowData?.materialName,\n        materialType: formData.materialType || workflowData?.materialType,\n        supplierName: formData.supplierName || workflowData?.supplierName\n      }\n    });\n\n    console.log('Setting queryModalVisible to true');\n    setQueryModalVisible(true);\n  };\n\n  const handleQueryCreated = _queryData => {\n    setQueryModalVisible(false);\n    setSelectedField(null);\n    loadQueries(); // Reload queries\n    message.success('Query raised successfully');\n  };\n\n\n\n  // Auto-scroll to field with resolved query\n  const scrollToResolvedQuery = useCallback(fieldName => {\n    setTimeout(() => {\n      const fieldElement = document.querySelector(`[data-field-name=\"${fieldName}\"]`);\n      if (fieldElement) {\n        fieldElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center',\n          inline: 'nearest'\n        });\n\n        // Highlight the field briefly\n        fieldElement.style.transition = 'background-color 0.3s ease';\n        fieldElement.style.backgroundColor = '#f6ffed';\n        setTimeout(() => {\n          fieldElement.style.backgroundColor = '';\n        }, 2000);\n      }\n    }, 100);\n  }, []);\n\n  // Check for newly resolved queries and auto-scroll\n  useEffect(() => {\n    if (queries.length > 0) {\n      const resolvedQueriesInCurrentStep = queries.filter(\n        q => q.stepNumber === currentStep && q.status === 'RESOLVED' && !q.hasBeenViewed // Add this flag to track if user has seen the resolution\n      );\n\n      if (resolvedQueriesInCurrentStep.length > 0) {\n        const latestResolvedQuery = resolvedQueriesInCurrentStep.sort(\n          (a, b) => new Date(b.resolvedAt) - new Date(a.resolvedAt)\n        )[0];\n\n        scrollToResolvedQuery(latestResolvedQuery.fieldName);\n\n        // Show notification about resolved query\n        notification.success({\n          message: 'Query Resolved',\n          description: `Your query about \"${latestResolvedQuery.fieldName}\" has been resolved. Check the field for the response.`,\n          duration: 5,\n          placement: 'topRight'\n        });\n      }\n    }\n  }, [queries, currentStep, scrollToResolvedQuery]);\n\n  const handleSubmit = async () => {\n    try {\n      setSubmitting(true);\n\n      // Check for open queries\n      const openQueries = queries.filter(q => q.status === 'OPEN');\n      if (openQueries.length > 0) {\n        Modal.confirm({\n          title: 'Open Queries Detected',\n          content: `You have ${openQueries.length} open queries. Are you sure you want to submit the questionnaire? It's recommended to resolve all queries before submission.`,\n          okText: 'Submit Anyway',\n          cancelText: 'Cancel',\n          onOk: () => proceedWithSubmission()\n        });\n        return;\n      }\n\n      await proceedWithSubmission();\n    } catch (error) {\n      console.error('Failed to submit questionnaire:', error);\n      if (error.status === 400) {\n        message.error('Please complete all required fields before submitting');\n      } else if (error.status === 401) {\n        message.error('Session expired. Please log in again.');\n      } else {\n        message.error('Failed to submit questionnaire. Please try again.');\n      }\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const proceedWithSubmission = async () => {\n    // Validate all required fields\n    const allRequiredFields = questionnaireSteps.flatMap(step =>\n      step.fields.filter(field => field.required).map(field => field.name)\n    );\n\n    await form.validateFields(allRequiredFields);\n\n    const finalData = form.getFieldsValue();\n\n    // Check completion percentage\n    const completionPercentage = getOverallCompletionPercentage();\n    if (completionPercentage < 80) {\n      const proceed = await new Promise(resolve => {\n        Modal.confirm({\n          title: 'Incomplete Questionnaire',\n          content: `Your questionnaire is only ${completionPercentage}% complete. Are you sure you want to submit?`,\n          okText: 'Submit',\n          cancelText: 'Continue Editing',\n          onOk: () => resolve(true),\n          onCancel: () => resolve(false)\n        });\n      });\n\n      if (!proceed) {\n        return;\n      }\n    }\n\n    const submissionData = {\n      plantCode: workflowData?.assignedPlant,\n      materialCode: workflowData?.materialCode,\n      responses: finalData,\n      completionPercentage,\n      submittedBy: 'current_user',\n      totalQueries: queries.length,\n      openQueries: queries.filter(q => q.status === 'OPEN').length\n    };\n\n    const submitResult = await workflowAPI.submitPlantQuestionnaire(workflowId, submissionData);\n\n    console.log('Submission result:', submitResult);\n\n    // Clear draft data after successful submission\n    try {\n      const draftKey = `plant_questionnaire_draft_${workflowId}_${workflowData?.materialCode}_${workflowData?.assignedPlant}`;\n      localStorage.removeItem(draftKey);\n      console.log('Cleared draft data for submitted questionnaire:', draftKey);\n    } catch (error) {\n      console.warn('Failed to clear draft data:', error);\n    }\n\n    // CRITICAL: Mark questionnaire as read-only after successful submission\n    if (submitResult.success) {\n      setIsReadOnly(true);\n      message.success('Questionnaire submitted successfully and marked as completed');\n      \n      // Refresh the page or redirect to prevent further editing\n      setTimeout(() => {\n        window.location.reload();\n      }, 2000);\n    } else {\n      message.error(submitResult.message || 'Submission failed - please try again');\n      return;\n    }\n\n    if (onComplete) {\n      onComplete(finalData);\n    }\n  };\n\n  const renderField = field => {\n    const fieldQueries = queries.filter(\n      q => q.fieldName === field.name && q.stepNumber === currentStep\n    );\n\n    const hasOpenQuery = fieldQueries.some(q => q.status === 'OPEN');\n    const hasResolvedQuery = fieldQueries.some(q => q.status === 'RESOLVED');\n    const resolvedQuery = fieldQueries.find(q => q.status === 'RESOLVED');\n\n    const isFieldCompleted = formData[field.name] && formData[field.name] !== '';\n\n    const fieldLabel = (\n      <div className=\"modern-field-label\">\n        <div style={{\n          display: 'flex',\n          alignItems: 'flex-start',\n          gap: '8px',\n          flexWrap: 'wrap',\n          marginBottom: '4px'\n        }}>\n          <span style={{ flex: 1, minWidth: 0, lineHeight: '1.5' }}>\n            {field.label}\n          </span>\n          {field.required && <span style={{ color: '#ef4444', flexShrink: 0 }}>*</span>}\n          {field.isCqsAutoPopulated && (\n            <CqsFieldDisplay\n              field={field}\n              cqsData={_cqsData}\n              cqsFieldMapping={workflowData?.cqsFieldMapping || {}}\n              compact={true}\n            />\n          )}\n          {isFieldCompleted && (\n            <Tooltip title=\"Field completed\">\n              <CheckCircleOutlined style={{ color: '#10b981', fontSize: '14px', flexShrink: 0 }} />\n            </Tooltip>\n          )}\n        </div>\n        <div style={{ display: 'flex', gap: '8px', marginTop: '4px', flexWrap: 'wrap' }}>\n          <Button\n            type=\"text\"\n            size=\"small\"\n            icon={<QuestionCircleOutlined />}\n            onClick={() => handleRaiseQuery(field.name)}\n            style={{\n              color: '#667eea',\n              padding: '2px 6px',\n              height: 'auto',\n              fontSize: '12px'\n            }}\n          >\n            Query\n          </Button>\n          {hasOpenQuery && (\n            <Tag color=\"red\" size=\"small\">\n              Query Open\n            </Tag>\n          )}\n          {hasResolvedQuery && !hasOpenQuery && (\n            <Tag color=\"green\" size=\"small\">\n              Query Resolved\n            </Tag>\n          )}\n        </div>\n      </div>\n    );\n\n    // Enhanced validation rules\n    const validationRules = getFieldValidationRules(field);\n\n    const helpContent = resolvedQuery ? (\n      <div\n        style={{\n          marginTop: 8,\n          padding: '12px 16px',\n          background: 'linear-gradient(135deg, #f0fdf4, #dcfce7)',\n          border: '1px solid #bbf7d0',\n          borderRadius: '8px',\n          fontSize: '12px'\n        }}\n      >\n        <div style={{ marginBottom: 6 }}>\n          <Text strong style={{ color: '#059669' }}>\n            Query Response:\n          </Text>\n        </div>\n        <div style={{ marginBottom: 6, color: '#374151' }}>{resolvedQuery.response}</div>\n        <div style={{ fontSize: '10px', color: '#6b7280' }}>\n          Resolved by {resolvedQuery.resolvedBy} on{' '}\n          {new Date(resolvedQuery.resolvedAt).toLocaleDateString()}\n        </div>\n      </div>\n    ) : (\n      getFieldHelpText(field)\n    );\n\n    const commonProps = {\n      name: field.name,\n      label: fieldLabel,\n      rules: validationRules,\n      help: helpContent,\n      'data-field-name': field.name\n    };\n\n    // Get CQS value for this field if it's CQS auto-populated\n    const cqsValue = field.isCqsAutoPopulated && _cqsData?.cqsData ?\n      _cqsData.cqsData[field.name] : null;\n\n    // If this is a CQS auto-populated field with a value, show it as read-only display\n    if (field.isCqsAutoPopulated && cqsValue) {\n      const displayValue = field.type === 'radio' || field.type === 'select' ?\n        field.options?.find(opt => opt.value === cqsValue)?.label || cqsValue :\n        cqsValue;\n\n      return (\n        <Form.Item {...commonProps}>\n          <div className=\"cqs-readonly-field\">\n            <div className=\"cqs-value-display\">\n              {displayValue}\n            </div>\n            <div className=\"cqs-readonly-note\">\n              <Text type=\"secondary\" style={{ fontSize: '12px', fontStyle: 'italic' }}>\n                Auto-populated by CQS system\n              </Text>\n            </div>\n          </div>\n        </Form.Item>\n      );\n    }\n\n    // Disable field if explicitly disabled, read-only, or CQS auto-populated\n    const isDisabled = field.disabled || isReadOnly || false;\n\n    const inputProps = {\n      className: `modern-input ${field.isCqsAutoPopulated ? 'cqs-auto-populated' : ''}`,\n      disabled: isDisabled,\n      placeholder: field.placeholder || `Enter ${field.label.toLowerCase()}`\n    };\n\n    switch (field.type) {\n      case 'input':\n        return (\n          <Form.Item {...commonProps}>\n            <Input {...inputProps} />\n          </Form.Item>\n        );\n\n      case 'textarea':\n        return (\n          <Form.Item {...commonProps}>\n            <TextArea {...inputProps} rows={4} autoSize={{ minRows: 3, maxRows: 6 }} />\n          </Form.Item>\n        );\n\n      case 'select':\n        return (\n          <Form.Item {...commonProps}>\n            <Select\n              {...inputProps}\n              placeholder={`Select ${field.label.toLowerCase()}`}\n              showSearch\n              optionFilterProp=\"children\"\n            >\n              {field.options?.map(option => (\n                <Option key={option.value} value={option.value}>\n                  {option.label}\n                </Option>\n              ))}\n            </Select>\n          </Form.Item>\n        );\n\n      case 'radio':\n        return (\n          <Form.Item {...commonProps}>\n            <Radio.Group\n              className={`modern-radio-group ${field.isCqsAutoPopulated ? 'cqs-auto-populated' : ''}`}\n              disabled={isDisabled}\n            >\n              <Space direction=\"vertical\" size=\"small\">\n                {field.options?.map(option => (\n                  <Radio key={option.value} value={option.value}>\n                    {option.label}\n                  </Radio>\n                ))}\n              </Space>\n            </Radio.Group>\n          </Form.Item>\n        );\n\n      case 'checkbox':\n        return (\n          <Form.Item {...commonProps} valuePropName=\"checked\">\n            <Checkbox.Group\n              className={`modern-checkbox-group ${field.isCqsAutoPopulated ? 'cqs-auto-populated' : ''}`}\n              disabled={isDisabled}\n            >\n              <Space direction=\"vertical\" size=\"small\">\n                {field.options?.map(option => (\n                  <Checkbox key={option.value} value={option.value}>\n                    {option.label}\n                  </Checkbox>\n                ))}\n              </Space>\n            </Checkbox.Group>\n          </Form.Item>\n        );\n\n      default:\n        return (\n          <Form.Item {...commonProps}>\n            <Input {...inputProps} />\n          </Form.Item>\n        );\n    }\n  };\n\n  if (loading) {\n    return (\n      <div\n        className=\"plant-questionnaire-container\"\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n          minHeight: '100vh',\n          gap: '24px'\n        }}\n      >\n        <div\n          style={{\n            background: 'white',\n            padding: '48px',\n            borderRadius: '16px',\n            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n            textAlign: 'center',\n            maxWidth: '400px'\n          }}\n        >\n          <div style={{ marginBottom: '24px' }}>\n            <div\n              style={{\n                width: '60px',\n                height: '60px',\n                margin: '0 auto 16px',\n                background: 'linear-gradient(135deg, #4f46e5, #7c3aed)',\n                borderRadius: '50%',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center'\n              }}\n            >\n              <FileTextOutlined style={{ fontSize: '24px', color: 'white' }} />\n            </div>\n            <Title level={3} style={{ margin: 0, color: '#1e293b' }}>\n              Loading Questionnaire\n            </Title>\n            <Text type=\"secondary\" style={{ fontSize: '14px' }}>\n              Preparing your workflow data...\n            </Text>\n          </div>\n\n          <div style={{ marginBottom: '16px' }}>\n            <Spin size=\"large\" />\n          </div>\n\n          <div\n            style={{\n              height: '4px',\n              background: '#e2e8f0',\n              borderRadius: '2px',\n              overflow: 'hidden'\n            }}\n          >\n            <div\n              style={{\n                height: '100%',\n                width: '30%',\n                background: 'linear-gradient(135deg, #4f46e5, #7c3aed)',\n                borderRadius: '2px',\n                animation: 'slideInFromLeft 2s ease-in-out infinite'\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!workflowData) {\n    return (\n      <Alert\n        message=\"Workflow Not Found\"\n        description=\"The requested workflow could not be loaded.\"\n        type=\"error\"\n        showIcon\n      />\n    );\n  }\n\n  // Add safety checks for questionnaire steps\n  if (templateLoading) {\n    return (\n      <div\n        className=\"plant-questionnaire-container\"\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n          minHeight: '100vh',\n          gap: '24px'\n        }}\n      >\n        <div\n          style={{\n            background: 'white',\n            padding: '48px',\n            borderRadius: '16px',\n            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n            textAlign: 'center',\n            maxWidth: '400px'\n          }}\n        >\n          <div style={{ marginBottom: '24px' }}>\n            <div\n              style={{\n                width: '60px',\n                height: '60px',\n                margin: '0 auto 16px',\n                background: 'linear-gradient(135deg, #4f46e5, #7c3aed)',\n                borderRadius: '50%',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center'\n              }}\n            >\n              <ExperimentOutlined style={{ fontSize: '24px', color: 'white' }} />\n            </div>\n            <Title level={3} style={{ margin: 0, color: '#1e293b' }}>\n              Loading Template\n            </Title>\n            <Text type=\"secondary\" style={{ fontSize: '14px' }}>\n              Preparing your plant-specific questionnaire template...\n            </Text>\n          </div>\n\n          <div style={{ marginBottom: '16px' }}>\n            <Spin size=\"large\" />\n          </div>\n\n          <div\n            style={{\n              height: '4px',\n              background: '#e2e8f0',\n              borderRadius: '2px',\n              overflow: 'hidden'\n            }}\n          >\n            <div\n              style={{\n                height: '100%',\n                width: '60%',\n                background: 'linear-gradient(135deg, #4f46e5, #7c3aed)',\n                borderRadius: '2px',\n                animation: 'slideInFromLeft 2s ease-in-out infinite'\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!questionnaireSteps || questionnaireSteps.length === 0) {\n    return (\n      <Alert\n        message=\"Template Not Available\"\n        description=\"The questionnaire template could not be loaded. Please try refreshing the page.\"\n        type=\"error\"\n        showIcon\n        action={\n          <Button size=\"small\" onClick={() => window.location.reload()}>\n            Refresh\n          </Button>\n        }\n      />\n    );\n  }\n\n  // const progress = Math.round(((currentStep + 1) / questionnaireSteps.length) * 100); // Not currently used\n  const currentStepData = questionnaireSteps[currentStep] || {\n    title: 'Loading...',\n    description: '',\n    fields: []\n  };\n\n  return (\n    <div className={`plant-questionnaire-container ${isReadOnly ? 'read-only' : ''}`}>\n      {/* Modern Header */}\n      <div className=\"plant-questionnaire-header\">\n        <div className=\"plant-questionnaire-header-content\">\n          <div className=\"plant-questionnaire-title\">\n            <Avatar size={40} style={{ background: 'linear-gradient(135deg, #667eea, #764ba2)' }}>\n              <DashboardOutlined />\n            </Avatar>\n            <div>\n              <Title level={3} style={{ margin: 0, color: '#1e293b' }}>\n                Plant Questionnaire\n              </Title>\n              <Text type=\"secondary\" style={{ fontSize: '14px' }}>\n                {workflowData?.materialCode} • {workflowData?.assignedPlant}\n              </Text>\n            </div>\n          </div>\n\n          <div className=\"plant-questionnaire-stats\">\n            <div className=\"modern-stats-card\">\n              <div\n                className=\"modern-progress-ring\"\n                style={{ '--progress': getOverallCompletionPercentage() }}\n              >\n                <svg>\n                  <defs>\n                    <linearGradient id=\"progressGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                      <stop offset=\"0%\" stopColor=\"#4f46e5\" />\n                      <stop offset=\"100%\" stopColor=\"#7c3aed\" />\n                    </linearGradient>\n                  </defs>\n                  <circle className=\"progress-circle progress-background\" cx=\"30\" cy=\"30\" r=\"26\" />\n                  <circle className=\"progress-circle progress-foreground\" cx=\"30\" cy=\"30\" r=\"26\" />\n                </svg>\n                <div\n                  style={{\n                    position: 'absolute',\n                    inset: 0,\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    fontSize: '12px',\n                    fontWeight: '600',\n                    color: '#1e293b'\n                  }}\n                >\n                  {getOverallCompletionPercentage()}%\n                </div>\n              </div>\n              <div style={{ textAlign: 'center', marginTop: 8 }}>\n                <Text style={{ fontSize: '11px', color: '#64748b' }}>Overall Progress</Text>\n              </div>\n            </div>\n\n            <div className=\"modern-stats-card\">\n              <div\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  marginBottom: 8\n                }}\n              >\n                <Badge\n                  count={queries.filter(q => q.status === 'OPEN').length}\n                  style={{\n                    backgroundColor:\n                      queries.filter(q => q.status === 'OPEN').length > 0 ? '#ef4444' : '#10b981'\n                  }}\n                >\n                  <Avatar\n                    icon={<QuestionCircleOutlined />}\n                    style={{\n                      backgroundColor:\n                        queries.filter(q => q.status === 'OPEN').length > 0 ? '#fef2f2' : '#f0fdf4',\n                      color:\n                        queries.filter(q => q.status === 'OPEN').length > 0 ? '#ef4444' : '#10b981'\n                    }}\n                  />\n                </Badge>\n              </div>\n              <Text\n                style={{\n                  fontSize: '11px',\n                  color: '#64748b',\n                  display: 'block',\n                  textAlign: 'center'\n                }}\n              >\n                Open Queries\n              </Text>\n            </div>\n\n            <div className=\"modern-stats-card\">\n              <div style={{ textAlign: 'center' }}>\n                <div\n                  className={`modern-completion-badge ${getOverallCompletionPercentage() >= 80\n                    ? 'high'\n                    : getOverallCompletionPercentage() >= 50\n                      ? 'medium'\n                      : 'low'\n                    }`}\n                >\n                  Step {currentStep + 1}/{questionnaireSteps.length}\n                </div>\n                <Text\n                  style={{ fontSize: '11px', color: '#64748b', display: 'block', marginTop: 4 }}\n                >\n                  Current Step\n                </Text>\n              </div>\n            </div>\n\n            {/* Header Actions */}\n            <Space>\n              <Button\n                className=\"modern-btn modern-btn-secondary\"\n                icon={<SaveOutlined />}\n                onClick={() => handleSaveDraft()}\n                loading={saving}\n                disabled={isReadOnly}\n              >\n                {isReadOnly ? 'Read Only' : 'Save Draft'}\n              </Button>\n\n              {isMobile && (\n                <Button\n                  className=\"modern-btn modern-btn-secondary\"\n                  icon={<MenuOutlined />}\n                  onClick={() => setSidebarVisible(true)}\n                >\n                  Steps\n                </Button>\n              )}\n            </Space>\n          </div>\n        </div>\n      </div>\n\n      {/* Read-Only Alert */}\n      {isReadOnly && (\n        <Alert\n          message=\"Questionnaire Submitted\"\n          description=\"This questionnaire has been submitted and is now read-only. No further changes can be made.\"\n          type=\"info\"\n          showIcon\n          style={{ margin: '16px 0' }}\n          banner\n        />\n      )}\n\n      {/* Main Content */}\n      <div className=\"plant-questionnaire-main\">\n        {/* Sidebar - Steps Navigation */}\n        {!isMobile && (\n          <div className=\"plant-questionnaire-sidebar\">\n            <Card className=\"modern-steps-card\">\n              <div className=\"modern-steps-header\">\n                <Title level={4} style={{ margin: 0, color: '#1e293b' }}>\n                  Questionnaire Steps\n                </Title>\n                <Text type=\"secondary\" style={{ fontSize: '12px', display: 'block', marginBottom: '4px' }}>\n                  {completedSteps.size} of {questionnaireSteps.length} steps completed\n                </Text>\n                <Text type=\"secondary\" style={{ fontSize: '11px', display: 'block', marginTop: '2px' }}>\n                  {(() => {\n                    const fieldStats = getTotalFieldsPopulated();\n                    return `${fieldStats.populated} of ${fieldStats.total} fields populated`;\n                  })()}\n                </Text>\n              </div>\n\n              <div className=\"modern-steps-list\">\n                {questionnaireSteps.map((step, index) => {\n                  const stepStatus = getStepCompletionStatus(index);\n                  const hasOpenQueries = queries.some(\n                    q => q.stepNumber === index && q.status === 'OPEN'\n                  );\n                  const isActive = index === currentStep;\n                  const isCompleted = stepStatus.isComplete;\n\n                  return (\n                    <div\n                      key={index}\n                      className={`modern-step-item ${isActive ? 'active' : ''} ${isCompleted ? 'completed' : ''}`}\n                      onClick={() => handleStepChange(index)}\n                    >\n                      <div\n                        className={`step-completion-ring ${isCompleted ? 'completed' : ''}`}\n                        style={{\n                          '--completion-angle': `${(stepStatus.requiredCompleted / Math.max(stepStatus.required, 1)) * 360}deg`,\n                          background: isActive ? '#4f46e5' : isCompleted ? '#10b981' : '#f1f5f9',\n                          color: isActive || isCompleted ? 'white' : '#64748b'\n                        }}\n                      >\n                        {isCompleted ? (\n                          <CheckCircleOutlined />\n                        ) : hasOpenQueries ? (\n                          <ExclamationCircleOutlined />\n                        ) : (\n                          stepIcons[step.title] || <FileTextOutlined />\n                        )}\n                      </div>\n                      <div style={{ flex: 1, minWidth: 0 }}>\n                        <div style={{ fontWeight: isActive ? 600 : 400, color: '#1e293b' }}>\n                          {step.title}\n                        </div>\n                        <div style={{ fontSize: '12px', color: '#64748b', marginTop: 2 }}>\n                          {stepStatus.completed}/{stepStatus.total} fields (\n                          {stepStatus.requiredCompleted}/{stepStatus.required} required)\n                          {hasOpenQueries && (\n                            <Tag color=\"red\" size=\"small\" style={{ marginLeft: 4 }}>\n                              {\n                                queries.filter(q => q.stepNumber === index && q.status === 'OPEN')\n                                  .length\n                              }{' '}\n                              queries\n                            </Tag>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </Card>\n\n            {/* Material Context Panel */}\n            <div style={{ marginTop: 16 }}>\n              <MaterialContextPanel workflowData={workflowData} />\n            </div>\n          </div>\n        )}\n\n        {/* Main Form Content */}\n        <div className=\"plant-questionnaire-content\">\n          <Card className=\"modern-form-card\">\n            <div className=\"modern-form-header\">\n              <div>\n                <Title level={2} style={{ margin: 0, color: 'white' }}>\n                  {currentStepData.title}\n                </Title>\n                <Paragraph style={{ margin: '8px 0 0 0', color: 'rgba(255, 255, 255, 0.8)' }}>\n                  {currentStepData.description}\n                </Paragraph>\n              </div>\n\n              <div className=\"modern-progress-container\">\n                <Progress\n                  className=\"modern-progress\"\n                  percent={(() => {\n                    const status = getStepCompletionStatus(currentStep);\n                    return status.required > 0\n                      ? Math.round((status.requiredCompleted / status.required) * 100)\n                      : 100;\n                  })()}\n                  showInfo={false}\n                  strokeColor=\"rgba(255, 255, 255, 0.9)\"\n                  trailColor=\"rgba(255, 255, 255, 0.2)\"\n                />\n                <Text style={{ color: 'rgba(255, 255, 255, 0.8)', fontSize: '12px' }}>\n                  Step Progress:{' '}\n                  {(() => {\n                    const status = getStepCompletionStatus(currentStep);\n                    return `${status.requiredCompleted}/${status.required} required fields`;\n                  })()}\n                </Text>\n              </div>\n            </div>\n\n            {/* Offline Indicator */}\n            {isOffline && (\n              <Alert\n                className=\"modern-alert modern-alert-warning\"\n                message=\"Offline Mode\"\n                description=\"You are currently offline. Changes will be saved locally and synced when connection is restored.\"\n                type=\"warning\"\n                showIcon\n                style={{ margin: '16px 32px' }}\n                closable\n              />\n            )}\n\n\n\n            <div\n              className={`modern-form-content ${currentStep % 2 === 0 ? 'slide-in-from-right' : 'slide-in-from-left'}`}\n            >\n              <Form\n                form={form}\n                layout=\"vertical\"\n                onValuesChange={(changedValues, allValues) => {\n                  setFormData(prev => ({ ...prev, ...allValues }));\n                  setPendingChanges(true);\n                  _setProgressUpdateTrigger(prev => prev + 1);\n\n                  // Trigger completion status update\n                  setTimeout(() => {\n                    if (questionnaireSteps.length > 0) {\n                      const newCompletedSteps = new Set();\n\n                      questionnaireSteps.forEach((step, index) => {\n                        const stepFields = step.fields || [];\n\n                        // Filter out CQS auto-populated fields for step completion calculation\n                        const userEditableFields = stepFields.filter(field => !field.isCqsAutoPopulated && !field.disabled);\n                        const requiredFields = userEditableFields.filter(field => field.required);\n\n                        const completedRequiredFields = requiredFields.filter(field => {\n                          const value = allValues[field.name];\n                          if (Array.isArray(value)) {\n                            return value.length > 0;\n                          }\n                          return value && value !== '' && value !== null && value !== undefined;\n                        });\n\n                        // Mark step as complete based on field completion\n                        if (requiredFields.length > 0) {\n                          // If there are required fields, all must be completed\n                          if (completedRequiredFields.length === requiredFields.length) {\n                            newCompletedSteps.add(index);\n                          }\n                        } else {\n                          // If no required fields, mark complete if at least 50% of user-editable fields are filled\n                          const completedOptionalFields = userEditableFields.filter(field => {\n                            const value = allValues[field.name];\n                            if (Array.isArray(value)) {\n                              return value.length > 0;\n                            }\n                            return value && value !== '' && value !== null && value !== undefined;\n                          });\n\n                          const completionPercentage =\n                            userEditableFields.length > 0\n                              ? (completedOptionalFields.length / userEditableFields.length) * 100\n                              : 0;\n\n                          if (completionPercentage >= 50) {\n                            newCompletedSteps.add(index);\n                          }\n                        }\n                      });\n\n                      // Step completion updated on form change\n\n                      setCompletedSteps(newCompletedSteps);\n                    }\n                  }, 100); // Small delay to ensure form state is updated\n                }}\n              >\n                <Row gutter={[24, 24]}>\n                  {(currentStepData.fields || []).map((field, index) => (\n                    <Col\n                      key={field.name}\n                      xs={24}\n                      sm={field.type === 'textarea' ? 24 : 12}\n                      md={field.type === 'textarea' ? 24 : 12}\n                    >\n                      <div\n                        className={`modern-field-group ${field.required ? 'required' : ''} ${field.isCqsAutoPopulated ? 'cqs-populated' : ''} fade-in-up`}\n                        style={{ animationDelay: `${index * 0.1}s` }}\n                      >\n                        <div className=\"modern-field-header\">\n                          <div style={{ flex: 1, minWidth: 0 }}>{renderField(field)}</div>\n                          <div className=\"modern-field-actions\">\n                            {field.isCqsAutoPopulated && (\n                              <Tooltip title=\"CQS Auto-populated\">\n                                <div\n                                  style={{\n                                    background: 'linear-gradient(135deg, #10b981, #059669)',\n                                    color: 'white',\n                                    padding: '2px 6px',\n                                    borderRadius: '4px',\n                                    fontSize: '10px',\n                                    fontWeight: '500'\n                                  }}\n                                >\n                                  CQS\n                                </div>\n                              </Tooltip>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </Col>\n                  ))}\n                </Row>\n              </Form>\n            </div>\n\n            {/* Navigation */}\n            <div className=\"modern-navigation\">\n              <Button\n                className=\"modern-btn modern-btn-secondary\"\n                icon={<ArrowLeftOutlined />}\n                onClick={handlePrevious}\n                disabled={currentStep === 0}\n                style={{\n                  opacity: currentStep === 0 ? 0.5 : 1,\n                  cursor: currentStep === 0 ? 'not-allowed' : 'pointer'\n                }}\n              >\n                Previous\n              </Button>\n\n              <div style={{ display: 'flex', alignItems: 'center', gap: 16 }}>\n                <div style={{ textAlign: 'center' }}>\n                  <Text type=\"secondary\" style={{ fontSize: '12px', display: 'block' }}>\n                    Step Progress\n                  </Text>\n                  <Text style={{ fontSize: '14px', fontWeight: '600', color: '#1e293b' }}>\n                    {currentStep + 1} of {questionnaireSteps.length}\n                  </Text>\n                </div>\n\n                {pendingChanges && (\n                  <div\n                    style={{\n                      padding: '4px 8px',\n                      background: '#fef3c7',\n                      border: '1px solid #fde68a',\n                      borderRadius: '6px',\n                      fontSize: '11px',\n                      color: '#92400e'\n                    }}\n                  >\n                    Unsaved changes\n                  </div>\n                )}\n\n\n\n                {currentStep === questionnaireSteps.length - 1 ? (\n                  <>\n                    <Button\n                      className={`modern-btn modern-btn-primary ${getOverallCompletionPercentage() === 100 ? 'pulse-glow' : ''}`}\n                      onClick={handleSubmit}\n                      loading={submitting}\n                      disabled={isReadOnly}\n                      size=\"large\"\n                      style={{ minWidth: '160px' }}\n                    >\n                      {isReadOnly ? 'Submitted' : submitting ? 'Submitting...' : 'Submit Questionnaire'}\n                    </Button>\n                    \n\n                  </>\n                ) : (\n                  <Button\n                    className=\"modern-btn modern-btn-primary\"\n                    icon={<ArrowRightOutlined />}\n                    onClick={handleNext}\n                    style={{ minWidth: '120px' }}\n                  >\n                    Next Step\n                  </Button>\n                )}\n              </div>\n            </div>\n          </Card>\n        </div>\n      </div>\n\n      {/* Mobile Sidebar Drawer */}\n      <Drawer\n        className=\"modern-drawer\"\n        title=\"Questionnaire Steps\"\n        placement=\"left\"\n        onClose={() => setSidebarVisible(false)}\n        open={sidebarVisible}\n        width={320}\n      >\n        <div className=\"modern-timeline\">\n          <Timeline>\n            {questionnaireSteps.map((step, index) => {\n              const stepStatus = getStepCompletionStatus(index);\n              const hasOpenQueries = queries.some(\n                q => q.stepNumber === index && q.status === 'OPEN'\n              );\n              const isActive = index === currentStep;\n              const isCompleted = stepStatus.isComplete;\n\n              return (\n                <Timeline.Item\n                  key={index}\n                  color={isCompleted ? '#10b981' : isActive ? '#667eea' : '#cbd5e1'}\n                  dot={\n                    isCompleted ? (\n                      <CheckCircleOutlined style={{ color: '#10b981' }} />\n                    ) : hasOpenQueries ? (\n                      <ExclamationCircleOutlined style={{ color: '#ef4444' }} />\n                    ) : (\n                      stepIcons[step.title] || <FileTextOutlined />\n                    )\n                  }\n                >\n                  <div\n                    onClick={() => {\n                      handleStepChange(index);\n                      setSidebarVisible(false);\n                    }}\n                    style={{ cursor: 'pointer', padding: '8px 0' }}\n                  >\n                    <Text strong={isActive} style={{ color: isActive ? '#667eea' : '#1e293b' }}>\n                      {step.title}\n                    </Text>\n                    <div style={{ fontSize: '12px', color: '#64748b', marginTop: 4 }}>\n                      {stepStatus.completed}/{stepStatus.total} fields completed (\n                      {stepStatus.requiredCompleted}/{stepStatus.required} required)\n                      {hasOpenQueries && (\n                        <Tag color=\"red\" size=\"small\" style={{ marginLeft: 4 }}>\n                          {\n                            queries.filter(q => q.stepNumber === index && q.status === 'OPEN')\n                              .length\n                          }{' '}\n                          queries\n                        </Tag>\n                      )}\n                    </div>\n                  </div>\n                </Timeline.Item>\n              );\n            })}\n          </Timeline>\n        </div>\n      </Drawer>\n\n      {/* Modern Floating Completion Indicator */}\n      {!isMobile && (\n        <div className=\"modern-floating-indicator\">\n          <div style={{ textAlign: 'center', marginBottom: 12 }}>\n            <Text strong style={{ color: '#1e293b', fontSize: '14px' }}>\n              Questionnaire Progress\n            </Text>\n          </div>\n          <div style={{ display: 'flex', alignItems: 'center', gap: 12, marginBottom: 8 }}>\n            <div\n              className=\"modern-progress-ring\"\n              style={{\n                '--progress': getOverallCompletionPercentage(),\n                width: '40px',\n                height: '40px'\n              }}\n            >\n              <svg>\n                <circle className=\"progress-circle progress-background\" cx=\"20\" cy=\"20\" r=\"16\" />\n                <circle className=\"progress-circle progress-foreground\" cx=\"20\" cy=\"20\" r=\"16\" />\n              </svg>\n              <div\n                style={{\n                  position: 'absolute',\n                  inset: 0,\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  fontSize: '10px',\n                  fontWeight: '600',\n                  color: '#1e293b'\n                }}\n              >\n                {getOverallCompletionPercentage()}%\n              </div>\n            </div>\n            <div>\n              <div style={{ fontSize: '12px', color: '#1e293b', fontWeight: '500', marginBottom: '4px' }}>\n                {completedSteps.size} of {questionnaireSteps.length} steps\n              </div>\n              <div style={{ fontSize: '11px', color: '#64748b', marginBottom: '2px' }}>\n                {(() => {\n                  const fieldStats = getTotalFieldsPopulated();\n                  return `${fieldStats.populated}/${fieldStats.total} fields`;\n                })()}\n              </div>\n              <div style={{ fontSize: '11px', color: '#64748b' }}>\n                {queries.filter(q => q.status === 'OPEN').length} open queries\n              </div>\n            </div>\n          </div>\n          <div\n            style={{\n              height: '2px',\n              background: '#e2e8f0',\n              borderRadius: '1px',\n              overflow: 'hidden'\n            }}\n          >\n            <div\n              style={{\n                height: '100%',\n                width: `${getOverallCompletionPercentage()}%`,\n                background: 'linear-gradient(135deg, #4f46e5, #7c3aed)',\n                transition: 'width 0.5s ease'\n              }}\n            />\n          </div>\n        </div>\n      )}\n\n      {/* Floating Action Buttons */}\n      <div className=\"modern-floating-actions\">\n        <FloatButton.Group\n          trigger=\"hover\"\n          type=\"primary\"\n          style={{ right: 24 }}\n          icon={<SettingOutlined />}\n        >\n          <FloatButton\n            icon={<SaveOutlined />}\n            tooltip={isReadOnly ? \"Read Only\" : \"Save Draft\"}\n            onClick={() => handleSaveDraft()}\n            disabled={isReadOnly}\n          />\n          <FloatButton\n            icon={<DashboardOutlined />}\n            tooltip=\"Summary\"\n            onClick={() => {\n              const summaryData = questionnaireSteps.map((step, index) => {\n                const status = getStepCompletionStatus(index);\n                const stepQueries = queries.filter(q => q.stepNumber === index);\n                return {\n                  step: index + 1,\n                  title: step.title,\n                  completed: status.requiredCompleted,\n                  required: status.required,\n                  percentage:\n                    status.required > 0\n                      ? Math.round((status.requiredCompleted / status.required) * 100)\n                      : 100,\n                  openQueries: stepQueries.filter(q => q.status === 'OPEN').length,\n                  resolvedQueries: stepQueries.filter(q => q.status === 'RESOLVED').length\n                };\n              });\n\n              Modal.info({\n                title: 'Questionnaire Summary',\n                width: 600,\n                content: (\n                  <div>\n                    <div style={{ marginBottom: 16 }}>\n                      <Text strong>Overall Progress: {getOverallCompletionPercentage()}%</Text>\n                    </div>\n                    {summaryData.map(step => (\n                      <div\n                        key={step.step}\n                        style={{\n                          marginBottom: 12,\n                          padding: '12px 16px',\n                          background:\n                            step.percentage === 100\n                              ? 'linear-gradient(135deg, #f0fdf4, #dcfce7)'\n                              : 'linear-gradient(135deg, #fffbeb, #fef3c7)',\n                          border: `1px solid ${step.percentage === 100 ? '#bbf7d0' : '#fde68a'}`,\n                          borderRadius: '8px'\n                        }}\n                      >\n                        <div\n                          style={{\n                            display: 'flex',\n                            justifyContent: 'space-between',\n                            alignItems: 'center'\n                          }}\n                        >\n                          <Text strong>\n                            Step {step.step}: {step.title}\n                          </Text>\n                          <Tag color={step.percentage === 100 ? 'green' : 'orange'}>\n                            {step.percentage}%\n                          </Tag>\n                        </div>\n                        <div style={{ fontSize: '12px', color: '#666', marginTop: 4 }}>\n                          {step.completed}/{step.required} required fields completed\n                          {step.openQueries > 0 && (\n                            <span style={{ color: '#ef4444', marginLeft: 8 }}>\n                              • {step.openQueries} open queries\n                            </span>\n                          )}\n                          {step.resolvedQueries > 0 && (\n                            <span style={{ color: '#10b981', marginLeft: 8 }}>\n                              • {step.resolvedQueries} resolved queries\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )\n              });\n            }}\n          />\n          <FloatButton\n            icon={autoSaveEnabled ? <CloudSyncOutlined /> : <DisconnectOutlined />}\n            tooltip={autoSaveEnabled ? 'Auto-save ON' : 'Auto-save OFF'}\n            onClick={() => setAutoSaveEnabled(!autoSaveEnabled)}\n          />\n        </FloatButton.Group>\n      </div>\n\n      {/* Query Raising Modal */}\n      <QueryRaisingModal\n        open={queryModalVisible}\n        onCancel={() => {\n          setQueryModalVisible(false);\n          setSelectedField(null);\n        }}\n        onSubmit={handleQueryCreated}\n        workflowId={workflowId}\n        fieldContext={selectedField}\n      />\n    </div>\n  );\n};\n\nexport default PlantQuestionnaire;\n","import { Typography, Button, Space, Modal, Select, message } from 'antd';\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport PlantErrorBoundary from '../components/ErrorBoundaries/PlantErrorBoundary';\nimport PlantDashboard from '../components/Plant/PlantDashboard';\nimport WorkflowTable from '../components/Plant/WorkflowTable';\nimport PlantQuestionnaire from '../components/PlantQuestionnaire';\nimport { PlantOnly } from '../components/RoleBasedComponent';\nimport { usePlantWorkflows } from '../hooks/usePlantWorkflows';\nimport { useRoleBasedAccess } from '../hooks/useRoleBasedAccess';\nimport { getCurrentUser, isAuthenticated } from '../services/auth';\nimport { masterDataAPI } from '../services/masterDataAPI';\nimport { userAPI } from '../services/userAPI';\nimport { workflowAPI } from '../services/workflowAPI';\n\nconst { Title } = Typography;\nconst { Option } = Select;\n\nconst PlantView = () => {\n  const [selectedWorkflow, setSelectedWorkflow] = useState(null);\n  const [questionnaireVisible, setQuestionnaireVisible] = useState(false);\n  const [currentPlant, setCurrentPlant] = useState(null);\n  const [userPlantData, setUserPlantData] = useState(null);\n  const [availablePlants, setAvailablePlants] = useState([]);\n\n  // Use role-based access control\n  const { isPlantUser, isAdmin, userPlants, primaryPlant, filterByPlantAccess } = useRoleBasedAccess();\n\n  // Use custom hooks for workflow management and filtering\n  const {\n    workflows,\n    loading,\n    error,\n    dashboardStats,\n    refreshWorkflows\n  } = usePlantWorkflows(currentPlant, userPlantData);\n\n\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    const fetchData = async () => {\n      try {\n        await loadUserPlantData(controller.signal);\n      } catch (error) {\n        if (!controller.signal.aborted) {\n          console.error('Error loading user plant data:', error);\n        }\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      controller.abort();\n    };\n  }, []);\n\n  const loadUserPlantData = async signal => {\n    try {\n      // Check if user is authenticated first\n      if (!isAuthenticated()) {\n        console.warn('User is not authenticated');\n        message.error('You are not logged in. Please log in to access the plant dashboard.');\n        return;\n      }\n\n      const currentUser = getCurrentUser();\n      if (!currentUser) {\n        console.warn('No current user found');\n        message.error('Unable to identify current user. Please log in again.');\n        return;\n      }\n\n      console.log('Loading plant data for user:', currentUser);\n\n      // Load user plant assignments and location master data in parallel\n      const [plantData, locations] = await Promise.all([\n        userAPI.getUserPlantAssignments(currentUser, { signal }),\n        masterDataAPI.getAllLocations({ signal })\n      ]);\n\n      console.log('User plant data received:', plantData);\n      console.log('Assigned plants:', plantData?.assignedPlants);\n      console.log('Primary plant:', plantData?.primaryPlant);\n      setUserPlantData(plantData);\n\n      // Set current plant to user's primary plant (or first assigned plant if no primary)\n      const effectivePlant = plantData.primaryPlant || (plantData.assignedPlants && plantData.assignedPlants[0]);\n      if (effectivePlant && plantData.assignedPlants && plantData.assignedPlants.includes(effectivePlant)) {\n        setCurrentPlant(effectivePlant);\n        localStorage.setItem('userPlant', effectivePlant);\n        console.log('Set current plant to primary/effective plant:', effectivePlant);\n      } else if (plantData.assignedPlants && plantData.assignedPlants.length > 0) {\n        // Fallback to first assigned plant if primary is not available\n        const firstPlant = plantData.assignedPlants[0];\n        setCurrentPlant(firstPlant);\n        localStorage.setItem('userPlant', firstPlant);\n        console.log('Set current plant to first assigned plant:', firstPlant);\n      }\n\n      // Update available plants to only show assigned plants with descriptions\n      if (plantData.assignedPlants && plantData.assignedPlants.length > 0) {\n        const plantOptions = plantData.assignedPlants.map(plantCode => {\n          const location = locations.find(loc => loc.locationCode === plantCode);\n          const isPrimary = plantCode === plantData.primaryPlant;\n          return {\n            value: plantCode,\n            label: location\n              ? `${plantCode} - ${location.description}${isPrimary ? ' (Primary)' : ''}`\n              : `${plantCode}${isPrimary ? ' (Primary)' : ''}`\n          };\n        });\n        setAvailablePlants(plantOptions);\n        console.log('Available plants set:', plantOptions);\n      }\n    } catch (error) {\n      console.error('Failed to load user plant data:', error);\n      // Set empty plant data to trigger the \"no assignments\" message\n      setUserPlantData({\n        assignedPlants: [],\n        primaryPlant: null,\n        effectivePlant: null,\n        isPlantUser: false\n      });\n      setAvailablePlants([]);\n      setCurrentPlant(null);\n      message.error('Unable to load plant assignments. Please contact administrator to assign plants to your user.');\n    }\n  };\n\n\n\n  const handlePlantChange = useCallback((newPlantCode) => {\n    // Validate that user is assigned to this plant\n    if (userPlantData && !userPlantData.assignedPlants.includes(newPlantCode)) {\n      message.error(`You are not assigned to plant: ${newPlantCode}`);\n      return;\n    }\n\n    localStorage.setItem('userPlant', newPlantCode);\n    setCurrentPlant(newPlantCode);\n    message.success(`Switched to plant: ${newPlantCode}`);\n  }, [userPlantData]);\n\n  const handleStartQuestionnaire = useCallback((workflow) => {\n    setSelectedWorkflow(workflow);\n    setQuestionnaireVisible(true);\n  }, []);\n\n  const handleQuestionnaireComplete = useCallback((_formData) => {\n    setQuestionnaireVisible(false);\n    setSelectedWorkflow(null);\n    refreshWorkflows(); // Refresh the list\n    message.success('Questionnaire completed successfully!');\n  }, [refreshWorkflows]);\n\n  const handleSaveDraft = useCallback((_formData) => {\n    message.success('Draft saved successfully');\n  }, []);\n\n\n\n  // Check if user is authenticated\n  if (!isAuthenticated()) {\n    return (\n      <PlantOnly>\n        <div style={{ padding: 24, textAlign: 'center' }}>\n          <Title level={3}>Authentication Required</Title>\n          <p>You need to be logged in to access the plant dashboard.</p>\n          <Button\n            type=\"primary\"\n            onClick={() => window.location.href = '/qrmfg/login'}\n          >\n            Go to Login\n          </Button>\n        </div>\n      </PlantOnly>\n    );\n  }\n\n  // Show loading state while plant data is being fetched\n  if (userPlantData === null) {\n    return (\n      <PlantOnly>\n        <div style={{ padding: 24, textAlign: 'center' }}>\n          <Title level={3}>Loading Plant Assignments...</Title>\n          <p>Please wait while we load your plant assignments.</p>\n        </div>\n      </PlantOnly>\n    );\n  }\n\n  // Show message if user has no plant assignments\n  if (userPlantData && (!userPlantData.assignedPlants || userPlantData.assignedPlants.length === 0)) {\n    return (\n      <PlantOnly>\n        <div style={{ padding: 24, textAlign: 'center' }}>\n          <Title level={3}>No Plant Assignments</Title>\n          <p>You are not assigned to any plants. Please contact your administrator to assign plants to your user account.</p>\n          <div style={{ marginTop: 16, padding: 16, background: '#f5f5f5', borderRadius: 4 }}>\n            <p><strong>Debug Info:</strong></p>\n            <p>Current User: {getCurrentUser()}</p>\n            <p>Is Authenticated: {isAuthenticated().toString()}</p>\n            <p>User Plant Data: {JSON.stringify(userPlantData, null, 2)}</p>\n            <Space>\n              <Button\n                onClick={() => {\n                  console.log('Current user:', getCurrentUser());\n                  console.log('User plant data:', userPlantData);\n                  console.log('Available plants:', availablePlants);\n                  loadUserPlantData();\n                }}\n              >\n                Debug & Retry\n              </Button>\n              <Button\n                type=\"primary\"\n                onClick={async () => {\n                  try {\n                    const currentUser = getCurrentUser();\n                    if (!currentUser) {\n                      message.error('No current user found');\n                      return;\n                    }\n\n                    // Try to fix the plant assignments by setting assignedPlants to match primaryPlant\n                    const primaryPlant = '1102'; // From the token validation response\n                    const assignedPlants = [primaryPlant];\n\n                    await userAPI.updateUserPlantAssignments(currentUser, {\n                      assignedPlants,\n                      primaryPlant\n                    });\n\n                    message.success('Plant assignments fixed! Please refresh the page or log out and log back in.');\n                    await loadUserPlantData();\n                  } catch (error) {\n                    console.error('Failed to assign plants:', error);\n                    if (error.status === 403) {\n                      message.error('You need admin permissions to assign plants. Please ask an administrator to assign plants to your user account.');\n                    } else {\n                      message.error(`Failed to assign plants: ${error.message}`);\n                    }\n                  }\n                }}\n              >\n                Fix Plant Assignments (Admin Required)\n              </Button>\n              <Button\n                onClick={() => {\n                  message.info('Logging out to refresh token...');\n                  localStorage.clear();\n                  sessionStorage.clear();\n                  window.location.href = '/qrmfg/login';\n                }}\n              >\n                Logout & Re-login\n              </Button>\n            </Space>\n          </div>\n        </div>\n      </PlantOnly>\n    );\n  }\n\n  return (\n    <PlantOnly>\n      <PlantErrorBoundary plantCode={currentPlant}>\n        <div style={{ padding: 24 }}>\n          {/* Header */}\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              marginBottom: 24\n            }}\n          >\n            <Title level={2} style={{ margin: 0 }}>\n              Plant Dashboard\n            </Title>\n            <div style={{ display: 'flex', alignItems: 'center', gap: 16 }}>\n              <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>\n                <span style={{ fontSize: '14px', fontWeight: '500' }}>Plant:</span>\n                <Select\n                  value={currentPlant}\n                  onChange={handlePlantChange}\n                  style={{ width: 250 }}\n                  size=\"small\"\n                  disabled={!userPlantData || availablePlants.length <= 1}\n                  showSearch\n                  filterOption={(input, option) =>\n                    option?.children?.toLowerCase().includes(input.toLowerCase())\n                  }\n                  placeholder=\"Select assigned plant\"\n                >\n                  {availablePlants.map(plant => (\n                    <Option key={plant.value} value={plant.value}>\n                      {plant.label}\n                    </Option>\n                  ))}\n                </Select>\n              </div>\n              <Space>\n                <Button onClick={refreshWorkflows} loading={loading}>\n                  Refresh Data\n                </Button>\n              </Space>\n            </div>\n          </div>\n\n          {/* Dashboard Statistics */}\n          {currentPlant ? (\n            <PlantDashboard\n              dashboardStats={dashboardStats}\n              loading={loading}\n              error={error}\n              currentPlant={currentPlant}\n              onRefresh={refreshWorkflows}\n            />\n          ) : (\n            <div style={{ textAlign: 'center', padding: '40px 0', color: '#999' }}>\n              <Title level={4}>Select a Plant</Title>\n              <p>Please select a plant from the dropdown above to view the dashboard and assigned materials.</p>\n            </div>\n          )}\n\n          {/* Filter Panel and Workflows Table - only show when plant is selected */}\n          {currentPlant && (\n            <>\n\n\n              <WorkflowTable\n                workflows={workflows}\n                loading={loading}\n                onStartQuestionnaire={handleStartQuestionnaire}\n                onRefresh={refreshWorkflows}\n              />\n            </>\n          )}\n\n          {/* Questionnaire Modal */}\n          <Modal\n            title={`Material Questionnaire - ${selectedWorkflow?.materialCode}`}\n            open={questionnaireVisible}\n            onCancel={() => {\n              setQuestionnaireVisible(false);\n              setSelectedWorkflow(null);\n            }}\n            footer={null}\n            width=\"95%\"\n            style={{ top: 20 }}\n            destroyOnClose\n          >\n            {selectedWorkflow && (\n              <PlantQuestionnaire\n                workflowId={selectedWorkflow.id}\n                onComplete={handleQuestionnaireComplete}\n                onSaveDraft={handleSaveDraft}\n              />\n            )}\n          </Modal>\n        </div>\n      </PlantErrorBoundary>\n    </PlantOnly>\n  );\n};\n\nexport default PlantView;\n","import { message } from 'antd';\nimport { useState, useEffect, useCallback } from 'react';\n\nimport { WORKFLOW_SPECIFIC_STATES, WORKFLOW_STATES } from '../constants';\nimport { getCurrentUser } from '../services/auth';\nimport { workflowAPI } from '../services/workflowAPI';\nimport { recalculateWorkflowProgress, getTemplateFieldCounts, calculateCorrectFieldCounts } from '../utils/questionnaireUtils';\n\n/**\n * Custom hook for managing plant workflow data and operations\n * Handles workflow fetching, state management, and dashboard statistics\n */\nexport const usePlantWorkflows = (currentPlant, userPlantData) => {\n  const [workflows, setWorkflows] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [dashboardStats, setDashboardStats] = useState({\n    totalWorkflows: 0,\n    completedCount: 0,\n    inProgressCount: 0,\n    draftCount: 0,\n    averageCompletion: 0,\n    completedToday: 0\n  });\n\n    /**\n   * Get current plant from localStorage or default\n   */\n    const getCurrentPlant = useCallback(() => {\n        const storedPlant = localStorage.getItem('userPlant');\n        const storedUser = localStorage.getItem('username');\n    \n        console.log('Plant detection:', {\n          storedPlant,\n          storedUser,\n          localStorage: Object.keys(localStorage)\n        });\n    \n        return storedPlant || '1102';\n      }, []);\n    \n\n  /**\n   * Load plant workflows with proper error handling and AbortController cleanup\n   */\n  const loadPlantWorkflows = useCallback(async (signal) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const plantCode = currentPlant || getCurrentPlant();\n\n      if (!plantCode) {\n        console.warn('No plant code available for loading workflows');\n        setWorkflows([]);\n        setDashboardStats({\n          totalWorkflows: 0,\n          completedCount: 0,\n          inProgressCount: 0,\n          draftCount: 0,\n          averageCompletion: 0,\n          completedToday: 0\n        });\n        return;\n      }\n\n      console.log('Loading workflows for plant:', plantCode);\n\n      let dashboardData;\n      let workflowsWithProgress = [];\n\n      try {\n        // Try to get plant dashboard data with progress information\n        dashboardData = await workflowAPI.getPlantDashboardData(plantCode, { signal });\n        console.log('Received dashboard data:', dashboardData);\n\n        // Transform the data to match the expected format and filter by current plant\n        workflowsWithProgress = dashboardData.workflows\n          .filter(workflow => workflow.plantCode === plantCode) // Only show workflows for current plant\n          .map(workflow => {\n            // Recalculate progress with correct field counts (excluding CQS auto-populated fields)\n            const correctedWorkflow = recalculateWorkflowProgress(workflow, workflow.plantInputs);\n            \n            // Determine the correct completion status based on actual progress\n            let completionStatus;\n            if (workflow.isSubmitted || correctedWorkflow.completionPercentage === 100) {\n              completionStatus = 'COMPLETED';\n            } else if (correctedWorkflow.completionPercentage > 0) {\n              completionStatus = 'IN_PROGRESS';\n            } else {\n              completionStatus = 'DRAFT';\n            }\n\n            return {\n              id: workflow.workflowId,\n              materialCode: workflow.materialCode,\n              plantCode: workflow.plantCode,\n              currentState: workflow.isSubmitted\n                ? WORKFLOW_STATES.COMPLETED\n                : WORKFLOW_SPECIFIC_STATES.PLANT_PENDING,\n              completionStatus,\n              completionPercentage: correctedWorkflow.completionPercentage,\n              totalFields: correctedWorkflow.totalFields,\n              completedFields: correctedWorkflow.completedFields,\n              requiredFields: workflow.requiredFields || 0,\n              completedRequiredFields: workflow.completedRequiredFields || 0,\n              lastModified: workflow.lastModified,\n              submittedAt: workflow.submittedAt,\n              submittedBy: workflow.submittedBy,\n              isSubmitted: workflow.isSubmitted,\n              isCompleted: workflow.isCompleted,\n              openQueries: workflow.openQueries || 0,\n              assignedPlant: workflow.plantCode,\n              materialName: workflow.materialName,\n              itemDescription: workflow.itemDescription\n            };\n          });\n      } catch (plantDataError) {\n        console.warn(\n          'Failed to load plant-specific data, falling back to regular workflows:',\n          plantDataError\n        );\n\n        // Fallback: Load workflows by plant directly\n        try {\n          const plantWorkflows = await workflowAPI.getWorkflowsByPlant(plantCode, { signal });\n          console.log('Fallback: Loaded plant workflows:', plantWorkflows);\n\n          // Add mock progress data to plant workflows and filter by current plant\n          const { totalFields } = getTemplateFieldCounts();\n          \n          workflowsWithProgress = plantWorkflows\n            .filter(workflow => {\n              const workflowPlant = workflow.plantCode || workflow.assignedPlant;\n              return workflowPlant === plantCode; // Only show workflows for current plant\n            })\n            .map(workflow => {\n              // Calculate progress if plant inputs are available\n              const plantInputs = workflow.plantInputs || workflow.plantData?.plantInputs || {};\n              const { completionPercentage, completedFields } = calculateCorrectFieldCounts(plantInputs);\n              \n              // Determine the correct completion status based on actual progress\n              let completionStatus;\n              const isSubmitted = workflow.isSubmitted || workflow.submittedAt;\n              if (isSubmitted || completionPercentage === 100) {\n                completionStatus = 'COMPLETED';\n              } else if (completionPercentage > 0) {\n                completionStatus = 'IN_PROGRESS';\n              } else {\n                completionStatus = 'DRAFT';\n              }\n\n              return {\n                id: workflow.id,\n                materialCode: workflow.materialCode,\n                plantCode: workflow.plantCode || workflow.assignedPlant,\n                currentState: workflow.currentState || workflow.state,\n                completionStatus,\n                completionPercentage,\n                totalFields, // Correct total fields (87 = 34 CQS + 53 plant)\n                completedFields,\n                requiredFields: 50, // Default required\n                completedRequiredFields: 0, // Default completed required\n                lastModified: workflow.lastModified,\n                submittedAt: workflow.submittedAt || null,\n                submittedBy: workflow.submittedBy || null,\n                isSubmitted,\n                isCompleted: workflow.isCompleted || false,\n                openQueries: workflow.openQueries || 0,\n                assignedPlant: workflow.plantCode || workflow.assignedPlant,\n                materialName: workflow.materialName,\n                itemDescription: workflow.itemDescription\n              };\n            });\n\n          console.log('Fallback: Processed workflows:', workflowsWithProgress);\n        } catch (fallbackError) {\n          console.error('Fallback also failed:', fallbackError);\n          workflowsWithProgress = [];\n        }\n\n        // Set default dashboard data for fallback\n        dashboardData = {\n          totalWorkflows: workflowsWithProgress.length,\n          completedCount: 0,\n          inProgressCount: 0,\n          draftCount: workflowsWithProgress.length,\n          averageCompletion: 0\n        };\n      }\n\n      setWorkflows(workflowsWithProgress);\n\n      // Set dashboard stats\n      setDashboardStats({\n        totalWorkflows: dashboardData.totalWorkflows || 0,\n        completedCount: dashboardData.completedCount || 0,\n        inProgressCount: dashboardData.inProgressCount || 0,\n        draftCount: dashboardData.draftCount || 0,\n        averageCompletion: dashboardData.averageCompletion || 0,\n        completedToday: 0 // TODO: Calculate from submittedAt dates\n      });\n    } catch (error) {\n      console.error('Failed to load plant workflows:', error);\n      setError(error.message);\n      message.error('Failed to load workflows');\n      setWorkflows([]);\n      setDashboardStats({\n        totalWorkflows: 0,\n        completedCount: 0,\n        inProgressCount: 0,\n        draftCount: 0,\n        averageCompletion: 0,\n        completedToday: 0\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [currentPlant, getCurrentPlant]);\n\n\n\n  /**\n   * Refresh workflows data\n   */\n  const refreshWorkflows = useCallback(async () => {\n    const controller = new AbortController();\n    await loadPlantWorkflows(controller.signal);\n  }, [loadPlantWorkflows]);\n\n\n  // Load workflows when plant or user data changes\n  useEffect(() => {\n    const controller = new AbortController();\n\n    const fetchWorkflows = async () => {\n      if (userPlantData && currentPlant) {\n        try {\n          await loadPlantWorkflows(controller.signal);\n        } catch (error) {\n          if (!controller.signal.aborted) {\n            console.error('Error loading plant workflows:', error);\n          }\n        }\n      } else {\n        // Clear workflows if no plant is selected\n        setWorkflows([]);\n        setDashboardStats({\n          totalWorkflows: 0,\n          completedCount: 0,\n          inProgressCount: 0,\n          draftCount: 0,\n          averageCompletion: 0,\n          completedToday: 0\n        });\n        setLoading(false);\n      }\n    };\n\n    fetchWorkflows();\n\n    return () => {\n      controller.abort();\n    };\n  }, [userPlantData, currentPlant, loadPlantWorkflows]);\n\n  return {\n    workflows,\n    loading,\n    error,\n    dashboardStats,\n    loadPlantWorkflows,\n    refreshWorkflows\n  };\n};"],"names":["useRoleBasedAccess","accessSummary","setAccessSummary","useState","loading","setLoading","error","setError","loadAccessSummary","useCallback","async","isAuthenticated","summary","RBACService","getUserAccessSummary","err","console","warn","fallbackSummary","getFallbackAccessSummary","useEffect","checkScreenAccess","hasScreenAccess","screenRoute","getFallbackScreenAccess","checkDataAccess","dataType","context","arguments","length","undefined","hasDataAccess","getFallbackDataAccess","checkPlantDataAccess","plantCode","hasPlantDataAccess","getFallbackPlantDataAccess","makeAccessDecision","resourceType","resourceId","action","getFallbackAccessDecision","filterByPlantAccess","data","plantExtractor","filterDataByPlantAccess","currentUser","getCurrentUser","primaryRole","getPrimaryRoleType","userPlants","getUserPlantCodes","primaryPlant","getPrimaryPlantCode","isAdmin","isJvcUser","isCqsUser","isTechUser","isPlantUser","isViewer","hasRole","role","hasAnyRole","roles","some","hasAllRoles","every","refresh","TextArea","Input","SecureInput","React","_ref","value","onChange","validationType","componentName","fieldName","onValidationChange","props","validateInput","useInputValidation","validationState","setValidationState","isValid","errors","wasModified","handleChange","e","inputValue","target","validation","SecurityAuditLogger","logXSSAttempt","sanitizedValue","message","warning","_jsx","status","title","join","SecureTextArea","_ref2","SecureForm","_ref3","children","onFinish","enableSecurityLogging","securityEvents","setSecurityEvents","handleFinish","sanitizedValues","securityIssues","Object","keys","values","forEach","key","originalValue","InputSanitizer","sanitizeText","push","field","substring","issue","events","getRecentEvents","slice","_jsxs","Form","validateTrigger","process","SecureFormItem","_ref4","name","rules","securityRules","baseRules","ValidationRules","username","email","password","projectCode","materialCode","text","richText","Item","displayName","calculateCorrectFieldCounts","plantInputs","totalFields","completedFields","fields","isCqsAutoPopulated","step","stepFields","completedStepFields","filter","Array","isArray","completionPercentage","Math","round","totalUserEditableFields","completedUserEditableFields","getTemplateFieldCounts","totalCqsFields","disabled","recalculateWorkflowProgress","workflow","backendCompletedFields","correctedCompletionPercentage","userAPI","getUserPlantAssignments","options","log","assignedPlants","effectivePlant","token","getToken","validationResponse","apiClient","post","plantCodes","valid","tokenError","possibleKeys","storedUserData","localStorage","getItem","sessionStorage","userData","JSON","parse","parseError","adminToken","_userDetails$users","get","users","find","user","adminError","updateUserPlantAssignments","plantData","put","encodeURIComponent","checkUserPlantAssignment","getUserById","id","getAllUsers","cacheTTL","getAllUsersRealTime","useCache","workflowAPI","getDashboardSummary","getOverdueWorkflows","dayThreshold","getRecentActivity","days","getWorkflowCountsByState","getWorkflowsByPlant","plantName","createWorkflow","workflowData","getWorkflow","updateWorkflow","deleteWorkflow","delete","transitionWorkflowState","newState","comment","extendWorkflow","extensionData","completeWorkflow","completionData","extendToMultiplePlantsSmartly","result","withRetry","documentReuse","totalReusedDocuments","reusedDocuments","reuseStrategy","sourceDescription","searchWorkflows","searchParams","getWorkflowsByState","state","getWorkflowsByUser","canTransitionTo","isReadyForCompletion","checkWorkflowExists","getWorkflowStats","timeRange","getCompletionRateByPlant","getWorkflowCompletionTrend","months","getPendingWorkflows","getWorkflowsWithOpenQueries","getCountByState","getOverdueCount","getWorkflowsWithOpenQueriesCount","getRecentlyCreated","getRecentlyCompleted","saveDraftResponses","workflowId","draftData","getDraftResponses","submitQuestionnaire","questionnaireData","getWorkflowDocuments","getAllWorkflowRelatedDocuments","exportWorkflowDocuments","includeQueryDocuments","download","searchUnifiedDocuments","getUnifiedDocumentInfo","getReusableDocuments","downloadDocument","documentId","uploadDocument","file","metadata","upload","stringify","fileName","uploadMultipleDocuments","files","results","success","successful","failed","totalFiles","successCount","failureCount","retryDocumentOperation","operationType","operationData","lastError","maxRetries","attempt","Error","delay","pow","Promise","resolve","setTimeout","finalAttempt","updateAllMaterialNamesFromProjectItemMaster","updateMaterialNameFromProjectItemMaster","getQuestionnaireTemplate","templateType","getCqsData","getQuestionnaireData","getQuestionnaireForEdit","getPlantSpecificData","getOrCreatePlantSpecificData","savePlantSpecificData","plantSpecificData","modifiedBy","saveDraftPlantResponses","submitPlantQuestionnaire","submissionData","getPlantQuestionnaireStats","_ref5","params","URLSearchParams","append","toString","getPlantDashboardData","initializeSamplePlantData","getDocumentReuseStats","validateDocumentReuse","getDocumentAuditLog","queryParams","handleDocumentError","operation","enhancedError","originalError","timestamp","Date","toISOString","userMessage","technicalMessage","recoveryActions","retryable","type","masterDataAPI","getAllLocations","fallbackError","simpleError","getLocationByCode","locationCode","searchLocations","searchTerm","createLocation","locationData","updateLocation","deleteLocation","getAllProjectItems","getItemsByProject","getProjectsByItem","itemCode","getAllProjectCodes","getAllItemCodes","getItemCodesByProject","testLocationMaster","testSimpleLocation","diagnosticLocationMaster","getSimpleLocationCount","RouteErrorBoundary","routeName","errorContext","feature","level","PlantDashboard","dashboardStats","currentPlant","onRefresh","getProgressColor","useMemo","percentage","completionStats","totalWorkflows","completedCount","inProgressCount","draftCount","completionRate","inProgressRate","draftRate","getStatisticColor","total","inProgress","completed","average","Alert","description","showIcon","style","marginBottom","onClick","border","background","color","cursor","Row","gutter","Col","xs","sm","md","lg","Card","Statistic","prefix","ClockCircleOutlined","valueStyle","ExclamationCircleOutlined","CheckCircleOutlined","averageCompletion","suffix","BarChartOutlined","size","Progress","percent","strokeColor","format","textAlign","marginTop","fontSize","defaultProps","WorkflowTable","workflows","onStartQuestionnaire","getStatusColor","DRAFT","IN_PROGRESS","COMPLETED","getCompletionColor","getDaysInState","lastModified","now","modified","diffTime","abs","ceil","handleStartQuestionnaire","columns","dataIndex","width","sorter","a","b","localeCompare","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","padding","placeholder","onPressEnter","display","Space","Button","icon","SearchOutlined","filterIcon","filtered","onFilter","record","toLowerCase","includes","render","fontWeight","materialName","itemDescription","Tag","filters","completionStatus","replace","_","openQueries","count","FormOutlined","isSubmitted","getRowClassName","paginationConfig","pageSize","PAGINATION","DEFAULT_PAGE_SIZE","showSizeChanger","showQuickJumper","showTotal","range","pageSizeOptions","_Fragment","Table","dataSource","rowKey","pagination","rowClassName","scroll","x","bordered","justifyContent","alignItems","Text","Title","Typography","CqsFieldDisplay","_cqsData$cqsData","cqsData","cqsFieldMapping","showDetails","compact","cqsValue","hasValue","label","config","InfoCircleOutlined","Tooltip","borderRadius","strong","className","align","flex","direction","italic","Panel","Collapse","jvcDocuments","setJvcDocuments","expanded","setExpanded","loadJvcDocuments","documents","formatDate","dateString","toLocaleDateString","year","month","day","hour","minute","height","daysInCurrentState","calculateDaysInState","isOverdue","Badge","position","top","activeKey","ghost","header","FileTextOutlined","Descriptions","column","assignedPlant","TeamOutlined","initiatedBy","CalendarOutlined","createdAt","WarningOutlined","JVC_PENDING","PLANT_PENDING","CQS_PENDING","TECH_PENDING","getStateName","totalQueries","Spin","map","doc","index","_doc$fileType","styles","body","originalFileName","documentSource","fileType","toUpperCase","fileSize","toFixed","uploadedBy","DownloadOutlined","filename","blob","url","window","URL","createObjectURL","link","document","createElement","href","appendChild","click","removeChild","revokeObjectURL","handleDocumentDownload","materialCategory","supplierName","supplierCode","supplierContact","purchaseOrder","quantityOrdered","expectedDelivery","expectedUsage","applicationArea","processRequirements","backgroundColor","regulatoryRequirements","specialInstructions","urgencyLevel","businessImpact","costCenter","jvcNotes","whiteSpace","knownProperties","entries","str","Divider","margin","specifications","String","safetyNotes","Option","Select","open","visible","onCancel","onSubmit","fieldContext","form","useForm","uploadedDocuments","setUploadedDocuments","createdQueryId","setCreatedQueryId","handleCancel","resetFields","getPriorityColor","priority","LOW","MEDIUM","HIGH","URGENT","Modal","QuestionCircleOutlined","footer","documentMessage","queryToReturn","submit","destroyOnClose","stepTitle","layout","queryData","question","assignedTeam","priorityLevel","stepNumber","queryCategory","category","createdQuery","queryAPI","createQuery","initialValues","_fieldContext$stepTit","_fieldContext$label","fieldLabel","cqsScore","keyword","techScore","jvcScore","maxScore","max","primaryTeam","confidence","CQS","TECH","JVC","getRecommendedTeam","required","help","showSearch","optionFilterProp","filterOption","input","option","indexOf","allowClear","Radio","marginLeft","rows","showCount","maxLength","QueryDocumentUpload","queryId","onUploadComplete","prev","maxFiles","items","PaperClipOutlined","paddingLeft","Paragraph","onComplete","onSaveDraft","currentStep","setCurrentStep","saving","setSaving","submitting","setSubmitting","setWorkflowData","formData","setFormData","completedSteps","setCompletedSteps","Set","queryModalVisible","setQueryModalVisible","selectedField","setSelectedField","queries","setQueries","autoSaveEnabled","setAutoSaveEnabled","isOffline","setIsOffline","navigator","onLine","pendingChanges","setPendingChanges","sidebarVisible","setSidebarVisible","isReadOnly","setIsReadOnly","_progressUpdateTrigger","_setProgressUpdateTrigger","isMobile","useResponsive","screenSize","setScreenSize","innerWidth","UI_CONFIG","MOBILE_BREAKPOINT","isTablet","TABLET_BREAKPOINT","isDesktop","handleResize","addEventListener","removeEventListener","questionnaireSteps","setQuestionnaireSteps","templateLoading","setTemplateLoading","_cqsData","setCqsData","_plantSpecificData","setPlantSpecificData","cqsFormData","setCqsFormData","stepIcons","General","Physical","ExperimentOutlined","FireOutlined","Toxicity","SafetyOutlined","BookOutlined","PPE","MedicineBoxOutlined","Statutory","Others","SettingOutlined","Safety","Environmental","BulbOutlined","Quality","RocketOutlined","loadQuestionnaireTemplate","_cqsResponse2","getDefaultTemplate","template","steps","cqsResponse","processedSteps","_cqsResponse","isCqsField","cqsAutoPopulated","extractedCqsFormData","flatMap","f","setFieldsValue","mergedFormData","getOverallCompletionPercentage","currentFormValues","getFieldsValue","currentData","_index","finalValue","loadPlantSpecificData","submittedAt","info","handleSaveDraft","silent","currentValues","updatedFormData","validatedFormData","draftKey","from","version","lastSyncAttempt","syncStatus","sessionId","setItem","localStorageError","responses","responseCount","response","hasChanges","savedFields","serverError","handleNext","handlePrevious","handleStepChange","getTotalFieldsPopulated","populated","populatedFields","populatedStepFields","handleOnline","notification","WifiOutlined","duration","handleOffline","DisconnectOutlined","handleKeyDown","event","ctrlKey","metaKey","preventDefault","content","loadWorkflowData","initialData","existingData","fieldValue","add","prevFormData","mergedData","loadQueries","workflowQueries","getQueriesByWorkflow","autoSaveTimer","AUTO_SAVE","INTERVAL","clearTimeout","debouncedSaveTimer","DEBOUNCE_DELAY","mergedValues","newCompletedSteps","userEditableFields","requiredFields","completedRequiredFields","completedOptionalFields","recoverDraftData","savedDraft","draftTimestamp","currentTime","draftMaterial","currentMaterial","draftPlant","removeItem","recoveredFields","draftAge","placement","removeError","getStepCompletionStatus","stepIndex","optional","requiredCompleted","optionalCompleted","isComplete","hasOpenQueries","hasResolvedQueries","openQueriesCount","resolvedQueriesCount","requiredCompletionPercentage","optionalFields","stepQueries","q","resolvedQueries","scrollToResolvedQuery","fieldElement","querySelector","scrollIntoView","behavior","block","inline","transition","resolvedQueriesInCurrentStep","hasBeenViewed","latestResolvedQuery","sort","resolvedAt","proceedWithSubmission","allRequiredFields","validateFields","finalData","okText","cancelText","onOk","submittedBy","submitResult","location","reload","renderField","_field$options2","_field$options3","_field$options4","fieldQueries","hasOpenQuery","hasResolvedQuery","resolvedQuery","isFieldCompleted","gap","flexWrap","minWidth","lineHeight","flexShrink","currentValue","getFieldValue","materialContext","materialType","handleRaiseQuery","validationRules","pattern","min","getFieldValidationRules","helpContent","resolvedBy","msds_available","cas_available","is_corrosive","highly_toxic","flash_point_65","petroleum_class","ld50_oral","ld50_dermal","lc50_inhalation","carcinogenic","recommended_ppe","is_poisonous","cmvr_listed","msihc_listed","factories_act_listed","getFieldHelpText","commonProps","_field$options","_field$options$find","displayValue","opt","fontStyle","isDisabled","inputProps","autoSize","minRows","maxRows","valuePropName","Checkbox","Group","flexDirection","minHeight","boxShadow","maxWidth","overflow","animation","currentStepData","Avatar","DashboardOutlined","x1","y1","x2","y2","offset","stopColor","cx","cy","r","inset","SaveOutlined","MenuOutlined","banner","fieldStats","stepStatus","isActive","isCompleted","MaterialContextPanel","showInfo","trailColor","closable","onValuesChange","changedValues","allValues","animationDelay","ArrowLeftOutlined","opacity","ArrowRightOutlined","Drawer","onClose","Timeline","dot","FloatButton","trigger","right","tooltip","summaryData","CloudSyncOutlined","QueryRaisingModal","_queryData","PlantView","selectedWorkflow","setSelectedWorkflow","questionnaireVisible","setQuestionnaireVisible","setCurrentPlant","userPlantData","setUserPlantData","availablePlants","setAvailablePlants","refreshWorkflows","usePlantWorkflows","setWorkflows","setDashboardStats","completedToday","getCurrentPlant","storedPlant","storedUser","loadPlantWorkflows","dashboardData","workflowsWithProgress","signal","correctedWorkflow","currentState","WORKFLOW_STATES","WORKFLOW_SPECIFIC_STATES","plantDataError","plantWorkflows","_workflow$plantData","controller","AbortController","aborted","fetchWorkflows","abort","loadUserPlantData","fetchData","locations","all","firstPlant","plantOptions","loc","isPrimary","handlePlantChange","newPlantCode","handleQuestionnaireComplete","_formData","PlantOnly","PlantErrorBoundary","_option$children","plant","PlantQuestionnaire","clear"],"sourceRoot":""}