{"version":3,"file":"static/js/255.0c277492.chunk.js","mappings":"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","sources":["screens/WorkflowMonitoring.js"],"sourcesContent":["import {\n  BarChartOutlined,\n  DownloadOutlined,\n  ClockCircleOutlined,\n  CheckCircleOutlined,\n  ExclamationCircleOutlined,\n  QuestionCircleOutlined\n} from '@ant-design/icons';\nimport {\n  Row,\n  Col,\n  Card,\n  Statistic,\n  Table,\n  DatePicker,\n  Button,\n  Spin,\n  Tabs,\n  Typography,\n  message,\n  Progress\n} from 'antd';\nimport { Chart, registerables } from 'chart.js';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Bar, Line, Pie } from 'react-chartjs-2';\n\nimport apiClient from '../api/client';\nimport { monitoringAPI } from '../services/monitoringAPI';\n\n\n// Register Chart.js components\nChart.register(...registerables);\n\nconst { Title, Text } = Typography;\nconst { RangePicker } = DatePicker;\nconst { TabPane } = Tabs;\n// const { Option } = Select; // Not currently used\n\nconst WorkflowMonitoring = () => {\n  const [loading, setLoading] = useState(true);\n  const [dashboardData, setDashboardData] = useState(null);\n  const [dateRange, setDateRange] = useState([null, null]);\n  const [slaReport, setSlaReport] = useState(null);\n  const [slaLoading, setSlaLoading] = useState(false);\n  const [exportLoading, setExportLoading] = useState(false);\n  const [bottlenecks, setBottlenecks] = useState(null);\n  const [bottlenecksLoading, setBottlenecksLoading] = useState(false);\n  const [performanceMetrics, setPerformanceMetrics] = useState(null);\n  const [performanceLoading, setPerformanceLoading] = useState(false);\n\n  const fetchDashboardData = useCallback(async signal => {\n    setLoading(true);\n    try {\n      const response = await monitoringAPI.getWorkflowMetrics();\n      if (!signal?.aborted) {\n        setDashboardData(response);\n      }\n    } catch (error) {\n      if (!signal?.aborted) {\n        console.warn('Monitoring API not available, using mock data:', error);\n        // Provide mock data when API is not available\n        const mockData = {\n          totalWorkflows: 150,\n          activeWorkflows: 45,\n          completedWorkflows: 95,\n          overdueWorkflows: 10,\n          totalQueries: 320,\n          openQueries: 25,\n          overdueQueries: 8,\n          averageCompletionTimeHours: 24.5,\n          workflowsByState: {\n            'JVC_PENDING': 15,\n            'PLANT_PENDING': 12,\n            'CQS_PENDING': 8,\n            'TECH_PENDING': 10,\n            'COMPLETED': 95\n          },\n          workflowsByPlant: {\n            'Plant A': 45,\n            'Plant B': 38,\n            'Plant C': 42,\n            'Plant D': 25\n          },\n          recentActivity: {\n            '2025-08-01': 12,\n            '2025-08-02': 15,\n            '2025-08-03': 8,\n            '2025-08-04': 18,\n            '2025-08-05': 22,\n            '2025-08-06': 16,\n            '2025-08-07': 14,\n            '2025-08-08': 10\n          }\n        };\n        setDashboardData(mockData);\n      }\n    } finally {\n      if (!signal?.aborted) {\n        setLoading(false);\n      }\n    }\n  }, []);\n\n  const fetchSlaReport = async () => {\n    setSlaLoading(true);\n    try {\n      const response = await monitoringAPI.getQueryMetrics();\n      setSlaReport(response);\n    } catch (error) {\n      console.warn('Query metrics API not available, using mock data:', error);\n      // Provide mock SLA data\n      const mockSlaData = {\n        overallSlaCompliance: 87.5,\n        overallAverageResolutionTime: 18.2,\n        totalQueries: 320,\n        totalResolvedQueries: 280,\n        slaComplianceByTeam: {\n          'JVC Team': 92.3,\n          'Plant Team': 85.1,\n          'CQS Team': 89.7,\n          'Tech Team': 83.4\n        },\n        averageResolutionTimesByTeam: {\n          'JVC Team': 14.5,\n          'Plant Team': 22.1,\n          'CQS Team': 16.8,\n          'Tech Team': 19.3\n        },\n        totalQueriesByTeam: {\n          'JVC Team': 85,\n          'Plant Team': 92,\n          'CQS Team': 78,\n          'Tech Team': 65\n        },\n        resolvedQueriesByTeam: {\n          'JVC Team': 78,\n          'Plant Team': 78,\n          'CQS Team': 70,\n          'Tech Team': 54\n        },\n        overdueQueriesByTeam: {\n          'JVC Team': 3,\n          'Plant Team': 8,\n          'CQS Team': 4,\n          'Tech Team': 6\n        }\n      };\n      setSlaReport(mockSlaData);\n    } finally {\n      setSlaLoading(false);\n    }\n  };\n\n  const fetchBottlenecks = useCallback(async signal => {\n    setBottlenecksLoading(true);\n    try {\n      const response = await monitoringAPI.getWorkflowMetrics();\n      if (!signal?.aborted) {\n        setBottlenecks(response);\n      }\n    } catch (error) {\n      if (!signal?.aborted) {\n        console.warn('Bottlenecks API not available, using mock data:', error);\n        // Provide mock bottlenecks data\n        const mockBottlenecks = {\n          averageTimeInState: {\n            'JVC_PENDING': 16.5,\n            'PLANT_PENDING': 28.3,\n            'CQS_PENDING': 12.7,\n            'TECH_PENDING': 22.1,\n            'COMPLETED': 0\n          },\n          overdueByState: {\n            'JVC_PENDING': 3,\n            'PLANT_PENDING': 5,\n            'CQS_PENDING': 1,\n            'TECH_PENDING': 4\n          },\n          openQueriesByTeam: {\n            'JVC Team': 7,\n            'Plant Team': 14,\n            'CQS Team': 8,\n            'Tech Team': 11\n          },\n          delayedByPlant: {\n            'Plant A': 4,\n            'Plant B': 6,\n            'Plant C': 2,\n            'Plant D': 3\n          }\n        };\n        setBottlenecks(mockBottlenecks);\n      }\n    } finally {\n      if (!signal?.aborted) {\n        setBottlenecksLoading(false);\n      }\n    }\n  }, []);\n\n  const fetchPerformanceMetrics = useCallback(async signal => {\n    setPerformanceLoading(true);\n    try {\n      const response = await monitoringAPI.getDashboardPerformanceMetrics();\n      if (!signal?.aborted) {\n        setPerformanceMetrics(response);\n      }\n    } catch (error) {\n      if (!signal?.aborted) {\n        console.warn('Performance metrics API not available, using mock data:', error);\n        // Provide mock performance data\n        const mockPerformance = {\n          completionRate: 78.5,\n          averageCompletionTimeHours: 24.3,\n          queriesPerWorkflow: 2.1,\n          throughputByMonth: {\n            'Jan 2025': 45,\n            'Feb 2025': 52,\n            'Mar 2025': 48,\n            'Apr 2025': 61,\n            'May 2025': 55,\n            'Jun 2025': 58,\n            'Jul 2025': 63,\n            'Aug 2025': 42\n          }\n        };\n        setPerformanceMetrics(mockPerformance);\n      }\n    } finally {\n      if (!signal?.aborted) {\n        setPerformanceLoading(false);\n      }\n    }\n  }, []);\n  useEffect(() => {\n    const controller = new AbortController();\n\n    const fetchData = async () => {\n      try {\n        await Promise.all([\n          fetchDashboardData(controller.signal),\n          fetchBottlenecks(controller.signal),\n          fetchPerformanceMetrics(controller.signal)\n        ]);\n      } catch (error) {\n        if (!controller.signal.aborted) {\n          console.error('Error fetching workflow monitoring data:', error);\n        }\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      controller.abort();\n    };\n  }, [fetchDashboardData, fetchBottlenecks, fetchPerformanceMetrics]);\n\n  const handleDateRangeChange = dates => {\n    setDateRange(dates);\n  };\n\n  const handleApplyDateFilter = () => {\n    fetchSlaReport();\n    fetchPerformanceMetrics();\n  };\n\n  const handleExportAuditLogs = async () => {\n    setExportLoading(true);\n    try {\n      let url = '/admin/monitoring/audit-logs/export';\n      if (dateRange[0] && dateRange[1]) {\n        url += `?startDate=${dateRange[0].toISOString()}&endDate=${dateRange[1].toISOString()}`;\n      }\n\n      const response = await apiClient.get(url, { responseType: 'blob' });\n      const blob = response;\n\n      // Create a download link and trigger download\n      const downloadUrl = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      link.setAttribute('download', `audit-logs-${new Date().toISOString().split('T')[0]}.csv`);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n\n      message.success('Audit logs exported successfully');\n    } catch (error) {\n      message.error('Failed to export audit logs');\n      console.error('Error exporting audit logs:', error);\n    } finally {\n      setExportLoading(false);\n    }\n  };\n\n  const handleExportWorkflowReport = async (state = null) => {\n    setExportLoading(true);\n    try {\n      let url = '/admin/monitoring/workflows/export';\n      const params = [];\n\n      if (dateRange[0] && dateRange[1]) {\n        params.push(`startDate=${dateRange[0].toISOString()}`);\n        params.push(`endDate=${dateRange[1].toISOString()}`);\n      }\n\n      if (state) {\n        params.push(`state=${state}`);\n      }\n\n      if (params.length > 0) {\n        url += `?${params.join('&')}`;\n      }\n\n      const response = await apiClient.get(url, { responseType: 'blob' });\n      const blob = response;\n\n      // Create a download link and trigger download\n      const downloadUrl = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      link.setAttribute('download', `workflow-report-${new Date().toISOString().split('T')[0]}.csv`);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n\n      message.success('Workflow report exported successfully');\n    } catch (error) {\n      message.error('Failed to export workflow report');\n      console.error('Error exporting workflow report:', error);\n    } finally {\n      setExportLoading(false);\n    }\n  };\n\n  // Prepare chart data for workflow status distribution\n  const getWorkflowStatusChartData = () => {\n    if (!dashboardData || !dashboardData.workflowsByState) {\n      return null;\n    }\n\n    const labels = Object.keys(dashboardData.workflowsByState);\n    const data = Object.values(dashboardData.workflowsByState);\n\n    return {\n      labels,\n      datasets: [\n        {\n          label: 'Workflows by State',\n          data,\n          backgroundColor: [\n            'rgba(54, 162, 235, 0.6)',\n            'rgba(255, 206, 86, 0.6)',\n            'rgba(75, 192, 192, 0.6)',\n            'rgba(153, 102, 255, 0.6)',\n            'rgba(255, 159, 64, 0.6)'\n          ],\n          borderColor: [\n            'rgba(54, 162, 235, 1)',\n            'rgba(255, 206, 86, 1)',\n            'rgba(75, 192, 192, 1)',\n            'rgba(153, 102, 255, 1)',\n            'rgba(255, 159, 64, 1)'\n          ],\n          borderWidth: 1\n        }\n      ]\n    };\n  };\n\n  // Prepare chart data for SLA compliance\n  const getSlaComplianceChartData = () => {\n    if (!slaReport || !slaReport.slaComplianceByTeam) {\n      return null;\n    }\n\n    const labels = Object.keys(slaReport.slaComplianceByTeam);\n    const data = Object.values(slaReport.slaComplianceByTeam);\n\n    return {\n      labels,\n      datasets: [\n        {\n          label: 'SLA Compliance (%)',\n          data,\n          backgroundColor: 'rgba(75, 192, 192, 0.6)',\n          borderColor: 'rgba(75, 192, 192, 1)',\n          borderWidth: 1\n        }\n      ]\n    };\n  };\n\n  // Prepare chart data for resolution times\n  const getResolutionTimesChartData = () => {\n    if (!slaReport || !slaReport.averageResolutionTimesByTeam) {\n      return null;\n    }\n\n    const labels = Object.keys(slaReport.averageResolutionTimesByTeam);\n    const data = Object.values(slaReport.averageResolutionTimesByTeam);\n\n    return {\n      labels,\n      datasets: [\n        {\n          label: 'Average Resolution Time (hours)',\n          data,\n          backgroundColor: 'rgba(255, 159, 64, 0.6)',\n          borderColor: 'rgba(255, 159, 64, 1)',\n          borderWidth: 1\n        }\n      ]\n    };\n  };\n\n  // Prepare chart data for recent activity\n  const getRecentActivityChartData = () => {\n    if (!dashboardData || !dashboardData.recentActivity) {\n      return null;\n    }\n\n    const sortedDates = Object.keys(dashboardData.recentActivity).sort();\n    const data = sortedDates.map(date => dashboardData.recentActivity[date]);\n\n    return {\n      labels: sortedDates,\n      datasets: [\n        {\n          label: 'Workflow Activity',\n          data,\n          fill: false,\n          backgroundColor: 'rgba(54, 162, 235, 0.6)',\n          borderColor: 'rgba(54, 162, 235, 1)',\n          tension: 0.1\n        }\n      ]\n    };\n  };\n\n  // Render loading state\n  if (loading && !dashboardData) {\n    return (\n      <div style={{ textAlign: 'center', padding: '50px' }}>\n        <Spin size=\"large\" />\n        <p>Loading dashboard data...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <Title level={2}>Workflow Monitoring Dashboard</Title>\n\n      <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>\n        <Col span={24}>\n          <Card>\n            <Row gutter={16}>\n              <Col span={8}>\n                <RangePicker onChange={handleDateRangeChange} style={{ width: '100%' }} />\n              </Col>\n              <Col span={4}>\n                <Button type=\"primary\" onClick={handleApplyDateFilter}>\n                  Apply Filter\n                </Button>\n              </Col>\n              <Col span={12} style={{ textAlign: 'right' }}>\n                <Button\n                  icon={<DownloadOutlined />}\n                  onClick={handleExportAuditLogs}\n                  loading={exportLoading}\n                  style={{ marginRight: 8 }}\n                >\n                  Export Audit Logs\n                </Button>\n                <Button\n                  icon={<DownloadOutlined />}\n                  onClick={() => handleExportWorkflowReport()}\n                  loading={exportLoading}\n                >\n                  Export Workflow Report\n                </Button>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n      </Row>\n\n      <Row gutter={[16, 16]}>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Total Workflows\"\n              value={dashboardData?.totalWorkflows || 0}\n              prefix={<BarChartOutlined />}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Active Workflows\"\n              value={dashboardData?.activeWorkflows || 0}\n              prefix={<ClockCircleOutlined />}\n              valueStyle={{ color: '#1890ff' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Completed Workflows\"\n              value={dashboardData?.completedWorkflows || 0}\n              prefix={<CheckCircleOutlined />}\n              valueStyle={{ color: '#3f8600' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Overdue Workflows\"\n              value={dashboardData?.overdueWorkflows || 0}\n              prefix={<ExclamationCircleOutlined />}\n              valueStyle={{ color: '#cf1322' }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      <Row gutter={[16, 16]} style={{ marginTop: 16 }}>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Total Queries\"\n              value={dashboardData?.totalQueries || 0}\n              prefix={<QuestionCircleOutlined />}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Open Queries\"\n              value={dashboardData?.openQueries || 0}\n              valueStyle={{ color: '#1890ff' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Overdue Queries\"\n              value={dashboardData?.overdueQueries || 0}\n              valueStyle={{ color: '#cf1322' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Avg. Completion Time (hrs)\"\n              value={dashboardData?.averageCompletionTimeHours?.toFixed(1) || 0}\n              precision={1}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      <Tabs defaultActiveKey=\"1\" style={{ marginTop: 16 }}>\n        <TabPane tab=\"Workflow Status\" key=\"1\">\n          <Row gutter={[16, 16]}>\n            <Col span={12}>\n              <Card title=\"Workflow Status Distribution\">\n                {dashboardData && dashboardData.workflowsByState && (\n                  <Pie\n                    data={getWorkflowStatusChartData()}\n                    options={{ responsive: true, maintainAspectRatio: false }}\n                    height={300}\n                  />\n                )}\n              </Card>\n            </Col>\n            <Col span={12}>\n              <Card title=\"Recent Activity\">\n                {dashboardData && dashboardData.recentActivity && (\n                  <Line\n                    data={getRecentActivityChartData()}\n                    options={{ responsive: true, maintainAspectRatio: false }}\n                    height={300}\n                  />\n                )}\n              </Card>\n            </Col>\n          </Row>\n\n          <Row gutter={[16, 16]} style={{ marginTop: 16 }}>\n            <Col span={24}>\n              <Card title=\"Workflows by Plant\">\n                <Table\n                  dataSource={\n                    dashboardData && dashboardData.workflowsByPlant\n                      ? Object.entries(dashboardData.workflowsByPlant).map(([plant, count]) => ({\n                        key: plant,\n                        plant,\n                        count\n                      }))\n                      : []\n                  }\n                  columns={[\n                    { title: 'Plant', dataIndex: 'plant', key: 'plant' },\n                    { title: 'Workflow Count', dataIndex: 'count', key: 'count' }\n                  ]}\n                  pagination={false}\n                />\n              </Card>\n            </Col>\n          </Row>\n        </TabPane>\n\n        <TabPane tab=\"Query SLA Reports\" key=\"2\">\n          <Button\n            type=\"primary\"\n            onClick={fetchSlaReport}\n            loading={slaLoading}\n            style={{ marginBottom: 16 }}\n          >\n            Generate SLA Report\n          </Button>\n\n          {slaLoading ? (\n            <div style={{ textAlign: 'center', padding: '50px' }}>\n              <Spin />\n              <p>Generating SLA report...</p>\n            </div>\n          ) : slaReport ? (\n            <>\n              <Row gutter={[16, 16]}>\n                <Col span={8}>\n                  <Card>\n                    <Statistic\n                      title=\"Overall SLA Compliance\"\n                      value={slaReport.overallSlaCompliance.toFixed(1)}\n                      suffix=\"%\"\n                      precision={1}\n                    />\n                    <Progress\n                      percent={slaReport.overallSlaCompliance}\n                      status={slaReport.overallSlaCompliance >= 90 ? 'success' : 'active'}\n                    />\n                  </Card>\n                </Col>\n                <Col span={8}>\n                  <Card>\n                    <Statistic\n                      title=\"Average Resolution Time\"\n                      value={slaReport.overallAverageResolutionTime.toFixed(1)}\n                      suffix=\"hours\"\n                      precision={1}\n                    />\n                  </Card>\n                </Col>\n                <Col span={8}>\n                  <Card>\n                    <Statistic\n                      title=\"Resolution Rate\"\n                      value={(\n                        (slaReport.totalResolvedQueries / slaReport.totalQueries) *\n                        100\n                      ).toFixed(1)}\n                      suffix=\"%\"\n                      precision={1}\n                    />\n                  </Card>\n                </Col>\n              </Row>\n\n              <Row gutter={[16, 16]} style={{ marginTop: 16 }}>\n                <Col span={12}>\n                  <Card title=\"SLA Compliance by Team\">\n                    <Bar\n                      data={getSlaComplianceChartData()}\n                      options={{\n                        responsive: true,\n                        maintainAspectRatio: false,\n                        scales: {\n                          y: {\n                            beginAtZero: true,\n                            max: 100\n                          }\n                        }\n                      }}\n                      height={300}\n                    />\n                  </Card>\n                </Col>\n                <Col span={12}>\n                  <Card title=\"Average Resolution Times by Team\">\n                    <Bar\n                      data={getResolutionTimesChartData()}\n                      options={{\n                        responsive: true,\n                        maintainAspectRatio: false\n                      }}\n                      height={300}\n                    />\n                  </Card>\n                </Col>\n              </Row>\n\n              <Row gutter={[16, 16]} style={{ marginTop: 16 }}>\n                <Col span={24}>\n                  <Card title=\"Query Metrics by Team\">\n                    <Table\n                      dataSource={\n                        slaReport.totalQueriesByTeam\n                          ? Object.keys(slaReport.totalQueriesByTeam).map(team => ({\n                            key: team,\n                            team,\n                            total: slaReport.totalQueriesByTeam[team],\n                            resolved: slaReport.resolvedQueriesByTeam[team],\n                            overdue: slaReport.overdueQueriesByTeam[team],\n                            avgTime: slaReport.averageResolutionTimesByTeam[team]?.toFixed(1),\n                            compliance: slaReport.slaComplianceByTeam[team]?.toFixed(1)\n                          }))\n                          : []\n                      }\n                      columns={[\n                        { title: 'Team', dataIndex: 'team', key: 'team' },\n                        { title: 'Total Queries', dataIndex: 'total', key: 'total' },\n                        { title: 'Resolved', dataIndex: 'resolved', key: 'resolved' },\n                        { title: 'Overdue', dataIndex: 'overdue', key: 'overdue' },\n                        {\n                          title: 'Avg. Resolution Time (hrs)',\n                          dataIndex: 'avgTime',\n                          key: 'avgTime'\n                        },\n                        {\n                          title: 'SLA Compliance',\n                          dataIndex: 'compliance',\n                          key: 'compliance',\n                          render: text => `${text}%`\n                        }\n                      ]}\n                      pagination={false}\n                    />\n                  </Card>\n                </Col>\n              </Row>\n            </>\n          ) : (\n            <div style={{ textAlign: 'center', padding: '50px' }}>\n              <Text type=\"secondary\">Click \"Generate SLA Report\" to view query SLA metrics</Text>\n            </div>\n          )}\n        </TabPane>\n\n        <TabPane tab=\"Bottlenecks Analysis\" key=\"3\">\n          <Button\n            type=\"primary\"\n            onClick={() => fetchBottlenecks()}\n            loading={bottlenecksLoading}\n            style={{ marginBottom: 16 }}\n          >\n            Refresh Bottlenecks Analysis\n          </Button>\n\n          {bottlenecksLoading ? (\n            <div style={{ textAlign: 'center', padding: '50px' }}>\n              <Spin />\n              <p>Analyzing bottlenecks...</p>\n            </div>\n          ) : bottlenecks ? (\n            <>\n              <Row gutter={[16, 16]}>\n                <Col span={12}>\n                  <Card title=\"Average Time in Each State (hours)\">\n                    <Table\n                      dataSource={\n                        bottlenecks.averageTimeInState\n                          ? Object.entries(bottlenecks.averageTimeInState).map(\n                            ([state, hours]) => ({\n                              key: state,\n                              state,\n                              hours: hours.toFixed(1)\n                            })\n                          )\n                          : []\n                      }\n                      columns={[\n                        { title: 'Workflow State', dataIndex: 'state', key: 'state' },\n                        { title: 'Average Hours', dataIndex: 'hours', key: 'hours' }\n                      ]}\n                      pagination={false}\n                    />\n                  </Card>\n                </Col>\n                <Col span={12}>\n                  <Card title=\"Overdue Workflows by State\">\n                    <Table\n                      dataSource={\n                        bottlenecks.overdueByState\n                          ? Object.entries(bottlenecks.overdueByState).map(([state, count]) => ({\n                            key: state,\n                            state,\n                            count\n                          }))\n                          : []\n                      }\n                      columns={[\n                        { title: 'Workflow State', dataIndex: 'state', key: 'state' },\n                        { title: 'Overdue Count', dataIndex: 'count', key: 'count' }\n                      ]}\n                      pagination={false}\n                    />\n                  </Card>\n                </Col>\n              </Row>\n\n              <Row gutter={[16, 16]} style={{ marginTop: 16 }}>\n                <Col span={12}>\n                  <Card title=\"Open Queries by Team\">\n                    <Table\n                      dataSource={\n                        bottlenecks.openQueriesByTeam\n                          ? Object.entries(bottlenecks.openQueriesByTeam).map(([team, count]) => ({\n                            key: team,\n                            team,\n                            count\n                          }))\n                          : []\n                      }\n                      columns={[\n                        { title: 'Team', dataIndex: 'team', key: 'team' },\n                        { title: 'Open Queries', dataIndex: 'count', key: 'count' }\n                      ]}\n                      pagination={false}\n                    />\n                  </Card>\n                </Col>\n                <Col span={12}>\n                  <Card title=\"Delayed Workflows by Plant\">\n                    <Table\n                      dataSource={\n                        bottlenecks.delayedByPlant\n                          ? Object.entries(bottlenecks.delayedByPlant).map(([plant, count]) => ({\n                            key: plant,\n                            plant,\n                            count\n                          }))\n                          : []\n                      }\n                      columns={[\n                        { title: 'Plant', dataIndex: 'plant', key: 'plant' },\n                        { title: 'Delayed Count', dataIndex: 'count', key: 'count' }\n                      ]}\n                      pagination={false}\n                    />\n                  </Card>\n                </Col>\n              </Row>\n            </>\n          ) : (\n            <div style={{ textAlign: 'center', padding: '50px' }}>\n              <Text type=\"secondary\">\n                Click \"Refresh Bottlenecks Analysis\" to view workflow bottlenecks\n              </Text>\n            </div>\n          )}\n        </TabPane>\n\n        <TabPane tab=\"Performance Metrics\" key=\"4\">\n          <Button\n            type=\"primary\"\n            onClick={() => fetchPerformanceMetrics()}\n            loading={performanceLoading}\n            style={{ marginBottom: 16 }}\n          >\n            Refresh Performance Metrics\n          </Button>\n\n          {performanceLoading ? (\n            <div style={{ textAlign: 'center', padding: '50px' }}>\n              <Spin />\n              <p>Loading performance metrics...</p>\n            </div>\n          ) : performanceMetrics ? (\n            <>\n              <Row gutter={[16, 16]}>\n                <Col span={8}>\n                  <Card>\n                    <Statistic\n                      title=\"Completion Rate\"\n                      value={performanceMetrics.completionRate?.toFixed(1)}\n                      suffix=\"%\"\n                      precision={1}\n                    />\n                    <Progress\n                      percent={performanceMetrics.completionRate}\n                      status={performanceMetrics.completionRate >= 80 ? 'success' : 'active'}\n                    />\n                  </Card>\n                </Col>\n                <Col span={8}>\n                  <Card>\n                    <Statistic\n                      title=\"Average Completion Time\"\n                      value={performanceMetrics.averageCompletionTimeHours?.toFixed(1)}\n                      suffix=\"hours\"\n                      precision={1}\n                    />\n                  </Card>\n                </Col>\n                <Col span={8}>\n                  <Card>\n                    <Statistic\n                      title=\"Queries Per Workflow\"\n                      value={performanceMetrics.queriesPerWorkflow?.toFixed(1)}\n                      precision={1}\n                    />\n                  </Card>\n                </Col>\n              </Row>\n\n              <Row gutter={[16, 16]} style={{ marginTop: 16 }}>\n                <Col span={24}>\n                  <Card title=\"Monthly Workflow Throughput\">\n                    {performanceMetrics.throughputByMonth && (\n                      <Bar\n                        data={{\n                          labels: Object.keys(performanceMetrics.throughputByMonth),\n                          datasets: [\n                            {\n                              label: 'Completed Workflows',\n                              data: Object.values(performanceMetrics.throughputByMonth),\n                              backgroundColor: 'rgba(75, 192, 192, 0.6)',\n                              borderColor: 'rgba(75, 192, 192, 1)',\n                              borderWidth: 1\n                            }\n                          ]\n                        }}\n                        options={{\n                          responsive: true,\n                          maintainAspectRatio: false\n                        }}\n                        height={300}\n                      />\n                    )}\n                  </Card>\n                </Col>\n              </Row>\n            </>\n          ) : (\n            <div style={{ textAlign: 'center', padding: '50px' }}>\n              <Text type=\"secondary\">\n                Click \"Refresh Performance Metrics\" to view workflow performance data\n              </Text>\n            </div>\n          )}\n        </TabPane>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default WorkflowMonitoring;\n"],"names":["Chart","register","registerables","Title","Text","Typography","RangePicker","DatePicker","TabPane","Tabs","WorkflowMonitoring","_dashboardData$averag","_performanceMetrics$c","_performanceMetrics$a","_performanceMetrics$q","loading","setLoading","useState","dashboardData","setDashboardData","dateRange","setDateRange","slaReport","setSlaReport","slaLoading","setSlaLoading","exportLoading","setExportLoading","bottlenecks","setBottlenecks","bottlenecksLoading","setBottlenecksLoading","performanceMetrics","setPerformanceMetrics","performanceLoading","setPerformanceLoading","fetchDashboardData","useCallback","async","response","monitoringAPI","getWorkflowMetrics","signal","aborted","error","console","warn","totalWorkflows","activeWorkflows","completedWorkflows","overdueWorkflows","totalQueries","openQueries","overdueQueries","averageCompletionTimeHours","workflowsByState","workflowsByPlant","recentActivity","fetchSlaReport","getQueryMetrics","overallSlaCompliance","overallAverageResolutionTime","totalResolvedQueries","slaComplianceByTeam","averageResolutionTimesByTeam","totalQueriesByTeam","resolvedQueriesByTeam","overdueQueriesByTeam","fetchBottlenecks","averageTimeInState","overdueByState","openQueriesByTeam","delayedByPlant","fetchPerformanceMetrics","getDashboardPerformanceMetrics","completionRate","queriesPerWorkflow","throughputByMonth","useEffect","controller","AbortController","Promise","all","fetchData","abort","_jsxs","style","textAlign","padding","children","_jsx","Spin","size","level","Row","gutter","marginBottom","Col","span","Card","onChange","dates","width","Button","type","onClick","handleApplyDateFilter","icon","DownloadOutlined","url","toISOString","blob","apiClient","get","responseType","downloadUrl","window","URL","createObjectURL","link","document","createElement","href","setAttribute","Date","split","body","appendChild","click","remove","message","success","marginRight","state","arguments","length","undefined","params","push","join","handleExportWorkflowReport","Statistic","title","value","prefix","BarChartOutlined","ClockCircleOutlined","valueStyle","color","CheckCircleOutlined","ExclamationCircleOutlined","marginTop","QuestionCircleOutlined","toFixed","precision","defaultActiveKey","tab","Pie","data","getWorkflowStatusChartData","labels","Object","keys","datasets","label","values","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","height","Line","getRecentActivityChartData","sortedDates","sort","map","date","fill","tension","Table","dataSource","entries","_ref","plant","count","key","columns","dataIndex","pagination","_Fragment","suffix","Progress","percent","status","Bar","getSlaComplianceChartData","scales","y","beginAtZero","max","getResolutionTimesChartData","team","_slaReport$averageRes","_slaReport$slaComplia","total","resolved","overdue","avgTime","compliance","render","text","_ref2","hours","_ref3","_ref4","_ref5"],"sourceRoot":""}