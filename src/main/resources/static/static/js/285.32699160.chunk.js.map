{"version":3,"file":"static/js/285.32699160.chunk.js","mappings":"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","sources":["screens/TechView.js","hooks/useRoleBasedAccess.js","components/WorkflowDashboard.js"],"sourcesContent":["import {\n  MessageOutlined,\n  ClockCircleOutlined,\n  CheckCircleOutlined,\n  ExclamationCircleOutlined,\n  ReloadOutlined,\n  HistoryOutlined\n} from '@ant-design/icons';\nimport { Typography, Row, Col, Card, Statistic, Tabs, Alert, Space, Button } from 'antd';\nimport React, { useState, useEffect } from 'react';\n\nimport apiClient from '../api/client';\nimport QueryHistoryTracker from '../components/QueryHistoryTracker';\nimport QueryInbox from '../components/QueryInbox';\nimport { TechOnly } from '../components/RoleBasedComponent';\nimport WorkflowDashboard from '../components/WorkflowDashboard';\nimport { TEAM_NAMES } from '../constants';\nimport { useRoleBasedAccess } from '../hooks/useRoleBasedAccess';\n\nconst { Title } = Typography;\nconst { TabPane } = Tabs;\n\nconst TechView = () => {\n  const [queryStats, setQueryStats] = useState({\n    totalQueries: 0,\n    openQueries: 0,\n    resolvedToday: 0,\n    overdueQueries: 0,\n    avgResolutionTime: 0,\n    highPriorityQueries: 0\n  });\n\n  // Use role-based access control\n  const { isTechUser, isAdmin } = useRoleBasedAccess();\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    loadDashboardStats(controller.signal);\n\n    return () => {\n      controller.abort();\n    };\n  }, []);\n\n  const loadDashboardStats = async signal => {\n    try {\n      const [openCount, resolvedToday, overdueQueries, avgTime, highPriorityQueries] =\n        await Promise.all([\n          apiClient.get('/queries/stats/count-open/TECH', { signal }).catch(() => 0),\n          apiClient.get('/queries/stats/resolved-today', { signal }).catch(() => 0),\n          apiClient\n            .get('/queries/overdue', { signal })\n            .then(data =>\n              Array.isArray(data) ? data.filter(q => q.assignedTeam === TEAM_NAMES.TECH).length : 0\n            )\n            .catch(() => 0),\n          apiClient.get('/queries/stats/avg-resolution-time/TECH', { signal }).catch(() => 0),\n          apiClient\n            .get('/queries/high-priority', { signal })\n            .then(data =>\n              Array.isArray(data) ? data.filter(q => q.assignedTeam === TEAM_NAMES.TECH).length : 0\n            )\n            .catch(() => 0)\n        ]);\n\n      setQueryStats({\n        totalQueries: openCount + resolvedToday,\n        openQueries: openCount,\n        resolvedToday,\n        overdueQueries,\n        avgResolutionTime: avgTime,\n        highPriorityQueries\n      });\n    } catch (error) {\n      console.error('Failed to load dashboard stats:', error);\n    }\n  };\n\n  return (\n    <TechOnly>\n      <div style={{ padding: 24 }}>\n        <Title level={2}>Tech Dashboard</Title>\n\n      {/* Enhanced Quick Stats */}\n      <Row gutter={16} style={{ marginBottom: 16 }}>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Open Queries\"\n              value={queryStats.openQueries}\n              prefix={<MessageOutlined />}\n              valueStyle={{ color: '#cf1322' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Resolved Today\"\n              value={queryStats.resolvedToday}\n              prefix={<CheckCircleOutlined />}\n              valueStyle={{ color: '#3f8600' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Overdue\"\n              value={queryStats.overdueQueries}\n              prefix={<ExclamationCircleOutlined />}\n              valueStyle={{ color: queryStats.overdueQueries > 0 ? '#cf1322' : '#3f8600' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Avg Resolution\"\n              value={queryStats.avgResolutionTime}\n              precision={1}\n              suffix=\"hrs\"\n              prefix={<ClockCircleOutlined />}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Alerts for urgent items */}\n      {queryStats.overdueQueries > 0 && (\n        <Alert\n          message={`${queryStats.overdueQueries} queries are overdue (>3 days)`}\n          description=\"These queries require immediate attention to maintain SLA compliance.\"\n          type=\"error\"\n          showIcon\n          style={{ marginBottom: 16 }}\n          action={\n            <Button size=\"small\" danger>\n              View Overdue\n            </Button>\n          }\n        />\n      )}\n\n      {queryStats.highPriorityQueries > 0 && (\n        <Alert\n          message={`${queryStats.highPriorityQueries} high priority queries pending`}\n          description=\"These queries have been marked as high priority and need urgent resolution.\"\n          type=\"warning\"\n          showIcon\n          style={{ marginBottom: 16 }}\n          action={\n            <Button size=\"small\" type=\"primary\">\n              View High Priority\n            </Button>\n          }\n        />\n      )}\n\n      {/* Enhanced Main Content Tabs */}\n      <Tabs\n        defaultActiveKey=\"queries\"\n        size=\"large\"\n        tabBarExtraContent={\n          <Space>\n            <Button icon={<ReloadOutlined />} onClick={loadDashboardStats} size=\"small\">\n              Refresh Stats\n            </Button>\n          </Space>\n        }\n      >\n        <TabPane\n          tab={\n            <Space>\n              <MessageOutlined />\n              <span>Query Inbox</span>\n              {queryStats.openQueries > 0 && (\n                <span\n                  style={{\n                    background: '#ff4d4f',\n                    color: 'white',\n                    borderRadius: '10px',\n                    padding: '2px 6px',\n                    fontSize: '12px'\n                  }}\n                >\n                  {queryStats.openQueries}\n                </span>\n              )}\n            </Space>\n          }\n          key=\"queries\"\n        >\n          <QueryInbox team=\"TECH\" userRole=\"TECH_USER\" />\n        </TabPane>\n        <TabPane\n          tab={\n            <Space>\n              <ClockCircleOutlined />\n              <span>Workflow Dashboard</span>\n            </Space>\n          }\n          key=\"dashboard\"\n        >\n          <WorkflowDashboard userRole=\"TECH_USER\" />\n        </TabPane>\n        <TabPane\n          tab={\n            <Space>\n              <HistoryOutlined />\n              <span>Query History</span>\n            </Space>\n          }\n          key=\"history\"\n        >\n          <QueryHistoryTracker />\n        </TabPane>\n      </Tabs>\n      </div>\n    </TechOnly>\n  );\n};\n\nexport default TechView;\n","import { useState, useEffect, useCallback } from 'react';\n\nimport { \n  isAuthenticated, \n  isAdmin, \n  isJvcUser, \n  isCqsUser, \n  isTechUser, \n  isPlantUser, \n  isViewer,\n  hasRole,\n  getPrimaryRoleType,\n  getUserPlantCodes,\n  getPrimaryPlantCode,\n  getCurrentUser\n} from '../services/auth';\nimport RBACService from '../services/rbacService';\n\n/**\n * Custom hook for role-based access control\n * Provides reactive access to user roles and permissions\n */\nexport const useRoleBasedAccess = () => {\n  const [accessSummary, setAccessSummary] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Load user access summary\n  const loadAccessSummary = useCallback(async () => {\n    if (!isAuthenticated()) {\n      setAccessSummary(null);\n      setLoading(false);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const summary = await RBACService.getUserAccessSummary();\n      setAccessSummary(summary);\n    } catch (err) {\n      console.warn('Failed to load access summary, using fallback:', err);\n      setError(err);\n      \n      // Use fallback data\n      const fallbackSummary = RBACService.getFallbackAccessSummary();\n      setAccessSummary(fallbackSummary);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    loadAccessSummary();\n  }, [loadAccessSummary]);\n\n  // Check screen access\n  const checkScreenAccess = useCallback(async (screenRoute) => {\n    try {\n      return await RBACService.hasScreenAccess(screenRoute);\n    } catch (error) {\n      console.warn('Screen access check failed, using fallback:', error);\n      return RBACService.getFallbackScreenAccess(screenRoute);\n    }\n  }, []);\n\n  // Check data access\n  const checkDataAccess = useCallback(async (dataType, context = {}) => {\n    try {\n      return await RBACService.hasDataAccess(dataType, context);\n    } catch (error) {\n      console.warn('Data access check failed, using fallback:', error);\n      return RBACService.getFallbackDataAccess(dataType, context);\n    }\n  }, []);\n\n  // Check plant data access\n  const checkPlantDataAccess = useCallback(async (dataType, plantCode, context = {}) => {\n    try {\n      return await RBACService.hasPlantDataAccess(dataType, plantCode, context);\n    } catch (error) {\n      console.warn('Plant data access check failed, using fallback:', error);\n      return RBACService.getFallbackPlantDataAccess(dataType, plantCode, context);\n    }\n  }, []);\n\n  // Make access decision\n  const makeAccessDecision = useCallback(async (resourceType, resourceId, action, context = {}) => {\n    try {\n      return await RBACService.makeAccessDecision(resourceType, resourceId, action, context);\n    } catch (error) {\n      console.warn('Access decision failed, using fallback:', error);\n      return RBACService.getFallbackAccessDecision(resourceType, resourceId, action, context);\n    }\n  }, []);\n\n  // Filter data by plant access\n  const filterByPlantAccess = useCallback((data, plantExtractor) => {\n    return RBACService.filterDataByPlantAccess(data, plantExtractor);\n  }, []);\n\n  return {\n    // Loading states\n    loading,\n    error,\n    \n    // User info\n    isAuthenticated: isAuthenticated(),\n    currentUser: getCurrentUser(),\n    primaryRole: getPrimaryRoleType(),\n    userPlants: getUserPlantCodes(),\n    primaryPlant: getPrimaryPlantCode(),\n    \n    // Role checks\n    isAdmin: isAdmin(),\n    isJvcUser: isJvcUser(),\n    isCqsUser: isCqsUser(),\n    isTechUser: isTechUser(),\n    isPlantUser: isPlantUser(),\n    isViewer: isViewer(),\n    \n    // Access summary\n    accessSummary,\n    \n    // Helper functions\n    hasRole: (role) => hasRole(role),\n    hasAnyRole: (roles) => roles.some(role => hasRole(role)),\n    hasAllRoles: (roles) => roles.every(role => hasRole(role)),\n    \n    // Async access checks\n    checkScreenAccess,\n    checkDataAccess,\n    checkPlantDataAccess,\n    makeAccessDecision,\n    \n    // Data filtering\n    filterByPlantAccess,\n    \n    // Refresh function\n    refresh: loadAccessSummary\n  };\n};\n\n/**\n * Hook for checking specific screen access\n */\nexport const useScreenAccess = (screenRoute) => {\n  const [hasAccess, setHasAccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const checkAccess = async () => {\n      if (!isAuthenticated() || !screenRoute) {\n        setHasAccess(false);\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const access = await RBACService.hasScreenAccess(screenRoute);\n        setHasAccess(access);\n      } catch (err) {\n        console.warn('Screen access check failed:', err);\n        setError(err);\n        \n        // Use fallback\n        const fallbackAccess = RBACService.getFallbackScreenAccess(screenRoute);\n        setHasAccess(fallbackAccess);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAccess();\n  }, [screenRoute]);\n\n  return { hasAccess, loading, error };\n};\n\n/**\n * Hook for checking data access\n */\nexport const useDataAccess = (dataType, context = {}) => {\n  const [hasAccess, setHasAccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const checkAccess = async () => {\n      if (!isAuthenticated() || !dataType) {\n        setHasAccess(false);\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const access = await RBACService.hasDataAccess(dataType, context);\n        setHasAccess(access);\n      } catch (err) {\n        console.warn('Data access check failed:', err);\n        setError(err);\n        \n        // Use fallback\n        const fallbackAccess = RBACService.getFallbackDataAccess(dataType, context);\n        setHasAccess(fallbackAccess);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAccess();\n  }, [dataType, context]);\n\n  return { hasAccess, loading, error };\n};\n\n/**\n * Hook for plant-specific data filtering\n */\nexport const usePlantDataFilter = (data, plantExtractor) => {\n  const [filteredData, setFilteredData] = useState([]);\n\n  useEffect(() => {\n    if (!Array.isArray(data)) {\n      setFilteredData([]);\n      return;\n    }\n\n    const filtered = RBACService.filterDataByPlantAccess(data, plantExtractor);\n    setFilteredData(filtered);\n  }, [data, plantExtractor]);\n\n  return filteredData;\n};\n\nexport default useRoleBasedAccess;","import {\n  ClockCircleOutlined,\n  CheckCircleOutlined,\n  ExclamationCircleOutlined,\n  FileTextOutlined,\n  TeamOutlined,\n  CalendarOutlined\n} from '@ant-design/icons';\nimport { Card, Row, Col, Statistic, Table, Tag, Button, Space, Spin, Alert } from 'antd';\nimport React, { useState, useEffect } from 'react';\n\nimport { UI_CONFIG, PAGINATION } from '../constants';\nimport { workflowAPI } from '../services/workflowAPI';\n\n// Hook to detect screen size\nconst useResponsive = () => {\n  const [screenSize, setScreenSize] = useState({\n    isMobile: window.innerWidth <= UI_CONFIG.MOBILE_BREAKPOINT,\n    isTablet:\n      window.innerWidth > UI_CONFIG.MOBILE_BREAKPOINT &&\n      window.innerWidth <= UI_CONFIG.TABLET_BREAKPOINT,\n    isDesktop: window.innerWidth > UI_CONFIG.TABLET_BREAKPOINT\n  });\n\n  useEffect(() => {\n    const handleResize = () => {\n      setScreenSize({\n        isMobile: window.innerWidth <= UI_CONFIG.MOBILE_BREAKPOINT,\n        isTablet:\n          window.innerWidth > UI_CONFIG.MOBILE_BREAKPOINT &&\n          window.innerWidth <= UI_CONFIG.TABLET_BREAKPOINT,\n        isDesktop: window.innerWidth > UI_CONFIG.TABLET_BREAKPOINT\n      });\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return screenSize;\n};\n\nconst WorkflowDashboard = ({ onWorkflowSelect }) => {\n  const [loading, setLoading] = useState(true);\n  const [dashboardData, setDashboardData] = useState({\n    summary: {},\n    overdueWorkflows: [],\n    recentActivity: [],\n    workflowsByState: {}\n  });\n  const [error, setError] = useState(null);\n  const { isMobile } = useResponsive();\n\n  useEffect(() => {\n    loadDashboardData();\n  }, []);\n\n  const loadDashboardData = async () => {\n    try {\n      setLoading(true);\n      const [summary, overdue, recent, byState] = await Promise.all([\n        workflowAPI.getDashboardSummary(),\n        workflowAPI.getOverdueWorkflows(3),\n        workflowAPI.getRecentActivity(7),\n        workflowAPI.getWorkflowCountsByState()\n      ]);\n\n      setDashboardData({\n        summary,\n        overdueWorkflows: overdue,\n        recentActivity: recent,\n        workflowsByState: byState\n      });\n    } catch (err) {\n      setError('Failed to load dashboard data');\n      console.error('Dashboard error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStateColor = state => {\n    const colors = {\n      JVC_PENDING: 'blue',\n      PLANT_PENDING: 'orange',\n      CQS_PENDING: 'purple',\n      TECH_PENDING: 'cyan',\n      COMPLETED: 'green'\n    };\n    return colors[state] || 'default';\n  };\n\n  // Responsive column configuration\n  const getWorkflowColumns = () => {\n    const baseColumns = [\n      {\n        title: 'Material Code',\n        dataIndex: 'materialCode',\n        key: 'materialCode',\n        width: isMobile ? 120 : 140,\n        fixed: isMobile ? 'left' : false,\n        render: (text, record) => (\n          <div>\n            <div style={{ fontWeight: 'bold' }}>{text}</div>\n            {record.itemDescription && (\n              <div style={{ fontSize: '12px', color: '#666' }}>{record.itemDescription}</div>\n            )}\n          </div>\n        )\n      },\n\n      {\n        title: 'State',\n        dataIndex: 'currentState',\n        key: 'currentState',\n        width: isMobile ? 80 : 100,\n        render: state => (\n          <Tag color={getStateColor(state)} size={isMobile ? 'small' : 'default'}>\n            {isMobile ? state.split('_')[0] : state.replace('_', ' ')}\n          </Tag>\n        )\n      },\n      {\n        title: 'Plant',\n        dataIndex: 'assignedPlant',\n        key: 'assignedPlant',\n        width: 100,\n        responsive: ['lg']\n      },\n      {\n        title: 'Days',\n        dataIndex: 'daysPending',\n        key: 'daysPending',\n        width: isMobile ? 60 : 100,\n        render: days => <span style={{ color: days > 3 ? '#ff4d4f' : 'inherit' }}>{days}</span>\n      },\n      {\n        title: 'Queries',\n        key: 'queries',\n        width: isMobile ? 70 : 80,\n        responsive: ['sm'],\n        render: (_, record) => (\n          <span>\n            {record.openQueries > 0 && (\n              <Tag color=\"red\" size=\"small\">\n                {record.openQueries}\n              </Tag>\n            )}\n            {!isMobile && <small>{record.totalQueries} total</small>}\n          </span>\n        )\n      },\n      {\n        title: 'Actions',\n        key: 'actions',\n        width: isMobile ? 80 : 100,\n        fixed: isMobile ? 'right' : false,\n        render: (_, record) => (\n          <Space>\n            <Button\n              size=\"small\"\n              type=\"link\"\n              onClick={() => onWorkflowSelect && onWorkflowSelect(record.id)}\n            >\n              {isMobile ? 'View' : 'View'}\n            </Button>\n          </Space>\n        )\n      }\n    ];\n\n    return baseColumns;\n  };\n\n  if (loading) {\n    return (\n      <div style={{ textAlign: 'center', padding: '50px' }}>\n        <Spin size=\"large\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert\n        message=\"Error\"\n        description={error}\n        type=\"error\"\n        showIcon\n        action={\n          <Button size=\"small\" onClick={loadDashboardData}>\n            Retry\n          </Button>\n        }\n      />\n    );\n  }\n\n  return (\n    <div>\n      {/* Summary Statistics */}\n      <Row gutter={[16, 16]} style={{ marginBottom: 24 }} className=\"workflow-dashboard-stats\">\n        <Col xs={12} sm={12} md={6} lg={6}>\n          <Card>\n            <Statistic\n              title=\"Total Workflows\"\n              value={dashboardData.summary.totalWorkflows || 0}\n              prefix={<FileTextOutlined />}\n            />\n          </Card>\n        </Col>\n        <Col xs={12} sm={12} md={6} lg={6}>\n          <Card>\n            <Statistic\n              title=\"Active Workflows\"\n              value={dashboardData.summary.activeWorkflows || 0}\n              prefix={<ClockCircleOutlined />}\n              valueStyle={{ color: '#1890ff' }}\n            />\n          </Card>\n        </Col>\n        <Col xs={12} sm={12} md={6} lg={6}>\n          <Card>\n            <Statistic\n              title=\"Overdue\"\n              value={dashboardData.summary.overdueWorkflows || 0}\n              prefix={<ExclamationCircleOutlined />}\n              valueStyle={{ color: '#ff4d4f' }}\n            />\n          </Card>\n        </Col>\n        <Col xs={12} sm={12} md={6} lg={6}>\n          <Card>\n            <Statistic\n              title=\"Completed\"\n              value={dashboardData.summary.completedWorkflows || 0}\n              prefix={<CheckCircleOutlined />}\n              valueStyle={{ color: '#52c41a' }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Secondary Statistics */}\n      <Row gutter={[16, 16]} style={{ marginBottom: 24 }} className=\"workflow-dashboard-stats\">\n        <Col xs={24} sm={8} md={8} lg={8}>\n          <Card>\n            <Statistic\n              title=\"Open Queries\"\n              value={dashboardData.summary.openQueries || 0}\n              prefix={<TeamOutlined />}\n              valueStyle={{ color: '#fa8c16' }}\n            />\n          </Card>\n        </Col>\n        <Col xs={12} sm={8} md={8} lg={8}>\n          <Card>\n            <Statistic\n              title=\"Avg Resolution Time\"\n              value={Math.round(dashboardData.summary.avgResolutionTimeHours || 0)}\n              suffix={isMobile ? 'hrs' : 'hours'}\n              prefix={<CalendarOutlined />}\n            />\n          </Card>\n        </Col>\n        <Col xs={12} sm={8} md={8} lg={8}>\n          <Card>\n            <Statistic\n              title=\"Recent Workflows\"\n              value={dashboardData.summary.recentWorkflows || 0}\n              prefix={<FileTextOutlined />}\n              valueStyle={{ color: '#722ed1' }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Overdue Workflows */}\n      {dashboardData.overdueWorkflows.length > 0 && (\n        <Card\n          title=\"Overdue Workflows\"\n          style={{ marginBottom: 24 }}\n          extra={\n            <Button type=\"primary\" size=\"small\">\n              View All\n            </Button>\n          }\n        >\n          <Table\n            dataSource={dashboardData.overdueWorkflows}\n            columns={getWorkflowColumns()}\n            pagination={{ pageSize: PAGINATION.SMALL_PAGE_SIZE }}\n            size=\"small\"\n            rowKey=\"id\"\n            scroll={isMobile ? { x: 600 } : undefined}\n            className={isMobile ? 'workflow-table-mobile touch-friendly-table' : ''}\n          />\n        </Card>\n      )}\n\n      {/* Recent Activity */}\n      <Card\n        title=\"Recent Activity\"\n        extra={\n          <Button type=\"primary\" size=\"small\">\n            View All\n          </Button>\n        }\n      >\n        <Table\n          dataSource={dashboardData.recentActivity}\n          columns={getWorkflowColumns()}\n          pagination={{ pageSize: isMobile ? 5 : 10 }}\n          size=\"small\"\n          rowKey=\"id\"\n          scroll={isMobile ? { x: 600 } : undefined}\n          className={isMobile ? 'workflow-table-mobile touch-friendly-table' : ''}\n        />\n      </Card>\n    </div>\n  );\n};\n\nexport default WorkflowDashboard;\n"],"names":["Title","Typography","TabPane","Tabs","TechView","queryStats","setQueryStats","useState","totalQueries","openQueries","resolvedToday","overdueQueries","avgResolutionTime","highPriorityQueries","isTechUser","isAdmin","useRoleBasedAccess","useEffect","controller","AbortController","loadDashboardStats","signal","abort","async","openCount","avgTime","Promise","all","apiClient","get","catch","then","data","Array","isArray","filter","q","assignedTeam","TEAM_NAMES","TECH","length","error","console","_jsx","TechOnly","children","_jsxs","style","padding","level","Row","gutter","marginBottom","Col","span","Card","Statistic","title","value","prefix","MessageOutlined","valueStyle","color","CheckCircleOutlined","ExclamationCircleOutlined","precision","suffix","ClockCircleOutlined","Alert","message","description","type","showIcon","action","Button","size","danger","defaultActiveKey","tabBarExtraContent","Space","icon","ReloadOutlined","onClick","tab","background","borderRadius","fontSize","QueryInbox","team","userRole","WorkflowDashboard","HistoryOutlined","QueryHistoryTracker","accessSummary","setAccessSummary","loading","setLoading","setError","loadAccessSummary","useCallback","isAuthenticated","summary","RBACService","getUserAccessSummary","err","warn","fallbackSummary","getFallbackAccessSummary","checkScreenAccess","hasScreenAccess","screenRoute","getFallbackScreenAccess","checkDataAccess","dataType","context","arguments","undefined","hasDataAccess","getFallbackDataAccess","checkPlantDataAccess","plantCode","hasPlantDataAccess","getFallbackPlantDataAccess","makeAccessDecision","resourceType","resourceId","getFallbackAccessDecision","filterByPlantAccess","plantExtractor","filterDataByPlantAccess","currentUser","getCurrentUser","primaryRole","getPrimaryRoleType","userPlants","getUserPlantCodes","primaryPlant","getPrimaryPlantCode","isJvcUser","isCqsUser","isPlantUser","isViewer","hasRole","role","hasAnyRole","roles","some","hasAllRoles","every","refresh","_ref","onWorkflowSelect","dashboardData","setDashboardData","overdueWorkflows","recentActivity","workflowsByState","isMobile","useResponsive","screenSize","setScreenSize","window","innerWidth","UI_CONFIG","MOBILE_BREAKPOINT","isTablet","TABLET_BREAKPOINT","isDesktop","handleResize","addEventListener","removeEventListener","loadDashboardData","overdue","recent","byState","workflowAPI","getDashboardSummary","getOverdueWorkflows","getRecentActivity","getWorkflowCountsByState","getStateColor","state","JVC_PENDING","PLANT_PENDING","CQS_PENDING","TECH_PENDING","COMPLETED","getWorkflowColumns","dataIndex","key","width","fixed","render","text","record","fontWeight","itemDescription","Tag","split","replace","responsive","days","_","id","textAlign","Spin","className","xs","sm","md","lg","totalWorkflows","FileTextOutlined","activeWorkflows","completedWorkflows","TeamOutlined","Math","round","avgResolutionTimeHours","CalendarOutlined","recentWorkflows","extra","Table","dataSource","columns","pagination","pageSize","PAGINATION","SMALL_PAGE_SIZE","rowKey","scroll","x"],"sourceRoot":""}