{"version":3,"file":"static/js/426.427ef423.chunk.js","mappings":"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","sources":["services/documentAPI.js","services/projectAPI.js","components/SecureFileUpload.js","components/MaterialExtensionForm.js","components/DocumentUploadSection.js","components/PendingExtensionsListSimple.js","screens/JVCView.js"],"sourcesContent":["import apiClient from '../api/client';\nimport { FILE_SIZE } from '../constants';\n\nexport const documentAPI = {\n  // Document upload and management\n  uploadDocuments: (files, projectCode, materialCode, workflowId) => {\n    if (!workflowId) {\n      throw new Error('workflowId is required for document upload');\n    }\n\n    return apiClient.upload('/documents/upload', files, {\n      projectCode,\n      materialCode,\n      workflowId: workflowId.toString()\n    });\n  },\n\n  // Document reuse functionality\n  getReusableDocuments: (projectCode, materialCode, enhanced = true) =>\n    apiClient.get(\n      `/documents/reusable?projectCode=${encodeURIComponent(projectCode)}&materialCode=${encodeURIComponent(materialCode)}&enhanced=${enhanced}`\n    ),\n\n  reuseDocuments: (documentIds, workflowId, contextType = 'WORKFLOW') => {\n    const params = new URLSearchParams();\n    params.append('contextType', contextType);\n    params.append('workflowId', workflowId.toString());\n    \n    console.log('=== DOCUMENT REUSE API CALL ===');\n    console.log('Context Type:', contextType);\n    console.log('Workflow ID:', workflowId);\n    console.log('Document IDs:', documentIds);\n    console.log('URL:', `/documents/reuse?${params.toString()}`);\n    \n    return apiClient.post(`/documents/reuse?${params.toString()}`, {\n      workflowId,\n      documentIds\n    });\n  },\n\n  // Document access\n  downloadDocument: (documentId, workflowId = null) => {\n    const url = `/documents/${documentId}/download${workflowId ? `?workflowId=${workflowId}` : ''}`;\n    return apiClient.download(url);\n  },\n\n  getDocumentInfo: (documentId, enhanced = false) =>\n    apiClient.get(`/documents/${documentId}?enhanced=${enhanced}`),\n\n  getWorkflowDocuments: workflowId => apiClient.get(`/documents/workflow/${workflowId}`),\n\n  getDocumentAccessLogs: documentId => apiClient.get(`/documents/${documentId}/access-logs`),\n\n  getDocumentCount: workflowId => apiClient.get(`/documents/workflow/${workflowId}/count`),\n\n  // Document validation\n  validateFile: file => {\n    const validTypes = [\n      'application/pdf',\n      'application/msword',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'application/vnd.ms-excel',\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    ];\n\n    const maxSize = FILE_SIZE.MAX_UPLOAD_SIZE;\n\n    return {\n      isValidType: validTypes.includes(file.type),\n      isValidSize: file.size <= maxSize,\n      type: file.type,\n      size: file.size\n    };\n  },\n\n  // Server-side validation\n  validateFileOnServer: file => {\n    return apiClient.upload('/documents/validate', file);\n  },\n\n  // Delete document\n  deleteDocument: documentId => apiClient.delete(`/documents/${documentId}`),\n\n  // Unified document search\n  searchAllDocuments: (searchTerm, projectCode = null, materialCode = null, filters = {}) => {\n    const params = new URLSearchParams();\n    \n    if (searchTerm) params.append('searchTerm', searchTerm);\n    if (projectCode) params.append('projectCode', projectCode);\n    if (materialCode) params.append('materialCode', materialCode);\n    \n    // Add filter parameters\n    if (filters.documentSource) params.append('documentSource', filters.documentSource);\n    if (filters.fileType) params.append('fileType', filters.fileType);\n    if (filters.uploadedBy) params.append('uploadedBy', filters.uploadedBy);\n    if (filters.dateFrom) params.append('dateFrom', filters.dateFrom);\n    if (filters.dateTo) params.append('dateTo', filters.dateTo);\n    if (filters.sortBy) params.append('sortBy', filters.sortBy);\n    if (filters.sortOrder) params.append('sortOrder', filters.sortOrder);\n    \n    return apiClient.get(`/documents/search?${params.toString()}`);\n  },\n\n  // Enhanced unified document search with comprehensive results and metadata\n  searchAllDocumentsUnified: (searchTerm, projectCode, materialCode, sources = []) => {\n    const params = new URLSearchParams();\n    \n    if (searchTerm) params.append('searchTerm', searchTerm);\n    if (projectCode) params.append('projectCode', projectCode);\n    if (materialCode) params.append('materialCode', materialCode);\n    \n    // Add source filters\n    if (sources && sources.length > 0) {\n      sources.forEach(source => params.append('sources', source));\n    }\n    \n    return apiClient.get(`/documents/search/unified?${params.toString()}`);\n  },\n\n  // Get documents by source type\n  getDocumentsBySource: (documentSource, projectCode = null, materialCode = null) => {\n    const params = new URLSearchParams();\n    params.append('documentSource', documentSource);\n    \n    if (projectCode) params.append('projectCode', projectCode);\n    if (materialCode) params.append('materialCode', materialCode);\n    \n    return apiClient.get(`/documents/by-source?${params.toString()}`);\n  }\n};\n","import apiClient from '../api/client';\n\n/**\n * Project API service providing project and master data functionality\n * Migrated to use unified APIClient with standardized error handling\n *\n * @namespace projectAPI\n */\nexport const projectAPI = {\n  // Project dropdown data\n  /**\n   * Get all projects\n   * @returns {Promise<Array>} Array of project objects\n   */\n  getProjects: async () => {\n    try {\n      const projectCodes = await apiClient.get('/master-data/project-codes');\n      // Transform project codes into project objects with proper structure\n      return projectCodes.map(code => ({\n        value: code,\n        label: code,\n         code,\n        name: code\n      }));\n    } catch (error) {\n      console.error('Error fetching projects:', error);\n      return [];\n    }\n  },\n\n  /**\n   * Get materials for a specific project\n   * @param {string} projectCode - Project code\n   * @returns {Promise<Array>} Array of materials for the project\n   */\n  getMaterialsByProject: async projectCode => {\n    try {\n      const itemCodes = await apiClient.get(`/master-data/project-codes/${encodeURIComponent(projectCode)}/items`);\n      // Transform item codes into material objects with proper structure\n      return itemCodes.map(code => ({\n        value: code,\n        label: code,\n         code,\n        name: code\n      }));\n    } catch (error) {\n      console.error('Error fetching materials for project:', projectCode, error);\n      return [];\n    }\n  },\n\n  /**\n   * Get all plants\n   * @returns {Promise<Array>} Array of plant objects\n   */\n  getPlants: async () => {\n    try {\n      // Try the projects endpoint first (which has proper structure)\n      const plants = await apiClient.get('/projects/plants');\n      if (plants && plants.length > 0) {\n        return plants.map(plant => ({\n          value: plant.code || plant.id,\n          label: `${plant.code || plant.id} - ${plant.name}`,\n          code: plant.code || plant.id,\n          name: plant.name,\n          id: plant.id || plant.code\n        }));\n      }\n      \n      // Fallback to master-data endpoint if projects endpoint is empty\n      const locations = await apiClient.get('/master-data/locations');\n      return locations.map(location => ({\n        value: location.locationCode,\n        label: `${location.locationCode} - ${location.description}`,\n        code: location.locationCode,\n        name: location.description,\n        id: location.locationCode\n      }));\n    } catch (error) {\n      console.error('Error fetching plants:', error);\n      return [];\n    }\n  },\n\n  // Validation endpoints\n  /**\n   * Validate project code\n   * @param {string} projectCode - Project code to validate\n   * @returns {Promise<boolean>} True if project code is valid\n   */\n  validateProjectCode: projectCode =>\n    apiClient.get(`/projects/${encodeURIComponent(projectCode)}/validate`),\n\n  /**\n   * Validate material code for a project\n   * @param {string} projectCode - Project code\n   * @param {string} materialCode - Material code to validate\n   * @returns {Promise<boolean>} True if material code is valid for the project\n   */\n  validateMaterialCode: (projectCode, materialCode) =>\n    apiClient.get(\n      `/projects/${encodeURIComponent(projectCode)}/materials/${encodeURIComponent(materialCode)}/validate`\n    ),\n\n  /**\n   * Validate plant code\n   * @param {string} plantCode - Plant code to validate\n   * @returns {Promise<boolean>} True if plant code is valid\n   */\n  validatePlantCode: plantCode =>\n    apiClient.get(`/projects/plants/${encodeURIComponent(plantCode)}/validate`),\n\n\n\n  // Search endpoints\n  /**\n   * Search projects by term\n   * @param {string} searchTerm - Search term\n   * @returns {Promise<Array>} Array of matching projects\n   */\n  searchProjects: searchTerm =>\n    apiClient.get(`/projects/search?searchTerm=${encodeURIComponent(searchTerm)}`),\n\n  /**\n   * Search materials within a project\n   * @param {string} projectCode - Project code\n   * @param {string} searchTerm - Search term\n   * @returns {Promise<Array>} Array of matching materials\n   */\n  searchMaterials: (projectCode, searchTerm) =>\n    apiClient.get(\n      `/projects/${encodeURIComponent(projectCode)}/materials/search?searchTerm=${encodeURIComponent(searchTerm)}`\n    ),\n\n  /**\n   * Search plants by term\n   * @param {string} searchTerm - Search term\n   * @returns {Promise<Array>} Array of matching plants\n   */\n  searchPlants: searchTerm =>\n    apiClient.get(`/projects/plants/search?searchTerm=${encodeURIComponent(searchTerm)}`),\n\n\n\n  // Enhanced data endpoints\n  /**\n   * Get projects with material count\n   * @returns {Promise<Array>} Array of projects with material counts\n   */\n  getProjectsWithMaterialCount: () => apiClient.get('/projects/with-material-count'),\n\n\n\n  // Questionnaire templates\n  /**\n   * Get all questionnaire templates\n   * @returns {Promise<Array>} Array of questionnaire templates\n   */\n  getQuestionnaireTemplates: () => apiClient.get('/projects/questionnaire/templates'),\n\n  /**\n   * Get questionnaire steps\n   * @returns {Promise<Array>} Array of questionnaire steps\n   */\n  getQuestionnaireSteps: () => apiClient.get('/projects/questionnaire/steps'),\n\n  /**\n   * Get questionnaire templates by step\n   * @param {number} stepNumber - Step number\n   * @returns {Promise<Array>} Array of templates for the step\n   */\n  getQuestionnaireTemplatesByStep: stepNumber =>\n    apiClient.get(`/projects/questionnaire/steps/${stepNumber}`),\n\n  /**\n   * Get specific questionnaire template\n   * @param {string} templateId - Template ID\n   * @returns {Promise<Object>} Questionnaire template object\n   */\n  getQuestionnaireTemplate: templateId =>\n    apiClient.get(`/projects/questionnaire/questions/${templateId}`)\n};\n","/**\n * SecureFileUpload Component\n * \n * A secure file upload component with comprehensive validation including:\n * - File type validation\n * - File size validation\n * - Filename sanitization\n * - Malware scanning simulation\n * - Security audit logging\n * \n * @component\n * @since 1.0.0\n * @author QRMFG Security Team\n */\n\nimport { UploadOutlined, FileTextOutlined, SafetyCertificateOutlined } from '@ant-design/icons';\nimport { Upload, Button, message, Alert, Progress, List, Tag } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useState, useMemo } from 'react';\n\nimport { ValidationRules, SecurityAuditLogger, InputSanitizer } from '../utils/inputValidation';\n\nconst { Dragger } = Upload;\n\n/**\n * SecureFileUpload Component\n */\nconst SecureFileUpload = React.memo(({\n  fileList = [],\n  onChange,\n  maxFiles = 10,\n  maxSizeMB = 25,\n  allowedTypes = [\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'application/vnd.ms-excel',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    'text/plain'\n  ],\n  allowedExtensions = ['.pdf', '.doc', '.docx', '.xls', '.xlsx', '.txt'],\n  componentName = 'SecureFileUpload',\n  enableMalwareScan = true,\n  showSecurityInfo = true,\n  ...props\n}) => {\n  const [scanningFiles, setScanningFiles] = useState(new Set());\n  const [securityAlerts, setSecurityAlerts] = useState([]);\n\n  // File validation function\n  const validateFile = useCallback((file) => {\n    const validationResults = {\n      isValid: true,\n      errors: [],\n      warnings: []\n    };\n\n    // Validate file type\n    const typeValidation = ValidationRules.file.validateType(file, allowedTypes);\n    if (!typeValidation.isValid) {\n      validationResults.isValid = false;\n      validationResults.errors.push(typeValidation.message);\n    }\n\n    // Validate file size\n    const sizeValidation = ValidationRules.file.validateSize(file, maxSizeMB);\n    if (!sizeValidation.isValid) {\n      validationResults.isValid = false;\n      validationResults.errors.push(sizeValidation.message);\n    }\n\n    // Validate filename\n    const filenameValidation = ValidationRules.file.validateFilename(file.name);\n    if (!filenameValidation.isValid) {\n      validationResults.isValid = false;\n      validationResults.errors.push(filenameValidation.message);\n    }\n\n    // Check file extension\n    const fileExtension = file.name.toLowerCase().substring(file.name.lastIndexOf('.'));\n    if (!allowedExtensions.includes(fileExtension)) {\n      validationResults.isValid = false;\n      validationResults.errors.push(`File extension ${fileExtension} is not allowed`);\n    }\n\n    // Sanitize filename\n    const sanitizedFilename = InputSanitizer.sanitizeFilename(file.name);\n    if (sanitizedFilename !== file.name) {\n      validationResults.warnings.push('Filename was sanitized for security');\n      file.name = sanitizedFilename;\n    }\n\n    // Additional security checks\n    if (file.name.length > 255) {\n      validationResults.isValid = false;\n      validationResults.errors.push('Filename is too long');\n    }\n\n    // Check for suspicious patterns\n    const suspiciousPatterns = [\n      /\\.exe$/i,\n      /\\.bat$/i,\n      /\\.cmd$/i,\n      /\\.scr$/i,\n      /\\.vbs$/i,\n      /\\.js$/i,\n      /\\.jar$/i,\n      /\\.com$/i,\n      /\\.pif$/i\n    ];\n\n    const hasSuspiciousPattern = suspiciousPatterns.some(pattern => pattern.test(file.name));\n    if (hasSuspiciousPattern) {\n      validationResults.isValid = false;\n      validationResults.errors.push('File type is potentially dangerous');\n    }\n\n    return validationResults;\n  }, [allowedTypes, allowedExtensions, maxSizeMB]);\n\n  // Simulate malware scanning\n  const simulateMalwareScan = useCallback(async (file) => {\n    if (!enableMalwareScan) return { isClean: true };\n\n    return new Promise((resolve) => {\n      // Simulate scanning delay\n      setTimeout(() => {\n        // Simple heuristic checks\n        const suspiciousIndicators = [\n          file.size === 0, // Empty files\n          file.name.includes('..'), // Path traversal\n          file.name.toLowerCase().includes('virus'),\n          file.name.toLowerCase().includes('malware'),\n          file.name.toLowerCase().includes('trojan')\n        ];\n\n        const isClean = !suspiciousIndicators.some(indicator => indicator);\n\n        resolve({\n          isClean,\n          scanTime: Math.random() * 2000 + 500, // 0.5-2.5 seconds\n          threats: isClean ? [] : ['Suspicious file pattern detected']\n        });\n      }, Math.random() * 1000 + 500);\n    });\n  }, [enableMalwareScan]);\n\n  // Handle file upload - just validate, don't actually upload here\n  const handleUpload = useCallback(async (options) => {\n    const { file, onSuccess, onError } = options;\n\n    try {\n      // Validate file\n      const validation = validateFile(file);\n\n      if (!validation.isValid) {\n        const errorMessage = validation.errors.join(', ');\n\n        // Log security event\n        SecurityAuditLogger.logFileUploadEvent(\n          file.name,\n          InputSanitizer.sanitizeFilename(file.name),\n          file.type,\n          file.size,\n          false\n        );\n\n        onError(new Error(errorMessage));\n        return;\n      }\n\n      // Show warnings\n      if (validation.warnings.length > 0) {\n        validation.warnings.forEach(warning => message.warning(warning));\n      }\n\n      // Perform malware scan\n      const scanResult = await simulateMalwareScan(file);\n\n      if (!scanResult.isClean) {\n        const threatMessage = `Security scan failed: ${scanResult.threats.join(', ')}`;\n\n        setSecurityAlerts(prev => [...prev, {\n          type: 'MALWARE_DETECTED',\n          filename: file.name,\n          threats: scanResult.threats,\n          timestamp: new Date().toISOString()\n        }]);\n\n        onError(new Error(threatMessage));\n        return;\n      }\n\n      // File is valid and clean - mark as ready for upload\n      SecurityAuditLogger.logFileUploadEvent(\n        file.name,\n        InputSanitizer.sanitizeFilename(file.name),\n        file.type,\n        file.size,\n        true\n      );\n\n      onSuccess(file);\n\n    } catch (error) {\n      onError(error);\n    }\n  }, [validateFile, simulateMalwareScan]);\n\n  // Handle file list changes\n  const handleChange = useCallback((info) => {\n    let newFileList = [...info.fileList];\n\n    // Limit number of files\n    if (newFileList.length > maxFiles) {\n      message.warning(`Maximum ${maxFiles} files allowed`);\n      newFileList = newFileList.slice(0, maxFiles);\n    }\n\n    // Update file status and validation\n    newFileList = newFileList.map(file => {\n      if (file.originFileObj) {\n        const validation = validateFile(file.originFileObj);\n\n        if (!validation.isValid) {\n          file.status = 'error';\n          file.response = validation.errors.join(', ');\n        } else if (scanningFiles.has(file.uid)) {\n          file.status = 'uploading';\n        }\n      }\n\n      return file;\n    });\n\n    if (onChange) {\n      onChange({ fileList: newFileList });\n    }\n  }, [maxFiles, validateFile, scanningFiles, onChange]);\n\n  // Before upload validation\n  const beforeUpload = useCallback((file) => {\n    const validation = validateFile(file);\n\n    if (!validation.isValid) {\n      message.error(`File validation failed: ${validation.errors.join(', ')}`);\n      return false;\n    }\n\n    return true;\n  }, [validateFile]);\n\n  // Security info display\n  const securityInfo = useMemo(() => {\n    if (!showSecurityInfo) return null;\n\n    const validFiles = fileList.filter(f => f.status === 'done').length;\n    const errorFiles = fileList.filter(f => f.status === 'error').length;\n    const uploadingFiles = fileList.filter(f => f.status === 'uploading').length;\n\n    return (\n      <div style={{ marginTop: 16 }}>\n        <Alert\n          message=\"File Upload Security\"\n          description={\n            <div>\n              <p><strong>Security Features:</strong></p>\n              <ul style={{ marginBottom: 8 }}>\n                <li>File type validation ({allowedExtensions.join(', ')})</li>\n                <li>File size limit: {maxSizeMB}MB per file</li>\n                <li>Filename sanitization</li>\n                {enableMalwareScan && <li>Malware scanning simulation</li>}\n                <li>Security audit logging</li>\n              </ul>\n              <p><strong>Status:</strong> {validFiles} valid, {errorFiles} errors, {uploadingFiles} uploading</p>\n            </div>\n          }\n          type=\"info\"\n          showIcon\n          icon={<SafetyCertificateOutlined />}\n        />\n\n        {securityAlerts.length > 0 && (\n          <Alert\n            message=\"Security Alerts\"\n            description={\n              <List\n                size=\"small\"\n                dataSource={securityAlerts.slice(-3)}\n                renderItem={alert => (\n                  <List.Item>\n                    <Tag color=\"red\">{alert.type}</Tag>\n                    {alert.filename}: {alert.threats.join(', ')}\n                  </List.Item>\n                )}\n              />\n            }\n            type=\"warning\"\n            showIcon\n            style={{ marginTop: 8 }}\n          />\n        )}\n      </div>\n    );\n  }, [showSecurityInfo, fileList, allowedExtensions, maxSizeMB, enableMalwareScan, securityAlerts]);\n\n  return (\n    <div>\n      <Dragger\n        {...props}\n        fileList={fileList}\n        onChange={handleChange}\n        customRequest={handleUpload}\n        beforeUpload={beforeUpload}\n        multiple\n        showUploadList={{\n          showPreviewIcon: true,\n          showRemoveIcon: true,\n          showDownloadIcon: false\n        }}\n      >\n        <p className=\"ant-upload-drag-icon\">\n          <UploadOutlined />\n        </p>\n        <p className=\"ant-upload-text\">Click or drag files to this area to upload</p>\n        <p className=\"ant-upload-hint\">\n          Support for {allowedExtensions.join(', ')} files up to {maxSizeMB}MB each.\n          Maximum {maxFiles} files allowed.\n        </p>\n      </Dragger>\n\n      {/* File list with security status */}\n      {fileList.length > 0 && (\n        <div style={{ marginTop: 16 }}>\n          <List\n            size=\"small\"\n            header={<div><FileTextOutlined /> Uploaded Files ({fileList.length})</div>}\n            bordered\n            dataSource={fileList}\n            renderItem={file => (\n              <List.Item\n                actions={[\n                  scanningFiles.has(file.uid) && (\n                    <div key=\"scanning\">\n                      <Progress\n                        type=\"circle\"\n                        size={20}\n                        percent={file.percent || 0}\n                        showInfo={false}\n                      />\n                      <span style={{ marginLeft: 8 }}>Scanning...</span>\n                    </div>\n                  )\n                ].filter(Boolean)}\n              >\n                <List.Item.Meta\n                  avatar={\n                    <FileTextOutlined\n                      style={{\n                        color: file.status === 'done' ? '#52c41a' :\n                          file.status === 'error' ? '#ff4d4f' : '#1890ff'\n                      }}\n                    />\n                  }\n                  title={file.name}\n                  description={\n                    <div>\n                      <span>Size: {(file.size / 1024 / 1024).toFixed(2)} MB</span>\n                      {file.status === 'error' && (\n                        <Tag color=\"red\" style={{ marginLeft: 8 }}>\n                          {file.response || 'Upload failed'}\n                        </Tag>\n                      )}\n                      {file.status === 'done' && (\n                        <Tag color=\"green\" style={{ marginLeft: 8 }}>\n                          Secure\n                        </Tag>\n                      )}\n                      {scanningFiles.has(file.uid) && (\n                        <Tag color=\"blue\" style={{ marginLeft: 8 }}>\n                          Scanning\n                        </Tag>\n                      )}\n                    </div>\n                  }\n                />\n              </List.Item>\n            )}\n          />\n        </div>\n      )}\n\n      {securityInfo}\n    </div>\n  );\n});\n\nSecureFileUpload.propTypes = {\n  fileList: PropTypes.array,\n  onChange: PropTypes.func,\n  maxFiles: PropTypes.number,\n  maxSizeMB: PropTypes.number,\n  allowedTypes: PropTypes.arrayOf(PropTypes.string),\n  allowedExtensions: PropTypes.arrayOf(PropTypes.string),\n  componentName: PropTypes.string,\n  enableMalwareScan: PropTypes.bool,\n  showSecurityInfo: PropTypes.bool\n};\n\nSecureFileUpload.displayName = 'SecureFileUpload';\n\nexport default SecureFileUpload;","import {\n  UploadOutlined,\n  FileTextOutlined,\n  SafetyCertificateOutlined,\n  ProjectOutlined,\n  ExperimentOutlined,\n  HomeOutlined,\n  FileProtectOutlined,\n  RocketOutlined,\n  ExclamationCircleOutlined,\n  DownloadOutlined\n} from '@ant-design/icons';\nimport {\n  Form,\n  Select,\n  Upload,\n  Button,\n  Card,\n  Row,\n  Col,\n  message,\n  Space,\n  Typography,\n  Alert,\n  List,\n  Checkbox,\n  Badge,\n  Descriptions,\n  Modal,\n  Result,\n  Statistic,\n  Tag\n} from 'antd';\nimport React, { useState, useEffect } from 'react';\n\nimport { documentAPI } from '../services/documentAPI';\nimport { projectAPI } from '../services/projectAPI';\n\nimport SecureFileUpload from './SecureFileUpload';\n\nconst { Option } = Select;\nconst { Title, Text } = Typography;\n\nconst MaterialExtensionFormSimple = ({ onSubmit, loading }) => {\n  const [form] = Form.useForm();\n  const [projects, setProjects] = useState([]);\n  const [materials, setMaterials] = useState([]);\n  const [plants, setPlants] = useState([]);\n  const [fileList, setFileList] = useState([]);\n  const [reusableDocuments, setReusableDocuments] = useState([]);\n  const [selectedReusableDocuments, setSelectedReusableDocuments] = useState([]);\n  const [showReusableDocuments, setShowReusableDocuments] = useState(false);\n  const [loadingStates, setLoadingStates] = useState({\n    projects: false,\n    materials: false,\n    plants: false,\n    reusableDocuments: false\n  });\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    const loadInitialData = async () => {\n      try {\n        await Promise.all([\n          loadProjectsWithAbort(controller.signal),\n          loadPlantsWithAbort(controller.signal)\n        ]);\n      } catch (error) {\n        if (!controller.signal.aborted) {\n          console.error('Error loading initial data:', error);\n        }\n      }\n    };\n\n    const loadProjectsWithAbort = async signal => {\n      try {\n        setLoadingState('projects', true);\n        const projectData = await projectAPI.getProjects({ signal });\n        if (!signal?.aborted) {\n          setProjects(projectData || []);\n        }\n      } catch (error) {\n        if (!signal?.aborted) {\n          console.error('Error loading projects:', error);\n          message.error('Failed to load projects');\n        }\n      } finally {\n        if (!signal?.aborted) {\n          setLoadingState('projects', false);\n        }\n      }\n    };\n\n    const loadPlantsWithAbort = async signal => {\n      try {\n        setLoadingState('plants', true);\n        const plantData = await projectAPI.getPlants({ signal });\n        if (!signal?.aborted) {\n          setPlants(plantData || []);\n        }\n      } catch (error) {\n        if (!signal?.aborted) {\n          console.error('Error loading plants:', error);\n          message.error('Failed to load plants');\n        }\n      } finally {\n        if (!signal?.aborted) {\n          setLoadingState('plants', false);\n        }\n      }\n    };\n\n    loadInitialData();\n\n    return () => {\n      controller.abort();\n    };\n  }, []); // Remove dependencies\n\n  const setLoadingState = (key, value) => {\n    setLoadingStates(prev => ({ ...prev, [key]: value }));\n  };\n\n\n\n  const handleProjectChange = async projectCode => {\n    try {\n      setLoadingState('materials', true);\n      setMaterials([]);\n\n      if (projectCode) {\n        const materialData = await projectAPI.getMaterialsByProject(projectCode);\n        setMaterials(materialData || []);\n\n        // Materials loaded successfully\n      }\n\n      // Clear reusable documents when project changes\n      setReusableDocuments([]);\n      setSelectedReusableDocuments([]);\n      setShowReusableDocuments(false);\n    } catch (error) {\n      console.error('Error loading materials:', error);\n      message.error('Failed to load materials. Please try again.');\n    } finally {\n      setLoadingState('materials', false);\n    }\n  };\n\n  const handleMaterialChange = async materialCode => {\n    const projectCode = form.getFieldValue('projectCode');\n\n    if (projectCode && materialCode) {\n      await checkForReusableDocuments(projectCode, materialCode);\n    }\n  };\n\n  const checkForReusableDocuments = async (projectCode, materialCode) => {\n    try {\n      setLoadingState('reusableDocuments', true);\n      const reusableDocs = await documentAPI.getReusableDocuments(projectCode, materialCode, true);\n\n      if (reusableDocs && reusableDocs.length > 0) {\n        setReusableDocuments(reusableDocs);\n        setShowReusableDocuments(true);\n        setSelectedReusableDocuments(reusableDocs.map(doc => doc.id));\n\n        // Reusable documents found\n      } else {\n        setReusableDocuments([]);\n        setShowReusableDocuments(false);\n        setSelectedReusableDocuments([]);\n      }\n    } catch (error) {\n      console.error('Error checking for reusable documents:', error);\n      message.warning(\n        'Unable to check for reusable documents. You can still upload new documents.'\n      );\n    } finally {\n      setLoadingState('reusableDocuments', false);\n    }\n  };\n\n  const handleFileChange = ({ fileList: newFileList }) => {\n    const validatedFileList = newFileList.map(file => {\n      if (file.originFileObj) {\n        const validation = documentAPI.validateFile(file.originFileObj);\n        if (!validation.isValidType) {\n          file.status = 'error';\n          file.response = 'Invalid file type. Only PDF, Word, and Excel files are allowed.';\n        } else if (!validation.isValidSize) {\n          file.status = 'error';\n          file.response = `File size exceeds 25MB limit (${(file.originFileObj.size / 1024 / 1024).toFixed(2)}MB).`;\n        } else {\n          file.status = 'done';\n          file.percent = 100;\n        }\n\n        file.size = file.originFileObj.size;\n        file.type = file.originFileObj.type;\n        file.lastModified = file.originFileObj.lastModified;\n      }\n      return file;\n    });\n\n    setFileList(validatedFileList);\n\n    const errorFiles = validatedFileList.filter(f => f.status === 'error').length;\n\n    if (errorFiles > 0) {\n      message.warning(\n        `${errorFiles} file(s) have validation errors. Please check file types and sizes.`\n      );\n    }\n  };\n\n  const handleSubmit = async values => {\n    try {\n      // Basic validation\n      const totalDocs =\n        fileList.filter(f => f.status === 'done').length + selectedReusableDocuments.length;\n\n      if (!values.projectCode || !values.materialCode || !values.plantCodes || values.plantCodes.length === 0) {\n        message.error('Please fill in all required fields');\n        return;\n      }\n\n      if (totalDocs === 0) {\n        message.error('Please upload at least one document or select reusable documents');\n        return;\n      }\n\n      // Validation variables for form submission\n      // const selectedProject = projects.find(p => p.value === values.projectCode);\n      // const selectedMaterial = materials.find(m => m.value === values.materialCode);\n      // const selectedPlant = plants.find(p => p.value === values.plantCode);\n\n      Modal.confirm({\n        title: (\n          <Space>\n            <RocketOutlined style={{ color: '#1890ff' }} />\n            <span>Confirm Material Extension Submission</span>\n          </Space>\n        ),\n        width: 800,\n        style: { top: 80 },\n        bodyStyle: {\n          minHeight: '450px',\n          padding: '24px'\n        },\n        content: (\n          <div>\n            <Alert\n              message=\"Ready to Submit Material Extension\"\n              description=\"Please review the details below before creating the workflow.\"\n              type=\"info\"\n              showIcon\n              style={{ marginBottom: 16 }}\n            />\n\n            <Descriptions bordered size=\"small\" column={2}>\n              <Descriptions.Item label=\"Project Code\" span={1}>\n                <Space>\n                  <ProjectOutlined style={{ color: '#1890ff' }} />\n                  <Text strong>{values.projectCode}</Text>\n                </Space>\n              </Descriptions.Item>\n              <Descriptions.Item label=\"Material Code\" span={1}>\n                <Space>\n                  <ExperimentOutlined style={{ color: '#52c41a' }} />\n                  <Text code>{values.materialCode}</Text>\n                </Space>\n              </Descriptions.Item>\n              <Descriptions.Item label=\"Plant Codes\" span={1}>\n                <Space wrap>\n                  <HomeOutlined style={{ color: '#fa8c16' }} />\n                  {values.plantCodes.map(plantCode => (\n                    <Tag key={plantCode} color=\"orange\">{plantCode}</Tag>\n                  ))}\n                </Space>\n              </Descriptions.Item>\n\n              <Descriptions.Item label=\"Documents Summary\" span={2}>\n                <Space>\n                  <FileProtectOutlined style={{ color: '#13c2c2' }} />\n                  <Badge\n                    count={totalDocs}\n                    style={{ backgroundColor: totalDocs > 0 ? '#52c41a' : '#d9d9d9' }}\n                  />\n                  <Text style={{ marginLeft: 8 }}>\n                    {totalDocs} file{totalDocs !== 1 ? 's' : ''} (\n                    {fileList.filter(f => f.status === 'done').length} new,{' '}\n                    {selectedReusableDocuments.length} reused)\n                  </Text>\n                </Space>\n              </Descriptions.Item>\n            </Descriptions>\n\n            {/* Document Details Section */}\n            {totalDocs > 0 && (\n              <div style={{ marginTop: 20 }}>\n                {fileList.filter(f => f.status === 'done').length > 0 && (\n                  <div style={{ marginBottom: 16 }}>\n                    <Text strong style={{ color: '#1890ff', marginBottom: 8, display: 'block' }}>\n                      📎 New Documents ({fileList.filter(f => f.status === 'done').length})\n                    </Text>\n                    <List\n                      size=\"small\"\n                      bordered\n                      dataSource={fileList.filter(f => f.status === 'done')}\n                      renderItem={file => (\n                        <List.Item\n                          actions={[\n                            <Button\n                              key=\"download\"\n                              type=\"link\"\n                              size=\"small\"\n                              icon={<DownloadOutlined />}\n                              onClick={() => {\n                                // Create a temporary URL for downloading the file\n                                const url = URL.createObjectURL(file.originFileObj || file);\n                                const link = document.createElement('a');\n                                link.href = url;\n                                link.download = file.name;\n                                document.body.appendChild(link);\n                                link.click();\n                                document.body.removeChild(link);\n                                URL.revokeObjectURL(url);\n                              }}\n                            >\n                              Download\n                            </Button>\n                          ]}\n                        >\n                          <List.Item.Meta\n                            avatar={<FileTextOutlined style={{ color: '#52c41a' }} />}\n                            title={file.name}\n                            description={`Size: ${(file.size / 1024 / 1024).toFixed(2)} MB`}\n                          />\n                        </List.Item>\n                      )}\n                    />\n                  </div>\n                )}\n\n                {selectedReusableDocuments.length > 0 && (\n                  <div>\n                    <Text strong style={{ color: '#fa8c16', marginBottom: 8, display: 'block' }}>\n                      🔄 Reused Documents ({selectedReusableDocuments.length})\n                    </Text>\n                    <List\n                      size=\"small\"\n                      bordered\n                      dataSource={reusableDocuments.filter(doc =>\n                        selectedReusableDocuments.includes(doc.id)\n                      )}\n                      renderItem={doc => (\n                        <List.Item\n                          actions={[\n                            <Button\n                              key=\"download\"\n                              type=\"link\"\n                              size=\"small\"\n                              icon={<DownloadOutlined />}\n                              onClick={async () => {\n                                try {\n                                  const blob = await documentAPI.downloadDocument(doc.id);\n                                  const url = window.URL.createObjectURL(blob);\n                                  const link = document.createElement('a');\n                                  link.href = url;\n                                  link.download = doc.originalFileName || `document_${doc.id}`;\n                                  document.body.appendChild(link);\n                                  link.click();\n                                  document.body.removeChild(link);\n                                  window.URL.revokeObjectURL(url);\n                                  message.success(`Downloaded ${doc.originalFileName}`);\n                                } catch (error) {\n                                  console.error('Error downloading document:', error);\n                                  message.error('Failed to download document');\n                                }\n                              }}\n                            >\n                              Download\n                            </Button>\n                          ]}\n                        >\n                          <List.Item.Meta\n                            avatar={<FileTextOutlined style={{ color: '#fa8c16' }} />}\n                            title={doc.originalFileName}\n                            description={\n                              <Space split={<span style={{ color: '#d9d9d9' }}>|</span>}>\n                                <Text type=\"secondary\">\n                                  Size: {(doc.fileSize / 1024 / 1024).toFixed(2)} MB\n                                </Text>\n                                <Text type=\"secondary\">\n                                  From: {doc.projectCode}/{doc.materialCode}\n                                </Text>\n                                <Tag color=\"orange\" size=\"small\">\n                                  Reused\n                                </Tag>\n                              </Space>\n                            }\n                          />\n                        </List.Item>\n                      )}\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        ),\n        onOk: () => {\n          return new Promise(async (resolve, reject) => {\n            const submissionData = {\n              ...values,\n              uploadedFiles: fileList.filter(file => file.status === 'done'),\n              reusedDocuments: selectedReusableDocuments,\n              metadata: {\n                totalDocuments: totalDocs,\n                newDocuments: fileList.filter(f => f.status === 'done').length,\n                reusedDocuments: selectedReusableDocuments.length,\n                submittedAt: new Date().toISOString(),\n                formVersion: '3.0-simplified'\n              }\n            };\n\n            try {\n              const result = await onSubmit(submissionData);\n\n              // Handle smart extension result\n              if (result && result.isSmartExtension) {\n                // Show detailed smart extension result modal\n                Modal.info({\n                  title: (\n                    <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n                      <RocketOutlined style={{ color: '#1890ff', fontSize: '20px' }} />\n                      <span>Smart Plant Extension Results</span>\n                    </div>\n                  ),\n                  width: 900,\n                  style: { top: 50 },\n                  bodyStyle: {\n                    maxHeight: '70vh',\n                    overflowY: 'auto',\n                    padding: '24px'\n                  },\n                  content: (\n                    <div style={{ padding: '16px 0' }}>\n                      <Alert\n                        message={result.message}\n                        type={result.success ? 'success' : 'warning'}\n                        showIcon\n                        style={{ marginBottom: 20 }}\n                      />\n\n                      {/* Summary Statistics */}\n                      <Card title=\"Extension Summary\" size=\"small\" style={{ marginBottom: 20 }}>\n                        <Row gutter={16}>\n                          <Col span={6}>\n                            <Statistic title=\"Total Requested\" value={result.summary.totalRequested} />\n                          </Col>\n                          <Col span={6}>\n                            <Statistic title=\"Newly Created\" value={result.summary.created} valueStyle={{ color: '#3f8600' }} />\n                          </Col>\n                          <Col span={6}>\n                            <Statistic title=\"Duplicates Skipped\" value={result.summary.skipped} valueStyle={{ color: '#faad14' }} />\n                          </Col>\n                          <Col span={6}>\n                            <Statistic title=\"Failed\" value={result.summary.failed} valueStyle={{ color: '#cf1322' }} />\n                          </Col>\n                        </Row>\n                      </Card>\n\n                      {/* Newly Created Workflows */}\n                      {result.createdWorkflows && result.createdWorkflows.length > 0 && (\n                        <Card title=\"✅ Newly Created Workflows\" size=\"small\" style={{ marginBottom: 20 }}>\n                          <List\n                            dataSource={result.createdWorkflows}\n                            renderItem={workflow => (\n                              <List.Item>\n                                <List.Item.Meta\n                                  title={\n                                    <Space>\n                                      <Tag color=\"green\">Plant: {workflow.plantCode}</Tag>\n                                      <Tag color=\"blue\">ID: {workflow.id}</Tag>\n                                      <Tag color=\"orange\">State: {workflow.state}</Tag>\n                                    </Space>\n                                  }\n                                  description={`Created: ${new Date(workflow.createdAt).toLocaleString()}`}\n                                />\n                              </List.Item>\n                            )}\n                          />\n                        </Card>\n                      )}\n\n                      {/* Duplicate Workflows */}\n                      {result.duplicateWorkflows && result.duplicateWorkflows.length > 0 && (\n                        <Card title=\"⚠️ Duplicate Workflows (Already Exist)\" size=\"small\" style={{ marginBottom: 20 }}>\n                          <Alert\n                            message=\"These workflows were not created because they already exist\"\n                            type=\"warning\"\n                            showIcon\n                            style={{ marginBottom: 16 }}\n                          />\n                          <List\n                            dataSource={result.duplicateWorkflows}\n                            renderItem={workflow => (\n                              <List.Item>\n                                <List.Item.Meta\n                                  title={\n                                    <Space>\n                                      <Tag color=\"orange\">Plant: {workflow.plantCode}</Tag>\n                                      <Tag color=\"blue\">ID: {workflow.id}</Tag>\n                                      <Tag color=\"purple\">State: {workflow.state}</Tag>\n                                    </Space>\n                                  }\n                                  description={`Existing workflow created: ${new Date(workflow.createdAt).toLocaleString()}`}\n                                />\n                              </List.Item>\n                            )}\n                          />\n                        </Card>\n                      )}\n\n                      {/* Document Reuse Information */}\n                      {result.details && result.details.documentReuse && result.details.documentReuse.totalReusedDocuments > 0 && (\n                        <Card \n                          title={\n                            <Space>\n                              <FileProtectOutlined style={{ color: '#13c2c2' }} />\n                              <span>📎 Document Reuse Information</span>\n                              <Badge \n                                count={result.details.documentReuse.totalReusedDocuments} \n                                style={{ backgroundColor: '#52c41a' }} \n                              />\n                            </Space>\n                          } \n                          size=\"small\" \n                          style={{ marginBottom: 20 }}\n                        >\n                          <Alert\n                            message={`${result.details.documentReuse.totalReusedDocuments} documents automatically reused across ${result.summary.created} workflow(s)`}\n                            description={\n                              <div>\n                                <div style={{ marginBottom: 8 }}>\n                                  <strong>Strategy:</strong> {result.details.documentReuse.reuseStrategy || 'Automatic'}\n                                </div>\n                                {result.details.documentReuse.sourceDescription && (\n                                  <div style={{ marginBottom: 8 }}>\n                                    <strong>Sources:</strong> {result.details.documentReuse.sourceDescription}\n                                  </div>\n                                )}\n                                {result.details.documentReuse.statistics && (\n                                  <div>\n                                    <strong>Document Sources:</strong>{' '}\n                                    {result.details.documentReuse.statistics.workflowDocuments > 0 && \n                                      `${result.details.documentReuse.statistics.workflowDocuments} from workflows`}\n                                    {result.details.documentReuse.statistics.queryDocuments > 0 && \n                                      `${result.details.documentReuse.statistics.workflowDocuments > 0 ? ', ' : ''}${result.details.documentReuse.statistics.queryDocuments} from queries`}\n                                    {result.details.documentReuse.statistics.responseDocuments > 0 && \n                                      `${(result.details.documentReuse.statistics.workflowDocuments > 0 || result.details.documentReuse.statistics.queryDocuments > 0) ? ', ' : ''}${result.details.documentReuse.statistics.responseDocuments} from responses`}\n                                  </div>\n                                )}\n                              </div>\n                            }\n                            type=\"success\"\n                            showIcon\n                            style={{ marginBottom: 16 }}\n                          />\n                          \n                          <List\n                            dataSource={result.details.documentReuse.reusedDocuments || []}\n                            renderItem={doc => (\n                              <List.Item\n                                actions={[\n                                  <Button\n                                    key=\"download\"\n                                    type=\"link\"\n                                    size=\"small\"\n                                    icon={<DownloadOutlined />}\n                                    onClick={async () => {\n                                      try {\n                                        const blob = await documentAPI.downloadDocument(doc.id);\n                                        const url = window.URL.createObjectURL(blob);\n                                        const link = document.createElement('a');\n                                        link.href = url;\n                                        link.download = doc.originalFileName || `document_${doc.id}`;\n                                        document.body.appendChild(link);\n                                        link.click();\n                                        document.body.removeChild(link);\n                                        window.URL.revokeObjectURL(url);\n                                        message.success(`Downloaded ${doc.originalFileName}`);\n                                      } catch (error) {\n                                        console.error('Error downloading document:', error);\n                                        message.error('Failed to download document');\n                                      }\n                                    }}\n                                  >\n                                    Download\n                                  </Button>\n                                ]}\n                              >\n                                <List.Item.Meta\n                                  avatar={\n                                    <div style={{ position: 'relative' }}>\n                                      <FileTextOutlined \n                                        style={{ \n                                          color: doc.documentSource === 'WORKFLOW' ? '#1890ff' : \n                                                 doc.documentSource === 'QUERY' ? '#fa8c16' : '#722ed1',\n                                          fontSize: '16px'\n                                        }} \n                                      />\n                                      {doc.isReused && (\n                                        <Badge \n                                          count=\"R\" \n                                          style={{ \n                                            backgroundColor: '#52c41a',\n                                            fontSize: '10px',\n                                            height: '16px',\n                                            minWidth: '16px',\n                                            lineHeight: '16px',\n                                            position: 'absolute',\n                                            top: '-8px',\n                                            right: '-8px'\n                                          }} \n                                        />\n                                      )}\n                                    </div>\n                                  }\n                                  title={\n                                    <Space>\n                                      <span>{doc.originalFileName}</span>\n                                      {doc.documentSource && (\n                                        <Tag \n                                          color={\n                                            doc.documentSource === 'WORKFLOW' ? 'blue' : \n                                            doc.documentSource === 'QUERY' ? 'orange' : 'purple'\n                                          }\n                                          size=\"small\"\n                                        >\n                                          {doc.documentSource === 'WORKFLOW' ? 'Workflow' : \n                                           doc.documentSource === 'QUERY' ? 'Query' : 'Response'}\n                                        </Tag>\n                                      )}\n                                      {doc.isReused && (\n                                        <Tag color=\"green\" size=\"small\">\n                                          Reused {doc.reuseCount > 1 ? `(${doc.reuseCount}x)` : ''}\n                                        </Tag>\n                                      )}\n                                    </Space>\n                                  }\n                                  description={\n                                    <Space split={<span style={{ color: '#d9d9d9' }}>|</span>}>\n                                      <Text type=\"secondary\">\n                                        Size: {((doc.fileSize || 0) / 1024 / 1024).toFixed(2)} MB\n                                      </Text>\n                                      {doc.projectCode && doc.materialCode && (\n                                        <Text type=\"secondary\">\n                                          From: {doc.projectCode}/{doc.materialCode}\n                                        </Text>\n                                      )}\n                                      {doc.sourceDescription && (\n                                        <Text type=\"secondary\">\n                                          {doc.sourceDescription}\n                                        </Text>\n                                      )}\n                                      {doc.uploadedBy && (\n                                        <Text type=\"secondary\">\n                                          By: {doc.uploadedBy}\n                                        </Text>\n                                      )}\n                                    </Space>\n                                  }\n                                />\n                              </List.Item>\n                            )}\n                          />\n                          \n                          {result.details.documentReuse.statistics && (\n                            <div style={{ marginTop: 16, padding: '12px', backgroundColor: '#f6ffed', borderRadius: '6px' }}>\n                              <Row gutter={16}>\n                                <Col span={6}>\n                                  <Statistic \n                                    title=\"Unique Documents\" \n                                    value={result.details.documentReuse.statistics.totalUniqueDocuments || result.details.documentReuse.totalReusedDocuments}\n                                    valueStyle={{ fontSize: '16px' }}\n                                  />\n                                </Col>\n                                <Col span={6}>\n                                  <Statistic \n                                    title=\"Per Workflow\" \n                                    value={result.details.documentReuse.documentsPerWorkflow || 0}\n                                    valueStyle={{ fontSize: '16px' }}\n                                  />\n                                </Col>\n                                <Col span={6}>\n                                  <Statistic \n                                    title=\"Workflows with Docs\" \n                                    value={result.details.documentReuse.statistics.workflowsWithReusedDocuments || result.summary.created}\n                                    valueStyle={{ fontSize: '16px' }}\n                                  />\n                                </Col>\n                                <Col span={6}>\n                                  <Statistic \n                                    title=\"Total Attachments\" \n                                    value={result.details.documentReuse.totalReusedDocuments}\n                                    valueStyle={{ fontSize: '16px', color: '#52c41a' }}\n                                  />\n                                </Col>\n                              </Row>\n                            </div>\n                          )}\n                        </Card>\n                      )}\n\n                      {/* Failed Plants */}\n                      {result.failedPlants && result.failedPlants.length > 0 && (\n                        <Card title=\"❌ Failed Extensions\" size=\"small\" style={{ marginBottom: 20 }}>\n                          <Alert\n                            message=\"These plant extensions failed due to errors\"\n                            type=\"error\"\n                            showIcon\n                            style={{ marginBottom: 16 }}\n                          />\n                          <List\n                            dataSource={result.failedPlants}\n                            renderItem={plantCode => (\n                              <List.Item>\n                                <Tag color=\"red\">Plant: {plantCode}</Tag>\n                              </List.Item>\n                            )}\n                          />\n                        </Card>\n                      )}\n\n                      <Descriptions\n                        title=\"Request Parameters\"\n                        bordered\n                        size=\"small\"\n                        column={2}\n                        style={{ marginTop: 20 }}\n                      >\n                        <Descriptions.Item label=\"Project Code\" span={1}>\n                          <Tag color=\"blue\">{values.projectCode}</Tag>\n                        </Descriptions.Item>\n                        <Descriptions.Item label=\"Material Code\" span={1}>\n                          <Tag color=\"green\">{values.materialCode}</Tag>\n                        </Descriptions.Item>\n                        <Descriptions.Item label=\"Plant Codes\" span={2}>\n                          <Space wrap>\n                            {values.plantCodes.map(plantCode => (\n                              <Tag key={plantCode} color=\"orange\">{plantCode}</Tag>\n                            ))}\n                          </Space>\n                        </Descriptions.Item>\n\n                      </Descriptions>\n\n                      {result.duplicateWorkflows && result.duplicateWorkflows.length > 0 && result.duplicateWorkflows[0] && (\n                        <Descriptions\n                          title=\"Existing Workflow Details\"\n                          bordered\n                          size=\"small\"\n                          column={2}\n                          style={{ marginBottom: 20 }}\n                        >\n                          <Descriptions.Item label=\"Workflow ID\" span={1}>\n                            <Tag color=\"red\">#{result.duplicateWorkflows[0].id}</Tag>\n                          </Descriptions.Item>\n                          <Descriptions.Item label=\"Current State\" span={1}>\n                            <Tag color=\"processing\">\n                              {result.duplicateWorkflows[0].state?.replace('_', ' ') || 'PENDING'}\n                            </Tag>\n                          </Descriptions.Item>\n                          <Descriptions.Item label=\"Created Date\" span={1}>\n                            {result.duplicateWorkflows[0].createdAt\n                              ? new Date(result.duplicateWorkflows[0].createdAt).toLocaleDateString('en-US', {\n                                  year: 'numeric',\n                                  month: 'short',\n                                  day: 'numeric',\n                                  hour: '2-digit',\n                                  minute: '2-digit'\n                                })\n                              : 'N/A'}\n                          </Descriptions.Item>\n                          <Descriptions.Item label=\"Initiated By\" span={1}>\n                            {result.duplicateWorkflows[0].initiatedBy || 'Unknown'}\n                          </Descriptions.Item>\n                          {result.duplicateWorkflows[0].documentCount > 0 && (\n                            <Descriptions.Item label=\"Documents\" span={2}>\n                              <Badge\n                                count={result.duplicateWorkflows[0].documentCount}\n                                style={{ backgroundColor: '#52c41a' }}\n                              />\n                              <span style={{ marginLeft: 8 }}>files attached</span>\n                            </Descriptions.Item>\n                          )}\n                        </Descriptions>\n                      )}\n\n                      <Alert\n                        message=\"Next Steps\"\n                        description={\n                          <div>\n                            <p style={{ margin: '8px 0' }}>\n                              • Check the <strong>\"Pending Extensions\"</strong> tab to view the\n                              existing workflow{result.duplicateWorkflows && result.duplicateWorkflows.length > 1 ? 's' : ''}\n                            </p>\n                            <p style={{ margin: '8px 0' }}>\n                              • Use different parameters if you need to create a new workflow\n                            </p>\n                            <p style={{ margin: '8px 0' }}>\n                              • Contact the workflow initiator if you need to modify the existing\n                              workflow{result.duplicateWorkflows && result.duplicateWorkflows.length > 1 ? 's' : ''}\n                            </p>\n                          </div>\n                        }\n                        type=\"info\"\n                        showIcon\n                      />\n                    </div>\n                  ),\n                  okText: 'Got It',\n                  okButtonProps: {\n                    size: 'large',\n                    type: 'primary'\n                  },\n                  onOk: () => {\n                    // Reset form after user acknowledges\n                    resetForm();\n                  }\n                });\n                // Close the confirmation modal\n                resolve();\n                return;\n              }\n\n              // Success - just reset form, success message is handled by parent\n              resetForm();\n              resolve();\n            } catch (error) {\n              // Don't show success modal if onSubmit failed\n              console.error('Form submission failed:', error);\n              // Error message is handled by parent component\n              reject(error);\n            }\n          });\n        }\n      });\n    } catch (error) {\n      console.error('Error submitting form:', error);\n      message.error('Failed to create material extension. Please try again.');\n    }\n  };\n\n  const resetForm = () => {\n    form.resetFields();\n    setFileList([]);\n    setReusableDocuments([]);\n    setSelectedReusableDocuments([]);\n    setShowReusableDocuments(false);\n    setMaterials([]);\n  };\n\n  return (\n    <Card>\n      <div style={{ marginBottom: 24 }}>\n        <Space>\n          <SafetyCertificateOutlined />\n          <Title level={4} style={{ margin: 0 }}>\n            Material Extension Form\n          </Title>\n        </Space>\n      </div>\n\n      <Form form={form} layout=\"vertical\" onFinish={handleSubmit} size=\"large\">\n        <Row gutter={[16, 16]}>\n          {/* Project Selection */}\n          <Col xs={24} sm={12}>\n            <Form.Item\n              label=\"Project Code\"\n              name=\"projectCode\"\n              rules={[{ required: true, message: 'Please select a project code' }]}\n            >\n              <Select\n                placeholder=\"Select project code\"\n                showSearch\n                loading={loadingStates.projects}\n                onChange={handleProjectChange}\n                filterOption={(input, option) =>\n                  option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                }\n              >\n                {projects.map(project => (\n                  <Option key={project.value} value={project.value}>\n                    {project.label || project.value}\n                  </Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n\n          {/* Material Selection */}\n          <Col xs={24} sm={12}>\n            <Form.Item\n              label=\"Material Code\"\n              name=\"materialCode\"\n              rules={[{ required: true, message: 'Please select a material code' }]}\n            >\n              <Select\n                placeholder=\"Select material code\"\n                showSearch\n                loading={loadingStates.materials}\n                onChange={handleMaterialChange}\n                disabled={materials.length === 0}\n                filterOption={(input, option) =>\n                  option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                }\n              >\n                {materials.map(material => (\n                  <Option key={material.value} value={material.value}>\n                    {material.label || material.value}\n                  </Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n\n          {/* Plant Selection - Dropdown with Multiple Selection */}\n          <Col xs={24} sm={12}>\n            <Form.Item\n              label=\"Plant Codes\"\n              name=\"plantCodes\"\n              rules={[{ required: true, message: 'Please select at least one plant code' }]}\n            >\n              <Select\n                mode=\"multiple\"\n                placeholder=\"Select plant codes\"\n                showSearch\n                loading={loadingStates.plants}\n                allowClear\n                maxTagCount=\"responsive\"\n                filterOption={(input, option) =>\n                  option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                }\n                style={{ width: '100%' }}\n              >\n                {plants.map(plant => (\n                  <Option key={plant.value} value={plant.value}>\n                    {plant.label || plant.value}\n                  </Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Col>\n\n\n        </Row>\n\n        {/* Reusable Documents Section */}\n        {showReusableDocuments && (\n          <Card\n            title={\n              <Space>\n                <FileTextOutlined style={{ color: '#1890ff' }} />\n                <span>Reusable Documents Found</span>\n                <Badge count={reusableDocuments.length} style={{ backgroundColor: '#52c41a' }} />\n              </Space>\n            }\n            style={{ marginBottom: 16 }}\n            size=\"small\"\n          >\n            <Alert\n              message={`Found ${reusableDocuments.length} reusable document(s)`}\n              description=\"These documents are automatically selected. Uncheck any you don't want to reuse.\"\n              type=\"success\"\n              showIcon\n              style={{ marginBottom: 16 }}\n            />\n            <Checkbox.Group\n              value={selectedReusableDocuments}\n              onChange={setSelectedReusableDocuments}\n              style={{ width: '100%' }}\n            >\n              <List\n                size=\"small\"\n                dataSource={reusableDocuments}\n                renderItem={doc => (\n                  <List.Item>\n                    <Checkbox value={doc.id}>\n                      <Space>\n                        <FileTextOutlined style={{ color: '#1890ff' }} />\n                        <span>{doc.originalFileName}</span>\n                        <Text type=\"secondary\">({(doc.fileSize / 1024 / 1024).toFixed(2)}MB)</Text>\n                      </Space>\n                    </Checkbox>\n                  </List.Item>\n                )}\n              />\n            </Checkbox.Group>\n          </Card>\n        )}\n\n        {/* File Upload Section */}\n        <Form.Item\n          label=\"Upload Documents\"\n          help=\"Upload PDF, Word, or Excel files (max 25MB each). At least one document is required.\"\n        >\n          <SecureFileUpload\n            fileList={fileList}\n            onChange={handleFileChange}\n            maxFiles={10}\n            maxSizeMB={25}\n            componentName=\"MaterialExtensionForm\"\n            enableMalwareScan={true}\n            showSecurityInfo={true}\n            allowedTypes={[\n              'application/pdf',\n              'application/msword',\n              'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n              'application/vnd.ms-excel',\n              'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n            ]}\n            allowedExtensions={['.pdf', '.doc', '.docx', '.xls', '.xlsx']}\n          />\n        </Form.Item>\n\n        {/* Submit Button */}\n        <Form.Item style={{ marginTop: 24 }}>\n          <Space>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              loading={loading}\n              size=\"large\"\n              icon={<RocketOutlined />}\n            >\n              Create Material Extension\n            </Button>\n            <Button onClick={resetForm} size=\"large\">\n              Reset Form\n            </Button>\n          </Space>\n        </Form.Item>\n      </Form>\n    </Card>\n  );\n};\n\nexport default MaterialExtensionFormSimple;\n","import {\n  UploadOutlined,\n  FileTextOutlined,\n  CheckCircleOutlined,\n  DeleteOutlined\n} from '@ant-design/icons';\nimport { Upload, Button, Card, Space, Typography, Alert, message, List } from 'antd';\nimport React, { useState } from 'react';\n\nimport { documentAPI } from '../services/documentAPI';\n\nconst { Text, Title } = Typography;\nconst { Dragger } = Upload;\n\nconst DocumentUploadSection = ({ workflowId, projectCode, materialCode, onDocumentsUploaded }) => {\n  const [fileList, setFileList] = useState([]);\n  const [uploading, setUploading] = useState(false);\n\n  const handleFileChange = ({ fileList: newFileList }) => {\n    const validatedFileList = newFileList.map(file => {\n      if (file.originFileObj) {\n        const validation = documentAPI.validateFile(file.originFileObj);\n        if (!validation.isValidType) {\n          file.status = 'error';\n          file.response = 'Invalid file type. Only PDF, Word, and Excel files are allowed.';\n        } else if (!validation.isValidSize) {\n          file.status = 'error';\n          file.response = `File size exceeds 25MB limit (${(file.originFileObj.size / 1024 / 1024).toFixed(2)}MB).`;\n        } else {\n          file.status = 'done';\n          file.percent = 100;\n        }\n\n        file.size = file.originFileObj.size;\n        file.type = file.originFileObj.type;\n        file.lastModified = file.originFileObj.lastModified;\n      }\n      return file;\n    });\n\n    setFileList(validatedFileList);\n\n    const validFiles = validatedFileList.filter(f => f.status === 'done').length;\n    const errorFiles = validatedFileList.filter(f => f.status === 'error').length;\n\n    if (errorFiles > 0) {\n      message.warning(\n        `${errorFiles} file(s) have validation errors. Please check file types and sizes.`\n      );\n    } else if (validFiles > 0) {\n      message.success(`${validFiles} file(s) ready for upload.`);\n    }\n  };\n\n  const handleUpload = async () => {\n    const validFiles = fileList.filter(file => file.status === 'done');\n\n    if (validFiles.length === 0) {\n      message.error('Please select at least one valid file to upload.');\n      return;\n    }\n\n    try {\n      setUploading(true);\n\n      const files = validFiles.map(file => file.originFileObj || file);\n\n      await documentAPI.uploadDocuments(files, projectCode, materialCode, workflowId);\n\n      message.success(`Successfully uploaded ${validFiles.length} document(s) to the workflow.`);\n\n      // Clear the file list\n      setFileList([]);\n\n      // Notify parent component to refresh\n      if (onDocumentsUploaded) {\n        onDocumentsUploaded();\n      }\n    } catch (error) {\n      console.error('Error uploading documents:', error);\n      message.error('Failed to upload documents. Please try again.');\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const removeFile = file => {\n    const newFileList = fileList.filter(item => item.uid !== file.uid);\n    setFileList(newFileList);\n  };\n\n  return (\n    <Card size=\"small\" style={{ backgroundColor: '#f9f9f9', border: '1px dashed #d9d9d9' }}>\n      <Space direction=\"vertical\" style={{ width: '100%' }}>\n        <Alert\n          message=\"No Documents Found\"\n          description=\"This workflow was initiated without documents. You can upload safety documents now to complete the workflow preparation.\"\n          type=\"info\"\n          showIcon\n          style={{ marginBottom: 16 }}\n        />\n\n        <Title level={5}>\n          <UploadOutlined /> Upload Documents\n        </Title>\n\n        <Dragger\n          multiple\n          fileList={fileList}\n          onChange={handleFileChange}\n          beforeUpload={() => false} // Prevent auto upload\n          accept=\".pdf,.doc,.docx,.xls,.xlsx\"\n          style={{ marginBottom: 16 }}\n        >\n          <p className=\"ant-upload-drag-icon\">\n            <UploadOutlined />\n          </p>\n          <p className=\"ant-upload-text\">Click or drag files to this area to upload</p>\n          <p className=\"ant-upload-hint\">\n            Support for PDF, Word, and Excel files. Maximum file size: 25MB each\n          </p>\n        </Dragger>\n\n        {fileList.length > 0 && (\n          <Card size=\"small\" title=\"Selected Files\" style={{ marginBottom: 16 }}>\n            <List\n              size=\"small\"\n              dataSource={fileList}\n              renderItem={file => (\n                <List.Item\n                  actions={[\n                    <Button\n                      key=\"remove\"\n                      type=\"text\"\n                      danger\n                      icon={<DeleteOutlined />}\n                      onClick={() => removeFile(file)}\n                      size=\"small\"\n                    >\n                      Remove\n                    </Button>\n                  ]}\n                >\n                  <List.Item.Meta\n                    avatar={\n                      file.status === 'done' ? (\n                        <CheckCircleOutlined style={{ color: '#52c41a' }} />\n                      ) : (\n                        <FileTextOutlined style={{ color: '#ff4d4f' }} />\n                      )\n                    }\n                    title={\n                      <Space>\n                        <Text\n                          strong={file.status === 'done'}\n                          type={file.status === 'error' ? 'danger' : 'default'}\n                        >\n                          {file.name}\n                        </Text>\n                        {file.size && (\n                          <Text type=\"secondary\">({(file.size / 1024 / 1024).toFixed(2)} MB)</Text>\n                        )}\n                      </Space>\n                    }\n                    description={\n                      file.status === 'error' ? (\n                        <Text type=\"danger\">{file.response}</Text>\n                      ) : (\n                        <Text type=\"secondary\">Ready for upload</Text>\n                      )\n                    }\n                  />\n                </List.Item>\n              )}\n            />\n          </Card>\n        )}\n\n        <div style={{ textAlign: 'center' }}>\n          <Button\n            type=\"primary\"\n            icon={<UploadOutlined />}\n            onClick={handleUpload}\n            loading={uploading}\n            disabled={fileList.filter(f => f.status === 'done').length === 0}\n            size=\"large\"\n          >\n            Upload {fileList.filter(f => f.status === 'done').length} Document(s)\n          </Button>\n        </div>\n\n        <Alert\n          message=\"Upload Guidelines\"\n          description={\n            <ul style={{ margin: 0, paddingLeft: 20 }}>\n              <li>Only PDF, Word (.doc, .docx), and Excel (.xls, .xlsx) files are allowed</li>\n              <li>Maximum file size is 25MB per file</li>\n              <li>You can upload multiple files at once</li>\n              <li>Files will be associated with this workflow for plant review</li>\n            </ul>\n          }\n          type=\"warning\"\n          showIcon\n          size=\"small\"\n        />\n      </Space>\n    </Card>\n  );\n};\n\nexport default DocumentUploadSection;\n","import {\n  SendOutlined,\n  ReloadOutlined,\n  ClockCircleOutlined,\n  EyeOutlined,\n  FileTextOutlined,\n  PlusOutlined,\n  FilterOutlined,\n  ExclamationCircleOutlined,\n  FolderOpenOutlined\n} from '@ant-design/icons';\nimport {\n  Table,\n  Card,\n  Button,\n  Space,\n  Tag,\n  Typography,\n  message,\n  Row,\n  Col,\n  Modal,\n  Descriptions,\n  List,\n  Tooltip,\n  Alert,\n  Input,\n  Select,\n  DatePicker,\n  Badge\n} from 'antd';\nimport React, { useState, useEffect } from 'react';\n\nimport { documentAPI } from '../services/documentAPI';\nimport { workflowAPI } from '../services/workflowAPI';\n\nimport DocumentUploadSection from './DocumentUploadSection';\n\nconst { Text, Title } = Typography;\nconst { Option } = Select;\nconst { RangePicker } = DatePicker;\nconst { Search } = Input;\n\nconst PendingExtensionsListSimple = ({ onExtendToPlant, refreshTrigger }) => {\n  const [pendingWorkflows, setPendingWorkflows] = useState([]);\n  const [filteredWorkflows, setFilteredWorkflows] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedWorkflow, setSelectedWorkflow] = useState(null);\n  const [detailsModalVisible, setDetailsModalVisible] = useState(false);\n  const [workflowDocuments, setWorkflowDocuments] = useState([]);\n  const [showUploadSection, setShowUploadSection] = useState(false);\n  const [filters, setFilters] = useState({\n    search: '',\n    projectCode: '',\n    plantCode: '',\n    materialCode: '',\n    dateRange: null,\n    slaStatus: '',\n    documentCount: '',\n    initiatedBy: ''\n  });\n\n  useEffect(() => {\n    loadPendingWorkflows();\n  }, [refreshTrigger]);\n\n  const loadPendingWorkflows = async () => {\n    try {\n      setLoading(true);\n      const workflows = await workflowAPI.getWorkflowsByState('JVC_PENDING');\n      setPendingWorkflows(workflows || []);\n    } catch (error) {\n      console.error('Error loading pending workflows:', error);\n      message.error('Failed to load pending workflows');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const calculateDaysPending = (createdAt) => {\n    const created = new Date(createdAt);\n    const now = new Date();\n    const diffTime = Math.abs(now - created);\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  };\n\n  const getSLAStatus = (createdAt) => {\n    const days = calculateDaysPending(createdAt);\n    if (days > 3) {\n      return { status: 'overdue', color: 'red', text: 'Overdue' };\n    }\n    if (days >= 2) {\n      return { status: 'warning', color: 'orange', text: 'Warning' };\n    }\n    return { status: 'normal', color: 'green', text: 'On Track' };\n  };\n\n  const handleExtendWorkflow = async (workflow) => {\n    try {\n      await onExtendToPlant(workflow);\n      await loadPendingWorkflows();\n    } catch (error) {\n      console.error('Error extending workflow:', error);\n    }\n  };\n\n  const handleViewDetails = async (workflow) => {\n    try {\n      setSelectedWorkflow(workflow);\n      setDetailsModalVisible(true);\n\n      // Load workflow documents\n      const documents = await documentAPI.getWorkflowDocuments(workflow.id);\n      setWorkflowDocuments(documents || []);\n    } catch (error) {\n      console.error('Error loading workflow details:', error);\n      message.error('Failed to load workflow details');\n    }\n  };\n\n  // Calculate statistics\n  const calculateStatistics = () => {\n    const total = pendingWorkflows.length;\n    const overdue = pendingWorkflows.filter(w => calculateDaysPending(w.createdAt) > 3).length;\n    const warning = pendingWorkflows.filter(w => {\n      const days = calculateDaysPending(w.createdAt);\n      return days >= 2 && days <= 3;\n    }).length;\n    const normal = total - overdue - warning;\n\n    const uniqueProjects = new Set(pendingWorkflows.map(w => w.projectCode)).size;\n    const uniqueMaterials = new Set(pendingWorkflows.map(w => w.materialCode)).size;\n    const uniquePlants = new Set(pendingWorkflows.map(w => w.plantCode)).size;\n    const totalDocuments = pendingWorkflows.reduce((sum, w) => sum + (w.documentCount || 0), 0);\n\n    return {\n      total,\n      overdue,\n      warning,\n      normal,\n      uniqueProjects,\n      uniqueMaterials,\n      uniquePlants,\n      totalDocuments,\n      avgDocumentsPerWorkflow: total > 0 ? Math.round((totalDocuments / total) * 10) / 10 : 0\n    };\n  };\n\n  const statistics = calculateStatistics();\n\n  // Extract unique values for filter dropdowns\n  const uniqueProjectCodes = [...new Set(pendingWorkflows.map(w => w.projectCode))].filter(Boolean);\n  const uniqueMaterialCodes = [...new Set(pendingWorkflows.map(w => w.materialCode))].filter(Boolean);\n  const uniquePlantCodes = [...new Set(pendingWorkflows.map(w => w.plantCode))].filter(Boolean);\n  const uniqueInitiators = [...new Set(pendingWorkflows.map(w => w.initiatedBy))].filter(Boolean);\n\n  // Apply filters\n  useEffect(() => {\n    let filtered = [...pendingWorkflows];\n\n    // Search filter\n    if (filters.search) {\n      const searchLower = filters.search.toLowerCase();\n      filtered = filtered.filter(\n        workflow =>\n          workflow.projectCode?.toLowerCase().includes(searchLower) ||\n          workflow.materialCode?.toLowerCase().includes(searchLower) ||\n          workflow.plantCode?.toLowerCase().includes(searchLower) ||\n          workflow.initiatedBy?.toLowerCase().includes(searchLower)\n      );\n    }\n\n    // Project code filter\n    if (filters.projectCode) {\n      filtered = filtered.filter(workflow => workflow.projectCode === filters.projectCode);\n    }\n\n    // Plant code filter\n    if (filters.plantCode) {\n      filtered = filtered.filter(\n        workflow =>\n          workflow.plantCode === filters.plantCode || workflow.assignedPlant === filters.plantCode\n      );\n    }\n\n    // Material code filter\n    if (filters.materialCode) {\n      filtered = filtered.filter(workflow => workflow.materialCode === filters.materialCode);\n    }\n\n\n\n    // Document count filter\n    if (filters.documentCount) {\n      if (filters.documentCount === 'with') {\n        filtered = filtered.filter(workflow => workflow.documentCount > 0);\n      } else if (filters.documentCount === 'without') {\n        filtered = filtered.filter(\n          workflow => !workflow.documentCount || workflow.documentCount === 0\n        );\n      }\n    }\n\n    // Initiated by filter\n    if (filters.initiatedBy) {\n      filtered = filtered.filter(workflow =>\n        workflow.initiatedBy?.toLowerCase().includes(filters.initiatedBy.toLowerCase())\n      );\n    }\n\n    // Date range filter\n    if (filters.dateRange && filters.dateRange.length === 2) {\n      const [startDate, endDate] = filters.dateRange;\n      filtered = filtered.filter(workflow => {\n        const createdDate = new Date(workflow.createdAt);\n        return createdDate >= startDate.toDate() && createdDate <= endDate.toDate();\n      });\n    }\n\n    // SLA status filter\n    if (filters.slaStatus) {\n      filtered = filtered.filter(workflow => {\n        const daysPending = calculateDaysPending(workflow.createdAt);\n        if (filters.slaStatus === 'overdue') {\n          return daysPending > 3;\n        }\n        if (filters.slaStatus === 'warning') {\n          return daysPending >= 2 && daysPending <= 3;\n        }\n        if (filters.slaStatus === 'normal') {\n          return daysPending < 2;\n        }\n        return true;\n      });\n    }\n\n    setFilteredWorkflows(filtered);\n  }, [pendingWorkflows, filters]);\n\n  const resetFilters = () => {\n    setFilters({\n      search: '',\n      projectCode: '',\n      plantCode: '',\n      materialCode: '',\n      dateRange: null,\n      slaStatus: '',\n      documentCount: '',\n      initiatedBy: ''\n    });\n  };\n\n  const columns = [\n    {\n      title: 'Project Code',\n      dataIndex: 'projectCode',\n      key: 'projectCode',\n      render: (text, record) => (\n        <Space direction=\"vertical\" size=\"small\">\n          <Text strong>{text || 'N/A'}</Text>\n          <Text type=\"secondary\" style={{ fontSize: '11px' }}>\n            {record.projectDescription || 'Project Extension'}\n          </Text>\n        </Space>\n      ),\n      sorter: (a, b) => (a.projectCode || '').localeCompare(b.projectCode || ''),\n      width: 140\n    },\n    {\n      title: 'Material Code',\n      dataIndex: 'materialCode',\n      key: 'materialCode',\n      render: (text, record) => (\n        <Space direction=\"vertical\" size=\"small\">\n          <Text code>{text || 'N/A'}</Text>\n          <Text type=\"secondary\" style={{ fontSize: '11px' }}>\n            {record.itemDescription || record.materialDescription || 'Material Safety Extension'}\n          </Text>\n        </Space>\n      ),\n      sorter: (a, b) => (a.materialCode || '').localeCompare(b.materialCode || ''),\n      width: 140\n    },\n    {\n      title: 'Plant Code',\n      key: 'plantCode',\n      render: (_, record) => (\n        <Text strong>{record.plantCode || record.assignedPlant || 'N/A'}</Text>\n      ),\n      sorter: (a, b) => {\n        const aPlant = a.plantCode || a.assignedPlant || '';\n        const bPlant = b.plantCode || b.assignedPlant || '';\n        return aPlant.localeCompare(bPlant);\n      },\n      width: 120\n    },\n    {\n      title: 'Documents',\n      key: 'documentCount',\n      render: (_, record) => (\n        <Space>\n          <Badge\n            count={record.documentCount || 0}\n            style={{ backgroundColor: record.documentCount > 0 ? '#52c41a' : '#ff4d4f' }}\n          />\n          <Text type={record.documentCount > 0 ? 'secondary' : 'warning'}>\n            {record.documentCount > 0 ? 'files' : 'none'}\n          </Text>\n          {(!record.documentCount || record.documentCount === 0) && (\n            <Tooltip title=\"No documents uploaded. Click 'View Details' to upload documents.\">\n              <ExclamationCircleOutlined style={{ color: '#fa8c16' }} />\n            </Tooltip>\n          )}\n        </Space>\n      ),\n      sorter: (a, b) => (a.documentCount || 0) - (b.documentCount || 0)\n    },\n    {\n      title: 'Initiated By',\n      dataIndex: 'initiatedBy',\n      key: 'initiatedBy',\n      render: text => <Text>{text || 'Unknown'}</Text>,\n      sorter: (a, b) => (a.initiatedBy || '').localeCompare(b.initiatedBy || '')\n    },\n    {\n      title: 'Created Date',\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      render: date => (\n        <Space direction=\"vertical\" size=\"small\">\n          <Text>{new Date(date).toLocaleDateString()}</Text>\n          <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n            {new Date(date).toLocaleTimeString()}\n          </Text>\n        </Space>\n      ),\n      sorter: (a, b) => new Date(a.createdAt) - new Date(b.createdAt)\n    },\n    {\n      title: 'Days Pending',\n      key: 'daysPending',\n      render: (_, record) => {\n        const days = calculateDaysPending(record.createdAt);\n        const sla = getSLAStatus(record.createdAt);\n        return (\n          <Space>\n            <Badge count={days} style={{ backgroundColor: sla.color }} />\n            <Text type={sla.status === 'overdue' ? 'danger' : 'secondary'}>\n              {days} day{days !== 1 ? 's' : ''}\n            </Text>\n          </Space>\n        );\n      },\n      sorter: (a, b) => calculateDaysPending(a.createdAt) - calculateDaysPending(b.createdAt)\n    },\n    {\n      title: 'SLA Status',\n      key: 'slaStatus',\n      render: (_, record) => {\n        const sla = getSLAStatus(record.createdAt);\n        return (\n          <Tag\n            color={sla.color}\n            icon={\n              sla.status === 'overdue' ? <ExclamationCircleOutlined /> : <ClockCircleOutlined />\n            }\n          >\n            {sla.text}\n          </Tag>\n        );\n      }\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (_, record) => (\n        <Space>\n          <Tooltip title=\"View Details\">\n            <Button\n              type=\"text\"\n              icon={<EyeOutlined />}\n              onClick={() => handleViewDetails(record)}\n              size=\"small\"\n            />\n          </Tooltip>\n          <Button\n            type=\"primary\"\n            icon={<SendOutlined />}\n            onClick={() => handleExtendWorkflow(record)}\n            size=\"small\"\n          >\n            Send to Plant\n          </Button>\n        </Space>\n      )\n    }\n  ];\n\n  return (\n    <>\n      <Card\n        title={\n          <Space>\n            <Title level={4} style={{ margin: 0 }}>\n              Pending Extensions\n            </Title>\n            <Badge count={filteredWorkflows.length} style={{ backgroundColor: '#fa8c16' }} />\n          </Space>\n        }\n        extra={\n          <Button icon={<ReloadOutlined />} onClick={loadPendingWorkflows} loading={loading}>\n            Refresh\n          </Button>\n        }\n      >\n        {/* Enhanced Statistics Dashboard */}\n        <Row gutter={16} style={{ marginBottom: 16 }}>\n          <Col span={6}>\n            <Card size=\"small\">\n              <div style={{ textAlign: 'center' }}>\n                <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#1890ff' }}>\n                  {statistics.total}\n                </div>\n                <div style={{ color: '#666' }}>Total Pending</div>\n                <div style={{ fontSize: '12px', color: '#999', marginTop: '4px' }}>\n                  Avg: {statistics.total > 0 ? Math.round((pendingWorkflows.reduce((sum, w) => sum + calculateDaysPending(w.createdAt), 0) / statistics.total) * 10) / 10 : 0} days\n                </div>\n              </div>\n            </Card>\n          </Col>\n          <Col span={6}>\n            <Card size=\"small\">\n              <div style={{ textAlign: 'center' }}>\n                <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#ff4d4f' }}>\n                  {statistics.overdue}\n                </div>\n                <div style={{ color: '#666' }}>Overdue (&gt;3 days)</div>\n                <div style={{ fontSize: '12px', color: '#999', marginTop: '4px' }}>\n                  {statistics.total > 0\n                    ? Math.round((statistics.overdue / statistics.total) * 100)\n                    : 0}\n                  % of total\n                </div>\n              </div>\n            </Card>\n          </Col>\n          <Col span={6}>\n            <Card size=\"small\">\n              <div style={{ textAlign: 'center' }}>\n                <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#fa8c16' }}>\n                  {statistics.warning}\n                </div>\n                <div style={{ color: '#666' }}>Warning (2-3 days)</div>\n                <div style={{ fontSize: '12px', color: '#999', marginTop: '4px' }}>\n                  Need attention soon\n                </div>\n              </div>\n            </Card>\n          </Col>\n          <Col span={6}>\n            <Card size=\"small\">\n              <div style={{ textAlign: 'center' }}>\n                <div style={{ fontSize: '24px', fontWeight: 'bold', color: '#52c41a' }}>\n                  {statistics.normal}\n                </div>\n                <div style={{ color: '#666' }}>On Track (&lt;2 days)</div>\n                <div style={{ fontSize: '12px', color: '#999', marginTop: '4px' }}>Within SLA</div>\n              </div>\n            </Card>\n          </Col>\n        </Row>\n\n        {/* Enhanced Project/Material Context Statistics */}\n        <Card\n          title={\n            <Space>\n              <FolderOpenOutlined />\n              <span>Project & Material Context Overview</span>\n            </Space>\n          }\n          size=\"small\"\n          style={{ marginBottom: 16 }}\n        >\n          <Row gutter={16} style={{ marginBottom: 12 }}>\n            <Col span={6}>\n              <Card\n                size=\"small\"\n                style={{ backgroundColor: '#f6ffed', border: '1px solid #b7eb8f' }}\n              >\n                <div style={{ textAlign: 'center' }}>\n                  <div style={{ fontSize: '20px', fontWeight: 'bold', color: '#389e0d' }}>\n                    {statistics.uniqueProjects}\n                  </div>\n                  <div style={{ color: '#666', fontSize: '12px' }}>Unique Projects</div>\n                  <div style={{ color: '#999', fontSize: '10px' }}>\n                    Across all pending extensions\n                  </div>\n                </div>\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card\n                size=\"small\"\n                style={{ backgroundColor: '#f6ffed', border: '1px solid #b7eb8f' }}\n              >\n                <div style={{ textAlign: 'center' }}>\n                  <div style={{ fontSize: '20px', fontWeight: 'bold', color: '#389e0d' }}>\n                    {statistics.uniqueMaterials}\n                  </div>\n                  <div style={{ color: '#666', fontSize: '12px' }}>Unique Materials</div>\n                  <div style={{ color: '#999', fontSize: '10px' }}>Material safety extensions</div>\n                </div>\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card\n                size=\"small\"\n                style={{ backgroundColor: '#f6ffed', border: '1px solid #b7eb8f' }}\n              >\n                <div style={{ textAlign: 'center' }}>\n                  <div style={{ fontSize: '20px', fontWeight: 'bold', color: '#389e0d' }}>\n                    {statistics.uniquePlants}\n                  </div>\n                  <div style={{ color: '#666', fontSize: '12px' }}>Target Plants</div>\n                  <div style={{ color: '#999', fontSize: '10px' }}>Plant locations involved</div>\n                </div>\n              </Card>\n            </Col>\n            <Col span={6}>\n              <Card\n                size=\"small\"\n                style={{ backgroundColor: '#f6ffed', border: '1px solid #b7eb8f' }}\n              >\n                <div style={{ textAlign: 'center' }}>\n                  <div style={{ fontSize: '20px', fontWeight: 'bold', color: '#389e0d' }}>\n                    {statistics.totalDocuments}\n                  </div>\n                  <div style={{ color: '#666', fontSize: '12px' }}>Total Documents</div>\n                  <div style={{ color: '#999', fontSize: '10px' }}>\n                    Avg: {statistics.avgDocumentsPerWorkflow} per workflow\n                  </div>\n                </div>\n              </Card>\n            </Col>\n          </Row>\n\n          <Alert\n            message=\"Enhanced Project/Material Context\"\n            description={`This view provides comprehensive filtering and context for ${statistics.total} pending extensions across ${statistics.uniqueProjects} projects, ${statistics.uniqueMaterials} materials, and ${statistics.uniquePlants} plant locations. Use the filters below to narrow down by specific project codes, material codes, plant locations, or document availability.`}\n            type=\"info\"\n            showIcon\n            size=\"small\"\n          />\n        </Card>\n\n      {/* Enhanced Filters */}\n      <Card size=\"small\" style={{ marginBottom: 16, backgroundColor: '#fafafa' }}>\n        <Row gutter={16} align=\"middle\">\n          <Col span={6}>\n            <Space>\n              <FilterOutlined />\n              <Text strong>Enhanced Filtering:</Text>\n            </Space>\n          </Col>\n          <Col span={18}>\n            <Text type=\"secondary\">\n              Filter by project codes, material codes, plant locations, SLA status,\n              document availability, and creation dates for comprehensive workflow management\n            </Text>\n          </Col>\n        </Row>\n      </Card>\n\n      <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>\n        <Col span={6}>\n          <Search\n            placeholder=\"Search by project, material, plant, or initiator\"\n            value={filters.search}\n            onChange={e => setFilters(prev => ({ ...prev, search: e.target.value }))}\n            allowClear\n            size=\"large\"\n          />\n        </Col>\n        <Col span={4}>\n          <Select\n            placeholder=\"Project Code\"\n            value={filters.projectCode}\n            onChange={value => setFilters(prev => ({ ...prev, projectCode: value }))}\n            allowClear\n            style={{ width: '100%' }}\n            showSearch\n            optionFilterProp=\"children\"\n          >\n            {uniqueProjectCodes.map(code => (\n              <Option key={code} value={code}>\n                {code}\n              </Option>\n            ))}\n          </Select>\n        </Col>\n        <Col span={4}>\n          <Select\n            placeholder=\"Material Code\"\n            value={filters.materialCode}\n            onChange={value => setFilters(prev => ({ ...prev, materialCode: value }))}\n            allowClear\n            style={{ width: '100%' }}\n            showSearch\n            optionFilterProp=\"children\"\n          >\n            {uniqueMaterialCodes.map(code => (\n              <Option key={code} value={code}>\n                {code}\n              </Option>\n            ))}\n          </Select>\n        </Col>\n        <Col span={4}>\n          <Select\n            placeholder=\"Plant Code\"\n            value={filters.plantCode}\n            onChange={value => setFilters(prev => ({ ...prev, plantCode: value }))}\n            allowClear\n            style={{ width: '100%' }}\n          >\n            {uniquePlantCodes.map(code => (\n              <Option key={code} value={code}>\n                {code}\n              </Option>\n            ))}\n          </Select>\n        </Col>\n\n        <Col span={6}>\n          <Button\n            icon={<FilterOutlined />}\n            onClick={resetFilters}\n            title=\"Reset All Filters\"\n            style={{ width: '100%' }}\n          >\n            Reset All Filters\n          </Button>\n        </Col>\n      </Row>\n\n      <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>\n        <Col span={4}>\n          <Select\n            placeholder=\"SLA Status\"\n            value={filters.slaStatus}\n            onChange={value => setFilters(prev => ({ ...prev, slaStatus: value }))}\n            allowClear\n            style={{ width: '100%' }}\n          >\n            <Option value=\"normal\">On Track</Option>\n            <Option value=\"warning\">Warning</Option>\n            <Option value=\"overdue\">Overdue</Option>\n          </Select>\n        </Col>\n        <Col span={4}>\n          <Select\n            placeholder=\"Documents\"\n            value={filters.documentCount}\n            onChange={value => setFilters(prev => ({ ...prev, documentCount: value }))}\n            allowClear\n            style={{ width: '100%' }}\n          >\n            <Option value=\"with\">With Documents</Option>\n            <Option value=\"without\">Without Documents</Option>\n          </Select>\n        </Col>\n        <Col span={4}>\n          <Select\n            placeholder=\"Initiated By\"\n            value={filters.initiatedBy}\n            onChange={value => setFilters(prev => ({ ...prev, initiatedBy: value }))}\n            allowClear\n            style={{ width: '100%' }}\n            showSearch\n            optionFilterProp=\"children\"\n          >\n            {uniqueInitiators.map(initiator => (\n              <Option key={initiator} value={initiator}>\n                {initiator}\n              </Option>\n            ))}\n          </Select>\n        </Col>\n        <Col span={6}>\n          <RangePicker\n            value={filters.dateRange}\n            onChange={dates => setFilters(prev => ({ ...prev, dateRange: dates }))}\n            style={{ width: '100%' }}\n            placeholder={['Start Date', 'End Date']}\n          />\n        </Col>\n        <Col span={2}>\n          <Text type=\"secondary\" style={{ lineHeight: '32px', textAlign: 'center' }}>\n            Showing {filteredWorkflows.length} of {pendingWorkflows.length} extensions\n          </Text>\n        </Col>\n      </Row>\n\n        <Table\n          dataSource={filteredWorkflows}\n          columns={columns}\n          rowKey=\"id\"\n          loading={loading}\n          pagination={{\n            pageSize: 10,\n            showSizeChanger: true,\n            showQuickJumper: true,\n            showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} items`\n          }}\n          locale={{\n            emptyText: 'No pending extensions found'\n          }}\n          scroll={{ x: 1200 }}\n        />\n      </Card>\n\n      {/* Workflow Details Modal */}\n      <Modal\n        title={`Workflow Details - ${selectedWorkflow?.projectCode} / ${selectedWorkflow?.materialCode}`}\n        open={detailsModalVisible}\n        onCancel={() => {\n          setDetailsModalVisible(false);\n          setSelectedWorkflow(null);\n          setWorkflowDocuments([]);\n          setShowUploadSection(false);\n        }}\n        width={800}\n        footer={[\n          <Button\n            key=\"close\"\n            onClick={() => {\n              setDetailsModalVisible(false);\n              setSelectedWorkflow(null);\n              setWorkflowDocuments([]);\n              setShowUploadSection(false);\n            }}\n          >\n            Close\n          </Button>,\n          <Button\n            key=\"extend\"\n            type=\"primary\"\n            icon={<SendOutlined />}\n            onClick={() => {\n              handleExtendWorkflow(selectedWorkflow);\n              setDetailsModalVisible(false);\n              setSelectedWorkflow(null);\n              setWorkflowDocuments([]);\n              setShowUploadSection(false);\n            }}\n          >\n            Extend to Plant\n          </Button>\n        ]}\n      >\n        {selectedWorkflow && (\n          <div>\n            <Descriptions bordered size=\"small\" column={2}>\n              <Descriptions.Item label=\"Project Code\">\n                {selectedWorkflow.projectCode}\n              </Descriptions.Item>\n              <Descriptions.Item label=\"Material Code\">\n                {selectedWorkflow.materialCode}\n              </Descriptions.Item>\n              <Descriptions.Item label=\"Plant Code\">\n                {selectedWorkflow.plantCode}\n              </Descriptions.Item>\n              <Descriptions.Item label=\"Initiated By\">\n                {selectedWorkflow.initiatedBy}\n              </Descriptions.Item>\n              <Descriptions.Item label=\"Created\">\n                {new Date(selectedWorkflow.createdAt).toLocaleDateString()}\n              </Descriptions.Item>\n              <Descriptions.Item label=\"Days Pending\" span={2}>\n                <Space>\n                  <Text>{calculateDaysPending(selectedWorkflow.createdAt)} days</Text>\n                  <Tag color={getSLAStatus(selectedWorkflow.createdAt).color}>\n                    {getSLAStatus(selectedWorkflow.createdAt).text}\n                  </Tag>\n                </Space>\n              </Descriptions.Item>\n            </Descriptions>\n\n            {/* Documents Section */}\n            <div style={{ marginTop: 16 }}>\n              <Row justify=\"space-between\" align=\"middle\" style={{ marginBottom: 8 }}>\n                <Col>\n                  <Title level={5} style={{ margin: 0 }}>\n                    <FileTextOutlined /> Documents ({workflowDocuments.length})\n                  </Title>\n                </Col>\n                <Col>\n                  <Button\n                    type=\"dashed\"\n                    icon={<PlusOutlined />}\n                    size=\"small\"\n                    onClick={() => setShowUploadSection(!showUploadSection)}\n                  >\n                    {showUploadSection ? 'Hide Upload' : 'Add Documents'}\n                  </Button>\n                </Col>\n              </Row>\n\n              {workflowDocuments.length > 0 ? (\n                <List\n                  size=\"small\"\n                  bordered\n                  dataSource={workflowDocuments}\n                  renderItem={doc => (\n                    <List.Item\n                      actions={[\n                        <Button\n                          key=\"download\"\n                          type=\"link\"\n                          size=\"small\"\n                          onClick={async () => {\n                            try {\n                              const blob = await documentAPI.downloadDocument(doc.id);\n                              const url = window.URL.createObjectURL(blob);\n                              const link = document.createElement('a');\n                              link.href = url;\n                              link.download = doc.originalFileName || `document_${doc.id}`;\n                              document.body.appendChild(link);\n                              link.click();\n                              document.body.removeChild(link);\n                              window.URL.revokeObjectURL(url);\n                              message.success(`Downloaded ${doc.originalFileName}`);\n                            } catch (error) {\n                              console.error('Error downloading document:', error);\n                              message.error('Failed to download document');\n                            }\n                          }}\n                        >\n                          Download\n                        </Button>\n                      ]}\n                    >\n                      <List.Item.Meta\n                        avatar={<FileTextOutlined />}\n                        title={doc.originalFileName}\n                        description={`Size: ${(doc.fileSize / 1024 / 1024).toFixed(2)} MB`}\n                      />\n                    </List.Item>\n                  )}\n                />\n              ) : (\n                <Alert\n                  message=\"No documents uploaded\"\n                  description=\"This workflow doesn't have any documents attached yet. Click 'Add Documents' to upload files.\"\n                  type=\"warning\"\n                  showIcon\n                />\n              )}\n\n              {/* Document Upload Section */}\n              {(workflowDocuments.length === 0 || showUploadSection) && (\n                <div style={{ marginTop: 16 }}>\n                  <DocumentUploadSection\n                    workflowId={selectedWorkflow?.id}\n                    projectCode={selectedWorkflow?.projectCode}\n                    materialCode={selectedWorkflow?.materialCode}\n                    onDocumentsUploaded={() => {\n                      // Refresh documents list\n                      handleViewDetails(selectedWorkflow);\n                      // Refresh the main workflow list to update document count\n                      loadPendingWorkflows();\n                      // Hide upload section after successful upload\n                      setShowUploadSection(false);\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </Modal>\n    </>\n  );\n};\n\nexport default PendingExtensionsListSimple;","import {\n  PlusOutlined,\n  ClockCircleOutlined,\n  CheckCircleOutlined,\n  MessageOutlined,\n  ExclamationCircleOutlined,\n  ReloadOutlined,\n  HistoryOutlined\n} from '@ant-design/icons';\nimport {\n  Card,\n  Button,\n  Typography,\n  Row,\n  Col,\n  message,\n  Tag,\n  Space,\n  Divider,\n  Tabs,\n  Statistic,\n  Alert,\n  Table\n} from 'antd';\nimport React, { useState, useEffect } from 'react';\n\nimport apiClient from '../api/client';\nimport MaterialExtensionForm from '../components/MaterialExtensionForm';\nimport PendingExtensionsList from '../components/PendingExtensionsListSimple';\nimport QueryHistoryTracker from '../components/QueryHistoryTracker';\nimport QueryInbox from '../components/QueryInbox';\nimport { JvcOnly } from '../components/RoleBasedComponent';\nimport { TEAM_NAMES, WORKFLOW_STATES, TAB_KEYS, PAGINATION } from '../constants';\nimport { documentAPI } from '../services/documentAPI';\nimport { workflowAPI } from '../services/workflowAPI';\n\nconst { Title, Text } = Typography;\nconst { TabPane } = Tabs;\n\nconst JVCView = () => {\n  const [loading, setLoading] = useState(false);\n  const [completedWorkflows, setCompletedWorkflows] = useState([]);\n  // eslint-disable-next-line no-unused-vars\n  const [_duplicateWorkflow, setDuplicateWorkflow] = useState(null);\n  // eslint-disable-next-line no-unused-vars\n  const [_showDuplicateAlert, setShowDuplicateAlert] = useState(false);\n\n  const [activeTab, setActiveTab] = useState('initiate');\n  const [refreshTrigger, setRefreshTrigger] = useState(0);\n  const [formKey] = useState(0); // setFormKey not currently used\n  const [queryStats, setQueryStats] = useState({\n    totalQueries: 0,\n    openQueries: 0,\n    resolvedToday: 0,\n    overdueQueries: 0,\n    avgResolutionTime: 0,\n    highPriorityQueries: 0\n  });\n\n\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n\n\n    const fetchData = async () => {\n      try {\n        await Promise.all([\n          loadCompletedWorkflows(controller.signal),\n          loadQueryStats(controller.signal)\n        ]);\n      } catch (error) {\n        if (!controller.signal.aborted) {\n          console.error('Error loading JVC data:', error);\n        }\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      controller.abort();\n    };\n  }, []);\n  const loadCompletedWorkflows = async signal => {\n    try {\n      setLoading(true);\n      // Load completed workflows\n      const completed = await workflowAPI.getWorkflowsByState(WORKFLOW_STATES.COMPLETED, {\n        signal\n      });\n      if (!signal?.aborted) {\n        setCompletedWorkflows(completed || []);\n      }\n    } catch (error) {\n      if (!signal?.aborted) {\n        console.error('Error loading completed workflows:', error);\n        message.error('Failed to load completed workflows');\n      }\n    } finally {\n      if (!signal?.aborted) {\n        setLoading(false);\n      }\n    }\n  };\n\n  const loadQueryStats = async signal => {\n    try {\n      const [openCount, resolvedToday, overdueQueries, avgTime, highPriorityQueries] =\n        await Promise.all([\n          apiClient.get('/queries/stats/count-open/JVC', { signal }).catch(() => 0),\n          apiClient.get('/queries/stats/resolved-today', { signal }).catch(() => 0),\n          apiClient\n            .get('/queries/overdue', { signal })\n            .then(data =>\n              Array.isArray(data) ? data.filter(q => q.assignedTeam === TEAM_NAMES.JVC).length : 0\n            )\n            .catch(() => 0),\n          apiClient.get('/queries/stats/avg-resolution-time/JVC', { signal }).catch(() => 0),\n          apiClient\n            .get('/queries/high-priority', { signal })\n            .then(data =>\n              Array.isArray(data) ? data.filter(q => q.assignedTeam === TEAM_NAMES.JVC).length : 0\n            )\n            .catch(() => 0)\n        ]);\n\n      setQueryStats({\n        totalQueries: (openCount || 0) + (resolvedToday || 0),\n        openQueries: openCount || 0,\n        resolvedToday: resolvedToday || 0,\n        overdueQueries: overdueQueries || 0,\n        avgResolutionTime: avgTime || 0,\n        highPriorityQueries: highPriorityQueries || 0\n      });\n    } catch (error) {\n      console.error('Failed to load query stats:', error);\n      // Set default values on error\n      setQueryStats({\n        totalQueries: 0,\n        openQueries: 0,\n        resolvedToday: 0,\n        overdueQueries: 0,\n        avgResolutionTime: 0,\n        highPriorityQueries: 0\n      });\n    }\n  };\n\n  const checkForExistingWorkflow = async (projectCode, materialCode, plantCode) => {\n    try {\n      console.log('Checking for existing workflow:', {\n        projectCode,\n        materialCode,\n        plantCode\n      });\n      const response = await workflowAPI.checkWorkflowExists(\n        projectCode,\n        materialCode,\n        plantCode\n      );\n      console.log('Check workflow response:', response);\n      return response.exists ? response.workflow : null;\n    } catch (error) {\n      console.error('Error checking for existing workflow:', error);\n      return null;\n    }\n  };\n\n  const handleInitiateWorkflow = async formData => {\n    try {\n      setLoading(true);\n\n      const plantCodes = formData.plantCodes || [];\n\n      // Use smart extension API for multiple plants\n      if (plantCodes.length > 1) {\n        const extensionData = {\n          projectCode: formData.projectCode,\n          materialCode: formData.materialCode,\n          plantCodes\n        };\n\n        const smartResult = await workflowAPI.extendToMultiplePlantsSmartly(extensionData);\n\n        // Handle document uploads for newly created workflows\n        if (smartResult.details.newlyCreatedWorkflows.length > 0) {\n          const documentErrors = [];\n\n          for (const workflow of smartResult.details.newlyCreatedWorkflows) {\n            try {\n              // Upload new documents if any\n              if (formData.uploadedFiles && formData.uploadedFiles.length > 0) {\n                const files = formData.uploadedFiles.map(file => {\n                  return file.originFileObj || file;\n                });\n\n                await documentAPI.uploadDocuments(\n                  files,\n                  formData.projectCode,\n                  formData.materialCode,\n                  workflow.id\n                );\n              }\n\n              // Reuse existing documents if any selected\n              if (formData.reusedDocuments && formData.reusedDocuments.length > 0) {\n                await documentAPI.reuseDocuments(formData.reusedDocuments, workflow.id);\n              }\n            } catch (docError) {\n              console.error(`Document operation failed for workflow ${workflow.id}:`, docError);\n              documentErrors.push({\n                workflowId: workflow.id,\n                plantCode: workflow.plantCode,\n                error: docError.message || 'Document operation failed'\n              });\n            }\n          }\n\n          // Show enhanced document error warnings if any occurred\n          if (documentErrors.length > 0) {\n            const affectedPlants = documentErrors.map(e => e.plantCode).join(', ');\n            const errorMessage = `Document operations failed for ${documentErrors.length} workflow(s) at plant${documentErrors.length !== 1 ? 's' : ''}: ${affectedPlants}. Workflows were created successfully but documents may need to be uploaded manually.`;\n\n            // Log detailed error information for debugging\n            console.error('Document operation failures:', documentErrors);\n\n            message.warning({\n              content: errorMessage,\n              duration: 12,\n              style: { marginTop: '20vh' }\n            });\n\n            // Also show individual error details if available\n            documentErrors.forEach(error => {\n              console.error(`Plant ${error.plantCode} (Workflow ${error.workflowId}): ${error.error}`);\n            });\n          }\n        }\n\n        // Enhanced success message with comprehensive document reuse information\n        let successMessage = smartResult.message;\n\n        if (smartResult.details.documentReuse && smartResult.details.documentReuse.totalReusedDocuments > 0) {\n          const docInfo = smartResult.details.documentReuse;\n          const totalDocs = docInfo.totalReusedDocuments;\n          const workflowCount = smartResult.details.newlyCreatedWorkflows.length;\n\n          // Add document reuse summary\n          successMessage += ` ${totalDocs} document${totalDocs !== 1 ? 's' : ''} ${totalDocs === 1 ? 'was' : 'were'} automatically reused across ${workflowCount} workflow${workflowCount !== 1 ? 's' : ''}.`;\n\n          // Add source breakdown if available\n          if (docInfo.statistics) {\n            const sources = [];\n            if (docInfo.statistics.workflowDocuments > 0) {\n              sources.push(`${docInfo.statistics.workflowDocuments} from previous workflows`);\n            }\n            if (docInfo.statistics.queryDocuments > 0) {\n              sources.push(`${docInfo.statistics.queryDocuments} from queries`);\n            }\n            if (docInfo.statistics.responseDocuments > 0) {\n              sources.push(`${docInfo.statistics.responseDocuments} from query responses`);\n            }\n\n            if (sources.length > 0) {\n              successMessage += ` Document sources: ${sources.join(', ')}.`;\n            }\n          }\n\n          // Add reuse strategy information\n          if (docInfo.reuseStrategy) {\n            successMessage += ` Reuse strategy: ${docInfo.reuseStrategy}.`;\n          }\n\n          // Add source description if available\n          if (docInfo.sourceDescription) {\n            successMessage += ` ${docInfo.sourceDescription}`;\n          }\n        } else {\n          // Mention when no documents were available for reuse\n          successMessage += ' No existing documents were found for automatic reuse.';\n        }\n\n        // Show enhanced success message\n        message.success({\n          content: successMessage,\n          duration: 10,\n          style: { marginTop: '20vh' }\n        });\n\n        // Show additional notification for document reuse details if significant\n        if (smartResult.details.documentReuse && smartResult.details.documentReuse.totalReusedDocuments > 5) {\n          const docInfo = smartResult.details.documentReuse;\n          setTimeout(() => {\n            message.info({\n              content: `Document reuse summary: ${docInfo.totalReusedDocuments} documents were automatically attached to ${smartResult.details.newlyCreatedWorkflows.length} workflows, saving time and ensuring consistency across plants.`,\n              duration: 6,\n              style: { marginTop: '20vh' }\n            });\n          }, 2000);\n        }\n\n        // Trigger data refresh\n        setRefreshTrigger(prev => prev + 1);\n        setActiveTab(TAB_KEYS.PENDING);\n\n        // Refresh completed workflows and stats\n        loadCompletedWorkflows();\n        loadQueryStats();\n\n        // Return smart result with detailed duplicate information\n        return {\n          success: smartResult.success,\n          message: successMessage,\n          summary: smartResult.summary,\n          details: smartResult.details, // Include full details for modal display\n          createdWorkflows: smartResult.details.newlyCreatedWorkflows,\n          duplicateWorkflows: smartResult.details.duplicateWorkflows.existingWorkflows,\n          duplicatePlants: smartResult.details.duplicateWorkflows.plants,\n          failedPlants: smartResult.details.failedPlants,\n          isSmartExtension: true\n        };\n      }\n\n      // Single plant workflow creation (fallback to original logic)\n      const plantCode = plantCodes[0];\n      const existingWorkflow = await checkForExistingWorkflow(\n        formData.projectCode,\n        formData.materialCode,\n        plantCode\n      );\n\n      if (existingWorkflow) {\n        return {\n          isDuplicate: true,\n          existingWorkflow,\n          formData,\n          duplicateWorkflows: [{ plantCode, existingWorkflow }]\n        };\n      }\n\n      // Create single workflow\n      const workflowData = {\n        projectCode: formData.projectCode,\n        materialCode: formData.materialCode,\n        plantCode,\n        initiatedBy: 'current-user' // In real app, get from auth context\n      };\n\n      const createdWorkflow = await workflowAPI.createWorkflow(workflowData);\n\n      let documentOperationFailed = false;\n      let documentErrorMessage = '';\n\n      try {\n        // Upload new documents if any\n        if (formData.uploadedFiles && formData.uploadedFiles.length > 0) {\n          const files = formData.uploadedFiles.map(file => {\n            return file.originFileObj || file;\n          });\n\n          await documentAPI.uploadDocuments(\n            files,\n            formData.projectCode,\n            formData.materialCode,\n            createdWorkflow.id\n          );\n        }\n\n        // Reuse existing documents if any selected\n        if (formData.reusedDocuments && formData.reusedDocuments.length > 0) {\n          await documentAPI.reuseDocuments(formData.reusedDocuments, createdWorkflow.id);\n        }\n      } catch (docError) {\n        console.error('Document operation failed for single workflow:', docError);\n        documentOperationFailed = true;\n        documentErrorMessage = docError.message || 'Document operation failed';\n\n        // Determine what type of document operation failed\n        const uploadCount = formData.uploadedFiles?.length || 0;\n        const reuseCount = formData.reusedDocuments?.length || 0;\n        let operationType = '';\n\n        if (uploadCount > 0 && reuseCount > 0) {\n          operationType = 'document upload and reuse operations';\n        } else if (uploadCount > 0) {\n          operationType = 'document upload operation';\n        } else if (reuseCount > 0) {\n          operationType = 'document reuse operation';\n        } else {\n          operationType = 'document operations';\n        }\n\n        // Show enhanced document error warning\n        message.warning({\n          content: `Workflow created successfully for ${formData.projectCode}/${formData.materialCode} at plant ${plantCode}, but ${operationType} failed: ${documentErrorMessage}. Please upload or reuse documents manually from the workflow details page.`,\n          duration: 10,\n          style: { marginTop: '20vh' }\n        });\n      }\n\n      // Enhanced success message for single workflow with comprehensive document information\n      if (!documentOperationFailed) {\n        const totalDocs = (formData.uploadedFiles?.length || 0) + (formData.reusedDocuments?.length || 0);\n        let successMessage = `Workflow created successfully for ${formData.projectCode}/${formData.materialCode} at plant ${plantCode}.`;\n\n        if (totalDocs > 0) {\n          const newDocs = formData.uploadedFiles?.length || 0;\n          const reusedDocs = formData.reusedDocuments?.length || 0;\n\n          successMessage += ` ${totalDocs} document${totalDocs !== 1 ? 's' : ''} ${totalDocs === 1 ? 'was' : 'were'} attached`;\n\n          if (newDocs > 0 && reusedDocs > 0) {\n            successMessage += ` (${newDocs} newly uploaded, ${reusedDocs} reused from existing materials)`;\n          } else if (reusedDocs > 0) {\n            successMessage += ` (all ${reusedDocs} reused from existing materials for this project/material combination)`;\n          } else if (newDocs > 0) {\n            successMessage += ` (all ${newDocs} newly uploaded)`;\n          }\n          successMessage += '.';\n        } else {\n          successMessage += ' No documents were attached to this workflow.';\n        }\n\n        // Show enhanced success message only if document operations succeeded\n        message.success({\n          content: successMessage,\n          duration: 8,\n          style: { marginTop: '20vh' }\n        });\n      }\n\n      // Trigger data refresh\n      setRefreshTrigger(prev => prev + 1);\n      setActiveTab(TAB_KEYS.PENDING);\n\n      // Refresh completed workflows and stats\n      loadCompletedWorkflows();\n      loadQueryStats();\n\n      return {\n        success: true,\n        message: documentOperationFailed\n          ? `Workflow created successfully but document operations failed: ${documentErrorMessage}. Please upload documents manually.`\n          : `Workflow created successfully for ${formData.projectCode}/${formData.materialCode} at plant ${plantCode} with all document operations completed.`,\n        createdWorkflows: [createdWorkflow],\n        duplicateWorkflows: [],\n        duplicatePlants: [],\n        failedPlants: [],\n        documentOperationFailed,\n        documentErrorMessage\n      };\n\n    } catch (error) {\n      console.error('Error initiating workflows:', error);\n\n      // Provide more specific error messages based on error type\n      let errorMessage = 'Failed to initiate workflows';\n\n      if (error.message) {\n        if (error.message.includes('document')) {\n          errorMessage = `Workflow creation failed due to document processing error: ${error.message}`;\n        } else if (error.message.includes('duplicate')) {\n          errorMessage = `Workflow creation failed due to duplicate detection: ${error.message}`;\n        } else if (error.message.includes('permission') || error.message.includes('access')) {\n          errorMessage = `Workflow creation failed due to access permissions: ${error.message}`;\n        } else {\n          errorMessage = `Failed to initiate workflows: ${error.message}`;\n        }\n      } else {\n        errorMessage = 'Failed to initiate workflows. Please check your connection and try again.';\n      }\n\n      message.error({\n        content: errorMessage,\n        duration: 8,\n        style: { marginTop: '20vh' }\n      });\n\n      // Return error information for potential handling by calling component\n      return {\n        success: false,\n        error: error.message || 'Unknown error occurred',\n        message: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleExtendToPlant = async workflow => {\n    try {\n      setLoading(true);\n\n      await workflowAPI.extendWorkflow(workflow.id, {\n        plantCode: workflow.plantCode,\n        comment: `Extended to plant ${workflow.plantCode} for questionnaire completion. Project: ${workflow.projectCode}, Material: ${workflow.materialCode}`\n      });\n\n      message.success({\n        content: `Workflow successfully extended to plant ${workflow.plantCode}. Plant team has been notified to begin questionnaire completion for ${workflow.projectCode}/${workflow.materialCode}.`,\n        duration: 6\n      });\n\n      setRefreshTrigger(prev => prev + 1);\n\n      // Refresh stats\n      loadQueryStats();\n    } catch (error) {\n      console.error('Error extending workflow:', error);\n      message.error({\n        content: `Failed to extend workflow for ${workflow.projectCode}/${workflow.materialCode} to plant ${workflow.plantCode}. Please try again.`,\n        duration: 5\n      });\n      throw error; // Re-throw to let PendingExtensionsList handle it\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const refreshData = () => {\n    loadCompletedWorkflows();\n    loadQueryStats();\n    setRefreshTrigger(prev => prev + 1);\n  };\n\n  // const handleViewExistingWorkflow = workflow => { // Not currently used\n  //   setShowDuplicateAlert(false);\n  //   setDuplicateWorkflow(null);\n  //   setActiveTab(TAB_KEYS.PENDING);\n  //   // Reset the form by changing its key, which forces a re-render\n  //   setFormKey(prev => prev + 1);\n  //   message.info(`Switched to Pending Extensions tab. Look for workflow #${workflow.id}.`);\n  // };\n\n  // const handleCloseDuplicateAlert = () => { // Not currently used\n  //   setShowDuplicateAlert(false);\n  //   setDuplicateWorkflow(null);\n  //   // Reset the form by changing its key, which forces a re-render\n  //   setFormKey(prev => prev + 1);\n  // };\n\n  const completedColumns = [\n    {\n      title: 'Project Code',\n      dataIndex: 'projectCode',\n      key: 'projectCode',\n      render: text => <Text strong>{text}</Text>\n    },\n    {\n      title: 'Material Code',\n      dataIndex: 'materialCode',\n      key: 'materialCode',\n      width: 140,\n      render: (text, record) => (\n        <div>\n          <Text code style={{ fontWeight: 'bold' }}>\n            {text}\n          </Text>\n          {record.itemDescription && (\n            <div style={{ fontSize: '12px', color: '#666', marginTop: '2px' }}>\n              {record.itemDescription}\n            </div>\n          )}\n        </div>\n      )\n    },\n    {\n      title: 'Plant Code',\n      dataIndex: 'plantCode',\n      key: 'plantCode'\n    },\n    {\n      title: 'Completed',\n      dataIndex: 'lastModified',\n      key: 'lastModified',\n      render: date => new Date(date).toLocaleDateString()\n    },\n    {\n      title: 'Status',\n      dataIndex: 'state',\n      key: 'state',\n      render: () => (\n        <Tag color=\"green\" icon={<CheckCircleOutlined />}>\n          Completed\n        </Tag>\n      )\n    }\n  ];\n\n  return (\n    <JvcOnly>\n      <div style={{ padding: 24 }}>\n        <Title level={2}>JVC Dashboard</Title>\n        <Text type=\"secondary\">\n          Initiate MSDS workflows and manage material safety documentation process\n        </Text>\n\n        <Divider />\n\n        <Tabs\n          activeKey={activeTab}\n          onChange={setActiveTab}\n          tabBarExtraContent={\n            <Space>\n              <Button icon={<ReloadOutlined />} onClick={refreshData} size=\"small\">\n                Refresh\n              </Button>\n            </Space>\n          }\n        >\n          <TabPane tab=\"Initiate Workflow\" key=\"initiate\" icon={<PlusOutlined />}>\n            <Row gutter={24}>\n              <Col span={18}>\n                <MaterialExtensionForm\n                  key={formKey}\n                  onSubmit={handleInitiateWorkflow}\n                  loading={loading}\n                />\n              </Col>\n\n              <Col span={6}>\n                <Card title=\"Quick Stats\">\n                  <div style={{ textAlign: 'center' }}>\n                    <div style={{ marginBottom: 16 }}>\n                      <Text type=\"secondary\">Completed This Month</Text>\n                      <div style={{ fontSize: 24, fontWeight: 'bold', color: '#52c41a' }}>\n                        {completedWorkflows.length}\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n              </Col>\n            </Row>\n          </TabPane>\n\n          <TabPane tab=\"Pending Extensions\" key=\"pending\" icon={<ClockCircleOutlined />}>\n            <PendingExtensionsList\n              onExtendToPlant={handleExtendToPlant}\n              refreshTrigger={refreshTrigger}\n            />\n          </TabPane>\n\n          <TabPane\n            tab={`Completed (${completedWorkflows.length})`}\n            key=\"completed\"\n            icon={<CheckCircleOutlined />}\n          >\n            <Card title=\"Completed Workflows\">\n              <Table\n                dataSource={completedWorkflows}\n                columns={completedColumns}\n                rowKey=\"id\"\n                loading={loading}\n                pagination={{ pageSize: PAGINATION.DEFAULT_PAGE_SIZE }}\n                locale={{\n                  emptyText: 'No completed workflows'\n                }}\n              />\n            </Card>\n          </TabPane>\n\n          {/* Enhanced Query Management Tabs */}\n          <TabPane\n            tab={\n              <Space>\n                <MessageOutlined />\n                <span>Query Inbox</span>\n                {queryStats.openQueries > 0 && (\n                  <span\n                    style={{\n                      background: '#ff4d4f',\n                      color: 'white',\n                      borderRadius: '10px',\n                      padding: '2px 6px',\n                      fontSize: '12px'\n                    }}\n                  >\n                    {queryStats.openQueries}\n                  </span>\n                )}\n              </Space>\n            }\n            key=\"queries\"\n          >\n            {/* Query Stats */}\n            <Row gutter={16} style={{ marginBottom: 16 }}>\n              <Col span={6}>\n                <Card>\n                  <Statistic\n                    title=\"Open Queries\"\n                    value={queryStats.openQueries}\n                    prefix={<MessageOutlined />}\n                    valueStyle={{ color: '#cf1322' }}\n                  />\n                </Card>\n              </Col>\n              <Col span={6}>\n                <Card>\n                  <Statistic\n                    title=\"Resolved Today\"\n                    value={queryStats.resolvedToday}\n                    prefix={<CheckCircleOutlined />}\n                    valueStyle={{ color: '#3f8600' }}\n                  />\n                </Card>\n              </Col>\n              <Col span={6}>\n                <Card>\n                  <Statistic\n                    title=\"Overdue\"\n                    value={queryStats.overdueQueries}\n                    prefix={<ExclamationCircleOutlined />}\n                    valueStyle={{ color: queryStats.overdueQueries > 0 ? '#cf1322' : '#3f8600' }}\n                  />\n                </Card>\n              </Col>\n              <Col span={6}>\n                <Card>\n                  <Statistic\n                    title=\"Avg Resolution\"\n                    value={queryStats.avgResolutionTime}\n                    precision={1}\n                    suffix=\"hrs\"\n                    prefix={<ClockCircleOutlined />}\n                  />\n                </Card>\n              </Col>\n            </Row>\n\n            {/* Alerts for urgent items */}\n            {queryStats.overdueQueries > 0 && (\n              <Alert\n                message={`${queryStats.overdueQueries} queries are overdue (>3 days)`}\n                description=\"These queries require immediate attention to maintain SLA compliance.\"\n                type=\"error\"\n                showIcon\n                style={{ marginBottom: 16 }}\n                action={\n                  <Button size=\"small\" danger>\n                    View Overdue\n                  </Button>\n                }\n              />\n            )}\n\n            {queryStats.highPriorityQueries > 0 && (\n              <Alert\n                message={`${queryStats.highPriorityQueries} high priority queries pending`}\n                description=\"These queries have been marked as high priority and need urgent resolution.\"\n                type=\"warning\"\n                showIcon\n                style={{ marginBottom: 16 }}\n                action={\n                  <Button size=\"small\" type=\"primary\">\n                    View High Priority\n                  </Button>\n                }\n              />\n            )}\n\n            <QueryInbox team=\"JVC\" userRole=\"JVC_USER\" />\n          </TabPane>\n\n          <TabPane\n            tab={\n              <Space>\n                <HistoryOutlined />\n                <span>Query History</span>\n              </Space>\n            }\n            key=\"history\"\n          >\n            <QueryHistoryTracker />\n          </TabPane>\n        </Tabs>\n      </div>\n    </JvcOnly>\n  );\n};\n\nexport default JVCView;\n"],"names":["documentAPI","uploadDocuments","files","projectCode","materialCode","workflowId","Error","apiClient","upload","toString","enhanced","arguments","length","undefined","get","encodeURIComponent","documentIds","contextType","params","URLSearchParams","append","console","log","post","documentId","url","download","file","maxSize","FILE_SIZE","MAX_UPLOAD_SIZE","isValidType","includes","type","isValidSize","size","projectAPI","async","map","code","value","label","name","error","plants","plant","id","location","locationCode","description","Dragger","Upload","SecureFileUpload","React","_ref","fileList","onChange","maxFiles","maxSizeMB","allowedTypes","allowedExtensions","componentName","enableMalwareScan","showSecurityInfo","props","scanningFiles","setScanningFiles","useState","Set","securityAlerts","setSecurityAlerts","validateFile","useCallback","validationResults","isValid","errors","warnings","typeValidation","ValidationRules","validateType","push","message","sizeValidation","validateSize","filenameValidation","validateFilename","fileExtension","toLowerCase","substring","lastIndexOf","sanitizedFilename","InputSanitizer","sanitizeFilename","some","pattern","test","simulateMalwareScan","Promise","resolve","setTimeout","isClean","indicator","scanTime","Math","random","threats","handleUpload","onSuccess","onError","options","validation","errorMessage","join","SecurityAuditLogger","logFileUploadEvent","forEach","warning","scanResult","threatMessage","prev","filename","timestamp","Date","toISOString","handleChange","info","newFileList","slice","originFileObj","has","uid","status","response","beforeUpload","securityInfo","useMemo","validFiles","filter","f","errorFiles","uploadingFiles","_jsxs","style","marginTop","children","_jsx","Alert","marginBottom","showIcon","icon","SafetyCertificateOutlined","List","dataSource","renderItem","alert","Item","Tag","color","customRequest","multiple","showUploadList","showPreviewIcon","showRemoveIcon","showDownloadIcon","className","UploadOutlined","header","FileTextOutlined","bordered","actions","Progress","percent","showInfo","marginLeft","Boolean","Meta","avatar","title","toFixed","displayName","Option","Select","Title","Text","Typography","onSubmit","loading","form","Form","useForm","projects","setProjects","materials","setMaterials","setPlants","setFileList","reusableDocuments","setReusableDocuments","selectedReusableDocuments","setSelectedReusableDocuments","showReusableDocuments","setShowReusableDocuments","loadingStates","setLoadingStates","useEffect","controller","AbortController","loadProjectsWithAbort","setLoadingState","projectData","signal","aborted","loadPlantsWithAbort","plantData","all","loadInitialData","abort","key","checkForReusableDocuments","reusableDocs","doc","resetForm","resetFields","Card","Space","level","margin","layout","onFinish","totalDocs","values","plantCodes","Modal","confirm","RocketOutlined","width","top","bodyStyle","minHeight","padding","content","Descriptions","column","span","ProjectOutlined","strong","ExperimentOutlined","wrap","HomeOutlined","plantCode","FileProtectOutlined","Badge","count","backgroundColor","display","Button","DownloadOutlined","onClick","URL","createObjectURL","link","document","createElement","href","body","appendChild","click","removeChild","revokeObjectURL","blob","window","originalFileName","success","split","fileSize","onOk","reject","submissionData","uploadedFiles","reusedDocuments","metadata","totalDocuments","newDocuments","submittedAt","formVersion","result","_result$duplicateWork","isSmartExtension","alignItems","gap","fontSize","maxHeight","overflowY","Row","gutter","Col","Statistic","summary","totalRequested","created","valueStyle","skipped","failed","createdWorkflows","workflow","state","createdAt","toLocaleString","duplicateWorkflows","details","documentReuse","totalReusedDocuments","reuseStrategy","sourceDescription","statistics","workflowDocuments","queryDocuments","responseDocuments","position","documentSource","isReused","height","minWidth","lineHeight","right","reuseCount","uploadedBy","borderRadius","totalUniqueDocuments","documentsPerWorkflow","workflowsWithReusedDocuments","failedPlants","replace","toLocaleDateString","year","month","day","hour","minute","initiatedBy","documentCount","okText","okButtonProps","xs","sm","rules","required","placeholder","showSearch","materialData","filterOption","input","option","indexOf","project","getFieldValue","disabled","material","mode","allowClear","maxTagCount","Checkbox","Group","help","_ref2","validatedFileList","lastModified","htmlType","onDocumentsUploaded","uploading","setUploading","border","direction","accept","danger","DeleteOutlined","item","removeFile","CheckCircleOutlined","textAlign","paddingLeft","RangePicker","DatePicker","Search","Input","onExtendToPlant","refreshTrigger","pendingWorkflows","setPendingWorkflows","filteredWorkflows","setFilteredWorkflows","setLoading","selectedWorkflow","setSelectedWorkflow","detailsModalVisible","setDetailsModalVisible","setWorkflowDocuments","showUploadSection","setShowUploadSection","filters","setFilters","search","dateRange","slaStatus","loadPendingWorkflows","workflows","workflowAPI","getWorkflowsByState","calculateDaysPending","now","diffTime","abs","ceil","getSLAStatus","days","text","handleExtendWorkflow","handleViewDetails","documents","calculateStatistics","total","overdue","w","normal","uniqueProjects","uniqueMaterials","uniquePlants","reduce","sum","avgDocumentsPerWorkflow","round","uniqueProjectCodes","uniqueMaterialCodes","uniquePlantCodes","uniqueInitiators","filtered","searchLower","_workflow$projectCode","_workflow$materialCod","_workflow$plantCode","_workflow$initiatedBy","assignedPlant","_workflow$initiatedBy2","startDate","endDate","createdDate","toDate","daysPending","columns","dataIndex","render","record","projectDescription","sorter","a","b","localeCompare","itemDescription","materialDescription","_","aPlant","bPlant","Tooltip","ExclamationCircleOutlined","date","toLocaleTimeString","sla","ClockCircleOutlined","EyeOutlined","SendOutlined","_Fragment","extra","ReloadOutlined","fontWeight","FolderOpenOutlined","align","FilterOutlined","e","target","optionFilterProp","resetFilters","initiator","dates","Table","rowKey","pagination","pageSize","showSizeChanger","showQuickJumper","showTotal","range","locale","emptyText","scroll","x","open","onCancel","footer","justify","PlusOutlined","DocumentUploadSection","TabPane","Tabs","JVCView","completedWorkflows","setCompletedWorkflows","_duplicateWorkflow","setDuplicateWorkflow","_showDuplicateAlert","setShowDuplicateAlert","activeTab","setActiveTab","setRefreshTrigger","formKey","queryStats","setQueryStats","totalQueries","openQueries","resolvedToday","overdueQueries","avgResolutionTime","highPriorityQueries","loadCompletedWorkflows","loadQueryStats","fetchData","completed","WORKFLOW_STATES","COMPLETED","openCount","avgTime","catch","then","data","Array","isArray","q","assignedTeam","TEAM_NAMES","JVC","completedColumns","JvcOnly","Divider","activeKey","tabBarExtraContent","refreshData","tab","MaterialExtensionForm","formData","extensionData","smartResult","extendToMultiplePlantsSmartly","newlyCreatedWorkflows","documentErrors","docError","affectedPlants","duration","successMessage","docInfo","workflowCount","sources","TAB_KEYS","PENDING","existingWorkflows","duplicatePlants","existingWorkflow","checkWorkflowExists","exists","checkForExistingWorkflow","isDuplicate","workflowData","createdWorkflow","createWorkflow","documentOperationFailed","documentErrorMessage","_formData$uploadedFil","_formData$reusedDocum","uploadCount","operationType","_formData$uploadedFil2","_formData$reusedDocum2","_formData$uploadedFil3","_formData$reusedDocum3","newDocs","reusedDocs","PendingExtensionsList","extendWorkflow","comment","PAGINATION","DEFAULT_PAGE_SIZE","MessageOutlined","background","prefix","precision","suffix","action","QueryInbox","team","userRole","HistoryOutlined","QueryHistoryTracker"],"sourceRoot":""}