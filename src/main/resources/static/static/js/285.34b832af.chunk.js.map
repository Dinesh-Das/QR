{"version":3,"file":"static/js/285.34b832af.chunk.js","mappings":"uWAkBA,MAAM,MAAEA,GAAUC,EAAAA,GACZ,QAAEC,GAAYC,EAAAA,EAkMpB,EAhMiBC,KACf,MAAOC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,CAC3CC,aAAc,EACdC,YAAa,EACbC,cAAe,EACfC,eAAgB,EAChBC,kBAAmB,EACnBC,oBAAqB,KAIjB,WAAEC,EAAU,QAAEC,IAAYC,EAAAA,EAAAA,OAEhCC,EAAAA,EAAAA,WAAU,KACR,MAAMC,EAAa,IAAIC,gBAIvB,OAFAC,EAAmBF,EAAWG,QAEvB,KACLH,EAAWI,UAEZ,IAEH,MAAMF,EAAqBG,UACzB,IACE,MAAOC,EAAWd,EAAeC,EAAgBc,EAASZ,SAClDa,QAAQC,IAAI,CAChBC,EAAAA,QAAUC,IAAI,iCAAkC,CAAER,WAAUS,MAAM,IAAM,GACxEF,EAAAA,QAAUC,IAAI,gCAAiC,CAAER,WAAUS,MAAM,IAAM,GACvEF,EAAAA,QACGC,IAAI,mBAAoB,CAAER,WAC1BU,KAAKC,GACJC,MAAMC,QAAQF,GAAQA,EAAKG,OAAOC,GAAKA,EAAEC,eAAiBC,EAAAA,GAAWC,MAAMC,OAAS,GAErFV,MAAM,IAAM,GACfF,EAAAA,QAAUC,IAAI,0CAA2C,CAAER,WAAUS,MAAM,IAAM,GACjFF,EAAAA,QACGC,IAAI,yBAA0B,CAAER,WAChCU,KAAKC,GACJC,MAAMC,QAAQF,GAAQA,EAAKG,OAAOC,GAAKA,EAAEC,eAAiBC,EAAAA,GAAWC,MAAMC,OAAS,GAErFV,MAAM,IAAM,KAGnBxB,EAAc,CACZE,aAAcgB,EAAYd,EAC1BD,YAAae,EACbd,gBACAC,iBACAC,kBAAmBa,EACnBZ,uBAEJ,CAAE,MAAO4B,GACPC,QAAQD,MAAM,kCAAmCA,EACnD,GAGF,OACEE,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAAAC,UACPC,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAEC,QAAS,IAAKH,SAAA,EAC1BF,EAAAA,EAAAA,KAAC3C,EAAK,CAACiD,MAAO,EAAEJ,SAAC,oBAGjBC,EAAAA,EAAAA,MAACI,EAAAA,EAAG,CAACC,OAAQ,GAAIJ,MAAO,CAAEK,aAAc,IAAKP,SAAA,EAC3CF,EAAAA,EAAAA,KAACU,EAAAA,EAAG,CAACC,KAAM,EAAET,UACXF,EAAAA,EAAAA,KAACY,EAAAA,EAAI,CAAAV,UACHF,EAAAA,EAAAA,KAACa,EAAAA,EAAS,CACRC,MAAM,eACNC,MAAOrD,EAAWI,YAClBkD,QAAQhB,EAAAA,EAAAA,KAACiB,EAAAA,EAAe,IACxBC,WAAY,CAAEC,MAAO,kBAI3BnB,EAAAA,EAAAA,KAACU,EAAAA,EAAG,CAACC,KAAM,EAAET,UACXF,EAAAA,EAAAA,KAACY,EAAAA,EAAI,CAAAV,UACHF,EAAAA,EAAAA,KAACa,EAAAA,EAAS,CACRC,MAAM,iBACNC,MAAOrD,EAAWK,cAClBiD,QAAQhB,EAAAA,EAAAA,KAACoB,EAAAA,EAAmB,IAC5BF,WAAY,CAAEC,MAAO,kBAI3BnB,EAAAA,EAAAA,KAACU,EAAAA,EAAG,CAACC,KAAM,EAAET,UACXF,EAAAA,EAAAA,KAACY,EAAAA,EAAI,CAAAV,UACHF,EAAAA,EAAAA,KAACa,EAAAA,EAAS,CACRC,MAAM,UACNC,MAAOrD,EAAWM,eAClBgD,QAAQhB,EAAAA,EAAAA,KAACqB,EAAAA,EAAyB,IAClCH,WAAY,CAAEC,MAAOzD,EAAWM,eAAiB,EAAI,UAAY,kBAIvEgC,EAAAA,EAAAA,KAACU,EAAAA,EAAG,CAACC,KAAM,EAAET,UACXF,EAAAA,EAAAA,KAACY,EAAAA,EAAI,CAAAV,UACHF,EAAAA,EAAAA,KAACa,EAAAA,EAAS,CACRC,MAAM,iBACNC,MAAOrD,EAAWO,kBAClBqD,UAAW,EACXC,OAAO,MACPP,QAAQhB,EAAAA,EAAAA,KAACwB,EAAAA,EAAmB,aAOnC9D,EAAWM,eAAiB,IAC3BgC,EAAAA,EAAAA,KAACyB,EAAAA,EAAK,CACJC,QAAS,GAAGhE,EAAWM,+CACvB2D,YAAY,wEACZC,KAAK,QACLC,UAAQ,EACRzB,MAAO,CAAEK,aAAc,IACvBqB,QACE9B,EAAAA,EAAAA,KAAC+B,EAAAA,GAAM,CAACC,KAAK,QAAQC,QAAM,EAAA/B,SAAC,mBAOjCxC,EAAWQ,oBAAsB,IAChC8B,EAAAA,EAAAA,KAACyB,EAAAA,EAAK,CACJC,QAAS,GAAGhE,EAAWQ,oDACvByD,YAAY,8EACZC,KAAK,UACLC,UAAQ,EACRzB,MAAO,CAAEK,aAAc,IACvBqB,QACE9B,EAAAA,EAAAA,KAAC+B,EAAAA,GAAM,CAACC,KAAK,QAAQJ,KAAK,UAAS1B,SAAC,0BAQ1CC,EAAAA,EAAAA,MAAC3C,EAAAA,EAAI,CACH0E,iBAAiB,UACjBF,KAAK,QACLG,oBACEnC,EAAAA,EAAAA,KAACoC,EAAAA,EAAK,CAAAlC,UACJF,EAAAA,EAAAA,KAAC+B,EAAAA,GAAM,CAACM,MAAMrC,EAAAA,EAAAA,KAACsC,EAAAA,EAAc,IAAKC,QAAS9D,EAAoBuD,KAAK,QAAO9B,SAAC,oBAI/EA,SAAA,EAEDF,EAAAA,EAAAA,KAACzC,EAAO,CACNiF,KACErC,EAAAA,EAAAA,MAACiC,EAAAA,EAAK,CAAAlC,SAAA,EACJF,EAAAA,EAAAA,KAACiB,EAAAA,EAAe,KAChBjB,EAAAA,EAAAA,KAAA,QAAAE,SAAM,gBACLxC,EAAWI,YAAc,IACxBkC,EAAAA,EAAAA,KAAA,QACEI,MAAO,CACLqC,WAAY,UACZtB,MAAO,QACPuB,aAAc,OACdrC,QAAS,UACTsC,SAAU,QACVzC,SAEDxC,EAAWI,iBAInBoC,UAGDF,EAAAA,EAAAA,KAAC4C,EAAAA,EAAU,CAACC,KAAK,OAAOC,SAAS,eAF7B,YAKN9C,EAAAA,EAAAA,KAACzC,EAAO,CACNiF,KACErC,EAAAA,EAAAA,MAACiC,EAAAA,EAAK,CAAAlC,SAAA,EACJF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAe,KAChB/C,EAAAA,EAAAA,KAAA,QAAAE,SAAM,qBAETA,UAGDF,EAAAA,EAAAA,KAACgD,EAAAA,EAAmB,KAFhB,mB,qECrLT,MAAM3E,EAAqBA,KAChC,MAAO4E,EAAeC,IAAoBtF,EAAAA,EAAAA,UAAS,OAC5CuF,EAASC,IAAcxF,EAAAA,EAAAA,WAAS,IAChCkC,EAAOuD,IAAYzF,EAAAA,EAAAA,UAAS,MAG7B0F,GAAoBC,EAAAA,EAAAA,aAAY3E,UACpC,KAAK4E,EAAAA,EAAAA,MAGH,OAFAN,EAAiB,WACjBE,GAAW,GAIb,IACEA,GAAW,GACXC,EAAS,MAET,MAAMI,QAAgBC,EAAAA,EAAYC,uBAClCT,EAAiBO,EACnB,CAAE,MAAOG,GACP7D,QAAQ8D,KAAK,iDAAkDD,GAC/DP,EAASO,GAGT,MAAME,EAAkBJ,EAAAA,EAAYK,2BACpCb,EAAiBY,EACnB,CAAC,QACCV,GAAW,EACb,GACC,KAEH9E,EAAAA,EAAAA,WAAU,KACRgF,KACC,CAACA,IAGJ,MAAMU,GAAoBT,EAAAA,EAAAA,aAAY3E,UACpC,IACE,aAAa8E,EAAAA,EAAYO,gBAAgBC,EAC3C,CAAE,MAAOpE,GAEP,OADAC,QAAQ8D,KAAK,8CAA+C/D,GACrD4D,EAAAA,EAAYS,wBAAwBD,EAC7C,GACC,IAGGE,GAAkBb,EAAAA,EAAAA,aAAY3E,eAAOyF,GAA4B,IAAlBC,EAAOC,UAAA1E,OAAA,QAAA2E,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC9D,IACE,aAAab,EAAAA,EAAYe,cAAcJ,EAAUC,EACnD,CAAE,MAAOxE,GAEP,OADAC,QAAQ8D,KAAK,4CAA6C/D,GACnD4D,EAAAA,EAAYgB,sBAAsBL,EAAUC,EACrD,CACF,EAAG,IAGGK,GAAuBpB,EAAAA,EAAAA,aAAY3E,eAAOyF,EAAUO,GAA6B,IAAlBN,EAAOC,UAAA1E,OAAA,QAAA2E,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC9E,IACE,aAAab,EAAAA,EAAYmB,mBAAmBR,EAAUO,EAAWN,EACnE,CAAE,MAAOxE,GAEP,OADAC,QAAQ8D,KAAK,kDAAmD/D,GACzD4D,EAAAA,EAAYoB,2BAA2BT,EAAUO,EAAWN,EACrE,CACF,EAAG,IAGGS,GAAqBxB,EAAAA,EAAAA,aAAY3E,eAAOoG,EAAcC,EAAYnD,GAA0B,IAAlBwC,EAAOC,UAAA1E,OAAA,QAAA2E,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACzF,IACE,aAAab,EAAAA,EAAYqB,mBAAmBC,EAAcC,EAAYnD,EAAQwC,EAChF,CAAE,MAAOxE,GAEP,OADAC,QAAQ8D,KAAK,0CAA2C/D,GACjD4D,EAAAA,EAAYwB,0BAA0BF,EAAcC,EAAYnD,EAAQwC,EACjF,CACF,EAAG,IAGGa,GAAsB5B,EAAAA,EAAAA,aAAY,CAAClE,EAAM+F,IACtC1B,EAAAA,EAAY2B,wBAAwBhG,EAAM+F,GAChD,IAEH,MAAO,CAELjC,UACArD,QAGA0D,iBAAiBA,EAAAA,EAAAA,MACjB8B,aAAaC,EAAAA,EAAAA,MACbC,aAAaC,EAAAA,EAAAA,MACbC,YAAYC,EAAAA,EAAAA,MACZC,cAAcC,EAAAA,EAAAA,MAGdzH,SAASA,EAAAA,EAAAA,MACT0H,WAAWA,EAAAA,EAAAA,MACXC,WAAWA,EAAAA,EAAAA,MACX5H,YAAYA,EAAAA,EAAAA,MACZ6H,aAAaA,EAAAA,EAAAA,MACbC,UAAUA,EAAAA,EAAAA,MAGVhD,gBAGAiD,QAAUC,IAASD,EAAAA,EAAAA,IAAQC,GAC3BC,WAAaC,GAAUA,EAAMC,KAAKH,IAAQD,EAAAA,EAAAA,IAAQC,IAClDI,YAAcF,GAAUA,EAAMG,MAAML,IAAQD,EAAAA,EAAAA,IAAQC,IAGpDnC,oBACAI,kBACAO,uBACAI,qBAGAI,sBAGAsB,QAASnD,G","sources":["screens/TechView.js","hooks/useRoleBasedAccess.js"],"sourcesContent":["import {\n  MessageOutlined,\n  ClockCircleOutlined,\n  CheckCircleOutlined,\n  ExclamationCircleOutlined,\n  ReloadOutlined,\n  HistoryOutlined\n} from '@ant-design/icons';\nimport { Typography, Row, Col, Card, Statistic, Tabs, Alert, Space, Button } from 'antd';\nimport React, { useState, useEffect } from 'react';\n\nimport apiClient from '../api/client';\nimport QueryHistoryTracker from '../components/QueryHistoryTracker';\nimport QueryInbox from '../components/QueryInbox';\nimport { TechOnly } from '../components/RoleBasedComponent';\nimport { TEAM_NAMES } from '../constants';\nimport { useRoleBasedAccess } from '../hooks/useRoleBasedAccess';\n\nconst { Title } = Typography;\nconst { TabPane } = Tabs;\n\nconst TechView = () => {\n  const [queryStats, setQueryStats] = useState({\n    totalQueries: 0,\n    openQueries: 0,\n    resolvedToday: 0,\n    overdueQueries: 0,\n    avgResolutionTime: 0,\n    highPriorityQueries: 0\n  });\n\n  // Use role-based access control\n  const { isTechUser, isAdmin } = useRoleBasedAccess();\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    loadDashboardStats(controller.signal);\n\n    return () => {\n      controller.abort();\n    };\n  }, []);\n\n  const loadDashboardStats = async signal => {\n    try {\n      const [openCount, resolvedToday, overdueQueries, avgTime, highPriorityQueries] =\n        await Promise.all([\n          apiClient.get('/queries/stats/count-open/TECH', { signal }).catch(() => 0),\n          apiClient.get('/queries/stats/resolved-today', { signal }).catch(() => 0),\n          apiClient\n            .get('/queries/overdue', { signal })\n            .then(data =>\n              Array.isArray(data) ? data.filter(q => q.assignedTeam === TEAM_NAMES.TECH).length : 0\n            )\n            .catch(() => 0),\n          apiClient.get('/queries/stats/avg-resolution-time/TECH', { signal }).catch(() => 0),\n          apiClient\n            .get('/queries/high-priority', { signal })\n            .then(data =>\n              Array.isArray(data) ? data.filter(q => q.assignedTeam === TEAM_NAMES.TECH).length : 0\n            )\n            .catch(() => 0)\n        ]);\n\n      setQueryStats({\n        totalQueries: openCount + resolvedToday,\n        openQueries: openCount,\n        resolvedToday,\n        overdueQueries,\n        avgResolutionTime: avgTime,\n        highPriorityQueries\n      });\n    } catch (error) {\n      console.error('Failed to load dashboard stats:', error);\n    }\n  };\n\n  return (\n    <TechOnly>\n      <div style={{ padding: 24 }}>\n        <Title level={2}>Tech Dashboard</Title>\n\n        {/* Enhanced Quick Stats */}\n        <Row gutter={16} style={{ marginBottom: 16 }}>\n          <Col span={6}>\n            <Card>\n              <Statistic\n                title=\"Open Queries\"\n                value={queryStats.openQueries}\n                prefix={<MessageOutlined />}\n                valueStyle={{ color: '#cf1322' }}\n              />\n            </Card>\n          </Col>\n          <Col span={6}>\n            <Card>\n              <Statistic\n                title=\"Resolved Today\"\n                value={queryStats.resolvedToday}\n                prefix={<CheckCircleOutlined />}\n                valueStyle={{ color: '#3f8600' }}\n              />\n            </Card>\n          </Col>\n          <Col span={6}>\n            <Card>\n              <Statistic\n                title=\"Overdue\"\n                value={queryStats.overdueQueries}\n                prefix={<ExclamationCircleOutlined />}\n                valueStyle={{ color: queryStats.overdueQueries > 0 ? '#cf1322' : '#3f8600' }}\n              />\n            </Card>\n          </Col>\n          <Col span={6}>\n            <Card>\n              <Statistic\n                title=\"Avg Resolution\"\n                value={queryStats.avgResolutionTime}\n                precision={1}\n                suffix=\"hrs\"\n                prefix={<ClockCircleOutlined />}\n              />\n            </Card>\n          </Col>\n        </Row>\n\n        {/* Alerts for urgent items */}\n        {queryStats.overdueQueries > 0 && (\n          <Alert\n            message={`${queryStats.overdueQueries} queries are overdue (>3 days)`}\n            description=\"These queries require immediate attention to maintain SLA compliance.\"\n            type=\"error\"\n            showIcon\n            style={{ marginBottom: 16 }}\n            action={\n              <Button size=\"small\" danger>\n                View Overdue\n              </Button>\n            }\n          />\n        )}\n\n        {queryStats.highPriorityQueries > 0 && (\n          <Alert\n            message={`${queryStats.highPriorityQueries} high priority queries pending`}\n            description=\"These queries have been marked as high priority and need urgent resolution.\"\n            type=\"warning\"\n            showIcon\n            style={{ marginBottom: 16 }}\n            action={\n              <Button size=\"small\" type=\"primary\">\n                View High Priority\n              </Button>\n            }\n          />\n        )}\n\n        {/* Enhanced Main Content Tabs */}\n        <Tabs\n          defaultActiveKey=\"queries\"\n          size=\"large\"\n          tabBarExtraContent={\n            <Space>\n              <Button icon={<ReloadOutlined />} onClick={loadDashboardStats} size=\"small\">\n                Refresh Stats\n              </Button>\n            </Space>\n          }\n        >\n          <TabPane\n            tab={\n              <Space>\n                <MessageOutlined />\n                <span>Query Inbox</span>\n                {queryStats.openQueries > 0 && (\n                  <span\n                    style={{\n                      background: '#ff4d4f',\n                      color: 'white',\n                      borderRadius: '10px',\n                      padding: '2px 6px',\n                      fontSize: '12px'\n                    }}\n                  >\n                    {queryStats.openQueries}\n                  </span>\n                )}\n              </Space>\n            }\n            key=\"queries\"\n          >\n            <QueryInbox team=\"TECH\" userRole=\"TECH_USER\" />\n          </TabPane>\n\n          <TabPane\n            tab={\n              <Space>\n                <HistoryOutlined />\n                <span>Query History</span>\n              </Space>\n            }\n            key=\"history\"\n          >\n            <QueryHistoryTracker />\n          </TabPane>\n        </Tabs>\n      </div>\n    </TechOnly>\n  );\n};\n\nexport default TechView;\n","import { useState, useEffect, useCallback } from 'react';\n\nimport { \n  isAuthenticated, \n  isAdmin, \n  isJvcUser, \n  isCqsUser, \n  isTechUser, \n  isPlantUser, \n  isViewer,\n  hasRole,\n  getPrimaryRoleType,\n  getUserPlantCodes,\n  getPrimaryPlantCode,\n  getCurrentUser\n} from '../services/auth';\nimport RBACService from '../services/rbacService';\n\n/**\n * Custom hook for role-based access control\n * Provides reactive access to user roles and permissions\n */\nexport const useRoleBasedAccess = () => {\n  const [accessSummary, setAccessSummary] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Load user access summary\n  const loadAccessSummary = useCallback(async () => {\n    if (!isAuthenticated()) {\n      setAccessSummary(null);\n      setLoading(false);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const summary = await RBACService.getUserAccessSummary();\n      setAccessSummary(summary);\n    } catch (err) {\n      console.warn('Failed to load access summary, using fallback:', err);\n      setError(err);\n      \n      // Use fallback data\n      const fallbackSummary = RBACService.getFallbackAccessSummary();\n      setAccessSummary(fallbackSummary);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    loadAccessSummary();\n  }, [loadAccessSummary]);\n\n  // Check screen access\n  const checkScreenAccess = useCallback(async (screenRoute) => {\n    try {\n      return await RBACService.hasScreenAccess(screenRoute);\n    } catch (error) {\n      console.warn('Screen access check failed, using fallback:', error);\n      return RBACService.getFallbackScreenAccess(screenRoute);\n    }\n  }, []);\n\n  // Check data access\n  const checkDataAccess = useCallback(async (dataType, context = {}) => {\n    try {\n      return await RBACService.hasDataAccess(dataType, context);\n    } catch (error) {\n      console.warn('Data access check failed, using fallback:', error);\n      return RBACService.getFallbackDataAccess(dataType, context);\n    }\n  }, []);\n\n  // Check plant data access\n  const checkPlantDataAccess = useCallback(async (dataType, plantCode, context = {}) => {\n    try {\n      return await RBACService.hasPlantDataAccess(dataType, plantCode, context);\n    } catch (error) {\n      console.warn('Plant data access check failed, using fallback:', error);\n      return RBACService.getFallbackPlantDataAccess(dataType, plantCode, context);\n    }\n  }, []);\n\n  // Make access decision\n  const makeAccessDecision = useCallback(async (resourceType, resourceId, action, context = {}) => {\n    try {\n      return await RBACService.makeAccessDecision(resourceType, resourceId, action, context);\n    } catch (error) {\n      console.warn('Access decision failed, using fallback:', error);\n      return RBACService.getFallbackAccessDecision(resourceType, resourceId, action, context);\n    }\n  }, []);\n\n  // Filter data by plant access\n  const filterByPlantAccess = useCallback((data, plantExtractor) => {\n    return RBACService.filterDataByPlantAccess(data, plantExtractor);\n  }, []);\n\n  return {\n    // Loading states\n    loading,\n    error,\n    \n    // User info\n    isAuthenticated: isAuthenticated(),\n    currentUser: getCurrentUser(),\n    primaryRole: getPrimaryRoleType(),\n    userPlants: getUserPlantCodes(),\n    primaryPlant: getPrimaryPlantCode(),\n    \n    // Role checks\n    isAdmin: isAdmin(),\n    isJvcUser: isJvcUser(),\n    isCqsUser: isCqsUser(),\n    isTechUser: isTechUser(),\n    isPlantUser: isPlantUser(),\n    isViewer: isViewer(),\n    \n    // Access summary\n    accessSummary,\n    \n    // Helper functions\n    hasRole: (role) => hasRole(role),\n    hasAnyRole: (roles) => roles.some(role => hasRole(role)),\n    hasAllRoles: (roles) => roles.every(role => hasRole(role)),\n    \n    // Async access checks\n    checkScreenAccess,\n    checkDataAccess,\n    checkPlantDataAccess,\n    makeAccessDecision,\n    \n    // Data filtering\n    filterByPlantAccess,\n    \n    // Refresh function\n    refresh: loadAccessSummary\n  };\n};\n\n/**\n * Hook for checking specific screen access\n */\nexport const useScreenAccess = (screenRoute) => {\n  const [hasAccess, setHasAccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const checkAccess = async () => {\n      if (!isAuthenticated() || !screenRoute) {\n        setHasAccess(false);\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const access = await RBACService.hasScreenAccess(screenRoute);\n        setHasAccess(access);\n      } catch (err) {\n        console.warn('Screen access check failed:', err);\n        setError(err);\n        \n        // Use fallback\n        const fallbackAccess = RBACService.getFallbackScreenAccess(screenRoute);\n        setHasAccess(fallbackAccess);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAccess();\n  }, [screenRoute]);\n\n  return { hasAccess, loading, error };\n};\n\n/**\n * Hook for checking data access\n */\nexport const useDataAccess = (dataType, context = {}) => {\n  const [hasAccess, setHasAccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const checkAccess = async () => {\n      if (!isAuthenticated() || !dataType) {\n        setHasAccess(false);\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const access = await RBACService.hasDataAccess(dataType, context);\n        setHasAccess(access);\n      } catch (err) {\n        console.warn('Data access check failed:', err);\n        setError(err);\n        \n        // Use fallback\n        const fallbackAccess = RBACService.getFallbackDataAccess(dataType, context);\n        setHasAccess(fallbackAccess);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAccess();\n  }, [dataType, context]);\n\n  return { hasAccess, loading, error };\n};\n\n/**\n * Hook for plant-specific data filtering\n */\nexport const usePlantDataFilter = (data, plantExtractor) => {\n  const [filteredData, setFilteredData] = useState([]);\n\n  useEffect(() => {\n    if (!Array.isArray(data)) {\n      setFilteredData([]);\n      return;\n    }\n\n    const filtered = RBACService.filterDataByPlantAccess(data, plantExtractor);\n    setFilteredData(filtered);\n  }, [data, plantExtractor]);\n\n  return filteredData;\n};\n\nexport default useRoleBasedAccess;"],"names":["Title","Typography","TabPane","Tabs","TechView","queryStats","setQueryStats","useState","totalQueries","openQueries","resolvedToday","overdueQueries","avgResolutionTime","highPriorityQueries","isTechUser","isAdmin","useRoleBasedAccess","useEffect","controller","AbortController","loadDashboardStats","signal","abort","async","openCount","avgTime","Promise","all","apiClient","get","catch","then","data","Array","isArray","filter","q","assignedTeam","TEAM_NAMES","TECH","length","error","console","_jsx","TechOnly","children","_jsxs","style","padding","level","Row","gutter","marginBottom","Col","span","Card","Statistic","title","value","prefix","MessageOutlined","valueStyle","color","CheckCircleOutlined","ExclamationCircleOutlined","precision","suffix","ClockCircleOutlined","Alert","message","description","type","showIcon","action","Button","size","danger","defaultActiveKey","tabBarExtraContent","Space","icon","ReloadOutlined","onClick","tab","background","borderRadius","fontSize","QueryInbox","team","userRole","HistoryOutlined","QueryHistoryTracker","accessSummary","setAccessSummary","loading","setLoading","setError","loadAccessSummary","useCallback","isAuthenticated","summary","RBACService","getUserAccessSummary","err","warn","fallbackSummary","getFallbackAccessSummary","checkScreenAccess","hasScreenAccess","screenRoute","getFallbackScreenAccess","checkDataAccess","dataType","context","arguments","undefined","hasDataAccess","getFallbackDataAccess","checkPlantDataAccess","plantCode","hasPlantDataAccess","getFallbackPlantDataAccess","makeAccessDecision","resourceType","resourceId","getFallbackAccessDecision","filterByPlantAccess","plantExtractor","filterDataByPlantAccess","currentUser","getCurrentUser","primaryRole","getPrimaryRoleType","userPlants","getUserPlantCodes","primaryPlant","getPrimaryPlantCode","isJvcUser","isCqsUser","isPlantUser","isViewer","hasRole","role","hasAnyRole","roles","some","hasAllRoles","every","refresh"],"sourceRoot":""}