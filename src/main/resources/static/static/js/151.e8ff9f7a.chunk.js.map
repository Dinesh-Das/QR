{"version":3,"file":"static/js/151.e8ff9f7a.chunk.js","mappings":"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","sources":["constants/roles.js","constants/index.js","services/queryAPI.js","services/auditAPI.js","components/AuditTimeline.js","components/DebugInfo.js","components/QueryWidget.js","screens/WorkflowPage.js"],"sourcesContent":["/**\n * Role constants that match the backend RoleConstants.java\n */\nexport const ROLES = {\n  ADMIN: 'ADMIN',\n  JVC_USER: 'JVC_USER',\n  PLANT_USER: 'PLANT_USER',\n  CQS_USER: 'CQS_USER',\n  TECH_USER: 'TECH_USER',\n  VIEWER: 'VIEWER'\n};\n\n/**\n * Role types for backend compatibility\n */\nexport const ROLE_TYPES = {\n  ADMIN: 'ADMIN',\n  JVC_ROLE: 'JVC_ROLE',\n  PLANT_ROLE: 'PLANT_ROLE',\n  CQS_ROLE: 'CQS_ROLE',\n  TECH_ROLE: 'TECH_ROLE',\n  VIEWER_ROLE: 'VIEWER_ROLE'\n};\n\n/**\n * Role display names\n */\nexport const ROLE_DISPLAY_NAMES = {\n  [ROLES.ADMIN]: 'Administrator',\n  [ROLES.JVC_USER]: 'JVC User',\n  [ROLES.PLANT_USER]: 'Plant User',\n  [ROLES.CQS_USER]: 'CQS User',\n  [ROLES.TECH_USER]: 'Technical User',\n  [ROLES.VIEWER]: 'Viewer'\n};\n\n/**\n * Role descriptions\n */\nexport const ROLE_DESCRIPTIONS = {\n  [ROLES.ADMIN]: 'Full system access with administrative privileges',\n  [ROLES.JVC_USER]: 'Joint Venture Company user with workflow initiation rights',\n  [ROLES.PLANT_USER]: 'Plant-specific user with questionnaire completion rights',\n  [ROLES.CQS_USER]: 'Corporate Quality Services user with query management rights',\n  [ROLES.TECH_USER]: 'Technical user with system monitoring and audit access',\n  [ROLES.VIEWER]: 'Read-only access to assigned content'\n};\n\n/**\n * Role hierarchy (higher number = more privileges)\n */\nexport const ROLE_HIERARCHY = {\n  [ROLES.VIEWER]: 1,\n  [ROLES.PLANT_USER]: 2,\n  [ROLES.CQS_USER]: 3,\n  [ROLES.JVC_USER]: 3,\n  [ROLES.TECH_USER]: 4,\n  [ROLES.ADMIN]: 5\n};\n\n/**\n * Screen access mapping by role\n */\nexport const SCREEN_ACCESS = {\n  [ROLES.ADMIN]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/admin',\n    '/qrmfg/jvc',\n    '/qrmfg/cqs',\n    '/qrmfg/tech',\n    '/qrmfg/plant',\n    '/qrmfg/workflows',\n    '/qrmfg/workflow-monitoring',\n    '/qrmfg/reports',\n    '/qrmfg/users',\n    '/qrmfg/roles',\n    '/qrmfg/sessions',\n    '/qrmfg/user-role-management',\n    '/qrmfg/auditlogs',\n    '/qrmfg/settings'\n  ],\n  [ROLES.JVC_USER]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/jvc',\n    '/qrmfg/workflows',\n    '/qrmfg/reports',\n    '/qrmfg/settings'\n  ],\n  [ROLES.CQS_USER]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/cqs',\n    '/qrmfg/workflows',\n    '/qrmfg/reports',\n    '/qrmfg/settings'\n  ],\n  [ROLES.TECH_USER]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/tech',\n    '/qrmfg/workflows',\n    '/qrmfg/workflow-monitoring',\n    '/qrmfg/reports',\n    '/qrmfg/auditlogs',\n    '/qrmfg/settings'\n  ],\n  [ROLES.PLANT_USER]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/plant',\n    '/qrmfg/workflows',\n    '/qrmfg/reports',\n    '/qrmfg/settings'\n  ],\n  [ROLES.VIEWER]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/settings'\n  ]\n};\n\n/**\n * Data access permissions by role\n */\nexport const DATA_ACCESS = {\n  [ROLES.ADMIN]: ['*'], // All data\n  [ROLES.JVC_USER]: ['workflow', 'document', 'query', 'jvc'],\n  [ROLES.CQS_USER]: ['workflow', 'document', 'query', 'cqs'],\n  [ROLES.TECH_USER]: ['workflow', 'document', 'query', 'audit', 'system', 'tech'],\n  [ROLES.PLANT_USER]: ['workflow', 'document', 'query', 'plant'],\n  [ROLES.VIEWER]: ['workflow:read', 'document:read']\n};\n\n/**\n * Action permissions by role\n */\nexport const ACTION_PERMISSIONS = {\n  [ROLES.ADMIN]: ['*'], // All actions\n  [ROLES.JVC_USER]: ['create', 'read', 'update', 'initiate'],\n  [ROLES.CQS_USER]: ['create', 'read', 'update', 'respond'],\n  [ROLES.TECH_USER]: ['create', 'read', 'update', 'monitor', 'audit'],\n  [ROLES.PLANT_USER]: ['read', 'update', 'complete'],\n  [ROLES.VIEWER]: ['read']\n};\n\n/**\n * Helper functions\n */\nexport const getRoleDisplayName = (role) => {\n  return ROLE_DISPLAY_NAMES[role] || role;\n};\n\nexport const getRoleDescription = (role) => {\n  return ROLE_DESCRIPTIONS[role] || 'No description available';\n};\n\nexport const getRoleHierarchy = (role) => {\n  return ROLE_HIERARCHY[role] || 0;\n};\n\nexport const hasHigherPrivilege = (role1, role2) => {\n  return getRoleHierarchy(role1) > getRoleHierarchy(role2);\n};\n\nexport const getScreensForRole = (role) => {\n  return SCREEN_ACCESS[role] || [];\n};\n\nexport const getDataAccessForRole = (role) => {\n  return DATA_ACCESS[role] || [];\n};\n\nexport const getActionPermissionsForRole = (role) => {\n  return ACTION_PERMISSIONS[role] || [];\n};\n\nexport const canAccessScreen = (role, screen) => {\n  const screens = getScreensForRole(role);\n  return screens.includes('*') || screens.includes(screen);\n};\n\nexport const canAccessData = (role, dataType) => {\n  const dataAccess = getDataAccessForRole(role);\n  return dataAccess.includes('*') || \n         dataAccess.includes(dataType) || \n         dataAccess.some(access => access.startsWith(`${dataType}:`));\n};\n\nexport const canPerformAction = (role, action) => {\n  const actions = getActionPermissionsForRole(role);\n  return actions.includes('*') || actions.includes(action);\n};","// Application Constants\n\n// API Configuration\nexport const API_CONFIG = {\n  TIMEOUT: 30000, // 30 seconds\n  BASE_URL: process.env.REACT_APP_API_BASE_URL || '/qrmfg/api/v1',\n  RETRY_ATTEMPTS: 3\n};\n\n// Authentication\nexport const AUTH_CONFIG = {\n  TOKEN_KEY: 'qrmfg_secure_token',\n  LOGIN_PATH: '/qrmfg/login',\n  DEFAULT_REDIRECT: '/qrmfg'\n};\n\n// UI Constants\nexport const UI_CONFIG = {\n  MOBILE_BREAKPOINT: 768,\n  TABLET_BREAKPOINT: 1024,\n  PAGE_SIZE: 10,\n  DEBOUNCE_DELAY: 300\n};\n\n// Workflow States\nexport const WORKFLOW_STATES = {\n  INITIATED: 'INITIATED',\n  IN_PROGRESS: 'IN_PROGRESS',\n  PENDING_REVIEW: 'PENDING_REVIEW',\n  APPROVED: 'APPROVED',\n  REJECTED: 'REJECTED',\n  COMPLETED: 'COMPLETED'\n};\n\n// Query States\nexport const QUERY_STATES = {\n  OPEN: 'OPEN',\n  IN_PROGRESS: 'IN_PROGRESS',\n  RESOLVED: 'RESOLVED',\n  CLOSED: 'CLOSED'\n};\n\n// Priority Levels\nexport const PRIORITY_LEVELS = {\n  LOW: 'LOW',\n  MEDIUM: 'MEDIUM',\n  HIGH: 'HIGH',\n  URGENT: 'URGENT',\n  CRITICAL: 'CRITICAL'\n};\n\n// Teams\nexport const TEAMS = {\n  CQS: 'CQS',\n  TECH: 'TECH',\n  JVC: 'JVC'\n};\n\n// Error Severity\nexport const ERROR_SEVERITY = {\n  LOW: 'LOW',\n  MEDIUM: 'MEDIUM',\n  HIGH: 'HIGH',\n  CRITICAL: 'CRITICAL'\n};\n\n// Error Categories\nexport const ERROR_CATEGORY = {\n  APPLICATION: 'APPLICATION',\n  COMPONENT: 'COMPONENT',\n  API: 'API',\n  ROUTE: 'ROUTE',\n  ASYNC: 'ASYNC',\n  AUTHENTICATION: 'AUTHENTICATION'\n};\n\n// Status Colors\nexport const STATUS_COLORS = {\n  [WORKFLOW_STATES.INITIATED]: 'blue',\n  [WORKFLOW_STATES.IN_PROGRESS]: 'orange',\n  [WORKFLOW_STATES.PENDING_REVIEW]: 'purple',\n  [WORKFLOW_STATES.APPROVED]: 'green',\n  [WORKFLOW_STATES.REJECTED]: 'red',\n  [WORKFLOW_STATES.COMPLETED]: 'green'\n};\n\n// Priority Colors\nexport const PRIORITY_COLORS = {\n  [PRIORITY_LEVELS.LOW]: 'green',\n  [PRIORITY_LEVELS.MEDIUM]: 'blue',\n  [PRIORITY_LEVELS.HIGH]: 'orange',\n  [PRIORITY_LEVELS.URGENT]: 'red',\n  [PRIORITY_LEVELS.CRITICAL]: 'red'\n};\n\n// Form Validation\nexport const VALIDATION = {\n  MIN_PASSWORD_LENGTH: 8,\n  MAX_FILE_SIZE: 10 * 1024 * 1024, // 10MB\n  ALLOWED_FILE_TYPES: ['.pdf', '.doc', '.docx', '.xls', '.xlsx', '.jpg', '.jpeg', '.png'],\n  MAX_COMMENT_LENGTH: 1000,\n  MAX_DESCRIPTION_LENGTH: 500\n};\n\n// Date Formats\nexport const DATE_FORMATS = {\n  DISPLAY: 'DD/MM/YYYY',\n  DISPLAY_WITH_TIME: 'DD/MM/YYYY HH:mm',\n  API: 'YYYY-MM-DD',\n  ISO: 'YYYY-MM-DDTHH:mm:ss.SSSZ'\n};\n\n// Local Storage Keys\nexport const STORAGE_KEYS = {\n  USER_PREFERENCES: 'qrmfg_user_preferences',\n  THEME: 'qrmfg_theme',\n  LANGUAGE: 'qrmfg_language'\n};\n\n// Animation Delays\nexport const ANIMATION = {\n  FADE_IN_DELAY: 0.1, // seconds\n  STAGGER_DELAY: 0.05, // seconds\n  TRANSITION_DURATION: 0.3 // seconds\n};\n\n// Notification Types\nexport const NOTIFICATION_TYPES = {\n  SUCCESS: 'success',\n  ERROR: 'error',\n  WARNING: 'warning',\n  INFO: 'info'\n};\n\n// Component Names (for error boundaries)\nexport const COMPONENT_NAMES = {\n  USER_TABLE: 'UserTable',\n  USER_MODAL: 'UserModal',\n  PLANT_ASSIGNMENT_FORM: 'PlantAssignmentForm',\n  PLANT_DASHBOARD: 'PlantDashboard',\n  WORKFLOW_TABLE: 'WorkflowTable',\n  FILTER_PANEL: 'FilterPanel'\n};\n\n// File size constants\nexport const FILE_SIZE = {\n  MAX_UPLOAD_SIZE: 25 * 1024 * 1024, // 25MB\n  BYTES_PER_KB: 1024,\n  BYTES_PER_MB: 1024 * 1024,\n  BYTES_PER_GB: 1024 * 1024 * 1024\n};\n\n// Workflow specific states\nexport const WORKFLOW_SPECIFIC_STATES = {\n  JVC_PENDING: 'JVC_PENDING',\n  PLANT_PENDING: 'PLANT_PENDING',\n  CQS_PENDING: 'CQS_PENDING',\n  TECH_PENDING: 'TECH_PENDING',\n  DRAFT: 'DRAFT',\n  IN_PROGRESS: 'IN_PROGRESS',\n  SUBMITTED: 'SUBMITTED'\n};\n\n// Query status\nexport const QUERY_STATUS = {\n  OPEN: 'OPEN',\n  RESOLVED: 'RESOLVED',\n  CLOSED: 'CLOSED'\n};\n\n// Team names\nexport const TEAM_NAMES = {\n  CQS: 'CQS',\n  TECH: 'TECH',\n  JVC: 'JVC',\n  PLANT: 'PLANT'\n};\n\n// Auto-save intervals\nexport const AUTO_SAVE = {\n  INTERVAL: 30000, // 30 seconds\n  DEBOUNCE_DELAY: 2000 // 2 seconds\n};\n\n// Pagination defaults\nexport const PAGINATION = {\n  DEFAULT_PAGE_SIZE: 10,\n  SMALL_PAGE_SIZE: 5,\n  LARGE_PAGE_SIZE: 15,\n  SHOW_SIZE_CHANGER: true,\n  SHOW_QUICK_JUMPER: true\n};\n\n// Completion filter options\nexport const COMPLETION_FILTERS = {\n  ALL: 'all',\n  COMPLETED: 'completed',\n  IN_PROGRESS: 'in-progress',\n  NOT_STARTED: 'not-started'\n};\n\n// Tab keys\nexport const TAB_KEYS = {\n  INITIATE: 'initiate',\n  PENDING: 'pending',\n  COMPLETED: 'completed',\n  QUERIES: 'queries',\n  HISTORY: 'history'\n};\n\n// Re-export role constants\nexport * from './roles';\n","import apiClient from '../api/client';\n\n/**\n * Query API service providing query management functionality\n * Migrated to use unified APIClient with standardized error handling\n *\n * @namespace queryAPI\n */\nexport const queryAPI = {\n  // Query CRUD operations\n  /**\n   * Create a new query for a workflow\n   * @param {string} workflowId - Workflow ID to create query for\n   * @param {Object} queryData - Query data\n   * @returns {Promise<Object>} Created query object\n   */\n  createQuery: (workflowId, queryData) =>\n    apiClient.post(`/queries/workflow/${workflowId}`, queryData),\n\n  /**\n   * Get query by ID\n   * @param {string} id - Query ID\n   * @returns {Promise<Object>} Query object\n   */\n  getQuery: id => apiClient.get(`/queries/${id}`),\n\n  /**\n   * Update query by ID\n   * @param {string} id - Query ID\n   * @param {Object} queryData - Updated query data\n   * @returns {Promise<Object>} Updated query object\n   */\n  updateQuery: (id, queryData) => apiClient.put(`/queries/${id}`, queryData),\n\n  /**\n   * Delete query by ID\n   * @param {string} id - Query ID\n   * @returns {Promise<void>} Promise that resolves when query is deleted\n   */\n  deleteQuery: id => apiClient.delete(`/queries/${id}`),\n\n  // Query resolution\n  /**\n   * Resolve a query\n   * @param {string} id - Query ID\n   * @param {Object} resolutionData - Resolution data\n   * @returns {Promise<Object>} Resolved query object\n   */\n  resolveQuery: (id, resolutionData) => apiClient.post(`/queries/${id}/resolve`, resolutionData),\n\n  /**\n   * Reopen a resolved query\n   * @param {string} id - Query ID\n   * @param {string} reason - Reason for reopening\n   * @returns {Promise<Object>} Reopened query object\n   */\n  reopenQuery: (id, reason) => apiClient.post(`/queries/${id}/reopen`, { reason }),\n\n  // Query assignment\n  /**\n   * Assign query to team/user\n   * @param {string} id - Query ID\n   * @param {Object} assignmentData - Assignment data\n   * @returns {Promise<Object>} Assigned query object\n   */\n  assignQuery: (id, assignmentData) => apiClient.post(`/queries/${id}/assign`, assignmentData),\n\n  /**\n   * Reassign query to different team\n   * @param {string} id - Query ID\n   * @param {string} newTeam - New team to assign to\n   * @param {string} reason - Reason for reassignment\n   * @returns {Promise<Object>} Reassigned query object\n   */\n  reassignQuery: (id, newTeam, reason) =>\n    apiClient.put(`/queries/${id}/assign`, { team: newTeam, reason }),\n\n  // Query search and filtering\n  /**\n   * Get queries for a specific workflow\n   * @param {string} workflowId - Workflow ID\n   * @returns {Promise<Array>} Array of queries for the workflow\n   */\n  getQueriesByWorkflow: workflowId => apiClient.get(`/queries/workflow/${workflowId}`),\n\n  /**\n   * Get queries assigned to a team\n   * @param {string} team - Team name\n   * @returns {Promise<Array>} Array of queries for the team\n   */\n  getQueriesByTeam: team => apiClient.get(`/queries/team/${team}`),\n\n  /**\n   * Get queries by status\n   * @param {string} status - Query status\n   * @returns {Promise<Array>} Array of queries with the specified status\n   */\n  getQueriesByStatus: status => apiClient.get(`/queries/status/${status}`),\n\n  /**\n   * Get queries raised by current user\n   * @param {string} username - Username (unused in current implementation)\n   * @returns {Promise<Array>} Array of queries raised by user\n   */\n  getQueriesByUser: _username => apiClient.get(`/queries/my-raised`),\n\n  /**\n   * Search queries with parameters\n   * @param {Object} searchParams - Search parameters\n   * @returns {Promise<Array>} Array of matching queries\n   */\n  searchQueries: searchParams => {\n    const queryString = new URLSearchParams(searchParams).toString();\n    return apiClient.get(`/queries/search?${queryString}`);\n  },\n\n  // Query statistics\n  /**\n   * Get query statistics for time range\n   * @param {number} timeRange - Number of days to look back\n   * @returns {Promise<Object>} Query statistics\n   */\n  getQueryStats: timeRange => apiClient.get(`/queries/recent?days=${timeRange}`),\n\n  /**\n   * Get query counts by team\n   * @param {string} team - Team name\n   * @returns {Promise<number>} Number of open queries for team\n   */\n  getQueryCountsByTeam: team => apiClient.get(`/queries/stats/count-open/${team}`),\n\n  /**\n   * Get average resolution time by team\n   * @param {string} team - Team name\n   * @returns {Promise<number>} Average resolution time in hours\n   */\n  getAvgResolutionTimeByTeam: team => apiClient.get(`/queries/stats/avg-resolution-time/${team}`),\n\n  /**\n   * Get overdue queries\n   * @param {number} dayThreshold - Days threshold for overdue (default: 3)\n   * @returns {Promise<Array>} Array of overdue queries\n   */\n  getOverdueQueries: (_dayThreshold = 3) => apiClient.get('/queries/overdue'),\n\n  // Team-specific statistics\n  /**\n   * Get overdue queries count by team\n   * @param {string} team - Team name\n   * @returns {Promise<number>} Number of overdue queries for team\n   */\n  getOverdueQueriesCountByTeam: team => apiClient.get(`/queries/stats/overdue-count/${team}`),\n\n  /**\n   * Get queries resolved today by team\n   * @param {string} team - Team name\n   * @returns {Promise<number>} Number of queries resolved today by team\n   */\n  getQueriesResolvedTodayByTeam: team => apiClient.get(`/queries/stats/resolved-today/${team}`),\n\n  // Query SLA tracking\n  /**\n   * Get query SLA status\n   * @param {string} id - Query ID\n   * @returns {Promise<boolean>} True if query is overdue\n   */\n  getQuerySLAStatus: id => apiClient.get(`/queries/${id}/is-overdue`),\n\n  /**\n   * Get queries nearing SLA deadline\n   * @param {number} hoursThreshold - Hours threshold (default: 24)\n   * @returns {Promise<Array>} Array of queries needing attention\n   */\n  getQueriesNearingSLA: (_hoursThreshold = 24) => apiClient.get('/queries/needing-attention'),\n\n  // Query comments/updates (not implemented in backend yet)\n  /**\n   * Add comment to query\n   * @param {string} id - Query ID\n   * @param {string} comment - Comment text\n   * @returns {Promise<Object>} Added comment object\n   */\n  addQueryComment: (id, comment) => apiClient.post(`/queries/${id}/comments`, { comment }),\n\n  /**\n   * Get comments for query\n   * @param {string} id - Query ID\n   * @returns {Promise<Array>} Array of comments for the query\n   */\n  getQueryComments: id => apiClient.get(`/queries/${id}/comments`),\n\n  // Query priority management\n  /**\n   * Update query priority\n   * @param {string} id - Query ID\n   * @param {string} priority - New priority level\n   * @returns {Promise<Object>} Updated query object\n   */\n  updateQueryPriority: (id, priority) => apiClient.put(`/queries/${id}/priority`, { priority }),\n\n  /**\n   * Escalate query priority\n   * @param {string} id - Query ID\n   * @param {string} escalationReason - Reason for escalation\n   * @returns {Promise<Object>} Escalated query object\n   */\n  escalateQuery: (id, _escalationReason) =>\n    apiClient.put(`/queries/${id}/priority`, { priorityLevel: 'HIGH' }),\n\n  // Query document management\n  /**\n   * Upload documents to a query\n   * @param {string} queryId - Query ID\n   * @param {Array<File>} files - Files to upload\n   * @returns {Promise<Array>} Array of uploaded document objects\n   */\n  uploadQueryDocuments: (queryId, files) => {\n    return apiClient.upload(`/queries/${queryId}/documents`, files);\n  },\n\n  /**\n   * Upload documents to a query response\n   * @param {string} queryId - Query ID\n   * @param {string} responseId - Response ID\n   * @param {Array<File>} files - Files to upload\n   * @returns {Promise<Array>} Array of uploaded document objects\n   */\n  uploadResponseDocuments: (queryId, responseId, files) => {\n    return apiClient.upload(`/queries/${queryId}/responses/${responseId}/documents`, files);\n  },\n\n  /**\n   * Get all documents associated with a query\n   * @param {string} queryId - Query ID\n   * @returns {Promise<Array>} Array of document objects\n   */\n  getQueryDocuments: (queryId) => apiClient.get(`/queries/${queryId}/documents`),\n\n  /**\n   * Download a query document\n   * @param {string} queryId - Query ID\n   * @param {string} documentId - Document ID\n   * @returns {Promise<Blob>} Document file blob\n   */\n  downloadQueryDocument: (queryId, documentId) => {\n    return apiClient.download(`/queries/${queryId}/documents/${documentId}/download`);\n  },\n\n  /**\n   * Delete a query document\n   * @param {string} queryId - Query ID\n   * @param {string} documentId - Document ID\n   * @returns {Promise<void>} Promise that resolves when document is deleted\n   */\n  deleteQueryDocument: (queryId, documentId) => {\n    return apiClient.delete(`/queries/${queryId}/documents/${documentId}`);\n  }\n};\n","import apiClient from '../api/client';\n\nexport const auditAPI = {\n  // Workflow audit endpoints\n  getWorkflowAuditHistory: workflowId => apiClient.get(`/audit/workflow/${workflowId}`),\n\n  getQueryAuditHistory: queryId => apiClient.get(`/audit/query/${queryId}`),\n\n  getQuestionnaireResponseAuditHistory: responseId =>\n    apiClient.get(`/audit/response/${responseId}`),\n\n  getCompleteWorkflowAuditTrail: workflowId =>\n    apiClient.get(`/audit/workflow/${workflowId}/complete`),\n\n  // Recent audit activity\n  getRecentAuditActivity: (days = 7) => apiClient.get(`/audit/recent?days=${days}`),\n\n  getAuditActivityByUser: username =>\n    apiClient.get(`/audit/by-user/${encodeURIComponent(username)}`),\n\n  getAuditActivityByEntityType: (entityType, days = 7) =>\n    apiClient.get(`/audit/by-entity/${entityType}?days=${days}`),\n\n  // Audit search and filtering\n  searchAuditLogs: searchParams => apiClient.post('/audit/search', searchParams),\n\n  // Export audit data\n  exportAuditLogs: (workflowId, format = 'csv') =>\n    apiClient.download(`/audit/export/${workflowId}?format=${format}`),\n\n  // Read-only workflow view\n  getReadOnlyWorkflowView: workflowId => apiClient.get(`/audit/workflow/${workflowId}/readonly`),\n\n  // Version history for questionnaire responses\n  getQuestionnaireResponseVersions: workflowId =>\n    apiClient.get(`/audit/workflow/${workflowId}/response-versions`)\n};\n","import {\n  ClockCircleOutlined,\n  UserOutlined,\n  FileTextOutlined,\n  MessageOutlined,\n  CheckCircleOutlined,\n  EditOutlined\n} from '@ant-design/icons';\nimport { Timeline, Card, Tag, Spin, Alert, Button, Space, Collapse } from 'antd';\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport { auditAPI } from '../services/auditAPI';\n\n// Hook to detect screen size\nconst useResponsive = () => {\n  const [screenSize, setScreenSize] = useState({\n    isMobile: window.innerWidth <= 768,\n    isTablet: window.innerWidth > 768 && window.innerWidth <= 1024,\n    isDesktop: window.innerWidth > 1024\n  });\n\n  useEffect(() => {\n    const handleResize = () => {\n      setScreenSize({\n        isMobile: window.innerWidth <= 768,\n        isTablet: window.innerWidth > 768 && window.innerWidth <= 1024,\n        isDesktop: window.innerWidth > 1024\n      });\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return screenSize;\n};\n\nconst { Panel } = Collapse;\n\nconst AuditTimeline = ({ workflowId, entityType = 'workflow' }) => {\n  const [loading, setLoading] = useState(true);\n  const [auditHistory, setAuditHistory] = useState([]);\n  const [error, setError] = useState(null);\n  const [expandedItems, setExpandedItems] = useState(new Set());\n  const { isMobile } = useResponsive();\n\n  useEffect(() => {\n    if (workflowId) {\n      loadAuditHistory();\n    }\n  }, [workflowId, entityType, loadAuditHistory]);\n\n  const loadAuditHistory = useCallback(async () => {\n    try {\n      setLoading(true);\n      let history;\n\n      switch (entityType) {\n        case 'workflow':\n          history = await auditAPI.getWorkflowAuditHistory(workflowId);\n          break;\n        case 'query':\n          history = await auditAPI.getQueryAuditHistory(workflowId);\n          break;\n        case 'complete':\n          history = await auditAPI.getCompleteWorkflowAuditTrail(workflowId);\n          break;\n        default:\n          history = await auditAPI.getWorkflowAuditHistory(workflowId);\n      }\n\n      setAuditHistory(formatAuditHistory(history));\n    } catch (err) {\n      setError('Failed to load audit history');\n      console.error('Audit history error:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [workflowId, entityType, formatAuditHistory]);\n\n  const formatAuditHistory = useCallback(rawHistory => {\n    return rawHistory.map((entry, index) => ({\n      id: index,\n      timestamp: entry.timestamp || entry.revisionDate,\n      user: entry.username || entry.modifiedBy || 'System',\n      action: entry.revisionType || entry.action || 'UPDATE',\n      entityType: entry.entityType || 'MaterialWorkflow',\n      entityId: entry.entityId || entry.id,\n      changes: entry.changes || [],\n      description: entry.description || generateDescription(entry),\n      details: entry.details || entry\n    }));\n  }, []);\n\n  const generateDescription = entry => {\n    const action = entry.revisionType || entry.action;\n    const entityType = entry.entityType || 'workflow';\n\n    switch (action) {\n      case 'ADD':\n      case 'CREATE':\n        return `Created new ${entityType.toLowerCase()}`;\n      case 'MOD':\n      case 'UPDATE':\n        return `Updated ${entityType.toLowerCase()}`;\n      case 'DEL':\n      case 'DELETE':\n        return `Deleted ${entityType.toLowerCase()}`;\n      case 'STATE_CHANGE':\n        return `Changed workflow state to ${entry.newState}`;\n      case 'QUERY_CREATED':\n        return `Created new query`;\n      case 'QUERY_RESOLVED':\n        return `Resolved query`;\n      default:\n        return `Modified ${entityType.toLowerCase()}`;\n    }\n  };\n\n  const getActionIcon = action => {\n    switch (action) {\n      case 'ADD':\n      case 'CREATE':\n        return <CheckCircleOutlined style={{ color: '#52c41a' }} />;\n      case 'MOD':\n      case 'UPDATE':\n        return <EditOutlined style={{ color: '#1890ff' }} />;\n      case 'DEL':\n      case 'DELETE':\n        return <ClockCircleOutlined style={{ color: '#ff4d4f' }} />;\n      case 'STATE_CHANGE':\n        return <FileTextOutlined style={{ color: '#722ed1' }} />;\n      case 'QUERY_CREATED':\n      case 'QUERY_RESOLVED':\n        return <MessageOutlined style={{ color: '#fa8c16' }} />;\n      default:\n        return <ClockCircleOutlined style={{ color: '#d9d9d9' }} />;\n    }\n  };\n\n  const getActionColor = action => {\n    switch (action) {\n      case 'ADD':\n      case 'CREATE':\n        return 'green';\n      case 'MOD':\n      case 'UPDATE':\n        return 'blue';\n      case 'DEL':\n      case 'DELETE':\n        return 'red';\n      case 'STATE_CHANGE':\n        return 'purple';\n      case 'QUERY_CREATED':\n      case 'QUERY_RESOLVED':\n        return 'orange';\n      default:\n        return 'default';\n    }\n  };\n\n  const toggleExpanded = itemId => {\n    const newExpanded = new Set(expandedItems);\n    if (newExpanded.has(itemId)) {\n      newExpanded.delete(itemId);\n    } else {\n      newExpanded.add(itemId);\n    }\n    setExpandedItems(newExpanded);\n  };\n\n  const formatTimestamp = timestamp => {\n    if (!timestamp) {\n      return 'Unknown time';\n    }\n    const date = new Date(timestamp);\n    return date.toLocaleString();\n  };\n\n  const renderChangeDetails = changes => {\n    if (!changes || changes.length === 0) {\n      return null;\n    }\n\n    return (\n      <div style={{ marginTop: 8 }}>\n        <strong>Changes:</strong>\n        <ul style={{ marginTop: 4, marginBottom: 0 }}>\n          {changes.map((change, index) => (\n            <li key={index}>\n              <strong>{change.field}:</strong> {change.oldValue} → {change.newValue}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  };\n\n  if (loading) {\n    return (\n      <Card>\n        <div style={{ textAlign: 'center', padding: '20px' }}>\n          <Spin size=\"large\" data-testid=\"loading-spinner\" />\n        </div>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <Alert\n          message=\"Error\"\n          description={error}\n          type=\"error\"\n          showIcon\n          action={\n            <Button size=\"small\" onClick={loadAuditHistory}>\n              Retry\n            </Button>\n          }\n        />\n      </Card>\n    );\n  }\n\n  return (\n    <Card\n      title=\"Audit Timeline\"\n      extra={\n        <Space>\n          <Button size=\"small\" onClick={loadAuditHistory}>\n            {isMobile ? 'Refresh' : 'Refresh'}\n          </Button>\n        </Space>\n      }\n    >\n      {auditHistory.length === 0 ? (\n        <div style={{ textAlign: 'center', padding: '20px', color: '#999' }}>\n          No audit history available\n        </div>\n      ) : (\n        <Timeline\n          mode={isMobile ? 'left' : 'left'}\n          className={isMobile ? 'audit-timeline-mobile' : ''}\n        >\n          {auditHistory.map(entry => (\n            <Timeline.Item key={entry.id} dot={getActionIcon(entry.action)}>\n              <div>\n                <div\n                  style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    gap: isMobile ? 4 : 8,\n                    marginBottom: 4,\n                    flexWrap: isMobile ? 'wrap' : 'nowrap'\n                  }}\n                >\n                  <Tag color={getActionColor(entry.action)} size={isMobile ? 'small' : 'default'}>\n                    {isMobile && entry.action.length > 6\n                      ? entry.action.substring(0, 6)\n                      : entry.action}\n                  </Tag>\n                  <span\n                    style={{\n                      fontWeight: 'bold',\n                      fontSize: isMobile ? '13px' : '14px'\n                    }}\n                  >\n                    {entry.description}\n                  </span>\n                </div>\n\n                <div\n                  style={{\n                    fontSize: isMobile ? '11px' : '12px',\n                    color: '#666',\n                    marginBottom: 8,\n                    display: 'flex',\n                    alignItems: 'center',\n                    gap: 4,\n                    flexWrap: isMobile ? 'wrap' : 'nowrap'\n                  }}\n                >\n                  <UserOutlined />\n                  <span>{entry.user}</span>\n                  <span>•</span>\n                  <span>\n                    {isMobile\n                      ? formatTimestamp(entry.timestamp).split(',')[0]\n                      : formatTimestamp(entry.timestamp)}\n                  </span>\n                </div>\n\n                {entry.changes && entry.changes.length > 0 && (\n                  <div>\n                    <Button\n                      type=\"link\"\n                      size=\"small\"\n                      onClick={() => toggleExpanded(entry.id)}\n                      style={{\n                        padding: 0,\n                        height: 'auto',\n                        fontSize: isMobile ? '12px' : '14px'\n                      }}\n                    >\n                      {expandedItems.has(entry.id) ? 'Hide' : 'Show'} Details\n                    </Button>\n\n                    {expandedItems.has(entry.id) && (\n                      <Collapse ghost>\n                        <Panel header=\"\" key=\"1\" showArrow={false}>\n                          {renderChangeDetails(entry.changes)}\n                          {entry.details && (\n                            <div style={{ marginTop: 8 }}>\n                              <strong>Additional Details:</strong>\n                              <pre\n                                style={{\n                                  fontSize: isMobile ? '10px' : '11px',\n                                  background: '#f5f5f5',\n                                  padding: isMobile ? '6px' : '8px',\n                                  borderRadius: '4px',\n                                  marginTop: '4px',\n                                  overflow: 'auto',\n                                  maxHeight: isMobile ? '150px' : '200px'\n                                }}\n                              >\n                                {JSON.stringify(entry.details, null, 2)}\n                              </pre>\n                            </div>\n                          )}\n                        </Panel>\n                      </Collapse>\n                    )}\n                  </div>\n                )}\n              </div>\n            </Timeline.Item>\n          ))}\n        </Timeline>\n      )}\n    </Card>\n  );\n};\n\nexport default AuditTimeline;\n","import { Card, Descriptions, Tag } from 'antd';\nimport React from 'react';\n\nimport { getCurrentUser, getUserRole, isAuthenticated } from '../services/auth';\n\nconst DebugInfo = () => {\n  const currentUser = getCurrentUser();\n  const userRole = getUserRole();\n  const isAuth = isAuthenticated();\n\n  if (process.env.REACT_APP_DEBUG !== 'true') {\n    return null;\n  }\n\n  return (\n    <Card title=\"Debug Information\" size=\"small\" style={{ marginBottom: 16 }}>\n      <Descriptions size=\"small\" column={1}>\n        <Descriptions.Item label=\"Authenticated\">\n          <Tag color={isAuth ? 'green' : 'red'}>{isAuth ? 'Yes' : 'No'}</Tag>\n        </Descriptions.Item>\n        <Descriptions.Item label=\"Current User\">{currentUser || 'Not available'}</Descriptions.Item>\n        <Descriptions.Item label=\"User Role\">{userRole || 'Not available'}</Descriptions.Item>\n        <Descriptions.Item label=\"Mock Data\">\n          <Tag color={process.env.REACT_APP_USE_MOCK_DATA === 'true' ? 'blue' : 'default'}>\n            {process.env.REACT_APP_USE_MOCK_DATA === 'true' ? 'Enabled' : 'Disabled'}\n          </Tag>\n        </Descriptions.Item>\n        <Descriptions.Item label=\"API Base URL\">\n          {process.env.REACT_APP_API_BASE_URL || 'Default'}\n        </Descriptions.Item>\n      </Descriptions>\n    </Card>\n  );\n};\n\nexport default DebugInfo;\n","import { PlusOutlined } from '@ant-design/icons';\nimport { Card, Tabs, Table, Tag, Button, Space, Modal, Form, Input, Select, Badge } from 'antd';\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport { UI_CONFIG, QUERY_STATUS, TEAM_NAMES } from '../constants';\nimport { queryAPI } from '../services/queryAPI';\n\n// Hook to detect screen size\nconst useResponsive = () => {\n  const [screenSize, setScreenSize] = useState({\n    isMobile: window.innerWidth <= UI_CONFIG.MOBILE_BREAKPOINT,\n    isTablet:\n      window.innerWidth > UI_CONFIG.MOBILE_BREAKPOINT &&\n      window.innerWidth <= UI_CONFIG.TABLET_BREAKPOINT,\n    isDesktop: window.innerWidth > UI_CONFIG.TABLET_BREAKPOINT\n  });\n\n  useEffect(() => {\n    const handleResize = () => {\n      setScreenSize({\n        isMobile: window.innerWidth <= UI_CONFIG.MOBILE_BREAKPOINT,\n        isTablet:\n          window.innerWidth > UI_CONFIG.MOBILE_BREAKPOINT &&\n          window.innerWidth <= UI_CONFIG.TABLET_BREAKPOINT,\n        isDesktop: window.innerWidth > UI_CONFIG.TABLET_BREAKPOINT\n      });\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return screenSize;\n};\n\nconst { TabPane } = Tabs;\nconst { TextArea } = Input;\nconst { Option } = Select;\n\nconst QueryWidget = ({ workflowId, userRole }) => {\n  const [loading, setLoading] = useState(false);\n  const [queries, setQueries] = useState({\n    all: [],\n    open: [],\n    resolved: [],\n    myQueries: []\n  });\n  const [createModalVisible, setCreateModalVisible] = useState(false);\n  const [resolveModalVisible, setResolveModalVisible] = useState(false);\n  const [selectedQuery, setSelectedQuery] = useState(null);\n  const [form] = Form.useForm();\n  const [resolveForm] = Form.useForm();\n  const { isMobile } = useResponsive();\n\n  useEffect(() => {\n    if (workflowId) {\n      const controller = new AbortController();\n\n      const loadQueriesWithAbort = async () => {\n        try {\n          setLoading(true);\n          const allQueries = await queryAPI.getQueriesByWorkflow(workflowId, {\n            signal: controller.signal\n          });\n\n          if (!controller.signal.aborted) {\n            setQueries({\n              all: allQueries,\n              open: allQueries.filter(q => q.status === QUERY_STATUS.OPEN),\n              resolved: allQueries.filter(q => q.status === QUERY_STATUS.RESOLVED),\n              myQueries: allQueries.filter(q => q.createdBy === getCurrentUser())\n            });\n          }\n        } catch (error) {\n          if (!controller.signal.aborted) {\n            console.error('Failed to load queries:', error);\n          }\n        } finally {\n          if (!controller.signal.aborted) {\n            setLoading(false);\n          }\n        }\n      };\n\n      loadQueriesWithAbort();\n\n      return () => {\n        controller.abort();\n      };\n    }\n  }, [workflowId]); // Remove loadQueries dependency\n\n  const loadQueries = useCallback(\n    async signal => {\n      try {\n        setLoading(true);\n        const allQueries = await queryAPI.getQueriesByWorkflow(workflowId, { signal });\n\n        if (!signal?.aborted) {\n          setQueries({\n            all: allQueries,\n            open: allQueries.filter(q => q.status === QUERY_STATUS.OPEN),\n            resolved: allQueries.filter(q => q.status === QUERY_STATUS.RESOLVED),\n            myQueries: allQueries.filter(q => q.createdBy === getCurrentUser())\n          });\n        }\n      } catch (error) {\n        if (!signal?.aborted) {\n          console.error('Failed to load queries:', error);\n        }\n      } finally {\n        if (!signal?.aborted) {\n          setLoading(false);\n        }\n      }\n    },\n    [workflowId]\n  );\n\n  const getCurrentUser = () => {\n    // Get current user from auth context or localStorage\n    return localStorage.getItem('username') || 'current_user';\n  };\n\n  const handleCreateQuery = async values => {\n    try {\n      await queryAPI.createQuery({\n        workflowId,\n        ...values,\n        createdBy: getCurrentUser()\n      });\n      setCreateModalVisible(false);\n      form.resetFields();\n      loadQueries();\n    } catch (error) {\n      console.error('Failed to create query:', error);\n    }\n  };\n\n  const handleResolveQuery = async values => {\n    try {\n      await queryAPI.resolveQuery(selectedQuery.id, {\n        resolution: values.resolution,\n        resolvedBy: getCurrentUser()\n      });\n      setResolveModalVisible(false);\n      resolveForm.resetFields();\n      setSelectedQuery(null);\n      loadQueries();\n    } catch (error) {\n      console.error('Failed to resolve query:', error);\n    }\n  };\n\n  const getStatusColor = status => {\n    return status === QUERY_STATUS.OPEN ? 'red' : 'green';\n  };\n\n  const getTeamColor = team => {\n    const colors = {\n      CQS: 'blue',\n      TECH: 'purple',\n      PLANT: 'orange',\n      JVC: 'cyan'\n    };\n    return colors[team] || 'default';\n  };\n\n  // Responsive column configuration for queries\n  const getQueryColumns = () => {\n    const baseColumns = [\n      {\n        title: 'ID',\n        dataIndex: 'id',\n        key: 'id',\n        width: isMobile ? 50 : 60,\n        fixed: isMobile ? 'left' : false\n      },\n      {\n        title: 'Question',\n        dataIndex: 'question',\n        key: 'question',\n        ellipsis: true,\n        render: text => (\n          <span title={text}>\n            {isMobile && text.length > 30 ? `${text.substring(0, 30)}...` : text}\n          </span>\n        )\n      },\n      {\n        title: 'Team',\n        dataIndex: 'assignedTeam',\n        key: 'assignedTeam',\n        width: isMobile ? 60 : 80,\n        render: team => (\n          <Tag color={getTeamColor(team)} size={isMobile ? 'small' : 'default'}>\n            {team}\n          </Tag>\n        )\n      },\n      {\n        title: 'Status',\n        dataIndex: 'status',\n        key: 'status',\n        width: isMobile ? 60 : 80,\n        render: status => (\n          <Tag color={getStatusColor(status)} size={isMobile ? 'small' : 'default'}>\n            {isMobile ? status.substring(0, 4) : status}\n          </Tag>\n        )\n      },\n      {\n        title: 'Context',\n        dataIndex: 'fieldContext',\n        key: 'fieldContext',\n        width: 120,\n        ellipsis: true,\n        responsive: ['md']\n      },\n      {\n        title: 'Created',\n        dataIndex: 'createdAt',\n        key: 'createdAt',\n        width: isMobile ? 80 : 100,\n        responsive: ['sm'],\n        render: date => {\n          if (!date) {\n            return '-';\n          }\n          const d = new Date(date);\n          return isMobile\n            ? d.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })\n            : d.toLocaleDateString();\n        }\n      },\n      {\n        title: 'Actions',\n        key: 'actions',\n        width: isMobile ? 70 : 120,\n        fixed: isMobile ? 'right' : false,\n        render: (_, record) => (\n          <Space>\n            <Button\n              size=\"small\"\n              type=\"link\"\n              onClick={() => {\n                setSelectedQuery(record);\n                setResolveModalVisible(true);\n              }}\n              disabled={record.status === QUERY_STATUS.RESOLVED || !canResolveQuery(record)}\n            >\n              {record.status === QUERY_STATUS.OPEN ? (isMobile ? 'Fix' : 'Resolve') : 'View'}\n            </Button>\n          </Space>\n        )\n      }\n    ];\n\n    return baseColumns;\n  };\n\n  const canCreateQuery = () => {\n    return [TEAM_NAMES.PLANT, TEAM_NAMES.JVC].includes(userRole);\n  };\n\n  const canResolveQuery = query => {\n    return query.assignedTeam === userRole || userRole === 'ADMIN';\n  };\n\n  const getTabCount = queryList => {\n    return queryList.length > 0 ? queryList.length : null;\n  };\n\n  return (\n    <Card\n      title=\"Queries\"\n      extra={\n        canCreateQuery() && (\n          <Button\n            type=\"primary\"\n            icon={<PlusOutlined />}\n            onClick={() => setCreateModalVisible(true)}\n          >\n            Raise Query\n          </Button>\n        )\n      }\n    >\n      <Tabs\n        defaultActiveKey=\"all\"\n        className={isMobile ? 'query-widget-mobile' : ''}\n        size={isMobile ? 'small' : 'default'}\n      >\n        <TabPane\n          tab={\n            <Badge count={getTabCount(queries.all)} size=\"small\">\n              <span>All Queries</span>\n            </Badge>\n          }\n          key=\"all\"\n        >\n          <Table\n            dataSource={queries.all}\n            columns={getQueryColumns()}\n            loading={loading}\n            pagination={{ pageSize: isMobile ? 5 : 10 }}\n            size=\"small\"\n            rowKey=\"id\"\n            scroll={isMobile ? { x: 500 } : undefined}\n            className={isMobile ? 'touch-friendly-table' : ''}\n          />\n        </TabPane>\n\n        <TabPane\n          tab={\n            <Badge count={getTabCount(queries.open)} size=\"small\">\n              <span style={{ color: '#ff4d4f' }}>Open</span>\n            </Badge>\n          }\n          key=\"open\"\n        >\n          <Table\n            dataSource={queries.open}\n            columns={getQueryColumns()}\n            loading={loading}\n            pagination={{ pageSize: isMobile ? 5 : 10 }}\n            size=\"small\"\n            rowKey=\"id\"\n            scroll={isMobile ? { x: 500 } : undefined}\n            className={isMobile ? 'touch-friendly-table' : ''}\n          />\n        </TabPane>\n\n        <TabPane\n          tab={\n            <Badge count={getTabCount(queries.resolved)} size=\"small\">\n              <span style={{ color: '#52c41a' }}>Resolved</span>\n            </Badge>\n          }\n          key=\"resolved\"\n        >\n          <Table\n            dataSource={queries.resolved}\n            columns={getQueryColumns()}\n            loading={loading}\n            pagination={{ pageSize: isMobile ? 5 : 10 }}\n            size=\"small\"\n            rowKey=\"id\"\n            scroll={isMobile ? { x: 500 } : undefined}\n            className={isMobile ? 'touch-friendly-table' : ''}\n          />\n        </TabPane>\n\n        <TabPane\n          tab={\n            <Badge count={getTabCount(queries.myQueries)} size=\"small\">\n              <span>My Queries</span>\n            </Badge>\n          }\n          key=\"my\"\n        >\n          <Table\n            dataSource={queries.myQueries}\n            columns={getQueryColumns()}\n            loading={loading}\n            pagination={{ pageSize: isMobile ? 5 : 10 }}\n            size=\"small\"\n            rowKey=\"id\"\n            scroll={isMobile ? { x: 500 } : undefined}\n            className={isMobile ? 'touch-friendly-table' : ''}\n          />\n        </TabPane>\n      </Tabs>\n\n      {/* Create Query Modal */}\n      <Modal\n        title=\"Raise New Query\"\n        open={createModalVisible}\n        onCancel={() => {\n          setCreateModalVisible(false);\n          form.resetFields();\n        }}\n        onOk={() => form.submit()}\n        width={600}\n      >\n        <Form form={form} layout=\"vertical\" onFinish={handleCreateQuery}>\n          <Form.Item\n            name=\"assignedTeam\"\n            label=\"Assign to Team\"\n            rules={[{ required: true, message: 'Please select a team' }]}\n          >\n            <Select placeholder=\"Select team\">\n              <Option value=\"CQS\">CQS Team</Option>\n              <Option value=\"TECH\">Tech Team</Option>\n              <Option value=\"JVC\">JVC Team</Option>\n            </Select>\n          </Form.Item>\n\n          <Form.Item\n            name=\"fieldContext\"\n            label=\"Field Context\"\n            help=\"Which field or section is this query about?\"\n          >\n            <Input placeholder=\"e.g., Material Name, Safety Data, etc.\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"question\"\n            label=\"Question\"\n            rules={[{ required: true, message: 'Please enter your question' }]}\n          >\n            <TextArea rows={4} placeholder=\"Describe your question or issue in detail...\" />\n          </Form.Item>\n\n          <Form.Item name=\"priority\" label=\"Priority\" initialValue=\"MEDIUM\">\n            <Select>\n              <Option value=\"LOW\">Low</Option>\n              <Option value=\"MEDIUM\">Medium</Option>\n              <Option value=\"HIGH\">High</Option>\n              <Option value=\"URGENT\">Urgent</Option>\n            </Select>\n          </Form.Item>\n        </Form>\n      </Modal>\n\n      {/* Resolve Query Modal */}\n      <Modal\n        title={`Resolve Query #${selectedQuery?.id}`}\n        open={resolveModalVisible}\n        onCancel={() => {\n          setResolveModalVisible(false);\n          resolveForm.resetFields();\n          setSelectedQuery(null);\n        }}\n        onOk={() => resolveForm.submit()}\n        width={600}\n      >\n        {selectedQuery && (\n          <>\n            <div style={{ marginBottom: 16, padding: 12, background: '#f5f5f5', borderRadius: 4 }}>\n              <strong>Question:</strong> {selectedQuery.question}\n              {selectedQuery.fieldContext && (\n                <div>\n                  <strong>Field Context:</strong> {selectedQuery.fieldContext}\n                </div>\n              )}\n            </div>\n\n            <Form form={resolveForm} layout=\"vertical\" onFinish={handleResolveQuery}>\n              <Form.Item\n                name=\"resolution\"\n                label=\"Resolution\"\n                rules={[{ required: true, message: 'Please provide a resolution' }]}\n              >\n                <TextArea\n                  rows={6}\n                  placeholder=\"Provide detailed resolution or answer to the query...\"\n                />\n              </Form.Item>\n            </Form>\n          </>\n        )}\n      </Modal>\n    </Card>\n  );\n};\n\nexport default QueryWidget;\n","import {\n  DashboardOutlined,\n  QuestionCircleOutlined,\n  HistoryOutlined,\n  ReloadOutlined,\n  FileTextOutlined,\n  InfoCircleOutlined,\n  FilterOutlined\n} from '@ant-design/icons';\nimport {\n  Tabs,\n  Card,\n  Row,\n  Col,\n  Typography,\n  Table,\n  Tag,\n  Button,\n  message,\n  Space,\n  Badge,\n  Modal,\n  Descriptions,\n  Select,\n  DatePicker\n} from 'antd';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport apiClient from '../api/client';\nimport AuditTimeline from '../components/AuditTimeline';\nimport DebugInfo from '../components/DebugInfo';\nimport QueryWidget from '../components/QueryWidget';\nimport { PAGINATION, WORKFLOW_STATES } from '../constants';\nimport { getCurrentUser, getUserRole } from '../services/auth';\n\nimport QuestionnaireViewerPage from './QuestionnaireViewerPage';\n\n// Test auth imports removed - files not found\n\nconst { TabPane } = Tabs;\nconst { Title, Text } = Typography;\nconst { Option } = Select;\nconst { RangePicker } = DatePicker;\n\nconst WorkflowPage = () => {\n  const navigate = useNavigate();\n  const [activeTab, setActiveTab] = useState('dashboard');\n  const [selectedWorkflowId, setSelectedWorkflowId] = useState(null);\n  const [selectedWorkflow, setSelectedWorkflow] = useState(null);\n  const [detailsModalVisible, setDetailsModalVisible] = useState(false);\n  const [questionnaireModalVisible, setQuestionnaireModalVisible] = useState(false);\n  const [questionnaireWorkflowId, setQuestionnaireWorkflowId] = useState(null);\n\n  // All Workflows State (for dashboard)\n  const [allWorkflows, setAllWorkflows] = useState([]);\n  const [filteredWorkflows, setFilteredWorkflows] = useState([]);\n  const [dashboardLoading, setDashboardLoading] = useState(false);\n\n  // Date filtering state\n  const [dateFilter, setDateFilter] = useState('current_month');\n  const [customDateRange, setCustomDateRange] = useState(null);\n\n  const currentUser = getCurrentUser();\n  const userRole = getUserRole();\n\n  // Debug logging\n  console.log('WorkflowPage - currentUser:', currentUser);\n  console.log('WorkflowPage - userRole:', userRole);\n\n  // Apply date filtering to workflows\n  const applyDateFilter = useCallback((workflows, filter, customRange) => {\n    // Ensure workflows is always an array\n    const safeWorkflows = Array.isArray(workflows) ? workflows : [];\n    const now = new Date();\n    let startDate;\n\n    switch (filter) {\n      case 'current_month':\n        startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n        break;\n      case 'past_3_months':\n        startDate = new Date(now.getFullYear(), now.getMonth() - 3, 1);\n        break;\n      case 'past_6_months':\n        startDate = new Date(now.getFullYear(), now.getMonth() - 6, 1);\n        break;\n      case 'past_12_months':\n        startDate = new Date(now.getFullYear(), now.getMonth() - 12, 1);\n        break;\n      case 'custom':\n        if (customRange && customRange.length === 2) {\n          startDate = customRange[0].toDate();\n          const endDate = customRange[1].toDate();\n          const filtered = safeWorkflows.filter(w => {\n            const workflowDate = new Date(w.createdAt);\n            return workflowDate >= startDate && workflowDate <= endDate;\n          });\n          setFilteredWorkflows(filtered);\n          return;\n        }\n        break;\n      default:\n        setFilteredWorkflows(safeWorkflows);\n        return;\n    }\n\n    if (startDate) {\n      const filtered = safeWorkflows.filter(w => {\n        const workflowDate = new Date(w.createdAt);\n        return workflowDate >= startDate;\n      });\n      setFilteredWorkflows(filtered);\n    } else {\n      setFilteredWorkflows(safeWorkflows);\n    }\n  }, []);\n\n  // Fetch all workflows for dashboard\n  const fetchAllWorkflows = useCallback(async signal => {\n    setDashboardLoading(true);\n    try {\n      const response = await apiClient.get('/workflows', { signal });\n      if (!signal?.aborted) {\n        // Ensure response is always an array\n        const safeResponse = Array.isArray(response) ? response : [];\n        setAllWorkflows(safeResponse);\n        applyDateFilter(safeResponse, dateFilter, customDateRange);\n      }\n    } catch (error) {\n      if (!signal?.aborted) {\n        console.error('Error fetching workflows:', error);\n        message.error('Failed to fetch workflows');\n        // Set empty arrays on error\n        setAllWorkflows([]);\n        setFilteredWorkflows([]);\n      }\n    } finally {\n      if (!signal?.aborted) {\n        setDashboardLoading(false);\n      }\n    }\n  }, [dateFilter, customDateRange, applyDateFilter]);\n\n  // Handle date filter change\n  const handleDateFilterChange = (value) => {\n    setDateFilter(value);\n    if (value !== 'custom') {\n      setCustomDateRange(null);\n    }\n    applyDateFilter(allWorkflows, value, customDateRange);\n  };\n\n  // Handle custom date range change\n  const handleCustomDateRangeChange = (dates) => {\n    setCustomDateRange(dates);\n    if (dates && dates.length === 2) {\n      applyDateFilter(allWorkflows, 'custom', dates);\n    }\n  };\n\n  useEffect(() => {\n    const controller = new AbortController();\n    fetchAllWorkflows(controller.signal);\n\n    return () => {\n      controller.abort();\n    };\n  }, [fetchAllWorkflows]);\n\n  // Apply date filter when dateFilter or customDateRange changes\n  useEffect(() => {\n    if (allWorkflows.length > 0) {\n      applyDateFilter(allWorkflows, dateFilter, customDateRange);\n    }\n  }, [dateFilter, customDateRange, allWorkflows, applyDateFilter]);\n\n  const handleTabChange = key => {\n    setActiveTab(key);\n  };\n\n  const showWorkflowDetails = workflow => {\n    setSelectedWorkflow(workflow);\n    setDetailsModalVisible(true);\n  };\n\n  const openQuestionnaire = workflowId => {\n    // Open questionnaire in modal overlay\n    setQuestionnaireWorkflowId(workflowId);\n    setQuestionnaireModalVisible(true);\n  };\n\n\n\n  const downloadExcelReport = async workflowId => {\n    try {\n      const response = await apiClient.get(`/workflows/${workflowId}/excel-report`, {\n        responseType: 'blob'\n      });\n\n      // Create download link\n      const url = window.URL.createObjectURL(new Blob([response]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `QRMFG_Report_Workflow_${workflowId}.xlsx`;\n      document.body.appendChild(link);\n      link.click();\n\n      // Cleanup\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(link);\n\n      message.success('Excel report downloaded successfully');\n    } catch (error) {\n      message.error('Failed to download Excel report');\n    }\n  };\n\n  const closeDetailsModal = () => {\n    setDetailsModalVisible(false);\n    setSelectedWorkflow(null);\n  };\n\n  // Dashboard Table Columns - Optimized for no horizontal scrolling\n  const dashboardColumns = [\n    {\n      title: 'ID',\n      dataIndex: 'id',\n      key: 'id',\n      width: 50,\n      render: id => <Badge count={id} style={{ backgroundColor: '#1890ff' }} />\n    },\n    {\n      title: 'Project',\n      dataIndex: 'projectCode',\n      key: 'projectCode',\n      width: 80,\n      render: text => <Text strong>{text}</Text>\n    },\n    {\n      title: 'Material',\n      dataIndex: 'materialCode',\n      key: 'materialCode',\n      width: 90,\n      render: text => <Text code>{text}</Text>\n    },\n    {\n      title: 'Description',\n      dataIndex: 'materialName',\n      key: 'materialName',\n      width: 100,\n      ellipsis: true,\n      render: text => text || 'No description'\n    },\n    {\n      title: 'Plant',\n      dataIndex: 'assignedPlant',\n      key: 'assignedPlant',\n      width: 70,\n      render: plant => <Tag color=\"green\">{plant}</Tag>\n    },\n    {\n      title: 'Status',\n      dataIndex: 'state',\n      key: 'state',\n      width: 100,\n      render: state => {\n        const stateConfig = {\n          JVC_PENDING: { color: 'orange', text: 'JVC' },\n          PLANT_PENDING: { color: 'blue', text: 'Plant' },\n          CQS_PENDING: { color: 'purple', text: 'CQS' },\n          TECH_PENDING: { color: 'cyan', text: 'Tech' },\n          [WORKFLOW_STATES.COMPLETED]: { color: 'green', text: 'Done' }\n        };\n        const config = stateConfig[state] || { color: 'default', text: state };\n        return <Tag color={config.color}>{config.text}</Tag>;\n      }\n    },\n    {\n      title: 'Start Date',\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      width: 90,\n      render: date => date ? new Date(date).toLocaleDateString('en-GB') : 'N/A'\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      width: 180,\n      render: (_, record) => (\n        <Space size=\"small\">\n          <Button\n            size=\"small\"\n            icon={<FileTextOutlined />}\n            onClick={() => openQuestionnaire(record.id)}\n            title=\"Open Questionnaire\"\n          >\n            Quest.\n          </Button>\n          <Button\n            size=\"small\"\n            type=\"default\"\n            style={{ backgroundColor: '#52c41a', borderColor: '#52c41a', color: 'white' }}\n            onClick={() => downloadExcelReport(record.id)}\n            title=\"Download Excel Report\"\n          >\n            Excel\n          </Button>\n        </Space>\n      )\n    }\n  ];\n\n  // Calculate analytics for filtered workflows\n  const calculateAnalytics = (workflows) => {\n    const total = workflows.length;\n    const completed = workflows.filter(w => w.state === WORKFLOW_STATES.COMPLETED).length;\n    const jvcPending = workflows.filter(w => w.state === 'JVC_PENDING').length;\n    const plantPending = workflows.filter(w => w.state === 'PLANT_PENDING').length;\n    const cqsPending = workflows.filter(w => w.state === 'CQS_PENDING').length;\n    const techPending = workflows.filter(w => w.state === 'TECH_PENDING').length;\n    const overdue = workflows.filter(w => (w.daysPending || 0) > 7).length;\n\n    return { total, completed, jvcPending, plantPending, cqsPending, techPending, overdue };\n  };\n\n  // Render Dashboard Tab\n  const renderDashboardTab = () => {\n    const analytics = calculateAnalytics(filteredWorkflows);\n\n    return (\n      <div>\n        {/* Header Section with Date Filters */}\n        <div style={{ marginBottom: 16 }}>\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 12 }}>\n            <Title level={3} style={{ margin: 0 }}>\n              Workflow Analytics\n              <Badge\n                count={filteredWorkflows.length}\n                style={{ backgroundColor: '#1890ff', marginLeft: 12 }}\n              />\n            </Title>\n            <Button\n              icon={<ReloadOutlined />}\n              onClick={() => {\n                const controller = new AbortController();\n                fetchAllWorkflows(controller.signal);\n              }}\n              loading={dashboardLoading}\n            >\n              Refresh\n            </Button>\n          </div>\n\n          {/* Date Filter Controls */}\n          <div style={{ display: 'flex', alignItems: 'center', gap: 16 }}>\n            <Space>\n              <FilterOutlined />\n              <Text strong>Filter by:</Text>\n              <Select\n                value={dateFilter}\n                onChange={handleDateFilterChange}\n                style={{ width: 150 }}\n                size=\"small\"\n              >\n                <Option value=\"current_month\">Current Month</Option>\n                <Option value=\"past_3_months\">Past 3 Months</Option>\n                <Option value=\"past_6_months\">Past 6 Months</Option>\n                <Option value=\"past_12_months\">Past 12 Months</Option>\n                <Option value=\"custom\">Custom Range</Option>\n              </Select>\n              {dateFilter === 'custom' && (\n                <RangePicker\n                  value={customDateRange}\n                  onChange={handleCustomDateRangeChange}\n                  size=\"small\"\n                  style={{ width: 240 }}\n                />\n              )}\n            </Space>\n          </div>\n        </div>\n\n        {/* Analytics Cards */}\n        <Row gutter={16} style={{ marginBottom: 24 }}>\n          <Col span={3}>\n            <Card size=\"small\">\n              <div style={{ textAlign: 'center' }}>\n                <div style={{ fontSize: '20px', fontWeight: 'bold', color: '#1890ff' }}>\n                  {analytics.total}\n                </div>\n                <div style={{ color: '#666', fontSize: '12px' }}>Total Projects</div>\n              </div>\n            </Card>\n          </Col>\n          <Col span={3}>\n            <Card size=\"small\">\n              <div style={{ textAlign: 'center' }}>\n                <div style={{ fontSize: '20px', fontWeight: 'bold', color: '#52c41a' }}>\n                  {analytics.completed}\n                </div>\n                <div style={{ color: '#666', fontSize: '12px' }}>Completed</div>\n              </div>\n            </Card>\n          </Col>\n          <Col span={3}>\n            <Card size=\"small\">\n              <div style={{ textAlign: 'center' }}>\n                <div style={{ fontSize: '20px', fontWeight: 'bold', color: '#faad14' }}>\n                  {analytics.jvcPending}\n                </div>\n                <div style={{ color: '#666', fontSize: '12px' }}>JVC Pending</div>\n              </div>\n            </Card>\n          </Col>\n          <Col span={3}>\n            <Card size=\"small\">\n              <div style={{ textAlign: 'center' }}>\n                <div style={{ fontSize: '20px', fontWeight: 'bold', color: '#1890ff' }}>\n                  {analytics.plantPending}\n                </div>\n                <div style={{ color: '#666', fontSize: '12px' }}>Plant Pending</div>\n              </div>\n            </Card>\n          </Col>\n          <Col span={3}>\n            <Card size=\"small\">\n              <div style={{ textAlign: 'center' }}>\n                <div style={{ fontSize: '20px', fontWeight: 'bold', color: '#722ed1' }}>\n                  {analytics.cqsPending}\n                </div>\n                <div style={{ color: '#666', fontSize: '12px' }}>CQS Pending</div>\n              </div>\n            </Card>\n          </Col>\n          <Col span={3}>\n            <Card size=\"small\">\n              <div style={{ textAlign: 'center' }}>\n                <div style={{ fontSize: '20px', fontWeight: 'bold', color: '#13c2c2' }}>\n                  {analytics.techPending}\n                </div>\n                <div style={{ color: '#666', fontSize: '12px' }}>Tech Pending</div>\n              </div>\n            </Card>\n          </Col>\n          <Col span={3}>\n            <Card size=\"small\">\n              <div style={{ textAlign: 'center' }}>\n                <div style={{ fontSize: '20px', fontWeight: 'bold', color: '#ff4d4f' }}>\n                  {analytics.overdue}\n                </div>\n                <div style={{ color: '#666', fontSize: '12px' }}>Overdue</div>\n              </div>\n            </Card>\n          </Col>\n          <Col span={3}>\n            {/* Empty column for spacing */}\n          </Col>\n        </Row>\n\n        {/* Main Table */}\n        <Card>\n          <Table\n            columns={dashboardColumns}\n            dataSource={filteredWorkflows}\n            rowKey=\"id\"\n            loading={dashboardLoading}\n            pagination={{\n              pageSize: PAGINATION.LARGE_PAGE_SIZE,\n              showSizeChanger: true,\n              showQuickJumper: true,\n              showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} workflows`\n            }}\n            size=\"small\"\n            onRow={(record) => ({\n              onClick: () => {\n                setSelectedWorkflowId(record.id);\n                showWorkflowDetails(record);\n              },\n              style: { cursor: 'pointer' }\n            })}\n          />\n        </Card>\n      </div>\n    );\n  };\n\n  return (\n    <div style={{ padding: '0' }}>\n      <DebugInfo />\n      <Card\n        title=\"MSDS Workflow Management\"\n        style={{ marginBottom: 24 }}\n        extra={\n          <span style={{ fontSize: '14px', color: '#666' }}>\n            Welcome, {currentUser} ({userRole})\n          </span>\n        }\n      >\n        <Tabs activeKey={activeTab} onChange={handleTabChange} type=\"card\" size=\"large\">\n          <TabPane\n            tab={\n              <span>\n                <DashboardOutlined />\n                Dashboard\n                {filteredWorkflows.length > 0 && (\n                  <Badge\n                    count={filteredWorkflows.length}\n                    style={{ backgroundColor: '#1890ff', marginLeft: 8 }}\n                  />\n                )}\n              </span>\n            }\n            key=\"dashboard\"\n          >\n            {renderDashboardTab()}\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <QuestionCircleOutlined />\n                Queries\n                {selectedWorkflowId && (\n                  <Badge\n                    count={selectedWorkflowId}\n                    style={{ backgroundColor: '#52c41a', marginLeft: 8 }}\n                  />\n                )}\n              </span>\n            }\n            key=\"queries\"\n          >\n            <Row gutter={[16, 16]}>\n              <Col span={24}>\n                <QueryWidget workflowId={selectedWorkflowId} userRole={userRole} />\n              </Col>\n            </Row>\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <HistoryOutlined />\n                Audit Trail\n              </span>\n            }\n            key=\"audit\"\n          >\n            <Row gutter={[16, 16]}>\n              <Col span={24}>\n                {selectedWorkflowId ? (\n                  <AuditTimeline workflowId={selectedWorkflowId} entityType=\"complete\" />\n                ) : (\n                  <Card>\n                    <div\n                      style={{\n                        textAlign: 'center',\n                        padding: '40px 20px',\n                        color: '#999'\n                      }}\n                    >\n                      <HistoryOutlined style={{ fontSize: '48px', marginBottom: '16px' }} />\n                      <h3>Select a Workflow</h3>\n                      <p>Choose a workflow from the dashboard to view its audit trail</p>\n                    </div>\n                  </Card>\n                )}\n              </Col>\n            </Row>\n          </TabPane>\n        </Tabs>\n      </Card>\n\n      {/* Workflow Details Modal */}\n      <Modal\n        title={\n          <Space>\n            <InfoCircleOutlined />\n            Workflow Details\n            {selectedWorkflow && (\n              <Badge count={selectedWorkflow.id} style={{ backgroundColor: '#1890ff' }} />\n            )}\n          </Space>\n        }\n        open={detailsModalVisible}\n        onCancel={closeDetailsModal}\n        footer={[\n          <Button key=\"close\" onClick={closeDetailsModal}>\n            Close\n          </Button>,\n          selectedWorkflow && (\n            <Button\n              key=\"questionnaire\"\n              type=\"primary\"\n              icon={<FileTextOutlined />}\n              onClick={() => {\n                openQuestionnaire(selectedWorkflow.id);\n                closeDetailsModal();\n              }}\n            >\n              Open Questionnaire\n            </Button>\n          ),\n          selectedWorkflow && (\n            <Button\n              key=\"excel-report\"\n              type=\"default\"\n              style={{ backgroundColor: '#52c41a', borderColor: '#52c41a', color: 'white' }}\n              onClick={() => {\n                downloadExcelReport(selectedWorkflow.id);\n                closeDetailsModal();\n              }}\n            >\n              Download Excel Report\n            </Button>\n          )\n        ]}\n        width={800}\n      >\n        {selectedWorkflow && (\n          <Descriptions column={2} bordered size=\"small\">\n            <Descriptions.Item label=\"Workflow ID\">{selectedWorkflow.id}</Descriptions.Item>\n            <Descriptions.Item label=\"Status\">\n              <Tag color=\"blue\">{selectedWorkflow.state}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Material Code\">\n              {selectedWorkflow.materialCode}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Material Name\">\n              {selectedWorkflow.materialName || 'Not available'}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Project Code\">\n              {selectedWorkflow.projectCode}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Assigned Plant\">\n              <Tag color=\"green\">{selectedWorkflow.assignedPlant}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Days Pending\">\n              <Tag color={(selectedWorkflow.daysPending || 0) > 7 ? 'red' : 'green'}>\n                {selectedWorkflow.daysPending || 0} days\n              </Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Initiated By\">\n              {selectedWorkflow.initiatedBy}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Created At\">\n              {selectedWorkflow.createdAt\n                ? new Date(selectedWorkflow.createdAt).toLocaleString()\n                : 'N/A'}\n            </Descriptions.Item>\n          </Descriptions>\n        )}\n      </Modal>\n\n      {/* Questionnaire Modal */}\n      <Modal\n        title=\"QRMFG Questionnaire Viewer\"\n        open={questionnaireModalVisible}\n        onCancel={() => setQuestionnaireModalVisible(false)}\n        footer={null}\n        width=\"90%\"\n        style={{ top: 20 }}\n        bodyStyle={{ padding: 0, height: 'calc(100vh - 200px)', overflow: 'hidden' }}\n      >\n        {questionnaireWorkflowId && (\n          <div style={{ height: '100%', overflow: 'auto' }}>\n            <QuestionnaireViewerPage\n              workflowId={questionnaireWorkflowId}\n              onClose={() => setQuestionnaireModalVisible(false)}\n            />\n          </div>\n        )}\n      </Modal>\n    </div>\n  );\n};\n\nexport default WorkflowPage;"],"names":["UI_CONFIG","MOBILE_BREAKPOINT","TABLET_BREAKPOINT","PAGE_SIZE","DEBOUNCE_DELAY","WORKFLOW_STATES","INITIATED","IN_PROGRESS","PENDING_REVIEW","APPROVED","REJECTED","COMPLETED","PRIORITY_LEVELS","LOW","MEDIUM","HIGH","URGENT","CRITICAL","FILE_SIZE","MAX_UPLOAD_SIZE","BYTES_PER_KB","BYTES_PER_MB","BYTES_PER_GB","WORKFLOW_SPECIFIC_STATES","JVC_PENDING","PLANT_PENDING","CQS_PENDING","TECH_PENDING","DRAFT","SUBMITTED","QUERY_STATUS","OPEN","RESOLVED","CLOSED","TEAM_NAMES","CQS","TECH","JVC","PLANT","AUTO_SAVE","INTERVAL","PAGINATION","DEFAULT_PAGE_SIZE","SMALL_PAGE_SIZE","LARGE_PAGE_SIZE","SHOW_SIZE_CHANGER","SHOW_QUICK_JUMPER","COMPLETION_FILTERS","ALL","NOT_STARTED","TAB_KEYS","INITIATE","PENDING","QUERIES","HISTORY","queryAPI","createQuery","workflowId","queryData","apiClient","post","getQuery","id","get","updateQuery","put","deleteQuery","delete","resolveQuery","resolutionData","reopenQuery","reason","assignQuery","assignmentData","reassignQuery","newTeam","team","getQueriesByWorkflow","getQueriesByTeam","getQueriesByStatus","status","getQueriesByUser","_username","searchQueries","searchParams","queryString","URLSearchParams","toString","getQueryStats","timeRange","getQueryCountsByTeam","getAvgResolutionTimeByTeam","getOverdueQueries","getOverdueQueriesCountByTeam","getQueriesResolvedTodayByTeam","getQuerySLAStatus","getQueriesNearingSLA","addQueryComment","comment","getQueryComments","updateQueryPriority","priority","escalateQuery","_escalationReason","priorityLevel","uploadQueryDocuments","queryId","files","upload","uploadResponseDocuments","responseId","getQueryDocuments","downloadQueryDocument","documentId","download","deleteQueryDocument","auditAPI","Panel","Collapse","_ref","entityType","loading","setLoading","useState","auditHistory","setAuditHistory","error","setError","expandedItems","setExpandedItems","Set","isMobile","useResponsive","screenSize","setScreenSize","window","innerWidth","isTablet","isDesktop","useEffect","handleResize","addEventListener","removeEventListener","loadAuditHistory","useCallback","async","history","formatAuditHistory","err","console","rawHistory","map","entry","index","timestamp","revisionDate","user","username","modifiedBy","action","revisionType","entityId","changes","description","generateDescription","details","toLowerCase","newState","getActionIcon","_jsx","CheckCircleOutlined","style","color","EditOutlined","ClockCircleOutlined","FileTextOutlined","MessageOutlined","getActionColor","formatTimestamp","Date","toLocaleString","Card","children","textAlign","padding","Spin","size","Alert","message","type","showIcon","Button","onClick","title","extra","Space","length","Timeline","mode","className","Item","dot","_jsxs","display","alignItems","gap","marginBottom","flexWrap","Tag","substring","fontWeight","fontSize","UserOutlined","split","itemId","newExpanded","has","add","toggleExpanded","height","ghost","header","showArrow","marginTop","change","field","oldValue","newValue","background","borderRadius","overflow","maxHeight","JSON","stringify","DebugInfo","currentUser","getCurrentUser","userRole","getUserRole","isAuth","isAuthenticated","process","REACT_APP_DEBUG","Descriptions","column","label","REACT_APP_USE_MOCK_DATA","REACT_APP_API_BASE_URL","TabPane","Tabs","TextArea","Input","Option","Select","queries","setQueries","all","open","resolved","myQueries","createModalVisible","setCreateModalVisible","resolveModalVisible","setResolveModalVisible","selectedQuery","setSelectedQuery","form","Form","useForm","resolveForm","controller","AbortController","allQueries","signal","aborted","filter","q","createdBy","loadQueriesWithAbort","abort","loadQueries","localStorage","getItem","getStatusColor","getTeamColor","getQueryColumns","dataIndex","key","width","fixed","ellipsis","render","text","responsive","date","d","toLocaleDateString","month","day","_","record","disabled","canResolveQuery","query","assignedTeam","getTabCount","queryList","includes","icon","PlusOutlined","defaultActiveKey","tab","Badge","count","Table","dataSource","columns","pagination","pageSize","rowKey","scroll","x","undefined","Modal","onCancel","resetFields","onOk","submit","layout","onFinish","values","name","rules","required","placeholder","value","help","rows","initialValue","_Fragment","question","fieldContext","resolution","resolvedBy","Title","Text","Typography","RangePicker","DatePicker","WorkflowPage","useNavigate","activeTab","setActiveTab","selectedWorkflowId","setSelectedWorkflowId","selectedWorkflow","setSelectedWorkflow","detailsModalVisible","setDetailsModalVisible","questionnaireModalVisible","setQuestionnaireModalVisible","questionnaireWorkflowId","setQuestionnaireWorkflowId","allWorkflows","setAllWorkflows","filteredWorkflows","setFilteredWorkflows","dashboardLoading","setDashboardLoading","dateFilter","setDateFilter","customDateRange","setCustomDateRange","log","applyDateFilter","workflows","customRange","safeWorkflows","Array","isArray","now","startDate","getFullYear","getMonth","toDate","endDate","filtered","w","workflowDate","createdAt","fetchAllWorkflows","response","safeResponse","handleDateFilterChange","handleCustomDateRangeChange","dates","openQuestionnaire","downloadExcelReport","responseType","url","URL","createObjectURL","Blob","link","document","createElement","href","body","appendChild","click","revokeObjectURL","removeChild","success","closeDetailsModal","dashboardColumns","backgroundColor","strong","code","plant","state","config","borderColor","activeKey","onChange","DashboardOutlined","marginLeft","renderDashboardTab","analytics","total","completed","jvcPending","plantPending","cqsPending","techPending","overdue","daysPending","justifyContent","level","margin","ReloadOutlined","FilterOutlined","Row","gutter","Col","span","showSizeChanger","showQuickJumper","showTotal","range","onRow","cursor","QuestionCircleOutlined","QueryWidget","HistoryOutlined","AuditTimeline","InfoCircleOutlined","footer","bordered","materialCode","materialName","projectCode","assignedPlant","initiatedBy","top","bodyStyle","QuestionnaireViewerPage","onClose"],"sourceRoot":""}