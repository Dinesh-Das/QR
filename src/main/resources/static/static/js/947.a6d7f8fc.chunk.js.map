{"version":3,"file":"static/js/947.a6d7f8fc.chunk.js","mappings":"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","sources":["components/ErrorBoundaries/PlantErrorBoundary.js","components/Plant/FilterPanel.js","components/Plant/PlantDashboard.js","components/Plant/WorkflowTable.js","components/CqsFieldDisplay.js","components/MaterialContextPanel.js","components/QueryRaisingModal.js","components/PlantQuestionnaire.js","screens/PlantView.js","hooks/usePlantWorkflows.js","hooks/useWorkflowFilters.js","hooks/useRoleBasedAccess.js","components/SecureForm.js","utils/questionnaireUtils.js","services/userAPI.js","services/workflowAPI.js","services/masterDataAPI.js"],"sourcesContent":["import React from 'react';\n\nimport { RouteErrorBoundary } from './RouteErrorBoundary';\n\n/**\n * Plant-specific error boundary for handling errors within plant workflow management\n * Extends RouteErrorBoundary with plant-specific context\n */\nexport const PlantErrorBoundary = ({ children, plantCode }) => (\n  <RouteErrorBoundary \n    routeName=\"Plant Dashboard\" \n    errorContext={{ \n      plantCode,\n      feature: 'plant-workflow-management',\n      level: 'plant'\n    }}\n  >\n    {children}\n  </RouteErrorBoundary>\n);\n\nexport default PlantErrorBoundary;","import { SearchOutlined, ClearOutlined, SaveOutlined, FilterOutlined } from '@ant-design/icons';\nimport { Card, Row, Col, Input, Select, Button, Space, Tag, Divider } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { useCallback } from 'react';\n\nconst { Search } = Input;\nconst { Option } = Select;\n\n/**\n * FilterPanel component provides filtering controls for workflow data\n * Optimized with React.memo and useCallback for performance\n */\nconst FilterPanel = React.memo(({ \n  searchText,\n  statusFilter,\n  completionFilter,\n  onSearchTextChange,\n  onStatusFilterChange,\n  onCompletionFilterChange,\n  onClearFilters,\n  onApplyPreset,\n  onSaveFilters,\n  filterPresets,\n  filterSummary\n}) => {\n  /**\n   * Handle search text change\n   */\n  const handleSearchChange = useCallback((value) => {\n    if (onSearchTextChange) {\n      onSearchTextChange(value);\n    }\n  }, [onSearchTextChange]);\n\n  /**\n   * Handle status filter change\n   */\n  const handleStatusChange = useCallback((value) => {\n    if (onStatusFilterChange) {\n      onStatusFilterChange(value);\n    }\n  }, [onStatusFilterChange]);\n\n  /**\n   * Handle completion filter change\n   */\n  const handleCompletionChange = useCallback((value) => {\n    if (onCompletionFilterChange) {\n      onCompletionFilterChange(value);\n    }\n  }, [onCompletionFilterChange]);\n\n  /**\n   * Handle clear all filters\n   */\n  const handleClearFilters = useCallback(() => {\n    if (onClearFilters) {\n      onClearFilters();\n    }\n  }, [onClearFilters]);\n\n  /**\n   * Handle preset application\n   */\n  const handlePresetClick = useCallback((presetName) => {\n    if (onApplyPreset) {\n      onApplyPreset(presetName);\n    }\n  }, [onApplyPreset]);\n\n  /**\n   * Handle save filters\n   */\n  const handleSaveFilters = useCallback(() => {\n    if (onSaveFilters) {\n      onSaveFilters();\n    }\n  }, [onSaveFilters]);\n\n  return (\n    <Card \n      title={\n        <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>\n          <FilterOutlined />\n          <span>Filters</span>\n          {filterSummary?.hasActiveFilters && (\n            <Tag color=\"blue\" style={{ marginLeft: 8 }}>\n              {filterSummary.activeFilters.length} active\n            </Tag>\n          )}\n        </div>\n      }\n      size=\"small\"\n      style={{ marginBottom: 16 }}\n      extra={\n        <Space>\n          {onSaveFilters && (\n            <Button \n              size=\"small\" \n              icon={<SaveOutlined />}\n              onClick={handleSaveFilters}\n              disabled={!filterSummary?.hasActiveFilters}\n            >\n              Save\n            </Button>\n          )}\n          <Button \n            size=\"small\" \n            icon={<ClearOutlined />}\n            onClick={handleClearFilters}\n            disabled={!filterSummary?.hasActiveFilters}\n          >\n            Clear All\n          </Button>\n        </Space>\n      }\n    >\n      {/* Main Filter Controls */}\n      <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>\n        <Col xs={24} sm={8} md={8} lg={8}>\n          <div style={{ marginBottom: 4, fontSize: '12px', fontWeight: '500', color: '#666' }}>\n            Search Materials\n          </div>\n          <Search\n            placeholder=\"Search by Material Code or Plant\"\n            value={searchText}\n            onChange={(e) => handleSearchChange(e.target.value)}\n            style={{ width: '100%' }}\n            allowClear\n            enterButton={<SearchOutlined />}\n          />\n        </Col>\n        <Col xs={12} sm={8} md={8} lg={8}>\n          <div style={{ marginBottom: 4, fontSize: '12px', fontWeight: '500', color: '#666' }}>\n            Status Filter\n          </div>\n          <Select\n            placeholder=\"Filter by Status\"\n            value={statusFilter}\n            onChange={handleStatusChange}\n            style={{ width: '100%' }}\n            allowClear\n          >\n            <Option value=\"all\">All Statuses</Option>\n            <Option value=\"DRAFT\">Draft</Option>\n            <Option value=\"IN_PROGRESS\">In Progress</Option>\n            <Option value=\"COMPLETED\">Completed</Option>\n          </Select>\n        </Col>\n        <Col xs={12} sm={8} md={8} lg={8}>\n          <div style={{ marginBottom: 4, fontSize: '12px', fontWeight: '500', color: '#666' }}>\n            Completion Filter\n          </div>\n          <Select\n            placeholder=\"Filter by Completion\"\n            value={completionFilter}\n            onChange={handleCompletionChange}\n            style={{ width: '100%' }}\n            allowClear\n          >\n            <Option value=\"all\">All Progress</Option>\n            <Option value=\"not-started\">Not Started (0%)</Option>\n            <Option value=\"in-progress\">In Progress (1-99%)</Option>\n            <Option value=\"completed\">Completed (100%)</Option>\n          </Select>\n        </Col>\n      </Row>\n\n\n\n      {/* Active Filters Summary */}\n      {filterSummary?.hasActiveFilters && (\n        <>\n          <Divider style={{ margin: '12px 0' }} />\n          <div style={{ marginBottom: 8 }}>\n            <span style={{ fontSize: '12px', fontWeight: '500', color: '#666' }}>\n              Active Filters:\n            </span>\n          </div>\n          <Space wrap>\n            {filterSummary.activeFilters.map((filter, index) => (\n              <Tag key={index} color=\"blue\" style={{ fontSize: '11px' }}>\n                {filter}\n              </Tag>\n            ))}\n          </Space>\n          <div style={{ marginTop: 8, fontSize: '12px', color: '#666' }}>\n            Showing {filterSummary.totalFiltered} of {filterSummary.totalOriginal} workflows\n          </div>\n        </>\n      )}\n\n      {/* No Active Filters Message */}\n      {!filterSummary?.hasActiveFilters && (\n        <>\n          <Divider style={{ margin: '12px 0' }} />\n          <div style={{ fontSize: '12px', color: '#999', textAlign: 'center' }}>\n            No filters applied - showing all workflows\n          </div>\n        </>\n      )}\n    </Card>\n  );\n});\n\nFilterPanel.displayName = 'FilterPanel';\n\nFilterPanel.propTypes = {\n  searchText: PropTypes.string,\n  statusFilter: PropTypes.string,\n  completionFilter: PropTypes.string,\n  onSearchTextChange: PropTypes.func,\n  onStatusFilterChange: PropTypes.func,\n  onCompletionFilterChange: PropTypes.func,\n  onClearFilters: PropTypes.func,\n  onApplyPreset: PropTypes.func,\n  onSaveFilters: PropTypes.func,\n  filterPresets: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    filters: PropTypes.object.isRequired\n  })),\n  filterSummary: PropTypes.shape({\n    activeFilters: PropTypes.arrayOf(PropTypes.string),\n    hasActiveFilters: PropTypes.bool,\n    totalFiltered: PropTypes.number,\n    totalOriginal: PropTypes.number\n  })\n};\n\nFilterPanel.defaultProps = {\n  searchText: '',\n  statusFilter: 'all',\n  completionFilter: 'all',\n  onSearchTextChange: null,\n  onStatusFilterChange: null,\n  onCompletionFilterChange: null,\n  onClearFilters: null,\n  onApplyPreset: null,\n  onSaveFilters: null,\n  filterPresets: [],\n  filterSummary: null\n};\n\nexport default FilterPanel;","import {\n  ClockCircleOutlined,\n  CheckCircleOutlined,\n  ExclamationCircleOutlined,\n  BarChartOutlined\n} from '@ant-design/icons';\nimport { Card, Row, Col, Statistic, Progress, Alert } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { useMemo } from 'react';\n\n/**\n * PlantDashboard component displays summary statistics and progress for plant workflows\n * Optimized with React.memo and useMemo for performance\n */\nconst PlantDashboard = React.memo(({ \n  dashboardStats, \n  loading, \n  error, \n  currentPlant,\n  onRefresh \n}) => {\n  /**\n   * Calculate progress color based on completion percentage\n   */\n  const getProgressColor = useMemo(() => (percentage) => {\n    if (percentage >= 80) return '#52c41a'; // Green\n    if (percentage >= 60) return '#1890ff'; // Blue\n    if (percentage >= 40) return '#faad14'; // Yellow\n    if (percentage >= 20) return '#fa8c16'; // Orange\n    return '#ff4d4f'; // Red\n  }, []);\n\n  /**\n   * Calculate completion rate statistics\n   */\n  const completionStats = useMemo(() => {\n    const { totalWorkflows, completedCount, inProgressCount, draftCount } = dashboardStats;\n    \n    if (totalWorkflows === 0) {\n      return {\n        completionRate: 0,\n        inProgressRate: 0,\n        draftRate: 0\n      };\n    }\n\n    return {\n      completionRate: Math.round((completedCount / totalWorkflows) * 100),\n      inProgressRate: Math.round((inProgressCount / totalWorkflows) * 100),\n      draftRate: Math.round((draftCount / totalWorkflows) * 100)\n    };\n  }, [dashboardStats]);\n\n  /**\n   * Get status color for statistics\n   */\n  const getStatisticColor = useMemo(() => (type) => {\n    const colors = {\n      total: '#1890ff',\n      inProgress: '#fa8c16',\n      completed: '#52c41a',\n      average: '#52c41a'\n    };\n    return colors[type] || '#1890ff';\n  }, []);\n\n  if (error) {\n    return (\n      <Alert\n        message=\"Dashboard Error\"\n        description={`Failed to load dashboard data: ${error}`}\n        type=\"error\"\n        showIcon\n        style={{ marginBottom: 24 }}\n        action={\n          onRefresh && (\n            <button onClick={onRefresh} style={{ border: 'none', background: 'none', color: '#1890ff', cursor: 'pointer' }}>\n              Retry\n            </button>\n          )\n        }\n      />\n    );\n  }\n\n  return (\n    <div style={{ marginBottom: 16 }}>\n      {/* Main Statistics Row */}\n      <Row gutter={[12, 12]} style={{ marginBottom: 12 }}>\n        <Col xs={12} sm={6} md={6} lg={6}>\n          <Card loading={loading}>\n            <Statistic\n              title=\"Total Materials\"\n              value={dashboardStats.totalWorkflows || 0}\n              prefix={<ClockCircleOutlined />}\n              valueStyle={{ color: getStatisticColor('total') }}\n            />\n          </Card>\n        </Col>\n        <Col xs={12} sm={6} md={6} lg={6}>\n          <Card loading={loading}>\n            <Statistic\n              title=\"In Progress\"\n              value={dashboardStats.inProgressCount || 0}\n              prefix={<ExclamationCircleOutlined />}\n              valueStyle={{ color: getStatisticColor('inProgress') }}\n            />\n          </Card>\n        </Col>\n        <Col xs={12} sm={6} md={6} lg={6}>\n          <Card loading={loading}>\n            <Statistic\n              title=\"Completed\"\n              value={dashboardStats.completedCount || 0}\n              prefix={<CheckCircleOutlined />}\n              valueStyle={{ color: getStatisticColor('completed') }}\n            />\n          </Card>\n        </Col>\n        <Col xs={12} sm={6} md={6} lg={6}>\n          <Card loading={loading}>\n            <Statistic\n              title=\"Average Progress\"\n              value={dashboardStats.averageCompletion || 0}\n              suffix=\"%\"\n              prefix={<BarChartOutlined />}\n              valueStyle={{ color: getStatisticColor('average') }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Progress Breakdown Row */}\n      <Row gutter={[12, 12]}>\n        <Col xs={24} sm={12} md={8} lg={8}>\n          <Card \n            title=\"Completion Rate\" \n            loading={loading}\n            size=\"small\"\n          >\n            <Progress\n              type=\"circle\"\n              percent={completionStats.completionRate}\n              strokeColor={getProgressColor(completionStats.completionRate)}\n              format={(percent) => `${percent}%`}\n              size={80}\n            />\n            <div style={{ textAlign: 'center', marginTop: 8, fontSize: '12px', color: '#666' }}>\n              {dashboardStats.completedCount} of {dashboardStats.totalWorkflows} completed\n            </div>\n          </Card>\n        </Col>\n        <Col xs={24} sm={12} md={8} lg={8}>\n          <Card \n            title=\"In Progress Rate\" \n            loading={loading}\n            size=\"small\"\n          >\n            <Progress\n              type=\"circle\"\n              percent={completionStats.inProgressRate}\n              strokeColor=\"#fa8c16\"\n              format={(percent) => `${percent}%`}\n              size={80}\n            />\n            <div style={{ textAlign: 'center', marginTop: 8, fontSize: '12px', color: '#666' }}>\n              {dashboardStats.inProgressCount} workflows active\n            </div>\n          </Card>\n        </Col>\n        <Col xs={24} sm={12} md={8} lg={8}>\n          <Card \n            title=\"Draft Rate\" \n            loading={loading}\n            size=\"small\"\n          >\n            <Progress\n              type=\"circle\"\n              percent={completionStats.draftRate}\n              strokeColor=\"#ff4d4f\"\n              format={(percent) => `${percent}%`}\n              size={80}\n            />\n            <div style={{ textAlign: 'center', marginTop: 8, fontSize: '12px', color: '#666' }}>\n              {dashboardStats.draftCount} not started\n            </div>\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Plant Information */}\n      {currentPlant && (\n        <Alert\n          message={`Plant Dashboard - ${currentPlant}`}\n          description=\"Overview of all assigned materials and their completion status for the selected plant.\"\n          type=\"info\"\n          showIcon\n          style={{ marginTop: 12 }}\n        />\n      )}\n    </div>\n  );\n});\n\nPlantDashboard.displayName = 'PlantDashboard';\n\nPlantDashboard.propTypes = {\n  dashboardStats: PropTypes.shape({\n    totalWorkflows: PropTypes.number,\n    completedCount: PropTypes.number,\n    inProgressCount: PropTypes.number,\n    draftCount: PropTypes.number,\n    averageCompletion: PropTypes.number,\n    completedToday: PropTypes.number\n  }).isRequired,\n  loading: PropTypes.bool,\n  error: PropTypes.string,\n  currentPlant: PropTypes.string,\n  onRefresh: PropTypes.func\n};\n\nPlantDashboard.defaultProps = {\n  loading: false,\n  error: null,\n  currentPlant: null,\n  onRefresh: null\n};\n\nexport default PlantDashboard;","import {\n  FormOutlined,\n  SearchOutlined\n} from '@ant-design/icons';\nimport { Table, Button, Space, Tag, Progress, Input } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { useMemo, useCallback } from 'react';\n\nimport { PAGINATION } from '../../constants';\n\n/**\n * WorkflowTable component displays workflows in a table format with sorting, filtering, and actions\n * Optimized with React.memo and performance optimizations\n */\nconst WorkflowTable = React.memo(({ \n  workflows, \n  loading, \n  onStartQuestionnaire, \n  onRefresh \n}) => {\n  /**\n   * Get status color for workflow status tags\n   */\n  const getStatusColor = useCallback((status) => {\n    const colors = {\n      DRAFT: 'default',\n      IN_PROGRESS: 'processing',\n      COMPLETED: 'success'\n    };\n    return colors[status] || 'default';\n  }, []);\n\n  /**\n   * Get completion color based on percentage\n   */\n  const getCompletionColor = useCallback((percentage) => {\n    if (percentage === 100) return '#52c41a';\n    if (percentage >= 75) return '#1890ff';\n    if (percentage >= 50) return '#faad14';\n    if (percentage >= 25) return '#fa8c16';\n    return '#ff4d4f';\n  }, []);\n\n  /**\n   * Calculate days in current state\n   */\n  const getDaysInState = useCallback((lastModified) => {\n    if (!lastModified) return 0;\n    const now = new Date();\n    const modified = new Date(lastModified);\n    const diffTime = Math.abs(now - modified);\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  }, []);\n\n  /**\n   * Handle start questionnaire action\n   */\n  const handleStartQuestionnaire = useCallback((workflow) => {\n    if (onStartQuestionnaire) {\n      onStartQuestionnaire(workflow);\n    }\n  }, [onStartQuestionnaire]);\n\n\n\n  /**\n   * Table columns configuration with memoization\n   */\n  const columns = useMemo(() => [\n    {\n      title: 'Material Code',\n      dataIndex: 'materialCode',\n      key: 'materialCode',\n      width: 140,\n      sorter: (a, b) => a.materialCode.localeCompare(b.materialCode),\n      filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n        <div style={{ padding: 8 }}>\n          <Input\n            placeholder=\"Search Material Code\"\n            value={selectedKeys[0]}\n            onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n            onPressEnter={() => confirm()}\n            style={{ width: 188, marginBottom: 8, display: 'block' }}\n          />\n          <Space>\n            <Button\n              type=\"primary\"\n              onClick={() => confirm()}\n              icon={<SearchOutlined />}\n              size=\"small\"\n              style={{ width: 90 }}\n            >\n              Search\n            </Button>\n            <Button onClick={() => clearFilters()} size=\"small\" style={{ width: 90 }}>\n              Reset\n            </Button>\n          </Space>\n        </div>\n      ),\n      filterIcon: filtered => (\n        <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />\n      ),\n      onFilter: (value, record) => record.materialCode.toLowerCase().includes(value.toLowerCase()),\n      render: (text, record) => (\n        <div>\n          <div style={{ fontWeight: 'bold' }}>{text}</div>\n          <div style={{ fontSize: '12px', color: '#666' }}>\n            {record.materialName || record.itemDescription || 'Material Name'}\n          </div>\n        </div>\n      )\n    },\n    {\n      title: 'Plant Code',\n      dataIndex: 'plantCode',\n      key: 'plantCode',\n      width: 120,\n      sorter: (a, b) => (a.plantCode || '').localeCompare(b.plantCode || ''),\n      filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n        <div style={{ padding: 8 }}>\n          <Input\n            placeholder=\"Search Plant Code\"\n            value={selectedKeys[0]}\n            onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n            onPressEnter={() => confirm()}\n            style={{ width: 188, marginBottom: 8, display: 'block' }}\n          />\n          <Space>\n            <Button\n              type=\"primary\"\n              onClick={() => confirm()}\n              icon={<SearchOutlined />}\n              size=\"small\"\n              style={{ width: 90 }}\n            >\n              Search\n            </Button>\n            <Button onClick={() => clearFilters()} size=\"small\" style={{ width: 90 }}>\n              Reset\n            </Button>\n          </Space>\n        </div>\n      ),\n      filterIcon: filtered => (\n        <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />\n      ),\n      onFilter: (value, record) =>\n        (record.plantCode || '').toLowerCase().includes(value.toLowerCase()),\n      render: text => (\n        <Tag color=\"blue\" style={{ fontWeight: 'bold' }}>\n          {text || 'N/A'}\n        </Tag>\n      )\n    },\n\n    {\n      title: 'Status',\n      dataIndex: 'completionStatus',\n      key: 'completionStatus',\n      width: 120,\n      filters: [\n        { text: 'Draft', value: 'DRAFT' },\n        { text: 'In Progress', value: 'IN_PROGRESS' },\n        { text: 'Completed', value: 'COMPLETED' }\n      ],\n      onFilter: (value, record) => record.completionStatus === value,\n      render: status => <Tag color={getStatusColor(status)}>{status.replace('_', ' ')}</Tag>\n    },\n    {\n      title: 'Progress',\n      key: 'progress',\n      width: 150,\n      sorter: (a, b) => a.completionPercentage - b.completionPercentage,\n      render: (_, record) => {\n        const completedFields = record.completedFields || 0;\n        const percentage = Math.round((completedFields / 87) * 100);\n        return (\n          <div>\n            <Progress\n              percent={percentage}\n              size=\"small\"\n              strokeColor={getCompletionColor(percentage)}\n              format={() => `${percentage}%`}\n            />\n            <div style={{ fontSize: '11px', color: '#666', marginTop: 2 }}>\n              {completedFields} / 87 fields\n            </div>\n          </div>\n        );\n      }\n    },\n    {\n      title: 'Days Pending',\n      key: 'daysPending',\n      width: 100,\n      sorter: (a, b) => getDaysInState(a.lastModified) - getDaysInState(b.lastModified),\n      render: (_, record) => {\n        const days = getDaysInState(record.lastModified);\n        return <span style={{ color: days > 3 ? '#ff4d4f' : 'inherit' }}>{days}</span>;\n      }\n    },\n    {\n      title: 'Open Queries',\n      dataIndex: 'openQueries',\n      key: 'openQueries',\n      width: 100,\n      sorter: (a, b) => (a.openQueries || 0) - (b.openQueries || 0),\n      render: count => (count > 0 ? <Tag color=\"red\">{count}</Tag> : <Tag color=\"green\">0</Tag>)\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      width: 150,\n      render: (_, record) => (\n        <Space>\n          <Button\n            type=\"primary\"\n            size=\"small\"\n            icon={<FormOutlined />}\n            onClick={() => handleStartQuestionnaire(record)}\n            disabled={record.isSubmitted || record.completionStatus === 'COMPLETED'}\n          >\n            {record.completionPercentage > 0 ? 'Continue' : 'Start'}\n          </Button>\n\n        </Space>\n      )\n    }\n  ], [getStatusColor, getCompletionColor, getDaysInState, handleStartQuestionnaire]);\n\n  /**\n   * Row class name for styling overdue rows\n   */\n  const getRowClassName = useCallback((record) => {\n    const days = getDaysInState(record.lastModified);\n    return days > 3 ? 'overdue-row' : '';\n  }, [getDaysInState]);\n\n  /**\n   * Pagination configuration\n   */\n  const paginationConfig = useMemo(() => ({\n    pageSize: PAGINATION.DEFAULT_PAGE_SIZE,\n    showSizeChanger: true,\n    showQuickJumper: true,\n    showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} materials`,\n    pageSizeOptions: ['10', '20', '50', '100']\n  }), []);\n\n  return (\n    <>\n      <Table\n        dataSource={workflows}\n        columns={columns}\n        loading={loading}\n        rowKey=\"id\"\n        pagination={paginationConfig}\n        rowClassName={getRowClassName}\n        scroll={{ x: 1200 }}\n        size=\"small\"\n        bordered\n        title={() => (\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n            <span style={{ fontWeight: 'bold' }}>\n              Assigned Materials ({workflows.length})\n            </span>\n            {onRefresh && (\n              <Button onClick={onRefresh} loading={loading} size=\"small\">\n                Refresh\n              </Button>\n            )}\n          </div>\n        )}\n      />\n      \n      {/* Custom styles for overdue rows */}\n      <style>{`\n        .overdue-row {\n          background-color: #fff2f0;\n        }\n        .overdue-row:hover {\n          background-color: #ffebe6 !important;\n        }\n        .ant-table-tbody > tr.overdue-row > td {\n          border-bottom: 1px solid #ffccc7;\n        }\n      `}</style>\n    </>\n  );\n});\n\nWorkflowTable.displayName = 'WorkflowTable';\n\nWorkflowTable.propTypes = {\n  workflows: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    materialCode: PropTypes.string.isRequired,\n    plantCode: PropTypes.string,\n\n    completionStatus: PropTypes.string.isRequired,\n    completionPercentage: PropTypes.number,\n    totalFields: PropTypes.number,\n    completedFields: PropTypes.number,\n    lastModified: PropTypes.string,\n    openQueries: PropTypes.number,\n    isSubmitted: PropTypes.bool,\n    materialName: PropTypes.string,\n    itemDescription: PropTypes.string\n  })).isRequired,\n  loading: PropTypes.bool,\n  onStartQuestionnaire: PropTypes.func,\n  onRefresh: PropTypes.func\n};\n\nWorkflowTable.defaultProps = {\n  loading: false,\n  onStartQuestionnaire: null,\n  onRefresh: null\n};\n\nexport default WorkflowTable;","import { \r\n  CheckCircleOutlined, \r\n  ExclamationCircleOutlined, \r\n  InfoCircleOutlined,\r\n  DatabaseOutlined,\r\n  SyncOutlined \r\n} from '@ant-design/icons';\r\nimport { Card, Tag, Tooltip, Space, Typography, Row, Col, Progress, Alert } from 'antd';\r\nimport React from 'react';\r\n\r\nconst { Text, Title } = Typography;\r\n\r\nconst CqsFieldDisplay = ({ \r\n  field, \r\n  cqsData, \r\n  cqsFieldMapping = {}, \r\n  showDetails = false,\r\n  compact = false \r\n}) => {\r\n  \r\n  // Get CQS value for this field\r\n  const cqsValue = cqsData?.cqsData?.[field.name];\r\n  const hasValue = cqsValue !== null && cqsValue !== undefined && cqsValue !== '';\r\n  const displayName = cqsFieldMapping[field.name] || field.label || field.name;\r\n  \r\n  // Determine status\r\n  const getStatus = () => {\r\n    if (!field.isCqsAutoPopulated) return 'plant-input';\r\n    if (hasValue) return 'populated';\r\n    return 'pending';\r\n  };\r\n  \r\n  const status = getStatus();\r\n  \r\n  // Status configurations\r\n  const statusConfig = {\r\n    'populated': {\r\n      color: 'success',\r\n      icon: <CheckCircleOutlined />,\r\n      text: 'Auto-Populated',\r\n      description: 'Value automatically populated from CQS system'\r\n    },\r\n    'pending': {\r\n      color: 'warning', \r\n      icon: <ExclamationCircleOutlined />,\r\n      text: 'Pending CQS',\r\n      description: 'Waiting for CQS system to provide value'\r\n    },\r\n    'plant-input': {\r\n      color: 'processing',\r\n      icon: <InfoCircleOutlined />,\r\n      text: 'Plant Input',\r\n      description: 'Value to be provided by plant personnel'\r\n    }\r\n  };\r\n  \r\n  const config = statusConfig[status];\r\n  \r\n  if (compact) {\r\n    return (\r\n      <Space size=\"small\">\r\n        {field.isCqsAutoPopulated && (\r\n          <Tooltip title={`${config.description}${hasValue ? ` - Value: ${cqsValue}` : ''}`}>\r\n            <Tag \r\n              color={config.color} \r\n              icon={config.icon}\r\n              size=\"small\"\r\n              style={{ \r\n                fontWeight: 'bold',\r\n                borderRadius: '12px'\r\n              }}\r\n            >\r\n              CQS {hasValue ? '✓' : '⏳'}\r\n            </Tag>\r\n          </Tooltip>\r\n        )}\r\n        {hasValue && (\r\n          <Text \r\n            strong \r\n            style={{ \r\n              color: '#52c41a',\r\n              background: '#f6ffed',\r\n              padding: '2px 6px',\r\n              borderRadius: '4px',\r\n              fontSize: '12px'\r\n            }}\r\n          >\r\n            {cqsValue}\r\n          </Text>\r\n        )}\r\n      </Space>\r\n    );\r\n  }\r\n  \r\n  if (!showDetails && !field.isCqsAutoPopulated) {\r\n    return null; // Don't show non-CQS fields in CQS display mode\r\n  }\r\n  \r\n  return (\r\n    <Card \r\n      size=\"small\" \r\n      className={`cqs-field-card ${status}`}\r\n      style={{ marginBottom: 8 }}\r\n    >\r\n      <Row gutter={[16, 8]} align=\"middle\">\r\n        <Col flex=\"auto\">\r\n          <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\r\n            <Space>\r\n              <Tooltip title={config.description}>\r\n                <Tag \r\n                  color={config.color} \r\n                  icon={config.icon}\r\n                >\r\n                  {config.text}\r\n                </Tag>\r\n              </Tooltip>\r\n              <Text strong>{displayName}</Text>\r\n            </Space>\r\n            \r\n            {showDetails && (\r\n              <Text type=\"secondary\" style={{ fontSize: '12px' }}>\r\n                Field: {field.name}\r\n              </Text>\r\n            )}\r\n          </Space>\r\n        </Col>\r\n        \r\n        <Col>\r\n          <Space direction=\"vertical\" align=\"end\" size=\"small\">\r\n            {hasValue ? (\r\n              <Text strong style={{ color: '#52c41a' }}>\r\n                {cqsValue}\r\n              </Text>\r\n            ) : field.isCqsAutoPopulated ? (\r\n              <Text type=\"secondary\" italic>\r\n                Pending\r\n              </Text>\r\n            ) : (\r\n              <Text type=\"secondary\">\r\n                Plant Input Required\r\n              </Text>\r\n            )}\r\n          </Space>\r\n        </Col>\r\n      </Row>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst CqsDataSummary = ({ \r\n  cqsData, \r\n  template, \r\n  cqsFieldMapping = {},\r\n  showAllFields = false \r\n}) => {\r\n  \r\n  if (!cqsData) {\r\n    return (\r\n      <Alert\r\n        message=\"CQS Data Not Available\"\r\n        description=\"CQS integration is pending implementation\"\r\n        type=\"info\"\r\n        icon={<DatabaseOutlined />}\r\n        showIcon\r\n      />\r\n    );\r\n  }\r\n  \r\n  // Calculate statistics\r\n  const totalCqsFields = cqsData.totalFields || 0;\r\n  const populatedFields = cqsData.populatedFields || 0;\r\n  const completionPercentage = cqsData.completionPercentage || 0;\r\n  \r\n  // Get all CQS fields from template\r\n  const cqsFields = [];\r\n  if (template?.steps) {\r\n    template.steps.forEach(step => {\r\n      if (step.fields) {\r\n        step.fields.forEach(field => {\r\n          if (field.isCqsAutoPopulated || showAllFields) {\r\n            cqsFields.push({\r\n              ...field,\r\n              stepTitle: step.title,\r\n              stepNumber: step.stepNumber\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n  \r\n  return (\r\n    <Card \r\n      title={\r\n        <Space>\r\n          <DatabaseOutlined />\r\n          <span>CQS Auto-Population Status</span>\r\n          <Tag color={cqsData.syncStatus === 'ACTIVE' ? 'success' : 'warning'}>\r\n            {cqsData.syncStatus || 'UNKNOWN'}\r\n          </Tag>\r\n        </Space>\r\n      }\r\n      extra={\r\n        <Tooltip title=\"Refresh CQS Data\">\r\n          <SyncOutlined />\r\n        </Tooltip>\r\n      }\r\n    >\r\n      <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\r\n        \r\n        {/* Progress Summary */}\r\n        <Row gutter={[16, 16]}>\r\n          <Col span={24}>\r\n            <Title level={5}>Completion Progress</Title>\r\n            <Progress \r\n              percent={Math.round(completionPercentage)} \r\n              status={completionPercentage === 100 ? 'success' : 'active'}\r\n              format={() => `${populatedFields}/${totalCqsFields} fields`}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        \r\n        {/* Statistics */}\r\n        <Row gutter={[16, 16]}>\r\n          <Col span={8}>\r\n            <Card size=\"small\">\r\n              <Text type=\"secondary\">Total CQS Fields</Text>\r\n              <br />\r\n              <Text strong style={{ fontSize: '18px' }}>{totalCqsFields}</Text>\r\n            </Card>\r\n          </Col>\r\n          <Col span={8}>\r\n            <Card size=\"small\">\r\n              <Text type=\"secondary\">Populated</Text>\r\n              <br />\r\n              <Text strong style={{ fontSize: '18px', color: '#52c41a' }}>\r\n                {populatedFields}\r\n              </Text>\r\n            </Card>\r\n          </Col>\r\n          <Col span={8}>\r\n            <Card size=\"small\">\r\n              <Text type=\"secondary\">Pending</Text>\r\n              <br />\r\n              <Text strong style={{ fontSize: '18px', color: '#faad14' }}>\r\n                {totalCqsFields - populatedFields}\r\n              </Text>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        \r\n        {/* Sync Status */}\r\n        {cqsData.syncMessage && (\r\n          <Alert\r\n            message={cqsData.syncMessage}\r\n            type={cqsData.syncStatus === 'ACTIVE' ? 'success' : 'info'}\r\n            showIcon\r\n          />\r\n        )}\r\n        \r\n        {/* CQS Fields List */}\r\n        {cqsFields.length > 0 && (\r\n          <div>\r\n            <Title level={5}>CQS Auto-Populated Fields</Title>\r\n            <Space direction=\"vertical\" style={{ width: '100%' }}>\r\n              {cqsFields.map((field, index) => (\r\n                <CqsFieldDisplay\r\n                  key={`${field.name}-${index}`}\r\n                  field={field}\r\n                  cqsData={cqsData}\r\n                  cqsFieldMapping={cqsFieldMapping}\r\n                  showDetails={true}\r\n                />\r\n              ))}\r\n            </Space>\r\n          </div>\r\n        )}\r\n        \r\n      </Space>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport { CqsFieldDisplay, CqsDataSummary };\r\nexport default CqsFieldDisplay;","import {\n  InfoCircleOutlined,\n  FileTextOutlined,\n  TeamOutlined,\n  CalendarOutlined,\n  DownloadOutlined,\n  WarningOutlined\n} from '@ant-design/icons';\nimport {\n  Card,\n  Descriptions,\n  Tag,\n  Space,\n  Button,\n  Collapse,\n  Alert,\n  Divider,\n  Typography,\n  Tooltip,\n  Badge,\n  Spin,\n  Progress,\n  message\n} from 'antd';\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport { workflowAPI } from '../services/workflowAPI';\n\nconst { Panel } = Collapse;\nconst { Text } = Typography;\n\nconst MaterialContextPanel = ({ workflowData }) => {\n  const [loading, setLoading] = useState(false);\n  const [jvcDocuments, setJvcDocuments] = useState([]);\n  const [expanded, setExpanded] = useState(['basic', 'workflow', 'jvc-data']);\n\n  const loadJvcDocuments = useCallback(async () => {\n    try {\n      setLoading(true);\n      \n      // Get reusable documents for the same project/material combination\n      if (workflowData?.projectCode && workflowData?.materialCode) {\n        const documents = await workflowAPI.getReusableDocuments(\n          workflowData.projectCode, \n          workflowData.materialCode\n        );\n        setJvcDocuments(documents || []);\n      } else {\n        // Fallback to workflow documents if project/material codes are not available\n        const documents = await workflowAPI.getWorkflowDocuments(workflowData.id);\n        setJvcDocuments(documents || []);\n      }\n    } catch (error) {\n      console.error('Failed to load JVC documents:', error);\n      setJvcDocuments([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [workflowData?.id, workflowData?.projectCode, workflowData?.materialCode]);\n\n  useEffect(() => {\n    if (workflowData?.id) {\n      loadJvcDocuments();\n    }\n  }, [workflowData?.id, workflowData?.projectCode, workflowData?.materialCode, loadJvcDocuments]);\n\n  const getStateColor = state => {\n    const colors = {\n      JVC_PENDING: 'blue',\n      PLANT_PENDING: 'orange',\n      CQS_PENDING: 'purple',\n      TECH_PENDING: 'cyan',\n      COMPLETED: 'green'\n    };\n    return colors[state] || 'default';\n  };\n\n  const getStateName = state => {\n    const names = {\n      JVC_PENDING: 'JVC Pending',\n      PLANT_PENDING: 'Plant Pending',\n      CQS_PENDING: 'CQS Pending',\n      TECH_PENDING: 'Tech Pending',\n      COMPLETED: 'Completed'\n    };\n    return names[state] || state;\n  };\n\n  const formatDate = dateString => {\n    if (!dateString) {\n      return 'N/A';\n    }\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const calculateDaysInState = lastModified => {\n    if (!lastModified) {\n      return 0;\n    }\n    const now = new Date();\n    const modified = new Date(lastModified);\n    const diffTime = Math.abs(now - modified);\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  };\n\n  const handleDocumentDownload = async (documentId, filename) => {\n    try {\n      console.log('Downloading document:', { documentId, filename });\n      const blob = await workflowAPI.downloadDocument(documentId);\n      console.log('Download blob received:', blob);\n      \n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = filename || `document_${documentId}`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n      \n      message.success(`Downloaded ${filename || 'document'}`);\n    } catch (error) {\n      console.error('Failed to download document:', error);\n      message.error(`Failed to download document: ${error.message || 'Unknown error'}`);\n    }\n  };\n\n\n\n  if (!workflowData) {\n    return (\n      <Card title=\"Material Context\" style={{ height: 'fit-content' }}>\n        <Alert\n          message=\"No Material Data\"\n          description=\"Material context will appear here once a workflow is selected.\"\n          type=\"info\"\n          showIcon\n        />\n      </Card>\n    );\n  }\n\n  const daysInCurrentState = calculateDaysInState(workflowData.lastModified);\n  const isOverdue = daysInCurrentState > 3;\n\n  return (\n    <Card\n      title={\n        <Space>\n          <InfoCircleOutlined />\n          Material Context\n          {isOverdue && <Badge status=\"error\" text={`${daysInCurrentState} days`} />}\n        </Space>\n      }\n      style={{ height: 'fit-content', position: 'sticky', top: 24 }}\n      size=\"small\"\n    >\n      <Collapse activeKey={expanded} onChange={setExpanded} ghost size=\"small\">\n        {/* Basic Material Information */}\n        <Panel\n          header={\n            <Space>\n              <FileTextOutlined />\n              <strong>Basic Information</strong>\n            </Space>\n          }\n          key=\"basic\"\n        >\n          <Descriptions column={1} size=\"small\">\n            <Descriptions.Item label=\"Material Code\">\n              <Text strong>{workflowData.materialCode}</Text>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Material Name\">\n              {workflowData.materialName || 'Not specified'}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Assigned Plant\">\n              <Tag color=\"blue\">{workflowData.assignedPlant}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Initiated By\">\n              <Space>\n                <TeamOutlined />\n                {workflowData.initiatedBy}\n              </Space>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Created\">\n              <Space>\n                <CalendarOutlined />\n                {formatDate(workflowData.createdAt)}\n              </Space>\n            </Descriptions.Item>\n          </Descriptions>\n        </Panel>\n\n        {/* Workflow Status */}\n        <Panel\n          header={\n            <Space>\n              <TeamOutlined />\n              <strong>Workflow Status</strong>\n              {isOverdue && <WarningOutlined style={{ color: '#ff4d4f' }} />}\n            </Space>\n          }\n          key=\"workflow\"\n        >\n          <Space direction=\"vertical\" style={{ width: '100%' }}>\n            <div>\n              <Text strong>Current State:</Text>\n              <div style={{ marginTop: 4 }}>\n                <Tag color={getStateColor(workflowData.state)}>\n                  {getStateName(workflowData.state)}\n                </Tag>\n              </div>\n            </div>\n\n            <div>\n              <Text strong>Time in Current State:</Text>\n              <div style={{ marginTop: 4 }}>\n                <Text style={{ color: isOverdue ? '#ff4d4f' : 'inherit' }}>\n                  {daysInCurrentState} day{daysInCurrentState !== 1 ? 's' : ''}\n                  {isOverdue && ' (Overdue)'}\n                </Text>\n              </div>\n            </div>\n\n            <div>\n              <Text strong>Last Modified:</Text>\n              <div style={{ marginTop: 4 }}>\n                <Text type=\"secondary\">{formatDate(workflowData.lastModified)}</Text>\n              </div>\n            </div>\n\n            {workflowData.totalQueries > 0 && (\n              <div>\n                <Text strong>Queries:</Text>\n                <div style={{ marginTop: 4 }}>\n                  <Space>\n                    <Tag color=\"red\">{workflowData.openQueries || 0} Open</Tag>\n                    <Tag color=\"green\">\n                      {(workflowData.totalQueries || 0) - (workflowData.openQueries || 0)} Resolved\n                    </Tag>\n                  </Space>\n                </div>\n              </div>\n            )}\n\n            {/* Progress indicator */}\n            {workflowData.completionPercentage !== undefined && (\n              <div>\n                <Text strong>Completion Progress:</Text>\n                <div style={{ marginTop: 4 }}>\n                  <Progress\n                    percent={workflowData.completionPercentage}\n                    size=\"small\"\n                    status={workflowData.completionPercentage === 100 ? 'success' : 'active'}\n                  />\n                </div>\n              </div>\n            )}\n          </Space>\n        </Panel>\n\n        {/* JVC Provided Documents */}\n        <Panel\n          header={\n            <Space>\n              <FileTextOutlined />\n              <strong>JVC Documents</strong>\n              <Badge count={jvcDocuments.length} size=\"small\" />\n            </Space>\n          }\n          key=\"documents\"\n        >\n          {loading ? (\n            <div style={{ textAlign: 'center', padding: '20px' }}>\n              <Spin size=\"small\" />\n            </div>\n          ) : jvcDocuments.length > 0 ? (\n            <Space direction=\"vertical\" style={{ width: '100%' }}>\n              {jvcDocuments.map((doc, index) => (\n                <Card\n                  key={doc.id || index}\n                  size=\"small\"\n                  style={{ marginBottom: 8 }}\n                  styles={{ body: { padding: '8px 12px' } }}\n                >\n                  <div style={{ marginBottom: 4 }}>\n                    <Text strong style={{ fontSize: '12px' }}>\n                      {doc.originalFileName || doc.fileName || `Document ${index + 1}`}\n                    </Text>\n                  </div>\n                  <div style={{ marginBottom: 8 }}>\n                    <Text type=\"secondary\" style={{ fontSize: '11px' }}>\n                      {doc.sourceDescription || \n                       `${doc.documentSource || 'Document'} • ${doc.fileType?.toUpperCase() || 'File'} • ${\n                         doc.fileSize ? `${(doc.fileSize / 1024 / 1024).toFixed(1)} MB` : 'Unknown size'\n                       } • Uploaded by ${doc.uploadedBy || 'Unknown'}`}\n                    </Text>\n                  </div>\n                  <div style={{ textAlign: 'right' }}>\n                    <Tooltip title=\"Download document\">\n                      <Button\n                        type=\"primary\"\n                        size=\"small\"\n                        icon={<DownloadOutlined />}\n                        onClick={() => handleDocumentDownload(doc.id, doc.originalFileName || doc.fileName)}\n                      >\n                        Download\n                      </Button>\n                    </Tooltip>\n                  </div>\n                </Card>\n              ))}\n            </Space>\n          ) : (\n            <Alert\n              message=\"No Documents\"\n              description=\"No documents have been provided by the JVC team for this material.\"\n              type=\"info\"\n              showIcon\n              size=\"small\"\n            />\n          )}\n        </Panel>\n\n        {/* Enhanced JVC Material Data */}\n        <Panel\n          header={\n            <Space>\n              <InfoCircleOutlined />\n              <strong>JVC Material Data</strong>\n              <Tooltip title=\"Information provided by JVC team for questionnaire completion\">\n                <InfoCircleOutlined style={{ fontSize: '12px', color: '#1890ff' }} />\n              </Tooltip>\n            </Space>\n          }\n          key=\"jvc-data\"\n        >\n          <Descriptions column={1} size=\"small\">\n            <Descriptions.Item label=\"Material Category\">\n              <Tag color=\"blue\">{workflowData.materialCategory || 'Not specified'}</Tag>\n            </Descriptions.Item>\n\n            <Descriptions.Item label=\"Supplier Information\">\n              <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Supplier Name:\n                  </Text>\n                  <div style={{ fontSize: '12px' }}>\n                    {workflowData.supplierName || 'Not specified'}\n                  </div>\n                </div>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Supplier Code:\n                  </Text>\n                  <div style={{ fontSize: '12px' }}>\n                    {workflowData.supplierCode || 'Not specified'}\n                  </div>\n                </div>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Contact Info:\n                  </Text>\n                  <div style={{ fontSize: '12px' }}>\n                    {workflowData.supplierContact || 'Not provided'}\n                  </div>\n                </div>\n              </Space>\n            </Descriptions.Item>\n\n            <Descriptions.Item label=\"Purchase Information\">\n              <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Purchase Order:\n                  </Text>\n                  <div style={{ fontSize: '12px' }}>\n                    {workflowData.purchaseOrder || 'Not specified'}\n                  </div>\n                </div>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Quantity Ordered:\n                  </Text>\n                  <div style={{ fontSize: '12px' }}>\n                    {workflowData.quantityOrdered || 'Not specified'}\n                  </div>\n                </div>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Expected Delivery:\n                  </Text>\n                  <div style={{ fontSize: '12px' }}>\n                    {workflowData.expectedDelivery\n                      ? formatDate(workflowData.expectedDelivery)\n                      : 'Not specified'}\n                  </div>\n                </div>\n              </Space>\n            </Descriptions.Item>\n\n            <Descriptions.Item label=\"Usage & Application\">\n              <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Expected Usage:\n                  </Text>\n                  <div style={{ fontSize: '12px' }}>\n                    {workflowData.expectedUsage || 'Not specified'}\n                  </div>\n                </div>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Application Area:\n                  </Text>\n                  <div style={{ fontSize: '12px' }}>\n                    {workflowData.applicationArea || 'Not specified'}\n                  </div>\n                </div>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Process Requirements:\n                  </Text>\n                  <div style={{ fontSize: '12px' }}>\n                    {workflowData.processRequirements || 'Standard processing'}\n                  </div>\n                </div>\n              </Space>\n            </Descriptions.Item>\n\n            <Descriptions.Item label=\"Regulatory Requirements\">\n              <div\n                style={{\n                  padding: '6px 8px',\n                  backgroundColor: '#fff7e6',\n                  border: '1px solid #ffd591',\n                  borderRadius: '4px',\n                  fontSize: '12px'\n                }}\n              >\n                {workflowData.regulatoryRequirements || 'Standard compliance required'}\n              </div>\n            </Descriptions.Item>\n\n            <Descriptions.Item label=\"Special Instructions\">\n              {workflowData.specialInstructions ? (\n                <div\n                  style={{\n                    padding: '6px 8px',\n                    backgroundColor: '#f6ffed',\n                    border: '1px solid #b7eb8f',\n                    borderRadius: '4px',\n                    fontSize: '12px'\n                  }}\n                >\n                  {workflowData.specialInstructions}\n                </div>\n              ) : (\n                <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                  None\n                </Text>\n              )}\n            </Descriptions.Item>\n\n            <Descriptions.Item label=\"Priority & Impact\">\n              <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Urgency Level:\n                  </Text>\n                  <div style={{ marginTop: 2 }}>\n                    <Tag\n                      color={\n                        workflowData.urgencyLevel === 'HIGH'\n                          ? 'red'\n                          : workflowData.urgencyLevel === 'MEDIUM'\n                            ? 'orange'\n                            : 'green'\n                      }\n                    >\n                      {workflowData.urgencyLevel || 'NORMAL'}\n                    </Tag>\n                  </div>\n                </div>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Business Impact:\n                  </Text>\n                  <div style={{ fontSize: '12px', marginTop: 2 }}>\n                    {workflowData.businessImpact || 'Standard processing'}\n                  </div>\n                </div>\n                <div>\n                  <Text strong style={{ fontSize: '11px' }}>\n                    Cost Center:\n                  </Text>\n                  <div style={{ fontSize: '12px', marginTop: 2 }}>\n                    {workflowData.costCenter || 'Not specified'}\n                  </div>\n                </div>\n              </Space>\n            </Descriptions.Item>\n          </Descriptions>\n\n          {workflowData.jvcNotes && (\n            <div style={{ marginTop: 12 }}>\n              <Text strong style={{ fontSize: '12px' }}>\n                JVC Notes:\n              </Text>\n              <div\n                style={{\n                  marginTop: 4,\n                  padding: '8px',\n                  backgroundColor: '#f6ffed',\n                  border: '1px solid #b7eb8f',\n                  borderRadius: '4px',\n                  fontSize: '12px',\n                  whiteSpace: 'pre-wrap'\n                }}\n              >\n                {workflowData.jvcNotes}\n              </div>\n            </div>\n          )}\n\n          {/* Known Material Properties */}\n          {workflowData.knownProperties && Object.keys(workflowData.knownProperties).length > 0 && (\n            <div style={{ marginTop: 12 }}>\n              <Text strong style={{ fontSize: '12px' }}>\n                Known Properties:\n              </Text>\n              <div\n                style={{\n                  marginTop: 4,\n                  padding: '8px',\n                  backgroundColor: '#f0f5ff',\n                  border: '1px solid #adc6ff',\n                  borderRadius: '4px',\n                  fontSize: '11px'\n                }}\n              >\n                {Object.entries(workflowData.knownProperties).map(([key, value]) => (\n                  <div key={key} style={{ marginBottom: 2 }}>\n                    <strong>\n                      {key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}:\n                    </strong>{' '}\n                    {value}\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Additional Context for Plant Team */}\n          <Divider style={{ margin: '12px 0 8px 0' }} />\n          <div style={{ fontSize: '11px', color: '#666' }}>\n            <Text strong>For Plant Team Reference:</Text>\n            <ul style={{ margin: '4px 0 0 16px', padding: 0 }}>\n              <li>Review all JVC-provided information before starting questionnaire</li>\n              <li>Use this context when raising queries to other teams</li>\n              <li>Reference material ID and supplier details in communications</li>\n              <li>Contact JVC team for clarification on any provided data</li>\n              <li>Consider regulatory requirements when completing safety sections</li>\n            </ul>\n          </div>\n        </Panel>\n\n        {/* Material Specifications */}\n        {workflowData.specifications && (\n          <Panel\n            header={\n              <Space>\n                <InfoCircleOutlined />\n                <strong>Technical Specifications</strong>\n              </Space>\n            }\n            key=\"specifications\"\n          >\n            <Descriptions column={1} size=\"small\">\n              {Object.entries(workflowData.specifications).map(([key, value]) => (\n                <Descriptions.Item\n                  key={key}\n                  label={key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}\n                >\n                  {typeof value === 'object' ? JSON.stringify(value) : String(value)}\n                </Descriptions.Item>\n              ))}\n            </Descriptions>\n          </Panel>\n        )}\n\n        {/* Safety Notes */}\n        {workflowData.safetyNotes && (\n          <Panel\n            header={\n              <Space>\n                <WarningOutlined />\n                <strong>Safety Notes</strong>\n              </Space>\n            }\n            key=\"safety\"\n          >\n            <Alert\n              message=\"Important Safety Information\"\n              description={workflowData.safetyNotes}\n              type=\"warning\"\n              showIcon\n              size=\"small\"\n            />\n          </Panel>\n        )}\n      </Collapse>\n\n      <Divider style={{ margin: '12px 0' }} />\n{/* \n      Quick Actions\n      <Space direction=\"vertical\" style={{ width: '100%' }}>\n        <Text strong style={{ fontSize: '12px' }}>\n          Quick Actions:\n        </Text>\n        <Space wrap>\n          <Button size=\"small\" type=\"link\" style={{ padding: '0 4px', height: 'auto' }}>\n            View Full History\n          </Button>\n          <Button size=\"small\" type=\"link\" style={{ padding: '0 4px', height: 'auto' }}>\n            Contact JVC\n          </Button>\n          <Button size=\"small\" type=\"link\" style={{ padding: '0 4px', height: 'auto' }}>\n            Export Data\n          </Button>\n        </Space>\n      </Space> */}\n    </Card>\n  );\n};\n\nexport default MaterialContextPanel;\n","import {\n  QuestionCircleOutlined,\n  InfoCircleOutlined,\n  ExclamationCircleOutlined,\n  PaperClipOutlined\n} from '@ant-design/icons';\nimport {\n  Modal,\n  Form,\n  Input,\n  Select,\n  Radio,\n  Button,\n  Space,\n  Alert,\n  Divider,\n  Tag,\n  message,\n  Collapse\n} from 'antd';\nimport React, { useState } from 'react';\n\nimport { queryAPI } from '../services/queryAPI';\n\nimport QueryDocumentUpload from './QueryDocumentUpload';\nimport SecureForm, { SecureInput, SecureTextArea, SecureFormItem } from './SecureForm';\n\nconst { TextArea } = Input;\nconst { Option } = Select;\n\nconst QueryRaisingModal = ({ open, visible, onCancel, onSubmit, workflowId, fieldContext }) => {\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n  const [uploadedDocuments, setUploadedDocuments] = useState([]);\n  const [createdQueryId, setCreatedQueryId] = useState(null);\n\n  console.log('QueryRaisingModal props:', { open, visible, workflowId, fieldContext });\n\n  const handleSubmit = async values => {\n    try {\n      setLoading(true);\n\n      const queryData = {\n        question: values.question,\n        assignedTeam: values.assignedTeam, // This should be 'CQS', 'TECH', or 'JVC'\n        priorityLevel: values.priority || 'MEDIUM',\n        fieldName: fieldContext?.name,\n        stepNumber: fieldContext?.stepNumber,\n        stepTitle: fieldContext?.stepTitle,\n        // originalQuestion will be fetched automatically from the template based on fieldName\n        queryCategory: values.category || 'GENERAL'\n      };\n\n      const createdQuery = await queryAPI.createQuery(workflowId, queryData);\n      setCreatedQueryId(createdQuery.id);\n\n      message.success('Query created successfully! You can now attach documents if needed.');\n      \n      // Don't close the modal immediately - allow user to upload documents\n      // The modal will close when they click \"Done\" or \"Cancel\"\n      \n    } catch (error) {\n      console.error('Failed to create query:', error);\n      message.error('Failed to raise query. Please try again.');\n      setLoading(false);\n    }\n  };\n\n  // const getCurrentUser = () => { // Not currently used\n  //   return localStorage.getItem('username') || 'current_user';\n  // };\n\n  const handleCancel = () => {\n    form.resetFields();\n    setUploadedDocuments([]);\n    setCreatedQueryId(null);\n    onCancel();\n  };\n\n  // Handle document upload completion\n  const handleDocumentUpload = (documents) => {\n    setUploadedDocuments(prev => [...prev, ...documents]);\n    message.success(`${documents.length} document(s) uploaded successfully`);\n  };\n\n  // const getTeamDescription = team => { // Not currently used\n  //   const descriptions = {\n  //     CQS: 'Chemical Quality & Safety team - for safety data, hazard classifications, and regulatory compliance questions',\n  //     TECH: 'Technical team - for technical specifications, physical properties, and process-related questions',\n  //     JVC: 'JVC team - for material identification, supplier information, and general material questions'\n  //   };\n  //   return descriptions[team] || '';\n  // };\n\n  const getPriorityColor = priority => {\n    const colors = {\n      LOW: 'green',\n      MEDIUM: 'blue',\n      HIGH: 'orange',\n      URGENT: 'red'\n    };\n    return colors[priority] || 'default';\n  };\n\n  const getRecommendedTeam = fieldContext => {\n    if (!fieldContext || !fieldContext.name) {\n      return null;\n    }\n\n    const fieldName = fieldContext.name.toLowerCase();\n    const stepTitle = fieldContext.stepTitle?.toLowerCase() || '';\n    const fieldLabel = fieldContext.label?.toLowerCase() || '';\n\n    // Enhanced smart team recommendation with confidence scoring\n    // const recommendations = []; // Not currently used\n\n    // CQS Team scoring\n    let cqsScore = 0;\n    const cqsKeywords = [\n      'hazard',\n      'safety',\n      'precautionary',\n      'environmental',\n      'toxic',\n      'corrosive',\n      'flammable',\n      'classification',\n      'ghs',\n      'signal',\n      'statement'\n    ];\n    cqsKeywords.forEach(keyword => {\n      if (\n        fieldName.includes(keyword) ||\n        stepTitle.includes(keyword) ||\n        fieldLabel.includes(keyword)\n      ) {\n        cqsScore += 1;\n      }\n    });\n\n    // Technical Team scoring\n    let techScore = 0;\n    const techKeywords = [\n      'physical',\n      'boiling',\n      'melting',\n      'technical',\n      'properties',\n      'temperature',\n      'state',\n      'color',\n      'odor',\n      'specification'\n    ];\n    techKeywords.forEach(keyword => {\n      if (\n        fieldName.includes(keyword) ||\n        stepTitle.includes(keyword) ||\n        fieldLabel.includes(keyword)\n      ) {\n        techScore += 1;\n      }\n    });\n\n    // JVC Team scoring\n    let jvcScore = 0;\n    const jvcKeywords = [\n      'material',\n      'supplier',\n      'cas',\n      'basic',\n      'information',\n      'name',\n      'identification',\n      'type'\n    ];\n    jvcKeywords.forEach(keyword => {\n      if (\n        fieldName.includes(keyword) ||\n        stepTitle.includes(keyword) ||\n        fieldLabel.includes(keyword)\n      ) {\n        jvcScore += 1;\n      }\n    });\n\n    // Determine primary recommendation\n    const maxScore = Math.max(cqsScore, techScore, jvcScore);\n    let primaryTeam = 'CQS'; // Default to CQS for safety\n    let confidence = 'Medium';\n\n    if (maxScore === 0) {\n      confidence = 'Low';\n    } else if (maxScore >= 3) {\n      confidence = 'High';\n    }\n\n    if (cqsScore === maxScore) {\n      primaryTeam = 'CQS';\n    } else if (techScore === maxScore) {\n      primaryTeam = 'TECH';\n    } else if (jvcScore === maxScore) {\n      primaryTeam = 'JVC';\n    }\n\n    const teamDescriptions = {\n      CQS: 'Chemical Quality & Safety team - handles safety data, hazard classifications, and regulatory compliance',\n      TECH: 'Technical team - handles technical specifications, physical properties, and process-related questions',\n      JVC: 'JVC team - handles material identification, supplier information, and general material questions'\n    };\n\n    return (\n      <div>\n        <div style={{ marginBottom: 8 }}>\n          <strong\n            style={{\n              color:\n                confidence === 'High' ? '#52c41a' : confidence === 'Medium' ? '#1890ff' : '#faad14'\n            }}\n          >\n            {primaryTeam} Team\n          </strong>{' '}\n          is recommended ({confidence} confidence)\n        </div>\n        <div style={{ fontSize: '12px', color: '#666', marginBottom: 8 }}>\n          {teamDescriptions[primaryTeam]}\n        </div>\n        <div style={{ fontSize: '11px', color: '#999' }}>\n          Based on field: \"<em>{fieldContext.label}</em>\" in step: \"\n          <em>{fieldContext.stepTitle}</em>\"\n        </div>\n        {confidence === 'Low' && (\n          <div style={{ fontSize: '11px', color: '#fa8c16', marginTop: 4 }}>\n            💡 Consider the nature of your question when selecting the team\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <Modal\n      title={\n        <Space>\n          <QuestionCircleOutlined />\n          Raise Query\n        </Space>\n      }\n      open={open || visible}\n      onCancel={handleCancel}\n      footer={\n        createdQueryId ? [\n          <Button key=\"done\" type=\"primary\" onClick={() => {\n            const documentMessage = uploadedDocuments.length > 0 \n              ? ` with ${uploadedDocuments.length} document(s) attached`\n              : '';\n            message.success(`Query completed${documentMessage}`);\n            \n            form.resetFields();\n            setUploadedDocuments([]);\n            const queryToReturn = { id: createdQueryId, documents: uploadedDocuments };\n            setCreatedQueryId(null);\n            setLoading(false);\n            \n            if (onSubmit) {\n              onSubmit(queryToReturn);\n            }\n          }}>\n            Done\n          </Button>\n        ] : [\n          <Button key=\"cancel\" onClick={handleCancel}>\n            Cancel\n          </Button>,\n          <Button key=\"submit\" type=\"primary\" loading={loading} onClick={() => form.submit()}>\n            Create Query\n          </Button>\n        ]\n      }\n      width={600}\n      destroyOnClose\n    >\n      {/* Field Context Information */}\n      {fieldContext && (\n        <Alert\n          message=\"Field Context\"\n          description={\n            <div>\n              <p>\n                <strong>Step:</strong> {fieldContext.stepTitle}\n              </p>\n              <p>\n                <strong>Field:</strong> {fieldContext.label}\n              </p>\n              {fieldContext.placeholder && (\n                <p>\n                  <strong>Expected:</strong> {fieldContext.placeholder}\n                </p>\n              )}\n            </div>\n          }\n          type=\"info\"\n          icon={<InfoCircleOutlined />}\n          style={{ marginBottom: 16 }}\n        />\n      )}\n\n      <SecureForm\n        form={form}\n        layout=\"vertical\"\n        onFinish={handleSubmit}\n        initialValues={{\n          priority: 'MEDIUM',\n          fieldContext: fieldContext?.label\n        }}\n        componentName=\"QueryRaisingModal\"\n        enableSecurityLogging={true}\n        disabled={createdQueryId !== null}\n      >\n        {/* Smart Team Recommendation */}\n        {fieldContext && (\n          <Alert\n            message=\"Recommended Team\"\n            description={getRecommendedTeam(fieldContext)}\n            type=\"info\"\n            style={{ marginBottom: 16 }}\n            showIcon\n          />\n        )}\n\n        {/* Team Selection with Enhanced Context */}\n        <Form.Item\n          name=\"assignedTeam\"\n          label=\"Assign to Team\"\n          rules={[{ required: true, message: 'Please select a team to assign this query to' }]}\n          help=\"Choose the most appropriate team based on your question type. Consider the field context and question nature.\"\n        >\n          <Select\n            placeholder=\"Select team to handle this query\"\n            size=\"large\"\n            showSearch\n            optionFilterProp=\"children\"\n            filterOption={(input, option) =>\n              option.children.props.children[0].props.children\n                .toLowerCase()\n                .indexOf(input.toLowerCase()) >= 0\n            }\n          >\n            <Option value=\"CQS\">\n              <div>\n                <div style={{ fontWeight: 'bold', color: '#722ed1' }}>CQS Team</div>\n                <div style={{ fontSize: '12px', color: '#666', marginBottom: '4px' }}>\n                  Safety data, hazard classifications, regulatory compliance\n                </div>\n                <div style={{ fontSize: '11px', color: '#999' }}>\n                  Best for: Safety measures, hazard statements, environmental impact\n                </div>\n              </div>\n            </Option>\n            <Option value=\"TECH\">\n              <div>\n                <div style={{ fontWeight: 'bold', color: '#13c2c2' }}>Technical Team</div>\n                <div style={{ fontSize: '12px', color: '#666', marginBottom: '4px' }}>\n                  Technical specs, physical properties, processes\n                </div>\n                <div style={{ fontSize: '11px', color: '#999' }}>\n                  Best for: Physical properties, technical specifications, processes\n                </div>\n              </div>\n            </Option>\n            <Option value=\"JVC\">\n              <div>\n                <div style={{ fontWeight: 'bold', color: '#1890ff' }}>JVC Team</div>\n                <div style={{ fontSize: '12px', color: '#666', marginBottom: '4px' }}>\n                  Material identification, supplier info, general questions\n                </div>\n                <div style={{ fontSize: '11px', color: '#999' }}>\n                  Best for: Material details, supplier information, general clarifications\n                </div>\n              </div>\n            </Option>\n          </Select>\n        </Form.Item>\n\n        {/* Field Context (editable) */}\n        <SecureFormItem\n          name=\"fieldContext\"\n          label=\"Field Context\"\n          help=\"Specify which field or section this query relates to\"\n          validationType=\"text\"\n        >\n          <SecureInput\n            placeholder=\"e.g., Material Name, Safety Classification, Storage Conditions\"\n            prefix={<InfoCircleOutlined />}\n            validationType=\"text\"\n            componentName=\"QueryRaisingModal\"\n            fieldName=\"fieldContext\"\n          />\n        </SecureFormItem>\n\n        {/* Query Category */}\n        <Form.Item\n          name=\"category\"\n          label=\"Query Category\"\n          help=\"Categorize your query for better tracking and resolution\"\n        >\n          <Select\n            placeholder=\"Select query category\"\n            size=\"large\"\n            allowClear\n          >\n            <Option value=\"GENERAL\">General Question</Option>\n            <Option value=\"TECHNICAL\">Technical Specification</Option>\n            <Option value=\"SAFETY\">Safety & Compliance</Option>\n            <Option value=\"REGULATORY\">Regulatory Information</Option>\n            <Option value=\"ENVIRONMENTAL\">Environmental Impact</Option>\n            <Option value=\"TRANSPORTATION\">Transportation & Storage</Option>\n            <Option value=\"SUPPLIER\">Supplier Information</Option>\n            <Option value=\"CLARIFICATION\">Clarification Request</Option>\n          </Select>\n        </Form.Item>\n\n        {/* Priority Selection */}\n        <Form.Item\n          name=\"priority\"\n          label=\"Priority Level\"\n          help=\"Select the urgency level for this query\"\n        >\n          <Radio.Group>\n            <Space direction=\"vertical\">\n              <Radio value=\"LOW\">\n                <Tag color={getPriorityColor('LOW')}>LOW</Tag>\n                <span style={{ marginLeft: 8 }}>General information, non-blocking</span>\n              </Radio>\n              <Radio value=\"MEDIUM\">\n                <Tag color={getPriorityColor('MEDIUM')}>MEDIUM</Tag>\n                <span style={{ marginLeft: 8 }}>Standard clarification needed</span>\n              </Radio>\n              <Radio value=\"HIGH\">\n                <Tag color={getPriorityColor('HIGH')}>HIGH</Tag>\n                <span style={{ marginLeft: 8 }}>Important for completion</span>\n              </Radio>\n              <Radio value=\"URGENT\">\n                <Tag color={getPriorityColor('URGENT')}>URGENT</Tag>\n                <span style={{ marginLeft: 8 }}>Blocking progress, needs immediate attention</span>\n              </Radio>\n            </Space>\n          </Radio.Group>\n        </Form.Item>\n\n        <Divider />\n\n        {/* Question Text */}\n        <SecureFormItem\n          name=\"question\"\n          label=\"Your Question\"\n          validationType=\"richtext\"\n          help=\"Be specific and provide context to help the assigned team understand your question\"\n        >\n          <SecureTextArea\n            rows={6}\n            placeholder=\"Describe your question in detail. Include:\n• What specific information you need\n• Why you need this information\n• Any relevant context or background\n• What you've already tried or researched\"\n            showCount\n            maxLength={1000}\n            validationType=\"richtext\"\n            componentName=\"QueryRaisingModal\"\n            fieldName=\"question\"\n          />\n        </SecureFormItem>\n\n        {/* Document Upload Section */}\n        {createdQueryId ? (\n          <div style={{ marginTop: 16 }}>\n            <Alert\n              message=\"Query Created Successfully!\"\n              description=\"Your query has been created. You can now attach supporting documents if needed, or click 'Done' to finish.\"\n              type=\"success\"\n              showIcon\n              style={{ marginBottom: 16 }}\n            />\n            <QueryDocumentUpload\n              queryId={createdQueryId}\n              context=\"query\"\n              onUploadComplete={handleDocumentUpload}\n              maxFiles={5}\n              disabled={false}\n            />\n          </div>\n        ) : (\n          <Collapse\n            size=\"small\"\n            ghost\n            items={[\n              {\n                key: 'documents',\n                label: (\n                  <Space>\n                    <PaperClipOutlined />\n                    <span>Supporting Documents</span>\n                    <Tag color=\"blue\">Available after query creation</Tag>\n                  </Space>\n                ),\n                children: (\n                  <Alert\n                    message=\"Document Attachment\"\n                    description=\"After creating your query, you'll be able to attach supporting documents to provide additional context. Documents help the assigned team better understand your question.\"\n                    type=\"info\"\n                    showIcon\n                  />\n                )\n              }\n            ]}\n          />\n        )}\n\n        <Divider />\n\n        {/* Guidelines */}\n        <Alert\n          message=\"Query Guidelines\"\n          description={\n            <ul style={{ margin: 0, paddingLeft: 20 }}>\n              <li>Be specific and clear in your question</li>\n              <li>Include relevant context and background information</li>\n              <li>Mention any documentation or resources you've already checked</li>\n              <li>For urgent queries, explain why immediate attention is needed</li>\n              <li>Use appropriate technical terminology when relevant</li>\n            </ul>\n          }\n          type=\"info\"\n          showIcon\n          icon={<ExclamationCircleOutlined />}\n        />\n      </SecureForm>\n    </Modal>\n  );\n};\n\nexport default QueryRaisingModal;\n","import {\n  SaveOutlined,\n  QuestionCircleOutlined,\n  CheckCircleOutlined,\n\n  ExclamationCircleOutlined,\n  ArrowLeftOutlined,\n  ArrowRightOutlined,\n  CloudSyncOutlined,\n  WifiOutlined,\n  DisconnectOutlined,\n  MenuOutlined,\n  DashboardOutlined,\n  FileTextOutlined,\n  SafetyOutlined,\n  ExperimentOutlined,\n  FireOutlined,\n  MedicineBoxOutlined,\n  BookOutlined,\n  SettingOutlined,\n  BulbOutlined,\n  RocketOutlined\n} from '@ant-design/icons';\nimport {\n  Card,\n  Form,\n  Input,\n  Select,\n  Radio,\n  Checkbox,\n  Button,\n  Row,\n  Col,\n  Progress,\n  message,\n  Spin,\n  Alert,\n  Space,\n  Tooltip,\n  Badge,\n  notification,\n  Typography,\n  Tag,\n  Modal,\n  FloatButton,\n  Drawer,\n  Timeline,\n  Avatar\n} from 'antd';\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport { UI_CONFIG, AUTO_SAVE } from '../constants';\nimport { queryAPI } from '../services/queryAPI';\nimport { workflowAPI } from '../services/workflowAPI';\n\nimport { CqsFieldDisplay, CqsDataSummary } from './CqsFieldDisplay';\nimport MaterialContextPanel from './MaterialContextPanel';\nimport QueryRaisingModal from './QueryRaisingModal';\nimport './PlantQuestionnaire.css';\nimport './CqsFieldDisplay.css';\n\n// const { Step } = Steps; // Not currently used\nconst { TextArea } = Input;\nconst { Option } = Select;\nconst { Text, Title, Paragraph } = Typography;\n\n// Hook to detect screen size\nconst useResponsive = () => {\n  const [screenSize, setScreenSize] = useState({\n    isMobile: window.innerWidth <= UI_CONFIG.MOBILE_BREAKPOINT,\n    isTablet:\n      window.innerWidth > UI_CONFIG.MOBILE_BREAKPOINT &&\n      window.innerWidth <= UI_CONFIG.TABLET_BREAKPOINT,\n    isDesktop: window.innerWidth > UI_CONFIG.TABLET_BREAKPOINT\n  });\n\n  useEffect(() => {\n    const handleResize = () => {\n      setScreenSize({\n        isMobile: window.innerWidth <= UI_CONFIG.MOBILE_BREAKPOINT,\n        isTablet:\n          window.innerWidth > UI_CONFIG.MOBILE_BREAKPOINT &&\n          window.innerWidth <= UI_CONFIG.TABLET_BREAKPOINT,\n        isDesktop: window.innerWidth > UI_CONFIG.TABLET_BREAKPOINT\n      });\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return screenSize;\n};\n\nconst PlantQuestionnaire = ({ workflowId, onComplete, onSaveDraft }) => {\n  const [form] = Form.useForm();\n  const [currentStep, setCurrentStep] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [submitting, setSubmitting] = useState(false);\n  const [workflowData, setWorkflowData] = useState(null);\n  const [formData, setFormData] = useState({});\n  const [completedSteps, setCompletedSteps] = useState(new Set());\n  const [queryModalVisible, setQueryModalVisible] = useState(false);\n  const [selectedField, setSelectedField] = useState(null);\n  const [queries, setQueries] = useState([]);\n  const [autoSaveEnabled, setAutoSaveEnabled] = useState(true);\n  const [isOffline, setIsOffline] = useState(!navigator.onLine);\n  const [pendingChanges, setPendingChanges] = useState(false);\n  const [sidebarVisible, setSidebarVisible] = useState(false);\n  const [isReadOnly, setIsReadOnly] = useState(false);\n  // const [compactMode, setCompactMode] = useState(false); // Not currently used\n  const [_progressUpdateTrigger, _setProgressUpdateTrigger] = useState(0);\n  const { isMobile } = useResponsive();\n\n  // Define questionnaire steps (loaded from backend template)\n  const [questionnaireSteps, setQuestionnaireSteps] = useState([]);\n  const [templateLoading, setTemplateLoading] = useState(true);\n  // eslint-disable-next-line no-unused-vars\n  const [_cqsData, setCqsData] = useState({}); // Used for CQS auto-population (pending implementation)\n  // eslint-disable-next-line no-unused-vars\n  const [_plantSpecificData, setPlantSpecificData] = useState({}); // Used for plant-specific data loading\n  const [cqsFormData, setCqsFormData] = useState({}); // Store CQS form data separately\n\n  // Step icons mapping for modern UI\n  const stepIcons = {\n    General: <FileTextOutlined />,\n    Physical: <ExperimentOutlined />,\n    'Flammability and Explosivity': <FireOutlined />,\n    Toxicity: <SafetyOutlined />,\n    'Storage and Handling': <BookOutlined />,\n    PPE: <SafetyOutlined />,\n    'First Aid': <MedicineBoxOutlined />,\n    Statutory: <BookOutlined />,\n    Others: <SettingOutlined />,\n    Safety: <SafetyOutlined />,\n    Environmental: <BulbOutlined />,\n    Quality: <RocketOutlined />\n  };\n\n  // Load questionnaire template from backend\n  const loadQuestionnaireTemplate = useCallback(async () => {\n    try {\n      setTemplateLoading(true);\n\n      if (!workflowData?.materialCode || !workflowData?.assignedPlant) {\n        console.warn('Missing required data for template loading:', {\n          materialCode: workflowData?.materialCode,\n          assignedPlant: workflowData?.assignedPlant\n        });\n        setQuestionnaireSteps(getDefaultTemplate());\n        return;\n      }\n\n      console.log('Loading questionnaire template for:', {\n        materialCode: workflowData.materialCode,\n        plantCode: workflowData.assignedPlant\n      });\n\n      const template = await workflowAPI.getQuestionnaireTemplate({\n        materialCode: workflowData.materialCode,\n        plantCode: workflowData.assignedPlant,\n        templateType: 'PLANT_QUESTIONNAIRE'\n      });\n\n      console.log('Received template:', template);\n\n      // Validate template structure\n      if (!template || !template.steps || !Array.isArray(template.steps)) {\n        console.error('Invalid template structure:', template);\n        throw new Error('Invalid template structure received from backend');\n      }\n\n      // Load CQS data first\n      let cqsResponse = {};\n      try {\n        cqsResponse = await workflowAPI.getCqsData({\n          materialCode: workflowData?.materialCode,\n          plantCode: workflowData?.assignedPlant\n        });\n\n        console.log('CQS Response:', cqsResponse);\n        setCqsData(cqsResponse || {});\n      } catch (error) {\n        console.error('Failed to load CQS data:', error);\n        // Continue with empty CQS data\n      }\n\n      // Process template to include CQS auto-populated fields with actual values\n      const processedSteps = template.steps.map(step => ({\n        ...step,\n        title: step.title || step.stepTitle || `Step ${step.stepNumber || 'Unknown'}`,\n        description: step.description || '',\n        fields: (step.fields || []).map(field => {\n          const isCqsField = field.cqsAutoPopulated || field.isCqsAutoPopulated || false;\n          let cqsValue = null;\n\n          // Get actual CQS value for this field\n          if (isCqsField && cqsResponse?.cqsData && cqsResponse.cqsData[field.name]) {\n            cqsValue = cqsResponse.cqsData[field.name];\n          }\n\n          return {\n            ...field,\n            isCqsAutoPopulated: isCqsField,\n            cqsValue,\n            // Only disable if CQS value is available, otherwise allow manual input\n            disabled: isCqsField && cqsValue !== null && cqsValue !== undefined,\n            placeholder: isCqsField && cqsValue\n              ? `Auto-populated by CQS: ${cqsValue}`\n              : isCqsField\n                ? 'CQS data not available - manual input required'\n                : field.placeholder\n          };\n        })\n      }));\n\n      console.log('Processed steps:', processedSteps);\n      setQuestionnaireSteps(processedSteps);\n\n      // Update form with CQS data - auto-populate CQS fields\n      const extractedCqsFormData = {};\n      if (cqsResponse?.cqsData) {\n        Object.entries(cqsResponse.cqsData).forEach(([key, value]) => {\n          if (value !== null && value !== undefined && value !== '') {\n            // Find the field to check if it's CQS auto-populated\n            const field = processedSteps.flatMap(step => step.fields || [])\n              .find(f => f.name === key);\n            if (field && (field.cqsAutoPopulated || field.isCqsAutoPopulated)) {\n              extractedCqsFormData[key] = value;\n            }\n          }\n        });\n      }\n\n      // Store CQS form data in state for later use\n      setCqsFormData(extractedCqsFormData);\n\n      if (Object.keys(extractedCqsFormData).length > 0) {\n        console.log('Setting CQS form data:', extractedCqsFormData);\n        setFormData(prev => ({ ...prev, ...extractedCqsFormData }));\n        form.setFieldsValue(extractedCqsFormData);\n\n\n      }\n\n      // Load plant-specific data\n      try {\n        const plantData = await workflowAPI.getOrCreatePlantSpecificData({\n          plantCode: workflowData?.assignedPlant,\n          materialCode: workflowData?.materialCode,\n          workflowId\n        });\n\n        setPlantSpecificData(plantData || {});\n\n        // If plant data exists, merge with CQS data (CQS takes precedence)\n        if (plantData?.plantInputs) {\n          const mergedFormData = { ...plantData.plantInputs, ...extractedCqsFormData };\n          setFormData(prev => ({ ...prev, ...mergedFormData }));\n          form.setFieldsValue(mergedFormData);\n        } else if (Object.keys(extractedCqsFormData).length > 0) {\n          // If no plant data but CQS data exists, ensure CQS data is set\n          form.setFieldsValue(extractedCqsFormData);\n        }\n      } catch (error) {\n        console.error('Failed to load plant-specific data:', error);\n        // If plant data loading fails, ensure CQS data is still set\n        if (Object.keys(extractedCqsFormData).length > 0) {\n          form.setFieldsValue(extractedCqsFormData);\n        }\n      }\n    } catch (error) {\n      console.error('Failed to load questionnaire template:', error);\n      message.error(`Failed to load questionnaire template: ${error.message}`);\n      // Fallback to default template if backend fails\n      console.log('Using fallback template');\n      setQuestionnaireSteps(getDefaultTemplate());\n    } finally {\n      setTemplateLoading(false);\n    }\n  }, [workflowData, workflowId, form]);\n\n\n  // Save plant-specific data with composite key\n  // const savePlantSpecificData = async data => { // Not currently used\n  //   try {\n  //     const plantSpecificPayload = {\n  //       plantCode: workflowData?.assignedPlant,\n  //       materialCode: workflowData?.materialCode,\n\n  //       workflowId: workflowId,\n  //       cqsInputs: cqsData,\n  //       plantInputs: data,\n  //       totalFields: Object.keys(data).length,\n  //       completedFields: Object.values(data).filter(\n  //         value => value !== null && value !== undefined && value !== ''\n  //       ).length\n  //     };\n\n  //     await workflowAPI.savePlantSpecificData(plantSpecificPayload, 'current_user');\n  //   } catch (error) {\n  //     console.error('Failed to save plant-specific data:', error);\n  //     throw error;\n  //   }\n  // };\n\n  // Default template fallback - Updated to match actual 87 questions\n  const getDefaultTemplate = () => [\n    {\n      title: 'General',\n      description: 'General information about MSDS availability and completeness',\n      fields: [\n        {\n          name: 'msds_available',\n          label: 'Is 16 Section MSDS of the raw material available?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'missing_info',\n          label: 'Which information in any one of the 16 sections is not available in full?',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Describe missing information'\n        },\n        {\n          name: 'sourcing_asked',\n          label:\n            'Has the identified missing / more information required from the supplier asked thru Sourcing?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'cas_available',\n          label: 'Is CAS number of the raw material based on the pure substance available?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'mixture_ingredients',\n          label: 'For mixtures, are ingredients of mixture available?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'composition_percentage',\n          label: 'Is % age composition substances in the mixture available?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'total_percentage_1',\n          label:\n            'Is the total %age of all substances in the mixture equal to 100?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'total_percentage',\n          label:\n            'If not what is the % of substances not available?',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Provide details about percentage composition'\n        }\n      ]\n    },\n    {\n      title: 'Physical',\n      description: 'Physical properties and handling requirements',\n      fields: [\n        {\n          name: 'is_corrosive',\n          label: 'Is the material corrosive?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'corrosive_storage',\n          label:\n            'Does the plant have acid and alkali proof storage facilities to store a corrosive raw material?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'highly_toxic',\n          label: 'Is the material highly toxic?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'toxic_powder_handling',\n          label:\n            'Does the plant have facilities to handle fine powder of highly toxic raw material?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'crushing_facilities',\n          label: 'Does the plant have facilities to crush the stone like solid raw material?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'heating_facilities',\n          label:\n            'Does the plant have facilities to heat/melt the raw material if required for charging the same in a batch?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'paste_preparation',\n          label:\n            'Does the plant have facilities to prepare paste of raw material if required for charging the same in a batch?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        }\n      ]\n    },\n    {\n      title: 'Flammability and Explosivity',\n      description: 'Flammability, explosivity and fire safety measures',\n      fields: [\n        {\n          name: 'flash_point_65',\n          label: 'Is Flash point of the raw material given and less than or equal to 65 degree C?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'petroleum_class',\n          label:\n            'Is the raw material is to be catgorised as ClassC / Class B / Class A substance as per Petroleum Act / Rules?',\n          type: 'select',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'class_a', label: 'Class A' },\n            { value: 'class_b', label: 'Class B' },\n            { value: 'class_c', label: 'Class C' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'storage_license',\n          label: 'Does all the plants have the capacity and license to store the raw material?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'ccoe_license',\n          label:\n            'If no, has the plant applied for CCoE license and by when expected to receive the license?',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Provide details about CCoE license application'\n        },\n        {\n          name: 'flash_point_21',\n          label: 'Is Flash point of the raw material given is less than 21 degree C?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'flammable_infrastructure',\n          label:\n            \"If yes, does plant have infrastructure to comply State Factories Rule for handling 'Flammable liquids'?\",\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        }\n      ]\n    },\n    {\n      title: 'Toxicity',\n      description: 'Toxicity assessment and exposure control',\n      fields: [\n        {\n          name: 'ld50_oral',\n          label:\n            'Is LD 50 (oral) value available and higher than the threshold limit of 200 mg/Kg BW?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'ld50_dermal',\n          label: 'Is LD 50 (Dermal) value available and higher than 1000 mg/Kg BW?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'lc50_inhalation',\n          label: 'Is LC50 Inhalation value available and higher than 10 mg/L?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'exposure_minimization',\n          label:\n            'If no, in any of the above three cases (where avaialble) then does the plant have facilities and /or procedure to minmise the exposure of workman?',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Describe exposure minimization procedures'\n        },\n        {\n          name: 'carcinogenic',\n          label: 'Is the RM a suspect Carcinogenic?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'carcinogenic_control',\n          label:\n            'If yes, plant has adequate facilities and /or procedure to minimse the exposure of workman?',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Describe carcinogenic exposure control measures'\n        }\n      ]\n    },\n    {\n      title: 'Process Safety Management',\n      description: 'Process safety management thresholds (CQS auto-populated)',\n      fields: [\n        {\n          name: 'psm_tier1_outdoor',\n          label: 'PSM Tier I Outdoor - Threshold quantity (kgs)',\n          type: 'input',\n          required: false,\n          isCqsAutoPopulated: true\n        },\n        {\n          name: 'psm_tier1_indoor',\n          label: 'PSM Tier I Indoor - Threshold quantity (kgs)',\n          type: 'input',\n          required: false,\n          isCqsAutoPopulated: true\n        },\n        {\n          name: 'psm_tier2_outdoor',\n          label: 'PSM Tier II Outdoor - Threshold quantity (kgs)',\n          type: 'input',\n          required: false,\n          isCqsAutoPopulated: true\n        },\n        {\n          name: 'psm_tier2_indoor',\n          label: 'PSM Tier II Indoor - Threshold quantity (kgs)',\n          type: 'input',\n          required: false,\n          isCqsAutoPopulated: true\n        }\n      ]\n    },\n    {\n      title: 'Storage and Handling',\n      description: 'Storage and handling procedures',\n      fields: [\n        {\n          name: 'storage_conditions_stores',\n          label: 'Are any storage conditions required and available in the plant stores?',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Describe storage conditions in plant stores'\n        },\n        {\n          name: 'storage_conditions_floor',\n          label: 'Are any storage conditions required and available in the shop floor?',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Describe storage conditions on shop floor'\n        },\n        {\n          name: 'closed_loop_required',\n          label: 'Does it require closed loop handling system during charging?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'work_permit_available',\n          label:\n            'Does the plant have required Work permit and /or WI/SOP to handle the raw material adequately?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'procedures_details',\n          label: 'If, yes specify the procedures',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Specify the procedures and work permits'\n        }\n      ]\n    },\n    {\n      title: 'PPE',\n      description: 'Personal protective equipment requirements',\n      fields: [\n        {\n          name: 'recommended_ppe',\n          label: 'Recommended specific PPEs based on MSDS',\n          type: 'textarea',\n          required: false,\n          isCqsAutoPopulated: true\n        },\n        {\n          name: 'ppe_in_use',\n          label:\n            'Are recommended PPE as per MSDS to handle the RM is already in use at the plants?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'partial', label: 'Partially' }\n          ]\n        },\n        {\n          name: 'ppe_procurement_date',\n          label: 'If no, by when the plant can procure the require PPE?',\n          type: 'input',\n          required: false,\n          placeholder: 'Enter expected procurement date'\n        }\n      ]\n    },\n    {\n      title: 'First Aid',\n      description: 'First aid measures and emergency response',\n      fields: [\n        {\n          name: 'is_poisonous',\n          label: 'Is the raw material poisonous as per the MSDS?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'antidote_specified',\n          label:\n            'Is the name of antidote required to counter the impact of the material given in the MSDS?',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'antidote_available',\n          label: 'Is the above specified antidote available in the plants?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'antidote_source',\n          label:\n            'If the specified antidote is not available then what is source and who will obtain the antidote in the plant?',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Describe antidote source and procurement plan'\n        },\n        {\n          name: 'first_aid_capability',\n          label:\n            'Does the plant has capability to provide the first aid mentioned in the MSDS with the existing control measures?',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        }\n      ]\n    },\n    {\n      title: 'Statutory',\n      description: 'Statutory compliance and regulatory requirements',\n      fields: [\n        {\n          name: 'cmvr_listed',\n          label: 'Is the RM or any of its ingredient listed in Table 3 of Rule 137 (CMVR)',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'msihc_listed',\n          label: 'Is the RM or any of its ingredient listed in part II of Schedule I of MSIHC Rule',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'factories_act_listed',\n          label: 'Is the RM or any of its ingredients listed in Schedule II of Factories Act',\n          type: 'radio',\n          required: false,\n          isCqsAutoPopulated: true,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' }\n          ]\n        },\n        {\n          name: 'permissible_concentration',\n          label:\n            'With the current infrastructure, is the concentration of RM / ingredients listed in Schedule II of Factories Act within permissible concentrations as per Factories Act in the work area.',\n          type: 'radio',\n          required: false,\n          options: [\n            { value: 'yes', label: 'Yes' },\n            { value: 'no', label: 'No' },\n            { value: 'na', label: 'N/A' }\n          ]\n        },\n        {\n          name: 'monitoring_details',\n          label:\n            'Mention details of work area monitoring results and describe infrastructure used for handling',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Provide monitoring details and infrastructure description'\n        }\n      ]\n    },\n    {\n      title: 'Others',\n      description: 'Additional inputs and gap analysis',\n      fields: [\n        {\n          name: 'plant_inputs_required',\n          label: 'Inputs required from plants based on the above assessment?',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Describe inputs required from plants'\n        },\n        {\n          name: 'gaps_identified',\n          label: 'Gaps identified vis-à-vis existing controls / protocols',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Identify gaps in existing controls and protocols'\n        },\n        {\n          name: 'additional_input_1',\n          label: 'Additional Input 1',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Additional input field 1'\n        },\n        {\n          name: 'additional_input_2',\n          label: 'Additional Input 2',\n          type: 'textarea',\n          required: false,\n          placeholder: 'Additional input field 2'\n        }\n      ]\n    }\n  ];\n\n  // Function definitions (moved here to avoid hoisting issues)\n  const getOverallCompletionPercentage = useCallback(() => {\n    if (!questionnaireSteps || questionnaireSteps.length === 0 || !form) {\n      return 0;\n    }\n\n    let totalFields = 0;\n    let completedFields = 0;\n\n    // Get current form values including any unsaved changes\n    try {\n      const currentFormValues = form.getFieldsValue();\n      const currentData = { ...formData, ...currentFormValues, ...cqsFormData };\n\n      questionnaireSteps.forEach((step, _index) => {\n        const stepFields = step.fields || [];\n\n        // Count ALL fields (both CQS and plant fields) in total\n        totalFields += stepFields.length;\n\n        const completedStepFields = stepFields.filter(field => {\n          const value = currentData[field.name];\n          \n          // For CQS fields, check if they have auto-populated values\n          if (field.isCqsAutoPopulated || field.cqsAutoPopulated) {\n            // CQS field is completed if it has a value from CQS data or manual input\n            const cqsValue = cqsFormData[field.name];\n            const manualValue = currentData[field.name];\n            const finalValue = manualValue || cqsValue;\n            \n            if (Array.isArray(finalValue)) {\n              return finalValue.length > 0;\n            }\n            return finalValue && finalValue !== '' && finalValue !== null && \n                   finalValue !== undefined && finalValue !== 'Data not available';\n          }\n          \n          // For plant fields, check if user has provided a value\n          if (Array.isArray(value)) {\n            return value.length > 0;\n          }\n          return value && value !== '' && value !== null && value !== undefined;\n        });\n\n        completedFields += completedStepFields.length;\n      });\n\n      const percentage = totalFields > 0 ? Math.round((completedFields / totalFields) * 100) : 0;\n\n\n      console.log(`  - Completed fields: ${completedFields}`);\n      console.log(`  - Completion percentage: ${percentage}%`);\n      console.log(`  - CQS form data size: ${Object.keys(cqsFormData).length}`);\n      console.log(`  - Current form data size: ${Object.keys(currentData).length}`);\n\n      return percentage;\n    } catch (error) {\n      console.error('Error calculating overall completion:', error);\n      return 0;\n    }\n  }, [questionnaireSteps, formData, form, cqsFormData]);\n\n  // Load plant-specific data from backend\n  const loadPlantSpecificData = useCallback(async () => {\n    try {\n      if (!workflowData?.assignedPlant || !workflowData?.materialCode) {\n        console.warn('Missing plant or material code for loading plant data');\n        return;\n      }\n\n      console.log('Loading plant-specific data for:', {\n        plantCode: workflowData.assignedPlant,\n        materialCode: workflowData.materialCode,\n        workflowId\n      });\n\n      const plantData = await workflowAPI.getPlantSpecificData({\n        plantCode: workflowData.assignedPlant,\n        materialCode: workflowData.materialCode\n      });\n\n      if (plantData && plantData.plantInputs && Object.keys(plantData.plantInputs).length > 0) {\n        console.log('Found existing plant data:', plantData.plantInputs);\n        \n        // CRITICAL: Only load data if it matches current material\n        if (plantData.materialCode === workflowData.materialCode) {\n          setFormData(prev => ({ ...prev, ...plantData.plantInputs }));\n          form.setFieldsValue(plantData.plantInputs);\n          \n          // Check if questionnaire is submitted/read-only\n          if (plantData.submittedAt) {\n            setIsReadOnly(true);\n            message.info('This questionnaire has been submitted and is read-only');\n          }\n        } else {\n          console.warn('Plant data material mismatch - not loading data');\n          // Ensure form is clean for different material\n          setFormData({});\n          form.resetFields();\n          setIsReadOnly(false);\n        }\n      } else {\n        console.log('No existing plant data found - starting fresh');\n        // Ensure form is clean for new material\n        setFormData({});\n        form.resetFields();\n        setIsReadOnly(false);\n      }\n    } catch (error) {\n      console.error('Failed to load plant-specific data:', error);\n      // Start fresh if loading fails\n      setFormData({});\n      form.resetFields();\n    }\n  }, [workflowData, workflowId, form]);\n\n\n\n  const handleSaveDraft = useCallback(\n    async (silent = false) => {\n      try {\n        setSaving(true);\n        const currentValues = form.getFieldsValue();\n        const updatedFormData = { ...formData, ...currentValues };\n\n        // Enhanced validation before saving\n        const validatedFormData = {};\n        Object.entries(updatedFormData).forEach(([key, value]) => {\n          if (value !== null && value !== undefined && value !== '') {\n            validatedFormData[key] = value;\n          }\n        });\n\n        // Save to local storage as backup with enhanced metadata\n        // CRITICAL: Use material-specific key to prevent data cross-contamination\n        const draftKey = `plant_questionnaire_draft_${workflowId}_${workflowData?.materialCode}_${workflowData?.assignedPlant}`;\n        const draftData = {\n          formData: validatedFormData,\n          currentStep,\n          timestamp: Date.now(),\n          completedSteps: Array.from(completedSteps),\n          version: '2.0',\n          materialCode: workflowData?.materialCode,\n          materialName: workflowData?.materialName,\n          assignedPlant: workflowData?.assignedPlant,\n          workflowId,\n          lastSyncAttempt: Date.now(),\n          syncStatus: isOffline ? 'pending' : 'synced',\n          totalFields: Object.keys(validatedFormData).length,\n          completionPercentage: getOverallCompletionPercentage(),\n          sessionId: Date.now()\n        };\n\n        try {\n          localStorage.setItem(draftKey, JSON.stringify(draftData));\n        } catch (localStorageError) {\n          console.warn('Failed to save draft to local storage:', localStorageError);\n        }\n\n        // Save to server if online\n        if (!isOffline) {\n          try {\n            const draftData = {\n              plantCode: workflowData?.assignedPlant,\n              materialCode: workflowData?.materialCode,\n              responses: validatedFormData, // CRITICAL FIX: Use validatedFormData instead of updatedFormData\n              currentStep,\n              completedSteps: Array.from(completedSteps),\n              modifiedBy: 'current_user'\n            };\n\n            console.log('PlantQuestionnaire: Saving draft with data:', {\n              plantCode: draftData.plantCode,\n              materialCode: draftData.materialCode,\n              responseCount: Object.keys(draftData.responses || {}).length,\n              workflowId\n            });\n            \n\n\n            const response = await workflowAPI.saveDraftPlantResponses(workflowId, draftData);\n\n            console.log('PlantQuestionnaire: Draft save response:', response);\n\n            if (!silent) {\n              if (response.success) {\n                if (response.hasChanges) {\n                  message.success(`Draft saved successfully (${response.savedFields || 0} fields)`);\n                } else {\n                  // Don't show message for no changes to reduce noise\n                  console.log('No changes detected - draft not saved');\n                }\n              } else {\n                message.warning(response.message || 'Draft save may have failed');\n              }\n            }\n          } catch (serverError) {\n            console.error('Failed to save draft to server:', serverError);\n            setPendingChanges(true);\n\n            if (!silent) {\n              // Check if it's a specific error response\n              if (serverError.response && serverError.response.data && serverError.response.data.message) {\n                message.error(`Draft save failed: ${serverError.response.data.message}`);\n              } else {\n                message.warning('Draft saved locally. Will sync when connection is restored.');\n              }\n            }\n          }\n        } else {\n          setPendingChanges(true);\n          if (!silent) {\n            message.info('Draft saved locally. Will sync when online.');\n          }\n        }\n\n        setFormData(updatedFormData);\n\n        if (onSaveDraft) {\n          onSaveDraft(updatedFormData);\n        }\n      } catch (error) {\n        console.error('Failed to save draft:', error);\n        if (!silent) {\n          message.error('Failed to save draft. Please try again.');\n        }\n      } finally {\n        setSaving(false);\n      }\n    },\n    [form, formData, workflowId, onSaveDraft, currentStep, completedSteps, isOffline, workflowData, getOverallCompletionPercentage]\n  );\n\n  const handleNext = useCallback(async () => {\n    if (currentStep < questionnaireSteps.length - 1) {\n      // Save current form data before moving to next step\n      try {\n        const currentValues = form.getFieldsValue();\n        const updatedFormData = { ...formData, ...currentValues };\n        setFormData(updatedFormData);\n\n        // Save to database\n        await handleSaveDraft(true); // Silent save\n\n        setCurrentStep(currentStep + 1);\n      } catch (error) {\n        console.error('Failed to save data before moving to next step:', error);\n        message.warning('Failed to save current data. Please try again.');\n      }\n    }\n  }, [currentStep, questionnaireSteps.length, form, formData, handleSaveDraft]);\n\n  const handlePrevious = useCallback(async () => {\n    if (currentStep > 0) {\n      // Save current form data before moving to previous step\n      try {\n        const currentValues = form.getFieldsValue();\n        const updatedFormData = { ...formData, ...currentValues };\n        setFormData(updatedFormData);\n\n        // Save to database\n        await handleSaveDraft(true); // Silent save\n\n        setCurrentStep(currentStep - 1);\n      } catch (error) {\n        console.error('Failed to save data before moving to previous step:', error);\n        message.warning('Failed to save current data. Please try again.');\n      }\n    }\n  }, [currentStep, form, formData, handleSaveDraft]);\n\n  const handleStepChange = useCallback(\n    async (step) => {\n      if (step >= 0 && step < questionnaireSteps.length) {\n        // Save current form data before changing step\n        try {\n          const currentValues = form.getFieldsValue();\n          const updatedFormData = { ...formData, ...currentValues };\n          setFormData(updatedFormData);\n\n          // Save to database\n          await handleSaveDraft(true); // Silent save\n\n          setCurrentStep(step);\n        } catch (error) {\n          console.error('Failed to save data before changing step:', error);\n          message.warning('Failed to save current data. Please try again.');\n        }\n      }\n    },\n    [questionnaireSteps.length, form, formData, handleSaveDraft]\n  );\n\n  // Helper function definitions\n  // const getStepForField = fieldName => { // Not currently used\n  //   for (let i = 0; i < questionnaireSteps.length; i++) {\n  //     if (questionnaireSteps[i].fields.some(field => field.name === fieldName)) {\n  //       return i;\n  //     }\n  //   }\n  //   return 0;\n  // };\n\n\n\n  const getTotalFieldsPopulated = useCallback(() => {\n    if (!questionnaireSteps || questionnaireSteps.length === 0 || !form) {\n      return { total: 0, populated: 0 };\n    }\n\n    let totalFields = 0;\n    let populatedFields = 0;\n\n    try {\n      // Get current form values including any unsaved changes\n      const currentFormValues = form.getFieldsValue();\n      const currentData = { ...formData, ...currentFormValues };\n\n      questionnaireSteps.forEach(step => {\n        const stepFields = step.fields || [];\n\n        // Count ALL fields (both CQS and plant fields) in total\n        totalFields += stepFields.length;\n\n        const populatedStepFields = stepFields.filter(field => {\n          const value = currentData[field.name];\n          if (Array.isArray(value)) {\n            return value.length > 0;\n          }\n          return value && value !== '' && value !== null && value !== undefined;\n        });\n\n        populatedFields += populatedStepFields.length;\n      });\n\n      // Total fields populated calculated (including both CQS and plant fields)\n\n      return { total: totalFields, populated: populatedFields };\n    } catch (error) {\n      console.error('Error calculating total fields populated:', error);\n      return { total: 0, populated: 0 };\n    }\n  }, [questionnaireSteps, formData, form]);\n\n  // Network status monitoring with enhanced offline handling\n  useEffect(() => {\n    const handleOnline = () => {\n      setIsOffline(false);\n      notification.success({\n        message: 'Connection Restored',\n        description: 'You are back online. Syncing your changes...',\n        icon: <WifiOutlined style={{ color: '#52c41a' }} />,\n        duration: 3\n      });\n\n      if (pendingChanges) {\n        handleSaveDraft(true); // Auto-sync when back online\n        setPendingChanges(false);\n      }\n    };\n\n    const handleOffline = () => {\n      setIsOffline(true);\n      notification.warning({\n        message: 'Connection Lost',\n        description:\n          'You are offline. Changes will be saved locally and synced when connection is restored.',\n        icon: <DisconnectOutlined style={{ color: '#fa8c16' }} />,\n        duration: 5\n      });\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, [pendingChanges, handleSaveDraft]);\n\n  // Enhanced keyboard navigation\n  useEffect(() => {\n    const handleKeyDown = event => {\n      // Ctrl/Cmd + S to save draft\n      if ((event.ctrlKey || event.metaKey) && event.key === 's') {\n        event.preventDefault();\n        handleSaveDraft();\n      }\n\n\n\n      // Ctrl/Cmd + Right Arrow to go to next step\n      if ((event.ctrlKey || event.metaKey) && event.key === 'ArrowRight') {\n        event.preventDefault();\n        if (currentStep < questionnaireSteps.length - 1) {\n          handleNext();\n        }\n      }\n\n      // Ctrl/Cmd + Left Arrow to go to previous step\n      if ((event.ctrlKey || event.metaKey) && event.key === 'ArrowLeft') {\n        event.preventDefault();\n        if (currentStep > 0) {\n          handlePrevious();\n        }\n      }\n\n      // F1 to show help/shortcuts\n      if (event.key === 'F1') {\n        event.preventDefault();\n        Modal.info({\n          title: 'Keyboard Shortcuts',\n          content: (\n            <div>\n              <p>\n                <strong>Ctrl/Cmd + S:</strong> Save draft\n              </p>\n              <p>\n                <strong>Ctrl/Cmd + →:</strong> Next step\n              </p>\n              <p>\n                <strong>Ctrl/Cmd + ←:</strong> Previous step\n              </p>\n              <p>\n                <strong>Tab:</strong> Navigate between fields\n              </p>\n              <p>\n                <strong>Enter:</strong> Submit form or proceed\n              </p>\n              <p>\n                <strong>Esc:</strong> Close modals\n              </p>\n            </div>\n          )\n        });\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [currentStep, questionnaireSteps.length, handleNext, handlePrevious, handleSaveDraft]);\n\n  // Define functions before useEffect hooks that depend on them\n  const loadWorkflowData = useCallback(async () => {\n    try {\n      setLoading(true);\n      const workflow = await workflowAPI.getWorkflow(workflowId);\n      setWorkflowData(workflow);\n\n      // Pre-populate material name from workflow data (from ProjectItemMaster)\n      const initialData = {};\n      if (workflow.materialName) {\n        initialData.materialName = workflow.materialName;\n      }\n\n      // Load existing responses if any\n      if (workflow.responses && workflow.responses.length > 0) {\n        const existingData = { ...initialData };\n        const completed = new Set();\n\n        workflow.responses.forEach(response => {\n          existingData[response.fieldName] = response.fieldValue;\n          completed.add(response.stepNumber);\n        });\n\n        // Merge with existing form data (which may include CQS values)\n        setFormData(prevFormData => {\n          const mergedData = { ...existingData, ...prevFormData };\n          form.setFieldsValue(mergedData);\n          return mergedData;\n        });\n        setCompletedSteps(completed);\n      } else {\n        // Set initial data even if no responses exist, but preserve existing form data (CQS values)\n        setFormData(prevFormData => {\n          const mergedData = { ...initialData, ...prevFormData };\n          form.setFieldsValue(mergedData);\n          return mergedData;\n        });\n      }\n    } catch (error) {\n      console.error('Failed to load workflow data:', error);\n      message.error('Failed to load workflow data');\n    } finally {\n      setLoading(false);\n    }\n  }, [workflowId, form]);\n\n  const loadQueries = useCallback(async () => {\n    try {\n      const workflowQueries = await queryAPI.getQueriesByWorkflow(workflowId);\n      setQueries(workflowQueries);\n    } catch (error) {\n      console.error('Failed to load queries:', error);\n    }\n  }, [workflowId]);\n\n  // Load workflow data and existing responses\n  useEffect(() => {\n    if (workflowId) {\n      loadWorkflowData();\n      loadQueries();\n    }\n  }, [workflowId, loadWorkflowData, loadQueries]);\n\n  // Load questionnaire template when workflow data is available\n  useEffect(() => {\n    if (workflowData && workflowData.materialCode && workflowData.assignedPlant) {\n      loadQuestionnaireTemplate();\n      loadPlantSpecificData();\n    }\n  }, [workflowData, loadQuestionnaireTemplate, loadPlantSpecificData]);\n\n  // Auto-save functionality with recovery\n  useEffect(() => {\n    if (autoSaveEnabled && Object.keys(formData).length > 0) {\n      const autoSaveTimer = setTimeout(() => {\n        handleSaveDraft(true); // Silent save\n      }, AUTO_SAVE.INTERVAL); // Auto-save every 30 seconds\n\n      return () => clearTimeout(autoSaveTimer);\n    }\n  }, [formData, autoSaveEnabled, handleSaveDraft]);\n\n  // Debounced auto-save for real-time changes (saves data as user types)\n  useEffect(() => {\n    if (autoSaveEnabled && Object.keys(formData).length > 0) {\n      const debouncedSaveTimer = setTimeout(() => {\n        handleSaveDraft(true); // Silent save\n      }, AUTO_SAVE.DEBOUNCE_DELAY); // Save after 2 seconds of inactivity\n\n      return () => clearTimeout(debouncedSaveTimer);\n    }\n  }, [formData, autoSaveEnabled, handleSaveDraft]);\n\n  // Ensure CQS values are always applied to the form\n  useEffect(() => {\n    if (Object.keys(cqsFormData).length > 0) {\n      console.log('Applying CQS form data from useEffect:', cqsFormData);\n      // Get current form values\n      const currentValues = form.getFieldsValue();\n      // Merge with CQS data (CQS takes precedence)\n      const mergedValues = { ...currentValues, ...cqsFormData };\n      // Set the merged values\n      form.setFieldsValue(mergedValues);\n      setFormData(prev => ({ ...prev, ...cqsFormData }));\n    }\n  }, [cqsFormData, form]);\n\n  // Track form data changes and update completed steps\n  useEffect(() => {\n    if (questionnaireSteps.length > 0) {\n      const newCompletedSteps = new Set();\n\n      // Get current form values including any unsaved changes\n      const currentFormValues = form.getFieldsValue();\n      const currentData = { ...formData, ...currentFormValues };\n\n      questionnaireSteps.forEach((step, index) => {\n        const stepFields = step.fields || [];\n\n        // Filter out CQS auto-populated fields for step completion calculation\n        const userEditableFields = stepFields.filter(field => !field.isCqsAutoPopulated && !field.disabled);\n        const requiredFields = userEditableFields.filter(field => field.required);\n\n        const completedRequiredFields = requiredFields.filter(field => {\n          const value = currentData[field.name];\n          if (Array.isArray(value)) {\n            return value.length > 0;\n          }\n          return value && value !== '' && value !== null && value !== undefined;\n        });\n\n        // Mark step as complete based on field completion\n        if (requiredFields.length > 0) {\n          // If there are required fields, all must be completed\n          if (completedRequiredFields.length === requiredFields.length) {\n            newCompletedSteps.add(index);\n          }\n        } else {\n          // If no required fields, mark complete if at least 50% of user-editable fields are filled\n          const completedOptionalFields = userEditableFields.filter(field => {\n            const value = currentData[field.name];\n            if (Array.isArray(value)) {\n              return value.length > 0;\n            }\n            return value && value !== '' && value !== null && value !== undefined;\n          });\n\n          const completionPercentage =\n            userEditableFields.length > 0 ? (completedOptionalFields.length / userEditableFields.length) * 100 : 0;\n\n          if (completionPercentage >= 50) {\n            newCompletedSteps.add(index);\n          }\n        }\n\n        // Step completion calculated (excluding CQS auto-populated fields)\n      });\n\n      // Step completion updated\n\n      setCompletedSteps(newCompletedSteps);\n    }\n  }, [formData, questionnaireSteps, form]);\n\n  // Enhanced form validation with field-specific rules\n  const getFieldValidationRules = field => {\n    const rules = [];\n\n    if (field.required) {\n      rules.push({\n        required: true,\n        message: `${field.label} is required for MSDS completion`\n      });\n    }\n\n    // Add specific validation based on field type and name\n    switch (field.name) {\n      case 'casNumber':\n        rules.push({\n          pattern: /^\\d{1,7}-\\d{2}-\\d$/,\n          message:\n            'Please enter a valid CAS number format (e.g., 64-17-5). If unknown, raise a query to the Technical team.'\n        });\n        break;\n      case 'boilingPoint':\n      case 'meltingPoint':\n        rules.push({\n          pattern: /^-?\\d+(\\.\\d+)?$/,\n          message: 'Please enter a valid temperature in Celsius (e.g., 100.5 or -10)'\n        });\n        break;\n      case 'materialName':\n        rules.push({\n          min: 2,\n          message: 'Material name must be at least 2 characters'\n        });\n        rules.push({\n          max: 200,\n          message: 'Material name cannot exceed 200 characters'\n        });\n        break;\n      case 'supplierName':\n        rules.push({\n          min: 2,\n          message: 'Supplier name must be at least 2 characters'\n        });\n        rules.push({\n          max: 100,\n          message: 'Supplier name cannot exceed 100 characters'\n        });\n        break;\n      case 'missing_info':\n      case 'exposure_minimization':\n      case 'carcinogenic_control':\n      case 'storage_conditions_stores':\n      case 'storage_conditions_floor':\n      case 'procedures_details':\n      case 'antidote_source':\n      case 'monitoring_details':\n      case 'plant_inputs_required':\n      case 'gaps_identified':\n      case 'additional_input_1':\n      case 'additional_input_2':\n        rules.push({\n          min: 10,\n          message: `${field.label} must be at least 10 characters for regulatory compliance`\n        });\n        rules.push({\n          max: 2000,\n          message: `${field.label} cannot exceed 2000 characters`\n        });\n        break;\n      default:\n        break;\n    }\n\n    return rules;\n  };\n\n  // Get contextual help text for fields\n  const getFieldHelpText = field => {\n    const helpTexts = {\n      msds_available:\n        'Material Safety Data Sheet with all 16 sections as per regulatory requirements',\n      cas_available:\n        'Chemical Abstracts Service number - unique identifier for chemical substances',\n      is_corrosive: 'Corrosive materials can cause damage to skin, eyes, and respiratory system',\n      highly_toxic: 'Materials with high toxicity require special handling and safety measures',\n      flash_point_65:\n        'Flash point indicates fire hazard - materials with flash point ≤65°C are flammable',\n      petroleum_class:\n        'Classification under Petroleum Act determines storage and handling requirements',\n      ld50_oral: 'Lethal Dose 50 (oral) - dose that kills 50% of test animals when ingested',\n      ld50_dermal:\n        'Lethal Dose 50 (dermal) - dose that kills 50% of test animals through skin contact',\n      lc50_inhalation:\n        'Lethal Concentration 50 (inhalation) - concentration that kills 50% through inhalation',\n      carcinogenic: 'Materials suspected to cause cancer require enhanced safety protocols',\n      recommended_ppe: 'Personal Protective Equipment recommendations based on material hazards',\n      is_poisonous: 'Poisonous materials require specific antidotes and first aid procedures',\n      cmvr_listed:\n        'Chemical Manufacture and Verification Rules listing affects regulatory compliance',\n      msihc_listed: 'Manufacture, Storage and Import of Hazardous Chemical Rules listing',\n      factories_act_listed: 'Factories Act Schedule II listing requires workplace monitoring'\n    };\n\n    return helpTexts[field.name] || field.help;\n  };\n\n  // Enhanced auto-recovery on component mount with improved error handling\n  useEffect(() => {\n    const recoverDraftData = () => {\n      try {\n        // CRITICAL: Use material-specific key to prevent data cross-contamination\n        const draftKey = `plant_questionnaire_draft_${workflowId}_${workflowData?.materialCode}_${workflowData?.assignedPlant}`;\n        const savedDraft = localStorage.getItem(draftKey);\n\n        if (savedDraft) {\n          const draftData = JSON.parse(savedDraft);\n          const draftTimestamp = draftData.timestamp;\n          const currentTime = Date.now();\n\n          // CRITICAL: Validate that draft belongs to current material/plant combination\n          const isDraftValid = draftData.materialCode === workflowData?.materialCode && \n                              draftData.assignedPlant === workflowData?.assignedPlant &&\n                              draftData.workflowId === workflowId;\n\n          if (!isDraftValid) {\n            console.warn('Draft data mismatch - clearing invalid draft:', {\n              draftMaterial: draftData.materialCode,\n              currentMaterial: workflowData?.materialCode,\n              draftPlant: draftData.assignedPlant,\n              currentPlant: workflowData?.assignedPlant\n            });\n            localStorage.removeItem(draftKey);\n            return;\n          }\n\n          // Only recover if draft is less than 7 days old (extended from 24 hours)\n          if (currentTime - draftTimestamp < 7 * 24 * 60 * 60 * 1000) {\n            // Enhanced validation of draft data integrity\n            if (draftData.formData && typeof draftData.formData === 'object') {\n              // Validate each field value before setting\n              const validatedFormData = {};\n              Object.entries(draftData.formData).forEach(([key, value]) => {\n                if (value !== null && value !== undefined && value !== '') {\n                  validatedFormData[key] = value;\n                }\n              });\n\n              setFormData(prev => ({ ...prev, ...validatedFormData }));\n              form.setFieldsValue(validatedFormData);\n\n              if (\n                typeof draftData.currentStep === 'number' &&\n                draftData.currentStep >= 0 &&\n                draftData.currentStep < questionnaireSteps.length\n              ) {\n                setCurrentStep(draftData.currentStep);\n              }\n\n              if (Array.isArray(draftData.completedSteps)) {\n                setCompletedSteps(new Set(draftData.completedSteps));\n              }\n\n              // Check if there are pending changes to sync\n              if (draftData.syncStatus === 'pending') {\n                setPendingChanges(true);\n              }\n\n              const recoveredFields = Object.keys(validatedFormData).length;\n              const draftAge = Math.round((currentTime - draftTimestamp) / (1000 * 60 * 60));\n\n              notification.success({\n                message: 'Draft Recovered',\n                description: `${recoveredFields} fields restored from ${draftAge} hours ago. Your progress has been preserved.`,\n                duration: 6,\n                placement: 'topRight'\n              });\n            } else {\n              // Remove corrupted draft\n              localStorage.removeItem(draftKey);\n              notification.warning({\n                message: 'Draft Recovery Failed',\n                description: 'Previous draft data was corrupted and has been cleared.',\n                duration: 4\n              });\n            }\n          } else {\n            // Remove old draft\n            localStorage.removeItem(draftKey);\n            const draftAge = Math.round((currentTime - draftTimestamp) / (1000 * 60 * 60 * 24));\n            notification.info({\n              message: 'Old Draft Cleared',\n              description: `Draft from ${draftAge} days ago was automatically removed.`,\n              duration: 3\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Failed to recover draft data:', error);\n        // Remove corrupted draft\n        try {\n          const draftKey = `plant_questionnaire_draft_${workflowId}_${workflowData?.materialCode}_${workflowData?.assignedPlant}`;\n          localStorage.removeItem(draftKey);\n          notification.error({\n            message: 'Draft Recovery Error',\n            description: 'Failed to recover previous draft. Starting fresh.',\n            duration: 4\n          });\n        } catch (removeError) {\n          console.error('Failed to remove corrupted draft:', removeError);\n        }\n      }\n    };\n\n    if (workflowId && !workflowData) {\n      recoverDraftData();\n    }\n  }, [workflowId, workflowData, form, questionnaireSteps.length]);\n\n  // Enhanced step completion tracking with validation\n  const getStepCompletionStatus = useCallback(stepIndex => {\n    if (!questionnaireSteps[stepIndex] || !questionnaireSteps[stepIndex].fields) {\n      return {\n        total: 0,\n        required: 0,\n        optional: 0,\n        completed: 0,\n        requiredCompleted: 0,\n        optionalCompleted: 0,\n        isComplete: false,\n        hasOpenQueries: false,\n        hasResolvedQueries: false,\n        openQueriesCount: 0,\n        resolvedQueriesCount: 0,\n        completionPercentage: 0,\n        requiredCompletionPercentage: 0\n      };\n    }\n\n    const stepFields = questionnaireSteps[stepIndex].fields;\n\n    // Include ALL fields (both CQS and user-editable) for completion calculation\n    const allFields = stepFields;\n    const userEditableFields = stepFields.filter(field => !field.isCqsAutoPopulated && !field.disabled);\n    const cqsFields = stepFields.filter(field => field.isCqsAutoPopulated);\n    const requiredFields = allFields.filter(field => field.required);\n    const optionalFields = allFields.filter(field => !field.required);\n\n    // Get current form values including any unsaved changes\n    const currentFormValues = form.getFieldsValue();\n    const currentData = { ...formData, ...currentFormValues };\n\n    // Check completion for user-editable fields\n    const completedUserFields = userEditableFields.filter(field => {\n      const value = currentData[field.name];\n      if (Array.isArray(value)) {\n        return value.length > 0;\n      }\n      return value && value !== '' && value !== null && value !== undefined;\n    });\n\n    // Check completion for CQS fields (consider them completed if they have any value)\n    const completedCqsFields = cqsFields.filter(field => {\n      const value = currentData[field.name];\n      if (Array.isArray(value)) {\n        return value.length > 0;\n      }\n      return value && value !== '' && value !== null && value !== undefined && value !== 'Data not available';\n    });\n\n    const totalCompleted = completedUserFields.length + completedCqsFields.length;\n    const totalFields = allFields.length;\n\n    // Calculate required field completion (including CQS required fields)\n    const completedRequiredFields = requiredFields.filter(field => {\n      const value = currentData[field.name];\n      if (Array.isArray(value)) {\n        return value.length > 0;\n      }\n      // For CQS fields, consider them completed if they have data (even if it's auto-populated)\n      if (field.isCqsAutoPopulated) {\n        return value && value !== '' && value !== null && value !== undefined && value !== 'Data not available';\n      }\n      // For user fields, normal completion check\n      return value && value !== '' && value !== null && value !== undefined;\n    });\n\n    const stepQueries = queries.filter(q => q.stepNumber === stepIndex);\n    const openQueries = stepQueries.filter(q => q.status === 'OPEN');\n    const resolvedQueries = stepQueries.filter(q => q.status === 'RESOLVED');\n\n    // Determine if step is complete\n    let isComplete = false;\n    if (requiredFields.length > 0) {\n      // If there are required fields, all must be completed\n      isComplete = completedRequiredFields.length === requiredFields.length;\n    } else if (totalFields > 0) {\n      // If no required fields but has fields, ALL fields must be completed (100%)\n      isComplete = totalCompleted === totalFields;\n    } else {\n      // No fields at all, consider complete\n      isComplete = true;\n    }\n\n    return {\n      total: totalFields,\n      required: requiredFields.length,\n      optional: optionalFields.length,\n      completed: totalCompleted,\n      requiredCompleted: completedRequiredFields.length,\n      optionalCompleted: totalCompleted - completedRequiredFields.length,\n      isComplete,\n      hasOpenQueries: openQueries.length > 0,\n      hasResolvedQueries: resolvedQueries.length > 0,\n      openQueriesCount: openQueries.length,\n      resolvedQueriesCount: resolvedQueries.length,\n      completionPercentage:\n        totalFields > 0\n          ? Math.round((totalCompleted / totalFields) * 100)\n          : 100,\n      requiredCompletionPercentage:\n        requiredFields.length > 0\n          ? Math.round((completedRequiredFields.length / requiredFields.length) * 100)\n          : 100\n    };\n  }, [questionnaireSteps, formData, form, queries]);\n\n  const handleRaiseQuery = fieldName => {\n    console.log('handleRaiseQuery called with fieldName:', fieldName);\n    const field = questionnaireSteps[currentStep].fields.find(f => f.name === fieldName);\n    const currentValue = formData[fieldName] || form.getFieldValue(fieldName);\n\n    console.log('Found field:', field);\n    console.log('Current value:', currentValue);\n\n    setSelectedField({\n      ...field,\n      stepNumber: currentStep,\n      stepTitle: questionnaireSteps[currentStep].title,\n      currentValue,\n      materialContext: {\n        materialCode: workflowData?.materialCode,\n        materialName: workflowData?.materialName,\n        materialType: formData.materialType || workflowData?.materialType,\n        supplierName: formData.supplierName || workflowData?.supplierName\n      }\n    });\n\n    console.log('Setting queryModalVisible to true');\n    setQueryModalVisible(true);\n  };\n\n  const handleQueryCreated = _queryData => {\n    setQueryModalVisible(false);\n    setSelectedField(null);\n    loadQueries(); // Reload queries\n    message.success('Query raised successfully');\n  };\n\n\n\n  // Auto-scroll to field with resolved query\n  const scrollToResolvedQuery = useCallback(fieldName => {\n    setTimeout(() => {\n      const fieldElement = document.querySelector(`[data-field-name=\"${fieldName}\"]`);\n      if (fieldElement) {\n        fieldElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center',\n          inline: 'nearest'\n        });\n\n        // Highlight the field briefly\n        fieldElement.style.transition = 'background-color 0.3s ease';\n        fieldElement.style.backgroundColor = '#f6ffed';\n        setTimeout(() => {\n          fieldElement.style.backgroundColor = '';\n        }, 2000);\n      }\n    }, 100);\n  }, []);\n\n  // Check for newly resolved queries and auto-scroll\n  useEffect(() => {\n    if (queries.length > 0) {\n      const resolvedQueriesInCurrentStep = queries.filter(\n        q => q.stepNumber === currentStep && q.status === 'RESOLVED' && !q.hasBeenViewed // Add this flag to track if user has seen the resolution\n      );\n\n      if (resolvedQueriesInCurrentStep.length > 0) {\n        const latestResolvedQuery = resolvedQueriesInCurrentStep.sort(\n          (a, b) => new Date(b.resolvedAt) - new Date(a.resolvedAt)\n        )[0];\n\n        scrollToResolvedQuery(latestResolvedQuery.fieldName);\n\n        // Show notification about resolved query\n        notification.success({\n          message: 'Query Resolved',\n          description: `Your query about \"${latestResolvedQuery.fieldName}\" has been resolved. Check the field for the response.`,\n          duration: 5,\n          placement: 'topRight'\n        });\n      }\n    }\n  }, [queries, currentStep, scrollToResolvedQuery]);\n\n  const handleSubmit = async () => {\n    try {\n      setSubmitting(true);\n\n      // Check for open queries\n      const openQueries = queries.filter(q => q.status === 'OPEN');\n      if (openQueries.length > 0) {\n        Modal.confirm({\n          title: 'Open Queries Detected',\n          content: `You have ${openQueries.length} open queries. Are you sure you want to submit the questionnaire? It's recommended to resolve all queries before submission.`,\n          okText: 'Submit Anyway',\n          cancelText: 'Cancel',\n          onOk: () => proceedWithSubmission()\n        });\n        return;\n      }\n\n      await proceedWithSubmission();\n    } catch (error) {\n      console.error('Failed to submit questionnaire:', error);\n      if (error.status === 400) {\n        message.error('Please complete all required fields before submitting');\n      } else if (error.status === 401) {\n        message.error('Session expired. Please log in again.');\n      } else {\n        message.error('Failed to submit questionnaire. Please try again.');\n      }\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const proceedWithSubmission = async () => {\n    // Validate all required fields\n    const allRequiredFields = questionnaireSteps.flatMap(step =>\n      step.fields.filter(field => field.required).map(field => field.name)\n    );\n\n    await form.validateFields(allRequiredFields);\n\n    const finalData = form.getFieldsValue();\n\n    // Check completion percentage\n    const completionPercentage = getOverallCompletionPercentage();\n    if (completionPercentage < 80) {\n      const proceed = await new Promise(resolve => {\n        Modal.confirm({\n          title: 'Incomplete Questionnaire',\n          content: `Your questionnaire is only ${completionPercentage}% complete. Are you sure you want to submit?`,\n          okText: 'Submit',\n          cancelText: 'Continue Editing',\n          onOk: () => resolve(true),\n          onCancel: () => resolve(false)\n        });\n      });\n\n      if (!proceed) {\n        return;\n      }\n    }\n\n    const submissionData = {\n      plantCode: workflowData?.assignedPlant,\n      materialCode: workflowData?.materialCode,\n      responses: finalData,\n      completionPercentage,\n      submittedBy: 'current_user',\n      totalQueries: queries.length,\n      openQueries: queries.filter(q => q.status === 'OPEN').length\n    };\n\n    const submitResult = await workflowAPI.submitPlantQuestionnaire(workflowId, submissionData);\n\n    console.log('Submission result:', submitResult);\n\n    // Clear draft data after successful submission\n    try {\n      const draftKey = `plant_questionnaire_draft_${workflowId}_${workflowData?.materialCode}_${workflowData?.assignedPlant}`;\n      localStorage.removeItem(draftKey);\n      console.log('Cleared draft data for submitted questionnaire:', draftKey);\n    } catch (error) {\n      console.warn('Failed to clear draft data:', error);\n    }\n\n    // CRITICAL: Mark questionnaire as read-only after successful submission\n    if (submitResult.success) {\n      setIsReadOnly(true);\n      message.success('Questionnaire submitted successfully and marked as completed');\n      \n      // Refresh the page or redirect to prevent further editing\n      setTimeout(() => {\n        window.location.reload();\n      }, 2000);\n    } else {\n      message.error(submitResult.message || 'Submission failed - please try again');\n      return;\n    }\n\n    if (onComplete) {\n      onComplete(finalData);\n    }\n  };\n\n  const renderField = field => {\n    const fieldQueries = queries.filter(\n      q => q.fieldName === field.name && q.stepNumber === currentStep\n    );\n\n    const hasOpenQuery = fieldQueries.some(q => q.status === 'OPEN');\n    const hasResolvedQuery = fieldQueries.some(q => q.status === 'RESOLVED');\n    const resolvedQuery = fieldQueries.find(q => q.status === 'RESOLVED');\n\n    const isFieldCompleted = formData[field.name] && formData[field.name] !== '';\n\n    const fieldLabel = (\n      <div className=\"modern-field-label\">\n        <div style={{\n          display: 'flex',\n          alignItems: 'flex-start',\n          gap: '8px',\n          flexWrap: 'wrap',\n          marginBottom: '4px'\n        }}>\n          <span style={{ flex: 1, minWidth: 0, lineHeight: '1.5' }}>\n            {field.label}\n          </span>\n          {field.required && <span style={{ color: '#ef4444', flexShrink: 0 }}>*</span>}\n          {field.isCqsAutoPopulated && (\n            <CqsFieldDisplay\n              field={field}\n              cqsData={_cqsData}\n              cqsFieldMapping={workflowData?.cqsFieldMapping || {}}\n              compact={true}\n            />\n          )}\n          {isFieldCompleted && (\n            <Tooltip title=\"Field completed\">\n              <CheckCircleOutlined style={{ color: '#10b981', fontSize: '14px', flexShrink: 0 }} />\n            </Tooltip>\n          )}\n        </div>\n        <div style={{ display: 'flex', gap: '8px', marginTop: '4px', flexWrap: 'wrap' }}>\n          <Button\n            type=\"text\"\n            size=\"small\"\n            icon={<QuestionCircleOutlined />}\n            onClick={() => handleRaiseQuery(field.name)}\n            style={{\n              color: '#667eea',\n              padding: '2px 6px',\n              height: 'auto',\n              fontSize: '12px'\n            }}\n          >\n            Query\n          </Button>\n          {hasOpenQuery && (\n            <Tag color=\"red\" size=\"small\">\n              Query Open\n            </Tag>\n          )}\n          {hasResolvedQuery && !hasOpenQuery && (\n            <Tag color=\"green\" size=\"small\">\n              Query Resolved\n            </Tag>\n          )}\n        </div>\n      </div>\n    );\n\n    // Enhanced validation rules\n    const validationRules = getFieldValidationRules(field);\n\n    const helpContent = resolvedQuery ? (\n      <div\n        style={{\n          marginTop: 8,\n          padding: '12px 16px',\n          background: 'linear-gradient(135deg, #f0fdf4, #dcfce7)',\n          border: '1px solid #bbf7d0',\n          borderRadius: '8px',\n          fontSize: '12px'\n        }}\n      >\n        <div style={{ marginBottom: 6 }}>\n          <Text strong style={{ color: '#059669' }}>\n            Query Response:\n          </Text>\n        </div>\n        <div style={{ marginBottom: 6, color: '#374151' }}>{resolvedQuery.response}</div>\n        <div style={{ fontSize: '10px', color: '#6b7280' }}>\n          Resolved by {resolvedQuery.resolvedBy} on{' '}\n          {new Date(resolvedQuery.resolvedAt).toLocaleDateString()}\n        </div>\n      </div>\n    ) : (\n      getFieldHelpText(field)\n    );\n\n    const commonProps = {\n      name: field.name,\n      label: fieldLabel,\n      rules: validationRules,\n      help: helpContent,\n      'data-field-name': field.name\n    };\n\n    // Get CQS value for this field if it's CQS auto-populated\n    const cqsValue = field.isCqsAutoPopulated && _cqsData?.cqsData ?\n      _cqsData.cqsData[field.name] : null;\n\n    // If this is a CQS auto-populated field with a value, show it as read-only display\n    if (field.isCqsAutoPopulated && cqsValue) {\n      const displayValue = field.type === 'radio' || field.type === 'select' ?\n        field.options?.find(opt => opt.value === cqsValue)?.label || cqsValue :\n        cqsValue;\n\n      return (\n        <Form.Item {...commonProps}>\n          <div className=\"cqs-readonly-field\">\n            <div className=\"cqs-value-display\">\n              {displayValue}\n            </div>\n            <div className=\"cqs-readonly-note\">\n              <Text type=\"secondary\" style={{ fontSize: '12px', fontStyle: 'italic' }}>\n                Auto-populated by CQS system\n              </Text>\n            </div>\n          </div>\n        </Form.Item>\n      );\n    }\n\n    // Disable field if explicitly disabled, read-only, or CQS auto-populated\n    const isDisabled = field.disabled || isReadOnly || false;\n\n    const inputProps = {\n      className: `modern-input ${field.isCqsAutoPopulated ? 'cqs-auto-populated' : ''}`,\n      disabled: isDisabled,\n      placeholder: field.placeholder || `Enter ${field.label.toLowerCase()}`\n    };\n\n    switch (field.type) {\n      case 'input':\n        return (\n          <Form.Item {...commonProps}>\n            <Input {...inputProps} />\n          </Form.Item>\n        );\n\n      case 'textarea':\n        return (\n          <Form.Item {...commonProps}>\n            <TextArea {...inputProps} rows={4} autoSize={{ minRows: 3, maxRows: 6 }} />\n          </Form.Item>\n        );\n\n      case 'select':\n        return (\n          <Form.Item {...commonProps}>\n            <Select\n              {...inputProps}\n              placeholder={`Select ${field.label.toLowerCase()}`}\n              showSearch\n              optionFilterProp=\"children\"\n            >\n              {field.options?.map(option => (\n                <Option key={option.value} value={option.value}>\n                  {option.label}\n                </Option>\n              ))}\n            </Select>\n          </Form.Item>\n        );\n\n      case 'radio':\n        return (\n          <Form.Item {...commonProps}>\n            <Radio.Group\n              className={`modern-radio-group ${field.isCqsAutoPopulated ? 'cqs-auto-populated' : ''}`}\n              disabled={isDisabled}\n            >\n              <Space direction=\"vertical\" size=\"small\">\n                {field.options?.map(option => (\n                  <Radio key={option.value} value={option.value}>\n                    {option.label}\n                  </Radio>\n                ))}\n              </Space>\n            </Radio.Group>\n          </Form.Item>\n        );\n\n      case 'checkbox':\n        return (\n          <Form.Item {...commonProps} valuePropName=\"checked\">\n            <Checkbox.Group\n              className={`modern-checkbox-group ${field.isCqsAutoPopulated ? 'cqs-auto-populated' : ''}`}\n              disabled={isDisabled}\n            >\n              <Space direction=\"vertical\" size=\"small\">\n                {field.options?.map(option => (\n                  <Checkbox key={option.value} value={option.value}>\n                    {option.label}\n                  </Checkbox>\n                ))}\n              </Space>\n            </Checkbox.Group>\n          </Form.Item>\n        );\n\n      default:\n        return (\n          <Form.Item {...commonProps}>\n            <Input {...inputProps} />\n          </Form.Item>\n        );\n    }\n  };\n\n  if (loading) {\n    return (\n      <div\n        className=\"plant-questionnaire-container\"\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n          minHeight: '100vh',\n          gap: '24px'\n        }}\n      >\n        <div\n          style={{\n            background: 'white',\n            padding: '48px',\n            borderRadius: '16px',\n            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n            textAlign: 'center',\n            maxWidth: '400px'\n          }}\n        >\n          <div style={{ marginBottom: '24px' }}>\n            <div\n              style={{\n                width: '60px',\n                height: '60px',\n                margin: '0 auto 16px',\n                background: 'linear-gradient(135deg, #4f46e5, #7c3aed)',\n                borderRadius: '50%',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center'\n              }}\n            >\n              <FileTextOutlined style={{ fontSize: '24px', color: 'white' }} />\n            </div>\n            <Title level={3} style={{ margin: 0, color: '#1e293b' }}>\n              Loading Questionnaire\n            </Title>\n            <Text type=\"secondary\" style={{ fontSize: '14px' }}>\n              Preparing your workflow data...\n            </Text>\n          </div>\n\n          <div style={{ marginBottom: '16px' }}>\n            <Spin size=\"large\" />\n          </div>\n\n          <div\n            style={{\n              height: '4px',\n              background: '#e2e8f0',\n              borderRadius: '2px',\n              overflow: 'hidden'\n            }}\n          >\n            <div\n              style={{\n                height: '100%',\n                width: '30%',\n                background: 'linear-gradient(135deg, #4f46e5, #7c3aed)',\n                borderRadius: '2px',\n                animation: 'slideInFromLeft 2s ease-in-out infinite'\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!workflowData) {\n    return (\n      <Alert\n        message=\"Workflow Not Found\"\n        description=\"The requested workflow could not be loaded.\"\n        type=\"error\"\n        showIcon\n      />\n    );\n  }\n\n  // Add safety checks for questionnaire steps\n  if (templateLoading) {\n    return (\n      <div\n        className=\"plant-questionnaire-container\"\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n          minHeight: '100vh',\n          gap: '24px'\n        }}\n      >\n        <div\n          style={{\n            background: 'white',\n            padding: '48px',\n            borderRadius: '16px',\n            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n            textAlign: 'center',\n            maxWidth: '400px'\n          }}\n        >\n          <div style={{ marginBottom: '24px' }}>\n            <div\n              style={{\n                width: '60px',\n                height: '60px',\n                margin: '0 auto 16px',\n                background: 'linear-gradient(135deg, #4f46e5, #7c3aed)',\n                borderRadius: '50%',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center'\n              }}\n            >\n              <ExperimentOutlined style={{ fontSize: '24px', color: 'white' }} />\n            </div>\n            <Title level={3} style={{ margin: 0, color: '#1e293b' }}>\n              Loading Template\n            </Title>\n            <Text type=\"secondary\" style={{ fontSize: '14px' }}>\n              Preparing your plant-specific questionnaire template...\n            </Text>\n          </div>\n\n          <div style={{ marginBottom: '16px' }}>\n            <Spin size=\"large\" />\n          </div>\n\n          <div\n            style={{\n              height: '4px',\n              background: '#e2e8f0',\n              borderRadius: '2px',\n              overflow: 'hidden'\n            }}\n          >\n            <div\n              style={{\n                height: '100%',\n                width: '60%',\n                background: 'linear-gradient(135deg, #4f46e5, #7c3aed)',\n                borderRadius: '2px',\n                animation: 'slideInFromLeft 2s ease-in-out infinite'\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!questionnaireSteps || questionnaireSteps.length === 0) {\n    return (\n      <Alert\n        message=\"Template Not Available\"\n        description=\"The questionnaire template could not be loaded. Please try refreshing the page.\"\n        type=\"error\"\n        showIcon\n        action={\n          <Button size=\"small\" onClick={() => window.location.reload()}>\n            Refresh\n          </Button>\n        }\n      />\n    );\n  }\n\n  // const progress = Math.round(((currentStep + 1) / questionnaireSteps.length) * 100); // Not currently used\n  const currentStepData = questionnaireSteps[currentStep] || {\n    title: 'Loading...',\n    description: '',\n    fields: []\n  };\n\n  return (\n    <div className={`plant-questionnaire-container ${isReadOnly ? 'read-only' : ''}`}>\n      {/* Modern Header */}\n      <div className=\"plant-questionnaire-header\">\n        <div className=\"plant-questionnaire-header-content\">\n          <div className=\"plant-questionnaire-title\">\n            <Avatar size={40} style={{ background: 'linear-gradient(135deg, #667eea, #764ba2)' }}>\n              <DashboardOutlined />\n            </Avatar>\n            <div>\n              <Title level={3} style={{ margin: 0, color: '#1e293b' }}>\n                Plant Questionnaire\n              </Title>\n              <Text type=\"secondary\" style={{ fontSize: '14px' }}>\n                {workflowData?.materialCode} • {workflowData?.assignedPlant}\n              </Text>\n            </div>\n          </div>\n\n          <div className=\"plant-questionnaire-stats\">\n            <div className=\"modern-stats-card\">\n              <div\n                className=\"modern-progress-ring\"\n                style={{ '--progress': getOverallCompletionPercentage() }}\n              >\n                <svg>\n                  <defs>\n                    <linearGradient id=\"progressGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                      <stop offset=\"0%\" stopColor=\"#4f46e5\" />\n                      <stop offset=\"100%\" stopColor=\"#7c3aed\" />\n                    </linearGradient>\n                  </defs>\n                  <circle className=\"progress-circle progress-background\" cx=\"30\" cy=\"30\" r=\"26\" />\n                  <circle className=\"progress-circle progress-foreground\" cx=\"30\" cy=\"30\" r=\"26\" />\n                </svg>\n                <div\n                  style={{\n                    position: 'absolute',\n                    inset: 0,\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    fontSize: '12px',\n                    fontWeight: '600',\n                    color: '#1e293b'\n                  }}\n                >\n                  {getOverallCompletionPercentage()}%\n                </div>\n              </div>\n              <div style={{ textAlign: 'center', marginTop: 8 }}>\n                <Text style={{ fontSize: '11px', color: '#64748b' }}>Overall Progress</Text>\n              </div>\n            </div>\n\n            <div className=\"modern-stats-card\">\n              <div\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  marginBottom: 8\n                }}\n              >\n                <Badge\n                  count={queries.filter(q => q.status === 'OPEN').length}\n                  style={{\n                    backgroundColor:\n                      queries.filter(q => q.status === 'OPEN').length > 0 ? '#ef4444' : '#10b981'\n                  }}\n                >\n                  <Avatar\n                    icon={<QuestionCircleOutlined />}\n                    style={{\n                      backgroundColor:\n                        queries.filter(q => q.status === 'OPEN').length > 0 ? '#fef2f2' : '#f0fdf4',\n                      color:\n                        queries.filter(q => q.status === 'OPEN').length > 0 ? '#ef4444' : '#10b981'\n                    }}\n                  />\n                </Badge>\n              </div>\n              <Text\n                style={{\n                  fontSize: '11px',\n                  color: '#64748b',\n                  display: 'block',\n                  textAlign: 'center'\n                }}\n              >\n                Open Queries\n              </Text>\n            </div>\n\n            <div className=\"modern-stats-card\">\n              <div style={{ textAlign: 'center' }}>\n                <div\n                  className={`modern-completion-badge ${getOverallCompletionPercentage() >= 80\n                    ? 'high'\n                    : getOverallCompletionPercentage() >= 50\n                      ? 'medium'\n                      : 'low'\n                    }`}\n                >\n                  Step {currentStep + 1}/{questionnaireSteps.length}\n                </div>\n                <Text\n                  style={{ fontSize: '11px', color: '#64748b', display: 'block', marginTop: 4 }}\n                >\n                  Current Step\n                </Text>\n              </div>\n            </div>\n\n            {/* Header Actions */}\n            <Space>\n              <Button\n                className=\"modern-btn modern-btn-secondary\"\n                icon={<SaveOutlined />}\n                onClick={() => handleSaveDraft()}\n                loading={saving}\n                disabled={isReadOnly}\n              >\n                {isReadOnly ? 'Read Only' : 'Save Draft'}\n              </Button>\n\n              {isMobile && (\n                <Button\n                  className=\"modern-btn modern-btn-secondary\"\n                  icon={<MenuOutlined />}\n                  onClick={() => setSidebarVisible(true)}\n                >\n                  Steps\n                </Button>\n              )}\n            </Space>\n          </div>\n        </div>\n      </div>\n\n      {/* Read-Only Alert */}\n      {isReadOnly && (\n        <Alert\n          message=\"Questionnaire Submitted\"\n          description=\"This questionnaire has been submitted and is now read-only. No further changes can be made.\"\n          type=\"info\"\n          showIcon\n          style={{ margin: '16px 0' }}\n          banner\n        />\n      )}\n\n      {/* Main Content */}\n      <div className=\"plant-questionnaire-main\">\n        {/* Sidebar - Steps Navigation */}\n        {!isMobile && (\n          <div className=\"plant-questionnaire-sidebar\">\n            <Card className=\"modern-steps-card\">\n              <div className=\"modern-steps-header\">\n                <Title level={4} style={{ margin: 0, color: '#1e293b' }}>\n                  Questionnaire Steps\n                </Title>\n                <Text type=\"secondary\" style={{ fontSize: '12px', display: 'block', marginBottom: '4px' }}>\n                  {completedSteps.size} of {questionnaireSteps.length} steps completed\n                </Text>\n                <Text type=\"secondary\" style={{ fontSize: '11px', display: 'block', marginTop: '2px' }}>\n                  {(() => {\n                    const fieldStats = getTotalFieldsPopulated();\n                    return `${fieldStats.populated} of ${fieldStats.total} fields populated`;\n                  })()}\n                </Text>\n              </div>\n\n              <div className=\"modern-steps-list\">\n                {questionnaireSteps.map((step, index) => {\n                  const stepStatus = getStepCompletionStatus(index);\n                  const hasOpenQueries = queries.some(\n                    q => q.stepNumber === index && q.status === 'OPEN'\n                  );\n                  const isActive = index === currentStep;\n                  const isCompleted = stepStatus.isComplete;\n\n                  return (\n                    <div\n                      key={index}\n                      className={`modern-step-item ${isActive ? 'active' : ''} ${isCompleted ? 'completed' : ''}`}\n                      onClick={() => handleStepChange(index)}\n                    >\n                      <div\n                        className={`step-completion-ring ${isCompleted ? 'completed' : ''}`}\n                        style={{\n                          '--completion-angle': `${(stepStatus.requiredCompleted / Math.max(stepStatus.required, 1)) * 360}deg`,\n                          background: isActive ? '#4f46e5' : isCompleted ? '#10b981' : '#f1f5f9',\n                          color: isActive || isCompleted ? 'white' : '#64748b'\n                        }}\n                      >\n                        {isCompleted ? (\n                          <CheckCircleOutlined />\n                        ) : hasOpenQueries ? (\n                          <ExclamationCircleOutlined />\n                        ) : (\n                          stepIcons[step.title] || <FileTextOutlined />\n                        )}\n                      </div>\n                      <div style={{ flex: 1, minWidth: 0 }}>\n                        <div style={{ fontWeight: isActive ? 600 : 400, color: '#1e293b' }}>\n                          {step.title}\n                        </div>\n                        <div style={{ fontSize: '12px', color: '#64748b', marginTop: 2 }}>\n                          {stepStatus.completed}/{stepStatus.total} fields\n                          {hasOpenQueries && (\n                            <Tag color=\"red\" size=\"small\" style={{ marginLeft: 4 }}>\n                              {\n                                queries.filter(q => q.stepNumber === index && q.status === 'OPEN')\n                                  .length\n                              }{' '}\n                              queries\n                            </Tag>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </Card>\n\n            {/* Material Context Panel */}\n            <div style={{ marginTop: 16 }}>\n              <MaterialContextPanel workflowData={workflowData} />\n            </div>\n          </div>\n        )}\n\n        {/* Main Form Content */}\n        <div className=\"plant-questionnaire-content\">\n          <Card className=\"modern-form-card\">\n            <div className=\"modern-form-header\">\n              <div>\n                <Title level={2} style={{ margin: 0, color: 'white' }}>\n                  {currentStepData.title}\n                </Title>\n                <Paragraph style={{ margin: '8px 0 0 0', color: 'rgba(255, 255, 255, 0.8)' }}>\n                  {currentStepData.description}\n                </Paragraph>\n              </div>\n\n              <div className=\"modern-progress-container\">\n                <Progress\n                  className=\"modern-progress\"\n                  percent={(() => {\n                    const status = getStepCompletionStatus(currentStep);\n                    return status.required > 0\n                      ? Math.round((status.requiredCompleted / status.required) * 100)\n                      : 100;\n                  })()}\n                  showInfo={false}\n                  strokeColor=\"rgba(255, 255, 255, 0.9)\"\n                  trailColor=\"rgba(255, 255, 255, 0.2)\"\n                />\n                <Text style={{ color: 'rgba(255, 255, 255, 0.8)', fontSize: '12px' }}>\n                  Step Progress:{' '}\n                  {(() => {\n                    const status = getStepCompletionStatus(currentStep);\n                    return `${status.completed}/${status.total} fields`;\n                  })()}\n                </Text>\n              </div>\n            </div>\n\n            {/* Offline Indicator */}\n            {isOffline && (\n              <Alert\n                className=\"modern-alert modern-alert-warning\"\n                message=\"Offline Mode\"\n                description=\"You are currently offline. Changes will be saved locally and synced when connection is restored.\"\n                type=\"warning\"\n                showIcon\n                style={{ margin: '16px 32px' }}\n                closable\n              />\n            )}\n\n\n\n            <div\n              className={`modern-form-content ${currentStep % 2 === 0 ? 'slide-in-from-right' : 'slide-in-from-left'}`}\n            >\n              <Form\n                form={form}\n                layout=\"vertical\"\n                onValuesChange={(changedValues, allValues) => {\n                  setFormData(prev => ({ ...prev, ...allValues }));\n                  setPendingChanges(true);\n                  _setProgressUpdateTrigger(prev => prev + 1);\n\n                  // Trigger completion status update\n                  setTimeout(() => {\n                    if (questionnaireSteps.length > 0) {\n                      const newCompletedSteps = new Set();\n\n                      questionnaireSteps.forEach((step, index) => {\n                        const stepFields = step.fields || [];\n\n                        // Filter out CQS auto-populated fields for step completion calculation\n                        const userEditableFields = stepFields.filter(field => !field.isCqsAutoPopulated && !field.disabled);\n                        const requiredFields = userEditableFields.filter(field => field.required);\n\n                        const completedRequiredFields = requiredFields.filter(field => {\n                          const value = allValues[field.name];\n                          if (Array.isArray(value)) {\n                            return value.length > 0;\n                          }\n                          return value && value !== '' && value !== null && value !== undefined;\n                        });\n\n                        // Mark step as complete based on field completion\n                        if (requiredFields.length > 0) {\n                          // If there are required fields, all must be completed\n                          if (completedRequiredFields.length === requiredFields.length) {\n                            newCompletedSteps.add(index);\n                          }\n                        } else {\n                          // If no required fields, mark complete if at least 50% of user-editable fields are filled\n                          const completedOptionalFields = userEditableFields.filter(field => {\n                            const value = allValues[field.name];\n                            if (Array.isArray(value)) {\n                              return value.length > 0;\n                            }\n                            return value && value !== '' && value !== null && value !== undefined;\n                          });\n\n                          const completionPercentage =\n                            userEditableFields.length > 0\n                              ? (completedOptionalFields.length / userEditableFields.length) * 100\n                              : 0;\n\n                          if (completionPercentage >= 50) {\n                            newCompletedSteps.add(index);\n                          }\n                        }\n                      });\n\n                      // Step completion updated on form change\n\n                      setCompletedSteps(newCompletedSteps);\n                    }\n                  }, 100); // Small delay to ensure form state is updated\n                }}\n              >\n                <Row gutter={[24, 24]}>\n                  {(currentStepData.fields || []).map((field, index) => (\n                    <Col\n                      key={field.name}\n                      xs={24}\n                      sm={field.type === 'textarea' ? 24 : 12}\n                      md={field.type === 'textarea' ? 24 : 12}\n                    >\n                      <div\n                        className={`modern-field-group ${field.required ? 'required' : ''} ${field.isCqsAutoPopulated ? 'cqs-populated' : ''} fade-in-up`}\n                        style={{ animationDelay: `${index * 0.1}s` }}\n                      >\n                        <div className=\"modern-field-header\">\n                          <div style={{ flex: 1, minWidth: 0 }}>{renderField(field)}</div>\n                          <div className=\"modern-field-actions\">\n                            {field.isCqsAutoPopulated && (\n                              <Tooltip title=\"CQS Auto-populated\">\n                                <div\n                                  style={{\n                                    background: 'linear-gradient(135deg, #10b981, #059669)',\n                                    color: 'white',\n                                    padding: '2px 6px',\n                                    borderRadius: '4px',\n                                    fontSize: '10px',\n                                    fontWeight: '500'\n                                  }}\n                                >\n                                  CQS\n                                </div>\n                              </Tooltip>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </Col>\n                  ))}\n                </Row>\n              </Form>\n            </div>\n\n            {/* Navigation */}\n            <div className=\"modern-navigation\">\n              <Button\n                className=\"modern-btn modern-btn-secondary\"\n                icon={<ArrowLeftOutlined />}\n                onClick={handlePrevious}\n                disabled={currentStep === 0}\n                style={{\n                  opacity: currentStep === 0 ? 0.5 : 1,\n                  cursor: currentStep === 0 ? 'not-allowed' : 'pointer'\n                }}\n              >\n                Previous\n              </Button>\n\n              <div style={{ display: 'flex', alignItems: 'center', gap: 16 }}>\n                <div style={{ textAlign: 'center' }}>\n                  <Text type=\"secondary\" style={{ fontSize: '12px', display: 'block' }}>\n                    Step Progress\n                  </Text>\n                  <Text style={{ fontSize: '14px', fontWeight: '600', color: '#1e293b' }}>\n                    {currentStep + 1} of {questionnaireSteps.length}\n                  </Text>\n                </div>\n\n                {pendingChanges && (\n                  <div\n                    style={{\n                      padding: '4px 8px',\n                      background: '#fef3c7',\n                      border: '1px solid #fde68a',\n                      borderRadius: '6px',\n                      fontSize: '11px',\n                      color: '#92400e'\n                    }}\n                  >\n                    Unsaved changes\n                  </div>\n                )}\n\n\n\n                {currentStep === questionnaireSteps.length - 1 ? (\n                  <>\n                    <Button\n                      className={`modern-btn modern-btn-primary ${getOverallCompletionPercentage() === 100 ? 'pulse-glow' : ''}`}\n                      onClick={handleSubmit}\n                      loading={submitting}\n                      disabled={isReadOnly}\n                      size=\"large\"\n                      style={{ minWidth: '160px' }}\n                    >\n                      {isReadOnly ? 'Submitted' : submitting ? 'Submitting...' : 'Submit Questionnaire'}\n                    </Button>\n                    \n\n                  </>\n                ) : (\n                  <Button\n                    className=\"modern-btn modern-btn-primary\"\n                    icon={<ArrowRightOutlined />}\n                    onClick={handleNext}\n                    style={{ minWidth: '120px' }}\n                  >\n                    Next Step\n                  </Button>\n                )}\n              </div>\n            </div>\n          </Card>\n        </div>\n      </div>\n\n      {/* Mobile Sidebar Drawer */}\n      <Drawer\n        className=\"modern-drawer\"\n        title=\"Questionnaire Steps\"\n        placement=\"left\"\n        onClose={() => setSidebarVisible(false)}\n        open={sidebarVisible}\n        width={320}\n      >\n        <div className=\"modern-timeline\">\n          <Timeline>\n            {questionnaireSteps.map((step, index) => {\n              const stepStatus = getStepCompletionStatus(index);\n              const hasOpenQueries = queries.some(\n                q => q.stepNumber === index && q.status === 'OPEN'\n              );\n              const isActive = index === currentStep;\n              const isCompleted = stepStatus.isComplete;\n\n              return (\n                <Timeline.Item\n                  key={index}\n                  color={isCompleted ? '#10b981' : isActive ? '#667eea' : '#cbd5e1'}\n                  dot={\n                    isCompleted ? (\n                      <CheckCircleOutlined style={{ color: '#10b981' }} />\n                    ) : hasOpenQueries ? (\n                      <ExclamationCircleOutlined style={{ color: '#ef4444' }} />\n                    ) : (\n                      stepIcons[step.title] || <FileTextOutlined />\n                    )\n                  }\n                >\n                  <div\n                    onClick={() => {\n                      handleStepChange(index);\n                      setSidebarVisible(false);\n                    }}\n                    style={{ cursor: 'pointer', padding: '8px 0' }}\n                  >\n                    <Text strong={isActive} style={{ color: isActive ? '#667eea' : '#1e293b' }}>\n                      {step.title}\n                    </Text>\n                    <div style={{ fontSize: '12px', color: '#64748b', marginTop: 4 }}>\n                      {stepStatus.completed}/{stepStatus.total} fields completed\n                      {hasOpenQueries && (\n                        <Tag color=\"red\" size=\"small\" style={{ marginLeft: 4 }}>\n                          {\n                            queries.filter(q => q.stepNumber === index && q.status === 'OPEN')\n                              .length\n                          }{' '}\n                          queries\n                        </Tag>\n                      )}\n                    </div>\n                  </div>\n                </Timeline.Item>\n              );\n            })}\n          </Timeline>\n        </div>\n      </Drawer>\n\n      {/* Modern Floating Completion Indicator */}\n      {!isMobile && (\n        <div className=\"modern-floating-indicator\">\n          <div style={{ textAlign: 'center', marginBottom: 12 }}>\n            <Text strong style={{ color: '#1e293b', fontSize: '14px' }}>\n              Questionnaire Progress\n            </Text>\n          </div>\n          <div style={{ display: 'flex', alignItems: 'center', gap: 12, marginBottom: 8 }}>\n            <div\n              className=\"modern-progress-ring\"\n              style={{\n                '--progress': getOverallCompletionPercentage(),\n                width: '40px',\n                height: '40px'\n              }}\n            >\n              <svg>\n                <circle className=\"progress-circle progress-background\" cx=\"20\" cy=\"20\" r=\"16\" />\n                <circle className=\"progress-circle progress-foreground\" cx=\"20\" cy=\"20\" r=\"16\" />\n              </svg>\n              <div\n                style={{\n                  position: 'absolute',\n                  inset: 0,\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  fontSize: '10px',\n                  fontWeight: '600',\n                  color: '#1e293b'\n                }}\n              >\n                {getOverallCompletionPercentage()}%\n              </div>\n            </div>\n            <div>\n              <div style={{ fontSize: '12px', color: '#1e293b', fontWeight: '500', marginBottom: '4px' }}>\n                {completedSteps.size} of {questionnaireSteps.length} steps\n              </div>\n              <div style={{ fontSize: '11px', color: '#64748b', marginBottom: '2px' }}>\n                {(() => {\n                  const fieldStats = getTotalFieldsPopulated();\n                  return `${fieldStats.populated}/${fieldStats.total} fields`;\n                })()}\n              </div>\n              <div style={{ fontSize: '11px', color: '#64748b' }}>\n                {queries.filter(q => q.status === 'OPEN').length} open queries\n              </div>\n            </div>\n          </div>\n          <div\n            style={{\n              height: '2px',\n              background: '#e2e8f0',\n              borderRadius: '1px',\n              overflow: 'hidden'\n            }}\n          >\n            <div\n              style={{\n                height: '100%',\n                width: `${getOverallCompletionPercentage()}%`,\n                background: 'linear-gradient(135deg, #4f46e5, #7c3aed)',\n                transition: 'width 0.5s ease'\n              }}\n            />\n          </div>\n        </div>\n      )}\n\n      {/* Floating Action Buttons */}\n      <div className=\"modern-floating-actions\">\n        <FloatButton.Group\n          trigger=\"hover\"\n          type=\"primary\"\n          style={{ right: 24 }}\n          icon={<SettingOutlined />}\n        >\n          <FloatButton\n            icon={<SaveOutlined />}\n            tooltip={isReadOnly ? \"Read Only\" : \"Save Draft\"}\n            onClick={() => handleSaveDraft()}\n            disabled={isReadOnly}\n          />\n          <FloatButton\n            icon={<DashboardOutlined />}\n            tooltip=\"Summary\"\n            onClick={() => {\n              const summaryData = questionnaireSteps.map((step, index) => {\n                const status = getStepCompletionStatus(index);\n                const stepQueries = queries.filter(q => q.stepNumber === index);\n                return {\n                  step: index + 1,\n                  title: step.title,\n                  completed: status.requiredCompleted,\n                  required: status.required,\n                  percentage:\n                    status.required > 0\n                      ? Math.round((status.requiredCompleted / status.required) * 100)\n                      : 100,\n                  openQueries: stepQueries.filter(q => q.status === 'OPEN').length,\n                  resolvedQueries: stepQueries.filter(q => q.status === 'RESOLVED').length\n                };\n              });\n\n              Modal.info({\n                title: 'Questionnaire Summary',\n                width: 600,\n                content: (\n                  <div>\n                    <div style={{ marginBottom: 16 }}>\n                      <Text strong>Overall Progress: {getOverallCompletionPercentage()}%</Text>\n                    </div>\n                    {summaryData.map(step => (\n                      <div\n                        key={step.step}\n                        style={{\n                          marginBottom: 12,\n                          padding: '12px 16px',\n                          background:\n                            step.percentage === 100\n                              ? 'linear-gradient(135deg, #f0fdf4, #dcfce7)'\n                              : 'linear-gradient(135deg, #fffbeb, #fef3c7)',\n                          border: `1px solid ${step.percentage === 100 ? '#bbf7d0' : '#fde68a'}`,\n                          borderRadius: '8px'\n                        }}\n                      >\n                        <div\n                          style={{\n                            display: 'flex',\n                            justifyContent: 'space-between',\n                            alignItems: 'center'\n                          }}\n                        >\n                          <Text strong>\n                            Step {step.step}: {step.title}\n                          </Text>\n                          <Tag color={step.percentage === 100 ? 'green' : 'orange'}>\n                            {step.percentage}%\n                          </Tag>\n                        </div>\n                        <div style={{ fontSize: '12px', color: '#666', marginTop: 4 }}>\n                          {step.completed}/{step.required} required fields completed\n                          {step.openQueries > 0 && (\n                            <span style={{ color: '#ef4444', marginLeft: 8 }}>\n                              • {step.openQueries} open queries\n                            </span>\n                          )}\n                          {step.resolvedQueries > 0 && (\n                            <span style={{ color: '#10b981', marginLeft: 8 }}>\n                              • {step.resolvedQueries} resolved queries\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )\n              });\n            }}\n          />\n          <FloatButton\n            icon={autoSaveEnabled ? <CloudSyncOutlined /> : <DisconnectOutlined />}\n            tooltip={autoSaveEnabled ? 'Auto-save ON' : 'Auto-save OFF'}\n            onClick={() => setAutoSaveEnabled(!autoSaveEnabled)}\n          />\n        </FloatButton.Group>\n      </div>\n\n      {/* Query Raising Modal */}\n      <QueryRaisingModal\n        open={queryModalVisible}\n        onCancel={() => {\n          setQueryModalVisible(false);\n          setSelectedField(null);\n        }}\n        onSubmit={handleQueryCreated}\n        workflowId={workflowId}\n        fieldContext={selectedField}\n      />\n    </div>\n  );\n};\n\nexport default PlantQuestionnaire;\n","import { Typography, Button, Space, Modal, Select, message } from 'antd';\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport PlantErrorBoundary from '../components/ErrorBoundaries/PlantErrorBoundary';\nimport FilterPanel from '../components/Plant/FilterPanel';\nimport PlantDashboard from '../components/Plant/PlantDashboard';\nimport WorkflowTable from '../components/Plant/WorkflowTable';\nimport PlantQuestionnaire from '../components/PlantQuestionnaire';\nimport { PlantOnly } from '../components/RoleBasedComponent';\nimport { usePlantWorkflows } from '../hooks/usePlantWorkflows';\nimport { useRoleBasedAccess } from '../hooks/useRoleBasedAccess';\nimport { useWorkflowFilters } from '../hooks/useWorkflowFilters';\nimport { getCurrentUser, isAuthenticated } from '../services/auth';\nimport { masterDataAPI } from '../services/masterDataAPI';\nimport { userAPI } from '../services/userAPI';\nimport { workflowAPI } from '../services/workflowAPI';\n\nconst { Title } = Typography;\nconst { Option } = Select;\n\nconst PlantView = () => {\n  const [selectedWorkflow, setSelectedWorkflow] = useState(null);\n  const [questionnaireVisible, setQuestionnaireVisible] = useState(false);\n  const [currentPlant, setCurrentPlant] = useState(null);\n  const [userPlantData, setUserPlantData] = useState(null);\n  const [availablePlants, setAvailablePlants] = useState([]);\n\n  // Use role-based access control\n  const { isPlantUser, isAdmin, userPlants, primaryPlant, filterByPlantAccess } = useRoleBasedAccess();\n\n  // Use custom hooks for workflow management and filtering\n  const {\n    workflows,\n    loading,\n    error,\n    dashboardStats,\n    refreshWorkflows\n  } = usePlantWorkflows(currentPlant, userPlantData);\n\n  const {\n    filteredWorkflows,\n    searchText,\n    statusFilter,\n    completionFilter,\n    updateSearchText,\n    updateStatusFilter,\n    updateCompletionFilter,\n    clearAllFilters,\n    applyPreset,\n    saveFilters,\n    filterPresets,\n    filterSummary\n  } = useWorkflowFilters(workflows);\n\n\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    const fetchData = async () => {\n      try {\n        await loadUserPlantData(controller.signal);\n      } catch (error) {\n        if (!controller.signal.aborted) {\n          console.error('Error loading user plant data:', error);\n        }\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      controller.abort();\n    };\n  }, []);\n\n  const loadUserPlantData = async signal => {\n    try {\n      // Check if user is authenticated first\n      if (!isAuthenticated()) {\n        console.warn('User is not authenticated');\n        message.error('You are not logged in. Please log in to access the plant dashboard.');\n        return;\n      }\n\n      const currentUser = getCurrentUser();\n      if (!currentUser) {\n        console.warn('No current user found');\n        message.error('Unable to identify current user. Please log in again.');\n        return;\n      }\n\n      console.log('Loading plant data for user:', currentUser);\n\n      // Load user plant assignments and location master data in parallel\n      const [plantData, locations] = await Promise.all([\n        userAPI.getUserPlantAssignments(currentUser, { signal }),\n        masterDataAPI.getAllLocations({ signal })\n      ]);\n\n      console.log('User plant data received:', plantData);\n      console.log('Assigned plants:', plantData?.assignedPlants);\n      console.log('Primary plant:', plantData?.primaryPlant);\n      setUserPlantData(plantData);\n\n      // Set current plant to user's primary plant (or first assigned plant if no primary)\n      const effectivePlant = plantData.primaryPlant || (plantData.assignedPlants && plantData.assignedPlants[0]);\n      if (effectivePlant && plantData.assignedPlants && plantData.assignedPlants.includes(effectivePlant)) {\n        setCurrentPlant(effectivePlant);\n        localStorage.setItem('userPlant', effectivePlant);\n        console.log('Set current plant to primary/effective plant:', effectivePlant);\n      } else if (plantData.assignedPlants && plantData.assignedPlants.length > 0) {\n        // Fallback to first assigned plant if primary is not available\n        const firstPlant = plantData.assignedPlants[0];\n        setCurrentPlant(firstPlant);\n        localStorage.setItem('userPlant', firstPlant);\n        console.log('Set current plant to first assigned plant:', firstPlant);\n      }\n\n      // Update available plants to only show assigned plants with descriptions\n      if (plantData.assignedPlants && plantData.assignedPlants.length > 0) {\n        const plantOptions = plantData.assignedPlants.map(plantCode => {\n          const location = locations.find(loc => loc.locationCode === plantCode);\n          const isPrimary = plantCode === plantData.primaryPlant;\n          return {\n            value: plantCode,\n            label: location\n              ? `${plantCode} - ${location.description}${isPrimary ? ' (Primary)' : ''}`\n              : `${plantCode}${isPrimary ? ' (Primary)' : ''}`\n          };\n        });\n        setAvailablePlants(plantOptions);\n        console.log('Available plants set:', plantOptions);\n      }\n    } catch (error) {\n      console.error('Failed to load user plant data:', error);\n      // Set empty plant data to trigger the \"no assignments\" message\n      setUserPlantData({\n        assignedPlants: [],\n        primaryPlant: null,\n        effectivePlant: null,\n        isPlantUser: false\n      });\n      setAvailablePlants([]);\n      setCurrentPlant(null);\n      message.error('Unable to load plant assignments. Please contact administrator to assign plants to your user.');\n    }\n  };\n\n\n\n  const handlePlantChange = useCallback((newPlantCode) => {\n    // Validate that user is assigned to this plant\n    if (userPlantData && !userPlantData.assignedPlants.includes(newPlantCode)) {\n      message.error(`You are not assigned to plant: ${newPlantCode}`);\n      return;\n    }\n\n    localStorage.setItem('userPlant', newPlantCode);\n    setCurrentPlant(newPlantCode);\n    message.success(`Switched to plant: ${newPlantCode}`);\n  }, [userPlantData]);\n\n  const handleStartQuestionnaire = useCallback((workflow) => {\n    setSelectedWorkflow(workflow);\n    setQuestionnaireVisible(true);\n  }, []);\n\n  const handleQuestionnaireComplete = useCallback((_formData) => {\n    setQuestionnaireVisible(false);\n    setSelectedWorkflow(null);\n    refreshWorkflows(); // Refresh the list\n    message.success('Questionnaire completed successfully!');\n  }, [refreshWorkflows]);\n\n  const handleSaveDraft = useCallback((_formData) => {\n    message.success('Draft saved successfully');\n  }, []);\n\n\n\n  // Check if user is authenticated\n  if (!isAuthenticated()) {\n    return (\n      <PlantOnly>\n        <div style={{ padding: 24, textAlign: 'center' }}>\n          <Title level={3}>Authentication Required</Title>\n          <p>You need to be logged in to access the plant dashboard.</p>\n          <Button\n            type=\"primary\"\n            onClick={() => window.location.href = '/qrmfg/login'}\n          >\n            Go to Login\n          </Button>\n        </div>\n      </PlantOnly>\n    );\n  }\n\n  // Show loading state while plant data is being fetched\n  if (userPlantData === null) {\n    return (\n      <PlantOnly>\n        <div style={{ padding: 24, textAlign: 'center' }}>\n          <Title level={3}>Loading Plant Assignments...</Title>\n          <p>Please wait while we load your plant assignments.</p>\n        </div>\n      </PlantOnly>\n    );\n  }\n\n  // Show message if user has no plant assignments\n  if (userPlantData && (!userPlantData.assignedPlants || userPlantData.assignedPlants.length === 0)) {\n    return (\n      <PlantOnly>\n        <div style={{ padding: 24, textAlign: 'center' }}>\n          <Title level={3}>No Plant Assignments</Title>\n          <p>You are not assigned to any plants. Please contact your administrator to assign plants to your user account.</p>\n          <div style={{ marginTop: 16, padding: 16, background: '#f5f5f5', borderRadius: 4 }}>\n            <p><strong>Debug Info:</strong></p>\n            <p>Current User: {getCurrentUser()}</p>\n            <p>Is Authenticated: {isAuthenticated().toString()}</p>\n            <p>User Plant Data: {JSON.stringify(userPlantData, null, 2)}</p>\n            <Space>\n              <Button\n                onClick={() => {\n                  console.log('Current user:', getCurrentUser());\n                  console.log('User plant data:', userPlantData);\n                  console.log('Available plants:', availablePlants);\n                  loadUserPlantData();\n                }}\n              >\n                Debug & Retry\n              </Button>\n              <Button\n                type=\"primary\"\n                onClick={async () => {\n                  try {\n                    const currentUser = getCurrentUser();\n                    if (!currentUser) {\n                      message.error('No current user found');\n                      return;\n                    }\n\n                    // Try to fix the plant assignments by setting assignedPlants to match primaryPlant\n                    const primaryPlant = '1102'; // From the token validation response\n                    const assignedPlants = [primaryPlant];\n\n                    await userAPI.updateUserPlantAssignments(currentUser, {\n                      assignedPlants,\n                      primaryPlant\n                    });\n\n                    message.success('Plant assignments fixed! Please refresh the page or log out and log back in.');\n                    await loadUserPlantData();\n                  } catch (error) {\n                    console.error('Failed to assign plants:', error);\n                    if (error.status === 403) {\n                      message.error('You need admin permissions to assign plants. Please ask an administrator to assign plants to your user account.');\n                    } else {\n                      message.error(`Failed to assign plants: ${error.message}`);\n                    }\n                  }\n                }}\n              >\n                Fix Plant Assignments (Admin Required)\n              </Button>\n              <Button\n                onClick={() => {\n                  message.info('Logging out to refresh token...');\n                  localStorage.clear();\n                  sessionStorage.clear();\n                  window.location.href = '/qrmfg/login';\n                }}\n              >\n                Logout & Re-login\n              </Button>\n            </Space>\n          </div>\n        </div>\n      </PlantOnly>\n    );\n  }\n\n  return (\n    <PlantOnly>\n      <PlantErrorBoundary plantCode={currentPlant}>\n        <div style={{ padding: 0 }}>\n          {/* Page Header */}\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              marginBottom: 20,\n              padding: '0 0 16px 0',\n              borderBottom: '1px solid #e8e8e8'\n            }}\n          >\n            <div>\n              <Title level={2} style={{ margin: 0, color: '#1f2937' }}>\n                Plant Dashboard\n              </Title>\n              <div style={{ fontSize: '14px', color: '#6b7280', marginTop: '4px' }}>\n                Manufacturing Unit A - Materials Overview\n              </div>\n            </div>\n            <div style={{ display: 'flex', alignItems: 'center', gap: 16 }}>\n              <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>\n                <span style={{ fontSize: '14px', fontWeight: '500' }}>Plant:</span>\n                <Select\n                  value={currentPlant}\n                  onChange={handlePlantChange}\n                  style={{ width: 250 }}\n                  size=\"small\"\n                  disabled={!userPlantData || availablePlants.length <= 1}\n                  showSearch\n                  filterOption={(input, option) =>\n                    option?.children?.toLowerCase().includes(input.toLowerCase())\n                  }\n                  placeholder=\"Select assigned plant\"\n                >\n                  {availablePlants.map(plant => (\n                    <Option key={plant.value} value={plant.value}>\n                      {plant.label}\n                    </Option>\n                  ))}\n                </Select>\n              </div>\n              <Space>\n                <Button onClick={refreshWorkflows} loading={loading}>\n                  Refresh Data\n                </Button>\n              </Space>\n            </div>\n          </div>\n\n          {/* Dashboard Statistics */}\n          {currentPlant ? (\n            <PlantDashboard\n              dashboardStats={dashboardStats}\n              loading={loading}\n              error={error}\n              currentPlant={currentPlant}\n              onRefresh={refreshWorkflows}\n            />\n          ) : (\n            <div style={{ textAlign: 'center', padding: '40px 0', color: '#999' }}>\n              <Title level={4}>Select a Plant</Title>\n              <p>Please select a plant from the dropdown above to view the dashboard and assigned materials.</p>\n            </div>\n          )}\n\n          {/* Filter Panel and Workflows Table - only show when plant is selected */}\n          {currentPlant && (\n            <>\n              <FilterPanel\n                searchText={searchText}\n                statusFilter={statusFilter}\n                completionFilter={completionFilter}\n                onSearchTextChange={updateSearchText}\n                onStatusFilterChange={updateStatusFilter}\n                onCompletionFilterChange={updateCompletionFilter}\n                onClearFilters={clearAllFilters}\n                onApplyPreset={applyPreset}\n                onSaveFilters={saveFilters}\n                filterPresets={filterPresets}\n                filterSummary={filterSummary}\n              />\n\n              <WorkflowTable\n                workflows={filteredWorkflows}\n                loading={loading}\n                onStartQuestionnaire={handleStartQuestionnaire}\n                onRefresh={refreshWorkflows}\n              />\n            </>\n          )}\n\n          {/* Questionnaire Modal */}\n          <Modal\n            title={`Material Questionnaire - ${selectedWorkflow?.materialCode}`}\n            open={questionnaireVisible}\n            onCancel={() => {\n              setQuestionnaireVisible(false);\n              setSelectedWorkflow(null);\n            }}\n            footer={null}\n            width=\"95%\"\n            style={{ top: 20 }}\n            destroyOnClose\n          >\n            {selectedWorkflow && (\n              <PlantQuestionnaire\n                workflowId={selectedWorkflow.id}\n                onComplete={handleQuestionnaireComplete}\n                onSaveDraft={handleSaveDraft}\n              />\n            )}\n          </Modal>\n        </div>\n      </PlantErrorBoundary>\n    </PlantOnly>\n  );\n};\n\nexport default PlantView;\n","import { message } from 'antd';\nimport { useState, useEffect, useCallback } from 'react';\n\nimport { WORKFLOW_SPECIFIC_STATES, WORKFLOW_STATES } from '../constants';\nimport { getCurrentUser } from '../services/auth';\nimport { workflowAPI } from '../services/workflowAPI';\nimport { recalculateWorkflowProgress, getTemplateFieldCounts, calculateCorrectFieldCounts } from '../utils/questionnaireUtils';\n\n/**\n * Custom hook for managing plant workflow data and operations\n * Handles workflow fetching, state management, and dashboard statistics\n */\nexport const usePlantWorkflows = (currentPlant, userPlantData) => {\n  const [workflows, setWorkflows] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [dashboardStats, setDashboardStats] = useState({\n    totalWorkflows: 0,\n    completedCount: 0,\n    inProgressCount: 0,\n    draftCount: 0,\n    averageCompletion: 0,\n    completedToday: 0\n  });\n\n    /**\n   * Get current plant from localStorage or default\n   */\n    const getCurrentPlant = useCallback(() => {\n        const storedPlant = localStorage.getItem('userPlant');\n        const storedUser = localStorage.getItem('username');\n    \n        console.log('Plant detection:', {\n          storedPlant,\n          storedUser,\n          localStorage: Object.keys(localStorage)\n        });\n    \n        return storedPlant || '1102';\n      }, []);\n    \n\n  /**\n   * Load plant workflows with proper error handling and AbortController cleanup\n   */\n  const loadPlantWorkflows = useCallback(async (signal) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const plantCode = currentPlant || getCurrentPlant();\n\n      if (!plantCode) {\n        console.warn('No plant code available for loading workflows');\n        setWorkflows([]);\n        setDashboardStats({\n          totalWorkflows: 0,\n          completedCount: 0,\n          inProgressCount: 0,\n          draftCount: 0,\n          averageCompletion: 0,\n          completedToday: 0\n        });\n        return;\n      }\n\n      console.log('Loading workflows for plant:', plantCode);\n\n      let dashboardData;\n      let workflowsWithProgress = [];\n\n      try {\n        // Try to get plant dashboard data with progress information\n        dashboardData = await workflowAPI.getPlantDashboardData(plantCode, { signal });\n        console.log('Received dashboard data:', dashboardData);\n\n        // Transform the data to match the expected format and filter by current plant\n        workflowsWithProgress = dashboardData.workflows\n          .filter(workflow => workflow.plantCode === plantCode) // Only show workflows for current plant\n          .map(workflow => {\n            // Use backend's calculation directly (it's now correct)\n            // Don't recalculate in frontend to avoid field name mismatches\n            \n            // Determine the correct completion status based on actual progress\n            let completionStatus;\n            if (workflow.isSubmitted || workflow.completionPercentage === 100) {\n              completionStatus = 'COMPLETED';\n            } else if (workflow.completionPercentage > 0) {\n              completionStatus = 'IN_PROGRESS';\n            } else {\n              completionStatus = 'DRAFT';\n            }\n\n            return {\n              id: workflow.workflowId,\n              materialCode: workflow.materialCode,\n              plantCode: workflow.plantCode,\n              currentState: workflow.isSubmitted\n                ? WORKFLOW_STATES.COMPLETED\n                : WORKFLOW_SPECIFIC_STATES.PLANT_PENDING,\n              completionStatus,\n              completionPercentage: workflow.completionPercentage, // Use backend's calculation\n              totalFields: workflow.totalFields, // Use backend's calculation\n              completedFields: workflow.completedFields, // Use backend's calculation\n              requiredFields: workflow.requiredFields || 0,\n              completedRequiredFields: workflow.completedRequiredFields || 0,\n              lastModified: workflow.lastModified,\n              submittedAt: workflow.submittedAt,\n              submittedBy: workflow.submittedBy,\n              isSubmitted: workflow.isSubmitted,\n              isCompleted: workflow.isCompleted,\n              openQueries: workflow.openQueries || 0,\n              assignedPlant: workflow.plantCode,\n              materialName: workflow.materialName,\n              itemDescription: workflow.itemDescription\n            };\n          });\n      } catch (plantDataError) {\n        console.warn(\n          'Failed to load plant-specific data, falling back to regular workflows:',\n          plantDataError\n        );\n\n        // Fallback: Load workflows by plant directly\n        try {\n          const plantWorkflows = await workflowAPI.getWorkflowsByPlant(plantCode, { signal });\n          console.log('Fallback: Loaded plant workflows:', plantWorkflows);\n\n          // Add mock progress data to plant workflows and filter by current plant\n          const { totalFields } = getTemplateFieldCounts();\n          \n          workflowsWithProgress = plantWorkflows\n            .filter(workflow => {\n              const workflowPlant = workflow.plantCode || workflow.assignedPlant;\n              return workflowPlant === plantCode; // Only show workflows for current plant\n            })\n            .map(workflow => {\n              // Calculate progress if plant inputs are available\n              const plantInputs = workflow.plantInputs || workflow.plantData?.plantInputs || {};\n              const { completionPercentage, completedFields } = calculateCorrectFieldCounts(plantInputs);\n              \n              // Determine the correct completion status based on actual progress\n              let completionStatus;\n              const isSubmitted = workflow.isSubmitted || workflow.submittedAt;\n              if (isSubmitted || completionPercentage === 100) {\n                completionStatus = 'COMPLETED';\n              } else if (completionPercentage > 0) {\n                completionStatus = 'IN_PROGRESS';\n              } else {\n                completionStatus = 'DRAFT';\n              }\n\n              return {\n                id: workflow.id,\n                materialCode: workflow.materialCode,\n                plantCode: workflow.plantCode || workflow.assignedPlant,\n                currentState: workflow.currentState || workflow.state,\n                completionStatus,\n                completionPercentage,\n                totalFields, // Correct total fields (87 = 34 CQS + 53 plant)\n                completedFields,\n                requiredFields: 50, // Default required\n                completedRequiredFields: 0, // Default completed required\n                lastModified: workflow.lastModified,\n                submittedAt: workflow.submittedAt || null,\n                submittedBy: workflow.submittedBy || null,\n                isSubmitted,\n                isCompleted: workflow.isCompleted || false,\n                openQueries: workflow.openQueries || 0,\n                assignedPlant: workflow.plantCode || workflow.assignedPlant,\n                materialName: workflow.materialName,\n                itemDescription: workflow.itemDescription\n              };\n            });\n\n          console.log('Fallback: Processed workflows:', workflowsWithProgress);\n        } catch (fallbackError) {\n          console.error('Fallback also failed:', fallbackError);\n          workflowsWithProgress = [];\n        }\n\n        // Set default dashboard data for fallback\n        dashboardData = {\n          totalWorkflows: workflowsWithProgress.length,\n          completedCount: 0,\n          inProgressCount: 0,\n          draftCount: workflowsWithProgress.length,\n          averageCompletion: 0\n        };\n      }\n\n      setWorkflows(workflowsWithProgress);\n\n      // Set dashboard stats\n      setDashboardStats({\n        totalWorkflows: dashboardData.totalWorkflows || 0,\n        completedCount: dashboardData.completedCount || 0,\n        inProgressCount: dashboardData.inProgressCount || 0,\n        draftCount: dashboardData.draftCount || 0,\n        averageCompletion: dashboardData.averageCompletion || 0,\n        completedToday: 0 // TODO: Calculate from submittedAt dates\n      });\n    } catch (error) {\n      console.error('Failed to load plant workflows:', error);\n      setError(error.message);\n      message.error('Failed to load workflows');\n      setWorkflows([]);\n      setDashboardStats({\n        totalWorkflows: 0,\n        completedCount: 0,\n        inProgressCount: 0,\n        draftCount: 0,\n        averageCompletion: 0,\n        completedToday: 0\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [currentPlant, getCurrentPlant]);\n\n\n\n  /**\n   * Refresh workflows data\n   */\n  const refreshWorkflows = useCallback(async () => {\n    const controller = new AbortController();\n    await loadPlantWorkflows(controller.signal);\n  }, [loadPlantWorkflows]);\n\n\n  // Load workflows when plant or user data changes\n  useEffect(() => {\n    const controller = new AbortController();\n\n    const fetchWorkflows = async () => {\n      if (userPlantData && currentPlant) {\n        try {\n          await loadPlantWorkflows(controller.signal);\n        } catch (error) {\n          if (!controller.signal.aborted) {\n            console.error('Error loading plant workflows:', error);\n          }\n        }\n      } else {\n        // Clear workflows if no plant is selected\n        setWorkflows([]);\n        setDashboardStats({\n          totalWorkflows: 0,\n          completedCount: 0,\n          inProgressCount: 0,\n          draftCount: 0,\n          averageCompletion: 0,\n          completedToday: 0\n        });\n        setLoading(false);\n      }\n    };\n\n    fetchWorkflows();\n\n    return () => {\n      controller.abort();\n    };\n  }, [userPlantData, currentPlant, loadPlantWorkflows]);\n\n  return {\n    workflows,\n    loading,\n    error,\n    dashboardStats,\n    loadPlantWorkflows,\n    refreshWorkflows\n  };\n};","import { useState, useEffect, useMemo, useCallback } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { COMPLETION_FILTERS } from '../constants';\n\n/**\n * Custom hook for managing workflow filters with URL synchronization\n * Handles filter state, application, and persistence\n */\nexport const useWorkflowFilters = (workflows = []) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  \n  // Filter state\n  const [searchText, setSearchText] = useState(searchParams.get('search') || '');\n  const [statusFilter, setStatusFilter] = useState(searchParams.get('status') || 'all');\n  const [completionFilter, setCompletionFilter] = useState(searchParams.get('completion') || 'all');\n\n  /**\n   * Apply all filters to the workflows data\n   */\n  const filteredWorkflows = useMemo(() => {\n    let filtered = [...workflows];\n\n    // Apply search filter\n    if (searchText) {\n      const searchLower = searchText.toLowerCase();\n      filtered = filtered.filter(\n        workflow =>\n          workflow.materialCode?.toLowerCase().includes(searchLower) ||\n          workflow.plantCode?.toLowerCase().includes(searchLower) ||\n          workflow.materialName?.toLowerCase().includes(searchLower) ||\n          workflow.itemDescription?.toLowerCase().includes(searchLower)\n      );\n    }\n\n    // Apply status filter\n    if (statusFilter !== 'all') {\n      filtered = filtered.filter(workflow => workflow.completionStatus === statusFilter);\n    }\n\n    // Apply completion filter\n    if (completionFilter !== 'all') {\n      if (completionFilter === COMPLETION_FILTERS.COMPLETED) {\n        filtered = filtered.filter(workflow => workflow.completionPercentage === 100);\n      } else if (completionFilter === COMPLETION_FILTERS.IN_PROGRESS) {\n        filtered = filtered.filter(\n          workflow => workflow.completionPercentage > 0 && workflow.completionPercentage < 100\n        );\n      } else if (completionFilter === COMPLETION_FILTERS.NOT_STARTED) {\n        filtered = filtered.filter(workflow => workflow.completionPercentage === 0);\n      }\n    }\n\n    return filtered;\n  }, [workflows, searchText, statusFilter, completionFilter]);\n\n  /**\n   * Update search text filter\n   */\n  const updateSearchText = useCallback((value) => {\n    setSearchText(value);\n  }, []);\n\n  /**\n   * Update status filter\n   */\n  const updateStatusFilter = useCallback((value) => {\n    setStatusFilter(value);\n  }, []);\n\n  /**\n   * Update completion filter\n   */\n  const updateCompletionFilter = useCallback((value) => {\n    setCompletionFilter(value);\n  }, []);\n\n  /**\n   * Clear all filters\n   */\n  const clearAllFilters = useCallback(() => {\n    setSearchText('');\n    setStatusFilter('all');\n    setCompletionFilter('all');\n  }, []);\n\n  /**\n   * Apply multiple filters at once\n   */\n  const applyFilters = useCallback((filters) => {\n    if (filters.searchText !== undefined) {\n      setSearchText(filters.searchText);\n    }\n    if (filters.statusFilter !== undefined) {\n      setStatusFilter(filters.statusFilter);\n    }\n    if (filters.completionFilter !== undefined) {\n      setCompletionFilter(filters.completionFilter);\n    }\n  }, []);\n\n  /**\n   * Get filter presets\n   */\n  const filterPresets = useMemo(() => [\n    {\n      name: 'All Workflows',\n      filters: { searchText: '', statusFilter: 'all', completionFilter: 'all' }\n    },\n    {\n      name: 'In Progress',\n      filters: { searchText: '', statusFilter: 'IN_PROGRESS', completionFilter: 'in-progress' }\n    },\n    {\n      name: 'Completed',\n      filters: { searchText: '', statusFilter: 'COMPLETED', completionFilter: 'completed' }\n    },\n    {\n      name: 'Not Started',\n      filters: { searchText: '', statusFilter: 'DRAFT', completionFilter: 'not-started' }\n    },\n    {\n      name: 'Overdue',\n      filters: { searchText: '', statusFilter: 'all', completionFilter: 'all' }\n    }\n  ], []);\n\n  /**\n   * Apply a filter preset\n   */\n  const applyPreset = useCallback((presetName) => {\n    const preset = filterPresets.find(p => p.name === presetName);\n    if (preset) {\n      applyFilters(preset.filters);\n    }\n  }, [filterPresets, applyFilters]);\n\n  /**\n   * Get current filter summary\n   */\n  const filterSummary = useMemo(() => {\n    const activeFilters = [];\n    \n    if (searchText) {\n      activeFilters.push(`Search: \"${searchText}\"`);\n    }\n    if (statusFilter !== 'all') {\n      activeFilters.push(`Status: ${statusFilter.replace('_', ' ')}`);\n    }\n    if (completionFilter !== 'all') {\n      activeFilters.push(`Completion: ${completionFilter.replace('-', ' ')}`);\n    }\n\n    return {\n      activeFilters,\n      hasActiveFilters: activeFilters.length > 0,\n      totalFiltered: filteredWorkflows.length,\n      totalOriginal: workflows.length\n    };\n  }, [searchText, statusFilter, completionFilter, filteredWorkflows.length, workflows.length]);\n\n  /**\n   * Save current filters to localStorage\n   */\n  const saveFilters = useCallback(() => {\n    const filters = {\n      searchText,\n      statusFilter,\n      completionFilter\n    };\n    localStorage.setItem('workflowFilters', JSON.stringify(filters));\n  }, [searchText, statusFilter, completionFilter]);\n\n  /**\n   * Load filters from localStorage\n   */\n  const loadSavedFilters = useCallback(() => {\n    try {\n      const saved = localStorage.getItem('workflowFilters');\n      if (saved) {\n        const filters = JSON.parse(saved);\n        applyFilters(filters);\n      }\n    } catch (error) {\n      console.warn('Failed to load saved filters:', error);\n    }\n  }, [applyFilters]);\n\n  // Sync filters with URL parameters\n  useEffect(() => {\n    const params = new URLSearchParams();\n    \n    if (searchText) {\n      params.set('search', searchText);\n    }\n    if (statusFilter !== 'all') {\n      params.set('status', statusFilter);\n    }\n    if (completionFilter !== 'all') {\n      params.set('completion', completionFilter);\n    }\n\n    // Update URL without triggering navigation\n    setSearchParams(params, { replace: true });\n  }, [searchText, statusFilter, completionFilter, setSearchParams]);\n\n  return {\n    // Filter state\n    searchText,\n    statusFilter,\n    completionFilter,\n    \n    // Filtered data\n    filteredWorkflows,\n    \n    // Filter actions\n    updateSearchText,\n    updateStatusFilter,\n    updateCompletionFilter,\n    clearAllFilters,\n    applyFilters,\n    \n    // Presets\n    filterPresets,\n    applyPreset,\n    \n    // Persistence\n    saveFilters,\n    loadSavedFilters,\n    \n    // Summary\n    filterSummary\n  };\n};","import { useState, useEffect, useCallback } from 'react';\n\nimport { \n  isAuthenticated, \n  isAdmin, \n  isJvcUser, \n  isCqsUser, \n  isTechUser, \n  isPlantUser, \n  isViewer,\n  hasRole,\n  getPrimaryRoleType,\n  getUserPlantCodes,\n  getPrimaryPlantCode,\n  getCurrentUser\n} from '../services/auth';\nimport RBACService from '../services/rbacService';\n\n/**\n * Custom hook for role-based access control\n * Provides reactive access to user roles and permissions\n */\nexport const useRoleBasedAccess = () => {\n  const [accessSummary, setAccessSummary] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Load user access summary\n  const loadAccessSummary = useCallback(async () => {\n    if (!isAuthenticated()) {\n      setAccessSummary(null);\n      setLoading(false);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const summary = await RBACService.getUserAccessSummary();\n      setAccessSummary(summary);\n    } catch (err) {\n      console.warn('Failed to load access summary, using fallback:', err);\n      setError(err);\n      \n      // Use fallback data\n      const fallbackSummary = RBACService.getFallbackAccessSummary();\n      setAccessSummary(fallbackSummary);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    loadAccessSummary();\n  }, [loadAccessSummary]);\n\n  // Check screen access\n  const checkScreenAccess = useCallback(async (screenRoute) => {\n    try {\n      return await RBACService.hasScreenAccess(screenRoute);\n    } catch (error) {\n      console.warn('Screen access check failed, using fallback:', error);\n      return RBACService.getFallbackScreenAccess(screenRoute);\n    }\n  }, []);\n\n  // Check data access\n  const checkDataAccess = useCallback(async (dataType, context = {}) => {\n    try {\n      return await RBACService.hasDataAccess(dataType, context);\n    } catch (error) {\n      console.warn('Data access check failed, using fallback:', error);\n      return RBACService.getFallbackDataAccess(dataType, context);\n    }\n  }, []);\n\n  // Check plant data access\n  const checkPlantDataAccess = useCallback(async (dataType, plantCode, context = {}) => {\n    try {\n      return await RBACService.hasPlantDataAccess(dataType, plantCode, context);\n    } catch (error) {\n      console.warn('Plant data access check failed, using fallback:', error);\n      return RBACService.getFallbackPlantDataAccess(dataType, plantCode, context);\n    }\n  }, []);\n\n  // Make access decision\n  const makeAccessDecision = useCallback(async (resourceType, resourceId, action, context = {}) => {\n    try {\n      return await RBACService.makeAccessDecision(resourceType, resourceId, action, context);\n    } catch (error) {\n      console.warn('Access decision failed, using fallback:', error);\n      return RBACService.getFallbackAccessDecision(resourceType, resourceId, action, context);\n    }\n  }, []);\n\n  // Filter data by plant access\n  const filterByPlantAccess = useCallback((data, plantExtractor) => {\n    return RBACService.filterDataByPlantAccess(data, plantExtractor);\n  }, []);\n\n  return {\n    // Loading states\n    loading,\n    error,\n    \n    // User info\n    isAuthenticated: isAuthenticated(),\n    currentUser: getCurrentUser(),\n    primaryRole: getPrimaryRoleType(),\n    userPlants: getUserPlantCodes(),\n    primaryPlant: getPrimaryPlantCode(),\n    \n    // Role checks\n    isAdmin: isAdmin(),\n    isJvcUser: isJvcUser(),\n    isCqsUser: isCqsUser(),\n    isTechUser: isTechUser(),\n    isPlantUser: isPlantUser(),\n    isViewer: isViewer(),\n    \n    // Access summary\n    accessSummary,\n    \n    // Helper functions\n    hasRole: (role) => hasRole(role),\n    hasAnyRole: (roles) => roles.some(role => hasRole(role)),\n    hasAllRoles: (roles) => roles.every(role => hasRole(role)),\n    \n    // Async access checks\n    checkScreenAccess,\n    checkDataAccess,\n    checkPlantDataAccess,\n    makeAccessDecision,\n    \n    // Data filtering\n    filterByPlantAccess,\n    \n    // Refresh function\n    refresh: loadAccessSummary\n  };\n};\n\n/**\n * Hook for checking specific screen access\n */\nexport const useScreenAccess = (screenRoute) => {\n  const [hasAccess, setHasAccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const checkAccess = async () => {\n      if (!isAuthenticated() || !screenRoute) {\n        setHasAccess(false);\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const access = await RBACService.hasScreenAccess(screenRoute);\n        setHasAccess(access);\n      } catch (err) {\n        console.warn('Screen access check failed:', err);\n        setError(err);\n        \n        // Use fallback\n        const fallbackAccess = RBACService.getFallbackScreenAccess(screenRoute);\n        setHasAccess(fallbackAccess);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAccess();\n  }, [screenRoute]);\n\n  return { hasAccess, loading, error };\n};\n\n/**\n * Hook for checking data access\n */\nexport const useDataAccess = (dataType, context = {}) => {\n  const [hasAccess, setHasAccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const checkAccess = async () => {\n      if (!isAuthenticated() || !dataType) {\n        setHasAccess(false);\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const access = await RBACService.hasDataAccess(dataType, context);\n        setHasAccess(access);\n      } catch (err) {\n        console.warn('Data access check failed:', err);\n        setError(err);\n        \n        // Use fallback\n        const fallbackAccess = RBACService.getFallbackDataAccess(dataType, context);\n        setHasAccess(fallbackAccess);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAccess();\n  }, [dataType, context]);\n\n  return { hasAccess, loading, error };\n};\n\n/**\n * Hook for plant-specific data filtering\n */\nexport const usePlantDataFilter = (data, plantExtractor) => {\n  const [filteredData, setFilteredData] = useState([]);\n\n  useEffect(() => {\n    if (!Array.isArray(data)) {\n      setFilteredData([]);\n      return;\n    }\n\n    const filtered = RBACService.filterDataByPlantAccess(data, plantExtractor);\n    setFilteredData(filtered);\n  }, [data, plantExtractor]);\n\n  return filteredData;\n};\n\nexport default useRoleBasedAccess;","/**\n * SecureForm Component\n * \n * A wrapper component that provides enhanced security features for forms including:\n * - Input validation and sanitization\n * - XSS prevention\n * - Security audit logging\n * - Real-time validation feedback\n * \n * @component\n * @since 1.0.0\n * @author QRMFG Security Team\n */\n\nimport { Form, Input, message } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { \n  InputSanitizer, \n  ValidationRules, \n  useInputValidation, \n  SecurityAuditLogger \n} from '../utils/inputValidation';\n\nconst { TextArea } = Input;\n\n/**\n * SecureInput Component - Enhanced input with validation and sanitization\n */\nconst SecureInput = React.memo(({ \n  value, \n  onChange, \n  validationType = 'text',\n  componentName = 'SecureInput',\n  fieldName = 'input',\n  onValidationChange,\n  ...props \n}) => {\n  const { validateInput } = useInputValidation();\n  const [validationState, setValidationState] = useState({\n    isValid: true,\n    errors: [],\n    wasModified: false\n  });\n\n  const handleChange = useCallback((e) => {\n    const inputValue = e.target.value;\n    const validation = validateInput(inputValue, validationType);\n    \n    setValidationState(validation);\n    \n    // Log potential security issues\n    if (validation.wasModified) {\n      SecurityAuditLogger.logXSSAttempt(\n        inputValue,\n        validation.sanitizedValue,\n        componentName,\n        fieldName\n      );\n      \n      message.warning('Input was sanitized for security reasons');\n    }\n    \n    // Call parent onChange with sanitized value\n    if (onChange) {\n      onChange({\n        ...e,\n        target: {\n          ...e.target,\n          value: validation.sanitizedValue\n        }\n      });\n    }\n    \n    // Notify parent of validation state\n    if (onValidationChange) {\n      onValidationChange(validation);\n    }\n  }, [onChange, validationType, componentName, fieldName, onValidationChange, validateInput]);\n\n  return (\n    <Input\n      {...props}\n      value={value}\n      onChange={handleChange}\n      status={validationState.isValid ? '' : 'error'}\n      title={validationState.errors.join(', ')}\n    />\n  );\n});\n\n/**\n * SecureTextArea Component - Enhanced textarea with validation and sanitization\n */\nconst SecureTextArea = React.memo(({ \n  value, \n  onChange, \n  validationType = 'richtext',\n  componentName = 'SecureTextArea',\n  fieldName = 'textarea',\n  onValidationChange,\n  ...props \n}) => {\n  const { validateInput } = useInputValidation();\n  const [validationState, setValidationState] = useState({\n    isValid: true,\n    errors: [],\n    wasModified: false\n  });\n\n  const handleChange = useCallback((e) => {\n    const inputValue = e.target.value;\n    const validation = validateInput(inputValue, validationType);\n    \n    setValidationState(validation);\n    \n    // Log potential security issues\n    if (validation.wasModified) {\n      SecurityAuditLogger.logXSSAttempt(\n        inputValue,\n        validation.sanitizedValue,\n        componentName,\n        fieldName\n      );\n      \n      message.warning('Input was sanitized for security reasons');\n    }\n    \n    // Call parent onChange with sanitized value\n    if (onChange) {\n      onChange({\n        ...e,\n        target: {\n          ...e.target,\n          value: validation.sanitizedValue\n        }\n      });\n    }\n    \n    // Notify parent of validation state\n    if (onValidationChange) {\n      onValidationChange(validation);\n    }\n  }, [onChange, validationType, componentName, fieldName, onValidationChange, validateInput]);\n\n  return (\n    <TextArea\n      {...props}\n      value={value}\n      onChange={handleChange}\n      status={validationState.isValid ? '' : 'error'}\n      title={validationState.errors.join(', ')}\n    />\n  );\n});\n\n/**\n * SecureForm Component - Enhanced form with security features\n */\nconst SecureForm = React.memo(({ \n  children, \n  onFinish, \n  componentName = 'SecureForm',\n  enableSecurityLogging = true,\n  ...props \n}) => {\n  const [securityEvents, setSecurityEvents] = useState([]);\n\n  // Handle form submission with security validation\n  const handleFinish = useCallback(async (values) => {\n    try {\n      // Sanitize all form values before submission\n      const sanitizedValues = {};\n      const securityIssues = [];\n\n      Object.keys(values).forEach(key => {\n        const originalValue = values[key];\n        \n        if (typeof originalValue === 'string') {\n          const sanitizedValue = InputSanitizer.sanitizeText(originalValue);\n          sanitizedValues[key] = sanitizedValue;\n          \n          if (sanitizedValue !== originalValue) {\n            securityIssues.push({\n              field: key,\n              originalValue: originalValue.substring(0, 50),\n              sanitizedValue: sanitizedValue.substring(0, 50)\n            });\n          }\n        } else {\n          sanitizedValues[key] = originalValue;\n        }\n      });\n\n      // Log security issues if any\n      if (securityIssues.length > 0 && enableSecurityLogging) {\n        securityIssues.forEach(issue => {\n          SecurityAuditLogger.logXSSAttempt(\n            issue.originalValue,\n            issue.sanitizedValue,\n            componentName,\n            issue.field\n          );\n        });\n        \n        message.warning(`${securityIssues.length} field(s) were sanitized for security`);\n      }\n\n      // Call original onFinish with sanitized values\n      if (onFinish) {\n        await onFinish(sanitizedValues);\n      }\n    } catch (error) {\n      console.error('SecureForm submission error:', error);\n      message.error('Form submission failed');\n      throw error;\n    }\n  }, [onFinish, componentName, enableSecurityLogging]);\n\n  // Track security events\n  useEffect(() => {\n    if (enableSecurityLogging) {\n      const events = SecurityAuditLogger.getRecentEvents();\n      setSecurityEvents(events.slice(-10)); // Keep last 10 events\n    }\n  }, [enableSecurityLogging]);\n\n  return (\n    <Form\n      {...props}\n      onFinish={handleFinish}\n      validateTrigger={['onChange', 'onBlur']}\n    >\n      {children}\n      \n      {/* Development mode security info */}\n      {process.env.NODE_ENV === 'development' && securityEvents.length > 0 && (\n        <div style={{ \n          marginTop: 16, \n          padding: 8, \n          background: '#fff7e6', \n          border: '1px solid #ffd591',\n          borderRadius: 4,\n          fontSize: 12\n        }}>\n          <strong>Security Events (Dev Mode):</strong>\n          <ul style={{ margin: '4px 0', paddingLeft: 16 }}>\n            {securityEvents.slice(-3).map((event, index) => (\n              <li key={index}>\n                {event.type} in {event.component}.{event.field} at {new Date(event.timestamp).toLocaleTimeString()}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </Form>\n  );\n});\n\n// Form.Item wrapper with enhanced validation\nconst SecureFormItem = React.memo(({ \n  children, \n  validationType = 'text',\n  name,\n  rules = [],\n  ...props \n}) => {\n  // Combine custom rules with security validation rules\n  const securityRules = React.useMemo(() => {\n    let baseRules = [];\n    \n    switch (validationType) {\n      case 'username':\n        baseRules = ValidationRules.username;\n        break;\n      case 'email':\n        baseRules = ValidationRules.email;\n        break;\n      case 'password':\n        baseRules = ValidationRules.password;\n        break;\n      case 'projectCode':\n        baseRules = ValidationRules.projectCode;\n        break;\n      case 'materialCode':\n        baseRules = ValidationRules.materialCode;\n        break;\n      case 'plantCode':\n        baseRules = ValidationRules.plantCode;\n        break;\n      case 'text':\n        baseRules = ValidationRules.text(false, 0, 255);\n        break;\n      case 'richtext':\n        baseRules = ValidationRules.richText(false, 0, 1000);\n        break;\n      default:\n        baseRules = [];\n    }\n    \n    return [...baseRules, ...rules];\n  }, [validationType, rules]);\n\n  return (\n    <Form.Item\n      {...props}\n      name={name}\n      rules={securityRules}\n    >\n      {children}\n    </Form.Item>\n  );\n});\n\n// PropTypes\nSecureInput.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  validationType: PropTypes.oneOf(['text', 'username', 'email', 'sql', 'filename', 'url']),\n  componentName: PropTypes.string,\n  fieldName: PropTypes.string,\n  onValidationChange: PropTypes.func\n};\n\nSecureTextArea.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  validationType: PropTypes.oneOf(['text', 'richtext']),\n  componentName: PropTypes.string,\n  fieldName: PropTypes.string,\n  onValidationChange: PropTypes.func\n};\n\nSecureForm.propTypes = {\n  children: PropTypes.node.isRequired,\n  onFinish: PropTypes.func,\n  componentName: PropTypes.string,\n  enableSecurityLogging: PropTypes.bool\n};\n\nSecureFormItem.propTypes = {\n  children: PropTypes.node.isRequired,\n  validationType: PropTypes.string,\n  name: PropTypes.string,\n  rules: PropTypes.array\n};\n\n// Display names\nSecureInput.displayName = 'SecureInput';\nSecureTextArea.displayName = 'SecureTextArea';\nSecureForm.displayName = 'SecureForm';\nSecureFormItem.displayName = 'SecureFormItem';\n\n// Exports\nexport { SecureInput, SecureTextArea, SecureFormItem };\nexport default SecureForm;","/**\r\n * Utility functions for questionnaire field calculations\r\n * Handles CQS auto-populated field exclusions and progress calculations\r\n */\r\n\r\n/**\r\n * Get the default questionnaire template with CQS field markings\r\n * This should match the template structure in PlantQuestionnaire.js\r\n */\r\nexport const getDefaultQuestionnaireTemplate = () => [\r\n  {\r\n    title: 'General',\r\n    fields: [\r\n      { name: 'msds_available', isCqsAutoPopulated: false },\r\n      { name: 'missing_info', isCqsAutoPopulated: false },\r\n      { name: 'sourcing_asked', isCqsAutoPopulated: false },\r\n      { name: 'cas_available', isCqsAutoPopulated: false },\r\n      { name: 'mixture_ingredients', isCqsAutoPopulated: false },\r\n      { name: 'composition_percentage', isCqsAutoPopulated: false },\r\n      { name: 'total_percentage_1', isCqsAutoPopulated: false },\r\n      { name: 'total_percentage', isCqsAutoPopulated: false }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Physical',\r\n    fields: [\r\n      { name: 'is_corrosive', isCqsAutoPopulated: true },\r\n      { name: 'corrosive_storage', isCqsAutoPopulated: false },\r\n      { name: 'highly_toxic', isCqsAutoPopulated: true },\r\n      { name: 'toxic_powder_handling', isCqsAutoPopulated: false },\r\n      { name: 'crushing_facilities', isCqsAutoPopulated: false },\r\n      { name: 'heating_facilities', isCqsAutoPopulated: false },\r\n      { name: 'paste_preparation', isCqsAutoPopulated: false }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Flammability and Explosivity',\r\n    fields: [\r\n      { name: 'flash_point_65', isCqsAutoPopulated: true },\r\n      { name: 'petroleum_class', isCqsAutoPopulated: true },\r\n      { name: 'storage_license', isCqsAutoPopulated: false },\r\n      { name: 'ccoe_license', isCqsAutoPopulated: false },\r\n      { name: 'flash_point_21', isCqsAutoPopulated: true },\r\n      { name: 'flammable_infrastructure', isCqsAutoPopulated: false }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Toxicity',\r\n    fields: [\r\n      { name: 'ld50_oral', isCqsAutoPopulated: true },\r\n      { name: 'ld50_dermal', isCqsAutoPopulated: true },\r\n      { name: 'lc50_inhalation', isCqsAutoPopulated: true },\r\n      { name: 'exposure_minimization', isCqsAutoPopulated: false },\r\n      { name: 'carcinogenic', isCqsAutoPopulated: true },\r\n      { name: 'carcinogenic_control', isCqsAutoPopulated: false }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Process Safety Management',\r\n    fields: [\r\n      { name: 'psm_tier1_outdoor', isCqsAutoPopulated: true },\r\n      { name: 'psm_tier1_indoor', isCqsAutoPopulated: true },\r\n      { name: 'psm_tier2_outdoor', isCqsAutoPopulated: true },\r\n      { name: 'psm_tier2_indoor', isCqsAutoPopulated: true }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Storage and Handling',\r\n    fields: [\r\n      { name: 'storage_conditions_stores', isCqsAutoPopulated: false },\r\n      { name: 'storage_conditions_floor', isCqsAutoPopulated: false },\r\n      { name: 'closed_loop_required', isCqsAutoPopulated: false },\r\n      { name: 'work_permit_available', isCqsAutoPopulated: false },\r\n      { name: 'procedures_details', isCqsAutoPopulated: false }\r\n    ]\r\n  },\r\n  {\r\n    title: 'PPE',\r\n    fields: [\r\n      { name: 'recommended_ppe', isCqsAutoPopulated: true },\r\n      { name: 'ppe_in_use', isCqsAutoPopulated: false },\r\n      { name: 'ppe_procurement_date', isCqsAutoPopulated: false }\r\n    ]\r\n  },\r\n  {\r\n    title: 'First Aid',\r\n    fields: [\r\n      { name: 'is_poisonous', isCqsAutoPopulated: true },\r\n      { name: 'antidote_specified', isCqsAutoPopulated: true },\r\n      { name: 'antidote_available', isCqsAutoPopulated: false },\r\n      { name: 'antidote_source', isCqsAutoPopulated: false },\r\n      { name: 'first_aid_capability', isCqsAutoPopulated: false }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Statutory',\r\n    fields: [\r\n      { name: 'cmvr_listed', isCqsAutoPopulated: true },\r\n      { name: 'msihc_listed', isCqsAutoPopulated: true },\r\n      { name: 'factories_act_listed', isCqsAutoPopulated: true },\r\n      { name: 'permissible_concentration', isCqsAutoPopulated: false },\r\n      { name: 'monitoring_details', isCqsAutoPopulated: false }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Others',\r\n    fields: [\r\n      { name: 'plant_inputs_required', isCqsAutoPopulated: false },\r\n      { name: 'gaps_identified', isCqsAutoPopulated: false },\r\n      { name: 'additional_input_1', isCqsAutoPopulated: false },\r\n      { name: 'additional_input_2', isCqsAutoPopulated: false }\r\n    ]\r\n  }\r\n];\r\n\r\n/**\r\n * Calculate correct field counts including ALL fields (both CQS and plant fields)\r\n * @param {Object} plantInputs - The plant input data\r\n * @param {Array} template - Optional template, uses default if not provided\r\n * @returns {Object} - { totalFields, completedFields, completionPercentage }\r\n */\r\nexport const calculateCorrectFieldCounts = (plantInputs = {}, template = null) => {\r\n  const questionnaireTemplate = template || getDefaultQuestionnaireTemplate();\r\n  \r\n  let totalFields = 0;\r\n  let completedFields = 0;\r\n\r\n  questionnaireTemplate.forEach(step => {\r\n    const stepFields = step.fields || [];\r\n    \r\n    // Count ALL fields (both CQS and plant fields)\r\n    totalFields += stepFields.length;\r\n\r\n    // Count completed fields (any field with a value)\r\n    const completedStepFields = stepFields.filter(field => {\r\n      const value = plantInputs[field.name];\r\n      if (Array.isArray(value)) {\r\n        return value.length > 0;\r\n      }\r\n      return value && value !== '' && value !== null && value !== undefined;\r\n    });\r\n\r\n    completedFields += completedStepFields.length;\r\n  });\r\n\r\n  const completionPercentage = totalFields > 0 \r\n    ? Math.round((completedFields / totalFields) * 100) \r\n    : 0;\r\n\r\n  return {\r\n    totalFields,\r\n    completedFields,\r\n    completionPercentage,\r\n    // Keep backward compatibility\r\n    totalUserEditableFields: totalFields,\r\n    completedUserEditableFields: completedFields\r\n  };\r\n};\r\n\r\n/**\r\n * Get total field counts for the questionnaire template\r\n * @param {Array} template - Optional template, uses default if not provided\r\n * @returns {Object} - { totalFields, totalUserEditableFields, totalCqsFields }\r\n */\r\nexport const getTemplateFieldCounts = (template = null) => {\r\n  const questionnaireTemplate = template || getDefaultQuestionnaireTemplate();\r\n  \r\n  let totalFields = 0;\r\n  let totalUserEditableFields = 0;\r\n  let totalCqsFields = 0;\r\n\r\n  questionnaireTemplate.forEach(step => {\r\n    const stepFields = step.fields || [];\r\n    totalFields += stepFields.length;\r\n    \r\n    stepFields.forEach(field => {\r\n      if (field.isCqsAutoPopulated || field.disabled) {\r\n        totalCqsFields++;\r\n      } else {\r\n        totalUserEditableFields++;\r\n      }\r\n    });\r\n  });\r\n\r\n  return {\r\n    totalFields, // 87 total fields\r\n    totalUserEditableFields, // 53 plant fields\r\n    totalCqsFields // 34 CQS fields\r\n  };\r\n};\r\n\r\n/**\r\n * Recalculate workflow progress with correct field counts\r\n * @param {Object} workflow - The workflow object from backend\r\n * @param {Object} plantInputs - The plant input data (optional)\r\n * @returns {Object} - Updated workflow with correct field counts\r\n */\r\nexport const recalculateWorkflowProgress = (workflow, plantInputs = null) => {\r\n  // If we have plant inputs, calculate based on actual data\r\n  if (plantInputs) {\r\n    const { totalFields, completedFields, completionPercentage } = \r\n      calculateCorrectFieldCounts(plantInputs);\r\n    \r\n    return {\r\n      ...workflow,\r\n      totalFields,\r\n      completedFields,\r\n      completionPercentage\r\n    };\r\n  }\r\n\r\n  // Otherwise, just fix the total field count and recalculate percentage\r\n  const { totalFields } = getTemplateFieldCounts();\r\n  \r\n  // Assume the backend's completed count is correct but total is wrong\r\n  const backendCompletedFields = workflow.completedFields || 0;\r\n  const correctedCompletionPercentage = totalFields > 0 \r\n    ? Math.round((backendCompletedFields / totalFields) * 100) \r\n    : 0;\r\n\r\n  return {\r\n    ...workflow,\r\n    totalFields, // Now uses 87 total fields instead of 53\r\n    completionPercentage: correctedCompletionPercentage\r\n  };\r\n};","import apiClient from '../api/client';\nimport { getToken, isAuthenticated } from '../services/auth';\n\n/**\n * User API service providing user management functionality\n * Migrated to use unified APIClient with standardized error handling\n *\n * @namespace userAPI\n */\nexport const userAPI = {\n  /**\n   * Get current user's plant assignments from backend API\n   * @param {string} username - Username to get plant assignments for\n   * @param {Object} options - Additional options including signal for AbortController\n   * @returns {Promise<Object>} Plant assignment data\n   */\n  getUserPlantAssignments: async (username, options = {}) => {\n    try {\n      console.log('Getting plant assignments for user:', username);\n      console.log('Is authenticated:', isAuthenticated());\n\n      // Check if user is authenticated first\n      if (!isAuthenticated()) {\n        console.warn('User is not authenticated, cannot get plant assignments');\n        return {\n          assignedPlants: [],\n          primaryPlant: null,\n          effectivePlant: null,\n          isPlantUser: false\n        };\n      }\n\n      // Primary method: Get plant info from JWT token validation\n      const token = getToken();\n      console.log('Retrieved token:', token ? 'Token found' : 'No token found');\n\n      if (token) {\n        try {\n          const validationResponse = await apiClient.post('/auth/validate', { token }, options);\n          console.log('Token validation response:', validationResponse);\n          console.log('Plant codes in token:', validationResponse.plantCodes);\n          console.log('Primary plant in token:', validationResponse.primaryPlant);\n          console.log('Is plant user:', validationResponse.isPlantUser);\n\n          if (validationResponse.valid) {\n            // Check if we have plant data in the token\n            if (validationResponse.plantCodes && validationResponse.plantCodes.length > 0) {\n              console.log('Plant assignments from token:', validationResponse);\n              return {\n                assignedPlants: validationResponse.plantCodes || [],\n                primaryPlant: validationResponse.primaryPlant || null,\n                effectivePlant: validationResponse.primaryPlant || (validationResponse.plantCodes && validationResponse.plantCodes[0]) || null,\n                isPlantUser: validationResponse.isPlantUser || false\n              };\n            }\n\n            // Handle case where user has primaryPlant but empty plantCodes array\n            if (validationResponse.primaryPlant && validationResponse.isPlantUser) {\n              console.log('User has primary plant but empty plantCodes, using primary plant as assigned plant:', validationResponse.primaryPlant);\n              return {\n                assignedPlants: [validationResponse.primaryPlant],\n                primaryPlant: validationResponse.primaryPlant,\n                effectivePlant: validationResponse.primaryPlant,\n                isPlantUser: validationResponse.isPlantUser || false\n              };\n            }\n\n            // If no plant data in token but token is valid, user might not have plants assigned\n            console.log('Token is valid but no plant data found in token');\n          }\n        } catch (tokenError) {\n          console.warn('Failed to validate token for plant assignments:', tokenError);\n        }\n      }\n\n      // Fallback: try to get from stored user data (check multiple storage keys)\n      const possibleKeys = ['userData', 'qrmfg_user_data', 'user_info'];\n      for (const key of possibleKeys) {\n        const storedUserData = localStorage.getItem(key) || sessionStorage.getItem(key);\n        if (storedUserData) {\n          try {\n            const userData = JSON.parse(storedUserData);\n            if (userData.plantCodes || userData.assignedPlants) {\n              console.log('Plant assignments from stored data:', userData);\n              return {\n                assignedPlants: userData.plantCodes || userData.assignedPlants || [],\n                primaryPlant: userData.primaryPlant || null,\n                effectivePlant: userData.primaryPlant || ((userData.plantCodes || userData.assignedPlants) && (userData.plantCodes || userData.assignedPlants)[0]) || null,\n                isPlantUser: userData.isPlantUser || false\n              };\n            }\n          } catch (parseError) {\n            console.warn(`Failed to parse stored user data from ${key}:`, parseError);\n          }\n        }\n      }\n\n      // Last resort: Try admin endpoints only if user might have admin access\n      try {\n        // Only try admin endpoints if we think the user might be an admin\n        const adminToken = getToken();\n        const validationResponse = await apiClient.post('/auth/validate', { token: adminToken }, options);\n        if (validationResponse.valid && validationResponse.isAdmin) {\n          console.log('User appears to be admin, trying admin endpoints...');\n\n          const userDetails = await apiClient.get('/admin/users', options);\n          const currentUser = userDetails.users?.find(user => user.username === username);\n\n          if (currentUser && currentUser.assignedPlants) {\n            console.log('Admin endpoint: Using user details for plant assignments:', currentUser);\n\n            return {\n              assignedPlants: currentUser.assignedPlants || [],\n              primaryPlant: currentUser.primaryPlant || null,\n              effectivePlant: currentUser.primaryPlant || (currentUser.assignedPlants && currentUser.assignedPlants[0]) || null,\n              isPlantUser: (currentUser.assignedPlants && currentUser.assignedPlants.length > 0) || false\n            };\n          }\n        }\n      } catch (adminError) {\n        console.warn('Admin endpoints not accessible (expected for non-admin users):', adminError.message);\n      }\n\n      // If no plant data available, return empty structure\n      console.warn('No plant assignment data available for user:', username);\n      return {\n        assignedPlants: [],\n        primaryPlant: null,\n        effectivePlant: null,\n        isPlantUser: false\n      };\n    } catch (error) {\n      console.error('Error getting user plant assignments:', error);\n      // Return empty structure on error to prevent crashes\n      return {\n        assignedPlants: [],\n        primaryPlant: null,\n        effectivePlant: null,\n        isPlantUser: false\n      };\n    }\n  },\n\n  /**\n   * Update user's plant assignments\n   * @param {string} username - Username to update plant assignments for\n   * @param {Object} plantData - Plant assignment data\n   * @returns {Promise<Object>} Updated plant assignments\n   */\n  updateUserPlantAssignments: (username, plantData) =>\n    apiClient.put(`/admin/users/${encodeURIComponent(username)}/plants`, plantData),\n\n  /**\n   * Check if user is assigned to a specific plant\n   * @param {string} username - Username to check\n   * @param {string} plantCode - Plant code to check assignment for\n   * @returns {Promise<boolean>} True if user is assigned to plant\n   */\n  checkUserPlantAssignment: (username, plantCode) =>\n    apiClient.get(\n      `/admin/users/${encodeURIComponent(username)}/plants/${encodeURIComponent(plantCode)}/check`\n    ),\n\n  /**\n   * Get user information by ID\n   * @param {string} id - User ID\n   * @returns {Promise<Object>} User information\n   */\n  getUserById: id => apiClient.get(`/admin/users/${id}`),\n\n  /**\n   * Get all users (cached for 5 minutes)\n   * @param {Object} options - Additional options including signal for AbortController\n   * @returns {Promise<Array>} Array of all users\n   */\n  getAllUsers: (options = {}) => apiClient.get('/admin/users', {\n    cacheTTL: 5 * 60 * 1000, // Cache for 5 minutes\n    ...options\n  }),\n\n  /**\n   * Get all users without cache (for real-time data)\n   * @param {Object} options - Additional options including signal for AbortController\n   * @returns {Promise<Array>} Array of all users\n   */\n  getAllUsersRealTime: (options = {}) => apiClient.get('/admin/users', {\n    useCache: false,\n    ...options\n  })\n};\n","import apiClient from '../api/client';\n\n/**\n * Workflow API service providing comprehensive workflow management functionality\n * Migrated to use unified APIClient with standardized error handling\n *\n * @namespace workflowAPI\n */\nexport const workflowAPI = {\n  // Dashboard endpoints\n  /**\n   * Get dashboard summary data\n   * @returns {Promise<Object>} Dashboard summary data\n   */\n  getDashboardSummary: () => apiClient.get('/dashboard/summary'),\n\n  /**\n   * Get overdue workflows based on day threshold\n   * @param {number} dayThreshold - Number of days to consider as overdue (default: 3)\n   * @returns {Promise<Array>} Array of overdue workflows\n   */\n  getOverdueWorkflows: (dayThreshold = 3) =>\n    apiClient.get(`/workflows/overdue?days=${dayThreshold}`),\n\n  /**\n   * Get recent workflow activity\n   * @param {number} days - Number of days to look back (default: 7)\n   * @returns {Promise<Array>} Array of recent workflows\n   */\n  getRecentActivity: (days = 7) => apiClient.get(`/workflows/recent/created?days=${days}`),\n\n  /**\n   * Get workflow counts grouped by state\n   * @returns {Promise<Object>} Workflow counts by state\n   */\n  getWorkflowCountsByState: () => apiClient.get('/dashboard/counts-by-state'),\n\n  /**\n   * Get workflows for a specific plant\n   * @param {string} plantName - Name of the plant\n   * @returns {Promise<Array>} Array of workflows for the plant\n   */\n  getWorkflowsByPlant: plantName =>\n    apiClient.get(`/workflows/plant/${encodeURIComponent(plantName)}`),\n\n  // Workflow CRUD operations\n  /**\n   * Create a new workflow\n   * @param {Object} workflowData - Workflow data to create\n   * @returns {Promise<Object>} Created workflow object\n   */\n  createWorkflow: workflowData => apiClient.post('/workflows', workflowData),\n\n  /**\n   * Get workflow by ID\n   * @param {string} id - Workflow ID\n   * @returns {Promise<Object>} Workflow object\n   */\n  getWorkflow: id => apiClient.get(`/workflows/${id}`),\n\n  /**\n   * Update workflow by ID\n   * @param {string} id - Workflow ID\n   * @param {Object} workflowData - Updated workflow data\n   * @returns {Promise<Object>} Updated workflow object\n   */\n  updateWorkflow: (id, workflowData) => apiClient.put(`/workflows/${id}`, workflowData),\n\n  /**\n   * Delete workflow by ID\n   * @param {string} id - Workflow ID\n   * @returns {Promise<void>} Promise that resolves when workflow is deleted\n   */\n  deleteWorkflow: id => apiClient.delete(`/workflows/${id}`),\n\n  // Workflow state management\n  /**\n   * Transition workflow to a new state\n   * @param {string} id - Workflow ID\n   * @param {string} newState - New state to transition to\n   * @param {string} comment - Comment for the transition\n   * @returns {Promise<Object>} Updated workflow object\n   */\n  transitionWorkflowState: (id, newState, comment) =>\n    apiClient.put(`/workflows/${id}/transition`, { newState, comment }),\n\n  /**\n   * Extend workflow deadline\n   * @param {string} id - Workflow ID\n   * @param {Object} extensionData - Extension data including new deadline\n   * @returns {Promise<Object>} Updated workflow object\n   */\n  extendWorkflow: (id, extensionData) => apiClient.put(`/workflows/${id}/extend`, extensionData),\n\n  /**\n   * Complete workflow\n   * @param {string} id - Workflow ID\n   * @param {Object} completionData - Completion data\n   * @returns {Promise<Object>} Completed workflow object\n   */\n  completeWorkflow: (id, completionData) =>\n    apiClient.put(`/workflows/${id}/complete`, completionData),\n\n  /**\n   * Smart plant extension - only extend to plants that don't have workflows yet\n   * Enhanced to handle document reuse information and provide detailed results\n   * @param {Object} extensionData - Extension data with projectCode, materialCode, and plantCodes\n   * @returns {Promise<Object>} Smart extension result with created, duplicate, failed workflows, and document reuse information\n   */\n  extendToMultiplePlantsSmartly: async (extensionData) => {\n    try {\n      const result = await apiClient.withRetry(\n        () => apiClient.post('/workflows/extend-to-plants', extensionData),\n        3, // maxRetries\n        1000 // baseDelay in ms\n      );\n\n      // Enhanced result includes document reuse information\n      return {\n        ...result,\n        documentReuse: result.documentReuse || {\n          totalReusedDocuments: 0,\n          reusedDocuments: [],\n          reuseStrategy: 'NONE',\n          sourceDescription: 'No documents available for reuse'\n        }\n      };\n    } catch (error) {\n      console.error('[WorkflowAPI] Smart extension failed:', error);\n      throw {\n        ...error,\n        context: 'SMART_PLANT_EXTENSION',\n        extensionData\n      };\n    }\n  },\n\n  // Workflow search and filtering\n  /**\n   * Search workflows with advanced filters\n   * @param {Object} searchParams - Search parameters and filters\n   * @returns {Promise<Array>} Array of matching workflows\n   */\n  searchWorkflows: searchParams => apiClient.post('/workflows/search', searchParams),\n\n  /**\n   * Get workflows by state\n   * @param {string} state - Workflow state\n   * @returns {Promise<Array>} Array of workflows in the specified state\n   */\n  getWorkflowsByState: state => apiClient.get(`/workflows/state/${state}`),\n\n  /**\n   * Get workflows initiated by a specific user\n   * @param {string} username - Username of the initiator\n   * @returns {Promise<Array>} Array of workflows initiated by the user\n   */\n  getWorkflowsByUser: username =>\n    apiClient.get(`/workflows/initiated-by/${encodeURIComponent(username)}`),\n\n  // Workflow validation\n  canTransitionTo: (id, newState) => apiClient.get(`/workflows/${id}/can-transition/${newState}`),\n\n  isReadyForCompletion: id => apiClient.get(`/workflows/${id}/ready-for-completion`),\n\n  checkWorkflowExists: (projectCode, materialCode, plantCode) =>\n    apiClient.get(\n      `/workflows/check-exists?projectCode=${encodeURIComponent(projectCode)}&materialCode=${encodeURIComponent(materialCode)}&plantCode=${encodeURIComponent(plantCode)}`\n    ),\n\n  // Workflow statistics\n  getWorkflowStats: timeRange => apiClient.get(`/workflows/stats?range=${timeRange}`),\n\n  getCompletionRateByPlant: () => apiClient.get('/workflows/completion-rate-by-plant'),\n\n  getWorkflowCompletionTrend: (months = 6) =>\n    apiClient.get(`/workflows/completion-trend?months=${months}`),\n\n  // State-based queries\n  getPendingWorkflows: () => apiClient.get('/workflows/pending'),\n\n  getWorkflowsWithOpenQueries: () => apiClient.get('/workflows/with-open-queries'),\n\n  // Count endpoints\n  getCountByState: state => apiClient.get(`/workflows/stats/count-by-state/${state}`),\n\n  getOverdueCount: () => apiClient.get('/workflows/stats/overdue-count'),\n\n  getWorkflowsWithOpenQueriesCount: () => apiClient.get('/workflows/stats/with-open-queries-count'),\n\n  // Recent workflows\n  getRecentlyCreated: (days = 7) => apiClient.get(`/workflows/recent/created?days=${days}`),\n\n  getRecentlyCompleted: (days = 7) => apiClient.get(`/workflows/recent/completed?days=${days}`),\n\n  // Questionnaire and draft management\n  saveDraftResponses: (workflowId, draftData) =>\n    apiClient.post(`/workflows/${workflowId}/draft-responses`, draftData),\n\n  getDraftResponses: workflowId => apiClient.get(`/workflows/${workflowId}/draft-responses`),\n\n  submitQuestionnaire: (workflowId, questionnaireData) =>\n    apiClient.post(`/workflows/${workflowId}/submit-questionnaire`, questionnaireData),\n\n  // Document management\n  getWorkflowDocuments: workflowId => apiClient.get(`/workflows/${workflowId}/documents`),\n\n  // Enhanced document management - get all related documents (workflow + query documents)\n  getAllWorkflowRelatedDocuments: async (workflowId) => {\n    try {\n      return await apiClient.withRetry(\n        () => apiClient.get(`/workflows/${workflowId}/documents/all`),\n        2, // maxRetries for document operations\n        500 // shorter delay for document operations\n      );\n    } catch (error) {\n      console.error(`[WorkflowAPI] Failed to get all documents for workflow ${workflowId}:`, error);\n      throw {\n        ...error,\n        context: 'GET_ALL_WORKFLOW_DOCUMENTS',\n        workflowId\n      };\n    }\n  },\n\n  // Export workflow documents as ZIP with retry functionality\n  exportWorkflowDocuments: async (workflowId, includeQueryDocuments = true) => {\n    try {\n      return await apiClient.withRetry(\n        () => apiClient.download(`/workflows/${workflowId}/documents/export?includeQueryDocuments=${includeQueryDocuments}`),\n        2, // maxRetries for download operations\n        1000 // longer delay for file operations\n      );\n    } catch (error) {\n      console.error(`[WorkflowAPI] Failed to export documents for workflow ${workflowId}:`, error);\n      throw {\n        ...error,\n        context: 'EXPORT_WORKFLOW_DOCUMENTS',\n         workflowId,\n         includeQueryDocuments\n      };\n    }\n  },\n\n  // Get unified document search results across all document types\n  searchUnifiedDocuments: async (searchParams) => {\n    try {\n      return await apiClient.withRetry(\n        () => apiClient.post('/documents/search/unified', searchParams),\n        2, // maxRetries\n        500 // baseDelay\n      );\n    } catch (error) {\n      console.error('[WorkflowAPI] Unified document search failed:', error);\n      throw {\n        ...error,\n        context: 'UNIFIED_DOCUMENT_SEARCH',\n         searchParams\n      };\n    }\n  },\n\n  // Get comprehensive document information for a project/material combination\n  getUnifiedDocumentInfo: async (projectCode, materialCode) => {\n    try {\n      return await apiClient.withRetry(\n        () => apiClient.get(\n          `/documents/unified-info?projectCode=${encodeURIComponent(projectCode)}&materialCode=${encodeURIComponent(materialCode)}`\n        ),\n        2, // maxRetries\n        500 // baseDelay\n      );\n    } catch (error) {\n      console.error(`[WorkflowAPI] Failed to get unified document info for ${projectCode}/${materialCode}:`, error);\n      throw {\n        ...error,\n        context: 'GET_UNIFIED_DOCUMENT_INFO',\n         projectCode,\n         materialCode\n      };\n    }\n  },\n\n  getReusableDocuments: async (projectCode, materialCode) => {\n    try {\n      return await apiClient.withRetry(\n        () => apiClient.get(\n          `/workflows/documents/reusable?projectCode=${encodeURIComponent(projectCode)}&materialCode=${encodeURIComponent(materialCode)}`\n        ),\n        2, // maxRetries\n        500 // baseDelay\n      );\n    } catch (error) {\n      console.error(`[WorkflowAPI] Failed to get reusable documents for ${projectCode}/${materialCode}:`, error);\n      throw {\n        ...error,\n        context: 'GET_REUSABLE_DOCUMENTS',\n         projectCode,\n         materialCode\n      };\n    }\n  },\n\n  downloadDocument: async (documentId) => {\n    try {\n      return await apiClient.withRetry(\n        () => apiClient.download(`/workflows/documents/${documentId}/download`),\n        3, // more retries for downloads as they can be flaky\n        1000 // longer delay for file operations\n      );\n    } catch (error) {\n      console.error(`[WorkflowAPI] Failed to download document ${documentId}:`, error);\n      throw {\n        ...error,\n        context: 'DOWNLOAD_DOCUMENT',\n        documentId\n      };\n    }\n  },\n\n  uploadDocument: async (workflowId, file, metadata) => {\n    try {\n      return await apiClient.withRetry(\n        () => apiClient.upload(`/workflows/${workflowId}/documents`, file, {\n          metadata: JSON.stringify(metadata)\n        }),\n        2, // fewer retries for uploads to avoid duplicate uploads\n        1000 // longer delay for file operations\n      );\n    } catch (error) {\n      console.error(`[WorkflowAPI] Failed to upload document to workflow ${workflowId}:`, error);\n      throw {\n        ...error,\n        context: 'UPLOAD_DOCUMENT',\n         workflowId,\n        fileName: file?.name || 'unknown'\n      };\n    }\n  },\n\n  // Bulk document operations with enhanced error handling\n  uploadMultipleDocuments: async (workflowId, files, metadata = {}) => {\n    const results = [];\n    const errors = [];\n\n    for (const file of files) {\n      try {\n        const result = await workflowAPI.uploadDocument(workflowId, file, metadata);\n        results.push({ file: file.name, result, success: true });\n      } catch (error) {\n        console.error(`[WorkflowAPI] Failed to upload ${file.name}:`, error);\n        errors.push({ file: file.name, error, success: false });\n      }\n    }\n\n    return {\n      successful: results,\n      failed: errors,\n      totalFiles: files.length,\n      successCount: results.length,\n      failureCount: errors.length\n    };\n  },\n\n  // Retry failed document operations\n  retryDocumentOperation: async (operationType, operationData, maxRetries = 3) => {\n    let lastError;\n    \n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        switch (operationType) {\n          case 'UPLOAD':\n            return await workflowAPI.uploadDocument(\n              operationData.workflowId, \n              operationData.file, \n              operationData.metadata\n            );\n          case 'DOWNLOAD':\n            return await workflowAPI.downloadDocument(operationData.documentId);\n          case 'GET_DOCUMENTS':\n            return await workflowAPI.getAllWorkflowRelatedDocuments(operationData.workflowId);\n          default:\n            throw new Error(`Unknown operation type: ${operationType}`);\n        }\n      } catch (error) {\n        lastError = error;\n        console.warn(`[WorkflowAPI] Retry attempt ${attempt}/${maxRetries} failed for ${operationType}:`, error);\n        \n        if (attempt < maxRetries) {\n          // Exponential backoff\n          const delay = Math.pow(2, attempt) * 1000;\n          await new Promise(resolve => setTimeout(resolve, delay));\n        }\n      }\n    }\n\n    throw {\n      ...lastError,\n      context: 'RETRY_OPERATION_FAILED',\n       operationType,\n       maxRetries,\n      finalAttempt: true\n    };\n  },\n\n  // Material name management from ProjectItemMaster\n  updateAllMaterialNamesFromProjectItemMaster: () =>\n    apiClient.post('/workflows/update-material-names'),\n\n  updateMaterialNameFromProjectItemMaster: workflowId =>\n    apiClient.post(`/workflows/${workflowId}/update-material-name`),\n\n  // Plant Questionnaire endpoints\n  getQuestionnaireTemplate: ({ materialCode, plantCode, templateType = 'PLANT_QUESTIONNAIRE' }) =>\n    apiClient.get(\n      `/plant-questionnaire/template?materialCode=${encodeURIComponent(materialCode)}&plantCode=${encodeURIComponent(plantCode)}&templateType=${encodeURIComponent(templateType)}`\n    ),\n\n  getCqsData: ({ materialCode, plantCode }) =>\n    apiClient.get(\n      `/plant-questionnaire/cqs-data?materialCode=${encodeURIComponent(materialCode)}&plantCode=${encodeURIComponent(plantCode)}`\n    ),\n\n  // New unified questionnaire endpoint\n  getQuestionnaireData: (workflowId) =>\n    apiClient.get(`/api/v1/questionnaire/${workflowId}`),\n\n  getQuestionnaireForEdit: (workflowId) =>\n    apiClient.get(`/api/v1/questionnaire/${workflowId}/edit`),\n\n  getPlantSpecificData: ({ plantCode, materialCode }) =>\n    apiClient.get(\n      `/plant-questionnaire/plant-data?plantCode=${encodeURIComponent(plantCode)}&materialCode=${encodeURIComponent(materialCode)}`\n    ),\n\n  getOrCreatePlantSpecificData: ({ plantCode, materialCode, workflowId }) =>\n    apiClient.post(\n      `/plant-questionnaire/plant-data/init?plantCode=${encodeURIComponent(plantCode)}&materialCode=${encodeURIComponent(materialCode)}&workflowId=${workflowId}`\n    ),\n\n  savePlantSpecificData: (plantSpecificData, modifiedBy = 'SYSTEM') =>\n    apiClient.post(\n      `/plant-questionnaire/plant-data/save?modifiedBy=${encodeURIComponent(modifiedBy)}`,\n      plantSpecificData\n    ),\n\n  saveDraftPlantResponses: (workflowId, draftData) =>\n    apiClient.post(`/plant-questionnaire/draft?workflowId=${workflowId}`, draftData),\n\n\n\n  submitPlantQuestionnaire: (workflowId, submissionData) =>\n    apiClient.post(`/plant-questionnaire/submit?workflowId=${workflowId}`, submissionData),\n\n  getPlantQuestionnaireStats: ({ plantCode, materialCode }) => {\n    const params = new URLSearchParams({ plantCode });\n    if (materialCode) {\n      params.append('materialCode', materialCode);\n    }\n    return apiClient.get(`/plant-questionnaire/stats?${params.toString()}`);\n  },\n\n  // Plant Dashboard with progress information\n  getPlantDashboardData: plantCode =>\n    apiClient.get(`/plant-questionnaire/dashboard?plantCode=${encodeURIComponent(plantCode)}`),\n\n  // Initialize sample plant data for testing\n  initializeSamplePlantData: plantCode =>\n    apiClient.post(\n      `/plant-questionnaire/init-sample-data?plantCode=${encodeURIComponent(plantCode)}`\n    ),\n\n  // Document management utility methods\n  /**\n   * Get document reuse statistics for a project/material combination\n   * @param {string} projectCode - Project code\n   * @param {string} materialCode - Material code\n   * @returns {Promise<Object>} Document reuse statistics\n   */\n  getDocumentReuseStats: async (projectCode, materialCode) => {\n    try {\n      return await apiClient.withRetry(\n        () => apiClient.get(\n          `/workflows/documents/reuse-stats?projectCode=${encodeURIComponent(projectCode)}&materialCode=${encodeURIComponent(materialCode)}`\n        ),\n        2, // maxRetries\n        500 // baseDelay\n      );\n    } catch (error) {\n      console.error(`[WorkflowAPI] Failed to get document reuse stats for ${projectCode}/${materialCode}:`, error);\n      throw {\n        ...error,\n        context: 'GET_DOCUMENT_REUSE_STATS',\n         projectCode,\n         materialCode\n      };\n    }\n  },\n\n  /**\n   * Validate document reuse eligibility before workflow extension\n   * @param {string} projectCode - Project code\n   * @param {string} materialCode - Material code\n   * @param {Array<string>} plantCodes - Plant codes to extend to\n   * @returns {Promise<Object>} Document reuse validation result\n   */\n  validateDocumentReuse: async (projectCode, materialCode, plantCodes) => {\n    try {\n      return await apiClient.withRetry(\n        () => apiClient.post('/workflows/documents/validate-reuse', {\n          projectCode,\n          materialCode,\n          plantCodes\n        }),\n        2, // maxRetries\n        500 // baseDelay\n      );\n    } catch (error) {\n      console.error(`[WorkflowAPI] Failed to validate document reuse for ${projectCode}/${materialCode}:`, error);\n      throw {\n        ...error,\n        context: 'VALIDATE_DOCUMENT_REUSE',\n         projectCode,\n         materialCode,\n         plantCodes\n      };\n    }\n  },\n\n  /**\n   * Get document access audit log\n   * @param {string} workflowId - Workflow ID\n   * @param {Object} options - Query options (dateRange, documentId, etc.)\n   * @returns {Promise<Array>} Document access audit log\n   */\n  getDocumentAuditLog: async (workflowId, options = {}) => {\n    try {\n      const queryParams = new URLSearchParams(options).toString();\n      return await apiClient.withRetry(\n        () => apiClient.get(`/workflows/${workflowId}/documents/audit-log?${queryParams}`),\n        2, // maxRetries\n        500 // baseDelay\n      );\n    } catch (error) {\n      console.error(`[WorkflowAPI] Failed to get document audit log for workflow ${workflowId}:`, error);\n      throw {\n        ...error,\n        context: 'GET_DOCUMENT_AUDIT_LOG',\n         workflowId,\n         options\n      };\n    }\n  },\n\n  /**\n   * Enhanced error handler for document operations\n   * Provides user-friendly error messages and recovery suggestions\n   * @param {Error} error - The error object\n   * @param {string} operation - The operation that failed\n   * @returns {Object} Enhanced error information\n   */\n  handleDocumentError: (error, operation) => {\n    const enhancedError = {\n      originalError: error,\n       operation,\n      timestamp: new Date().toISOString(),\n      userMessage: 'An error occurred with document operation',\n      technicalMessage: error.message,\n      recoveryActions: [],\n      retryable: false\n    };\n\n    // Determine user-friendly message and recovery actions based on error type\n    switch (error.context) {\n      case 'UPLOAD_DOCUMENT':\n        enhancedError.userMessage = 'Failed to upload document. Please check file size and format.';\n        enhancedError.recoveryActions = [\n          'Verify file is under 25MB',\n          'Check file format is supported (PDF, DOCX, XLSX, JPG, PNG)',\n          'Try uploading again',\n          'Contact support if problem persists'\n        ];\n        enhancedError.retryable = true;\n        break;\n\n      case 'DOWNLOAD_DOCUMENT':\n        enhancedError.userMessage = 'Failed to download document. Please try again.';\n        enhancedError.recoveryActions = [\n          'Check your internet connection',\n          'Try downloading again',\n          'Contact support if document is corrupted'\n        ];\n        enhancedError.retryable = true;\n        break;\n\n      case 'GET_ALL_WORKFLOW_DOCUMENTS':\n        enhancedError.userMessage = 'Failed to load workflow documents.';\n        enhancedError.recoveryActions = [\n          'Refresh the page',\n          'Check your internet connection',\n          'Contact support if problem persists'\n        ];\n        enhancedError.retryable = true;\n        break;\n\n      case 'SMART_PLANT_EXTENSION':\n        enhancedError.userMessage = 'Failed to extend workflow to plants. Some documents may not have been reused.';\n        enhancedError.recoveryActions = [\n          'Check if workflows were created successfully',\n          'Manually upload documents if needed',\n          'Try the extension again',\n          'Contact support for assistance'\n        ];\n        enhancedError.retryable = true;\n        break;\n\n      case 'UNIFIED_DOCUMENT_SEARCH':\n        enhancedError.userMessage = 'Document search failed. Please try again.';\n        enhancedError.recoveryActions = [\n          'Simplify your search terms',\n          'Try searching again',\n          'Use individual document lists instead'\n        ];\n        enhancedError.retryable = true;\n        break;\n\n      default:\n        if (error.type === 'NETWORK') {\n          enhancedError.userMessage = 'Network error occurred. Please check your connection.';\n          enhancedError.retryable = true;\n        } else if (error.type === 'TIMEOUT') {\n          enhancedError.userMessage = 'Operation timed out. Please try again.';\n          enhancedError.retryable = true;\n        } else if (error.status === 413) {\n          enhancedError.userMessage = 'File is too large. Please use a smaller file.';\n          enhancedError.retryable = false;\n        } else if (error.status === 415) {\n          enhancedError.userMessage = 'File type not supported. Please use PDF, DOCX, XLSX, JPG, or PNG.';\n          enhancedError.retryable = false;\n        }\n        break;\n    }\n\n    return enhancedError;\n  }\n};\n","import apiClient from '../api/client';\n\nexport const masterDataAPI = {\n  // Location Master (Plants) endpoints\n  getAllLocations: async () => {\n    try {\n      return await apiClient.get('/master-data/locations');\n    } catch (error) {\n      console.warn('Main locations endpoint failed, trying fallback:', error);\n      try {\n        return await apiClient.get('/master-data/locations/fallback');\n      } catch (fallbackError) {\n        console.warn('Fallback endpoint failed, trying simple endpoint:', fallbackError);\n        try {\n          return await apiClient.get('/simple-locations');\n        } catch (simpleError) {\n          console.error('All locations endpoints failed:', simpleError);\n          throw simpleError;\n        }\n      }\n    }\n  },\n\n  getLocationByCode: locationCode =>\n    apiClient.get(`/master-data/locations/${encodeURIComponent(locationCode)}`),\n\n  searchLocations: searchTerm =>\n    apiClient.get(`/master-data/locations/search?term=${encodeURIComponent(searchTerm)}`),\n\n  createLocation: locationData => apiClient.post('/master-data/locations', locationData),\n\n  updateLocation: (locationCode, locationData) =>\n    apiClient.put(`/master-data/locations/${encodeURIComponent(locationCode)}`, locationData),\n\n  deleteLocation: locationCode =>\n    apiClient.delete(`/master-data/locations/${encodeURIComponent(locationCode)}`),\n\n\n\n  // Project Item Master endpoints\n  getAllProjectItems: () => apiClient.get('/master-data/project-items'),\n\n  getItemsByProject: projectCode =>\n    apiClient.get(`/master-data/project-items/projects/${encodeURIComponent(projectCode)}`),\n\n  getProjectsByItem: itemCode =>\n    apiClient.get(`/master-data/project-items/items/${encodeURIComponent(itemCode)}`),\n\n  getAllProjectCodes: () => apiClient.get('/master-data/project-codes'),\n\n  getAllItemCodes: () => apiClient.get('/master-data/item-codes'),\n\n  getItemCodesByProject: projectCode =>\n    apiClient.get(`/master-data/project-codes/${encodeURIComponent(projectCode)}/items`),\n\n  // Test endpoints\n  testLocationMaster: () => apiClient.get('/master-data/locations/test'),\n\n  testSimpleLocation: () => apiClient.get('/simple-locations/test'),\n\n  diagnosticLocationMaster: () => apiClient.get('/master-data/locations/diagnostic'),\n\n  getSimpleLocationCount: () => apiClient.get('/simple-locations/count')\n};\n"],"names":["_ref","children","plantCode","_jsx","RouteErrorBoundary","routeName","errorContext","feature","level","Search","Input","Option","Select","FilterPanel","React","searchText","statusFilter","completionFilter","onSearchTextChange","onStatusFilterChange","onCompletionFilterChange","onClearFilters","onApplyPreset","onSaveFilters","filterPresets","filterSummary","handleSearchChange","useCallback","value","handleStatusChange","handleCompletionChange","handleClearFilters","handleSaveFilters","presetName","_jsxs","Card","title","style","display","alignItems","gap","FilterOutlined","hasActiveFilters","Tag","color","marginLeft","activeFilters","length","size","marginBottom","extra","Space","Button","icon","SaveOutlined","onClick","disabled","ClearOutlined","Row","gutter","Col","xs","sm","md","lg","fontSize","fontWeight","placeholder","onChange","e","target","width","allowClear","enterButton","SearchOutlined","_Fragment","Divider","margin","wrap","map","filter","index","marginTop","totalFiltered","totalOriginal","textAlign","displayName","defaultProps","PlantDashboard","dashboardStats","loading","error","currentPlant","onRefresh","getProgressColor","useMemo","percentage","completionStats","totalWorkflows","completedCount","inProgressCount","draftCount","completionRate","inProgressRate","draftRate","Math","round","getStatisticColor","type","total","inProgress","completed","average","Alert","message","description","showIcon","action","border","background","cursor","Statistic","prefix","ClockCircleOutlined","valueStyle","ExclamationCircleOutlined","CheckCircleOutlined","averageCompletion","suffix","BarChartOutlined","Progress","percent","strokeColor","format","WorkflowTable","workflows","onStartQuestionnaire","getStatusColor","status","DRAFT","IN_PROGRESS","COMPLETED","getCompletionColor","getDaysInState","lastModified","now","Date","modified","diffTime","abs","ceil","handleStartQuestionnaire","workflow","columns","dataIndex","key","sorter","a","b","materialCode","localeCompare","filterDropdown","_ref2","setSelectedKeys","selectedKeys","confirm","clearFilters","padding","onPressEnter","filterIcon","filtered","undefined","onFilter","record","toLowerCase","includes","render","text","materialName","itemDescription","_ref3","filters","completionStatus","replace","completionPercentage","_","completedFields","days","openQueries","count","FormOutlined","isSubmitted","getRowClassName","paginationConfig","pageSize","PAGINATION","DEFAULT_PAGE_SIZE","showSizeChanger","showQuickJumper","showTotal","range","pageSizeOptions","Table","dataSource","rowKey","pagination","rowClassName","scroll","x","bordered","justifyContent","Text","Title","Typography","CqsFieldDisplay","_cqsData$cqsData","field","cqsData","cqsFieldMapping","showDetails","compact","cqsValue","name","hasValue","label","isCqsAutoPopulated","config","InfoCircleOutlined","Tooltip","borderRadius","strong","className","align","flex","direction","italic","Panel","Collapse","workflowData","setLoading","useState","jvcDocuments","setJvcDocuments","expanded","setExpanded","loadJvcDocuments","async","projectCode","documents","workflowAPI","getReusableDocuments","getWorkflowDocuments","id","console","useEffect","formatDate","dateString","toLocaleDateString","year","month","day","hour","minute","height","daysInCurrentState","calculateDaysInState","isOverdue","Badge","position","top","activeKey","ghost","header","FileTextOutlined","Descriptions","column","Item","assignedPlant","TeamOutlined","initiatedBy","CalendarOutlined","createdAt","WarningOutlined","state","JVC_PENDING","PLANT_PENDING","CQS_PENDING","TECH_PENDING","getStateName","totalQueries","Spin","doc","_doc$fileType","styles","body","originalFileName","fileName","sourceDescription","documentSource","fileType","toUpperCase","fileSize","toFixed","uploadedBy","DownloadOutlined","documentId","filename","log","blob","downloadDocument","url","window","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","revokeObjectURL","success","handleDocumentDownload","materialCategory","supplierName","supplierCode","supplierContact","purchaseOrder","quantityOrdered","expectedDelivery","expectedUsage","applicationArea","processRequirements","backgroundColor","regulatoryRequirements","specialInstructions","urgencyLevel","businessImpact","costCenter","jvcNotes","whiteSpace","knownProperties","Object","keys","entries","str","specifications","JSON","stringify","String","safetyNotes","TextArea","open","visible","onCancel","onSubmit","workflowId","fieldContext","form","Form","useForm","uploadedDocuments","setUploadedDocuments","createdQueryId","setCreatedQueryId","handleCancel","resetFields","getPriorityColor","priority","LOW","MEDIUM","HIGH","URGENT","Modal","QuestionCircleOutlined","footer","documentMessage","queryToReturn","submit","destroyOnClose","stepTitle","SecureForm","layout","onFinish","queryData","question","values","assignedTeam","priorityLevel","fieldName","stepNumber","queryCategory","category","createdQuery","queryAPI","createQuery","initialValues","componentName","enableSecurityLogging","_fieldContext$stepTit","_fieldContext$label","fieldLabel","cqsScore","forEach","keyword","techScore","jvcScore","maxScore","max","primaryTeam","confidence","CQS","TECH","JVC","getRecommendedTeam","rules","required","help","showSearch","optionFilterProp","filterOption","input","option","props","indexOf","SecureFormItem","validationType","SecureInput","Radio","SecureTextArea","rows","showCount","maxLength","QueryDocumentUpload","queryId","context","onUploadComplete","prev","maxFiles","items","PaperClipOutlined","paddingLeft","Paragraph","onComplete","onSaveDraft","currentStep","setCurrentStep","saving","setSaving","submitting","setSubmitting","setWorkflowData","formData","setFormData","completedSteps","setCompletedSteps","Set","queryModalVisible","setQueryModalVisible","selectedField","setSelectedField","queries","setQueries","autoSaveEnabled","setAutoSaveEnabled","isOffline","setIsOffline","navigator","onLine","pendingChanges","setPendingChanges","sidebarVisible","setSidebarVisible","isReadOnly","setIsReadOnly","_progressUpdateTrigger","_setProgressUpdateTrigger","isMobile","useResponsive","screenSize","setScreenSize","innerWidth","UI_CONFIG","MOBILE_BREAKPOINT","isTablet","TABLET_BREAKPOINT","isDesktop","handleResize","addEventListener","removeEventListener","questionnaireSteps","setQuestionnaireSteps","templateLoading","setTemplateLoading","_cqsData","setCqsData","_plantSpecificData","setPlantSpecificData","cqsFormData","setCqsFormData","stepIcons","General","Physical","ExperimentOutlined","FireOutlined","Toxicity","SafetyOutlined","BookOutlined","PPE","MedicineBoxOutlined","Statutory","Others","SettingOutlined","Safety","Environmental","BulbOutlined","Quality","RocketOutlined","loadQuestionnaireTemplate","_cqsResponse2","warn","getDefaultTemplate","template","getQuestionnaireTemplate","templateType","steps","Array","isArray","Error","cqsResponse","getCqsData","processedSteps","step","fields","_cqsResponse","isCqsField","cqsAutoPopulated","extractedCqsFormData","flatMap","find","f","setFieldsValue","plantData","getOrCreatePlantSpecificData","plantInputs","mergedFormData","options","getOverallCompletionPercentage","totalFields","currentFormValues","getFieldsValue","currentData","_index","stepFields","completedStepFields","finalValue","loadPlantSpecificData","getPlantSpecificData","submittedAt","info","handleSaveDraft","silent","arguments","currentValues","updatedFormData","validatedFormData","draftKey","draftData","timestamp","from","version","lastSyncAttempt","syncStatus","sessionId","localStorage","setItem","localStorageError","responses","modifiedBy","responseCount","response","saveDraftPlantResponses","hasChanges","savedFields","warning","serverError","data","handleNext","handlePrevious","handleStepChange","getTotalFieldsPopulated","populated","populatedFields","populatedStepFields","handleOnline","notification","WifiOutlined","duration","handleOffline","DisconnectOutlined","handleKeyDown","event","ctrlKey","metaKey","preventDefault","content","loadWorkflowData","getWorkflow","initialData","existingData","fieldValue","add","prevFormData","mergedData","loadQueries","workflowQueries","getQueriesByWorkflow","autoSaveTimer","setTimeout","AUTO_SAVE","INTERVAL","clearTimeout","debouncedSaveTimer","DEBOUNCE_DELAY","mergedValues","newCompletedSteps","userEditableFields","requiredFields","completedRequiredFields","completedOptionalFields","recoverDraftData","savedDraft","getItem","parse","draftTimestamp","currentTime","draftMaterial","currentMaterial","draftPlant","removeItem","_ref4","recoveredFields","draftAge","placement","removeError","getStepCompletionStatus","stepIndex","optional","requiredCompleted","optionalCompleted","isComplete","hasOpenQueries","hasResolvedQueries","openQueriesCount","resolvedQueriesCount","requiredCompletionPercentage","allFields","cqsFields","optionalFields","completedUserFields","completedCqsFields","totalCompleted","stepQueries","q","resolvedQueries","scrollToResolvedQuery","fieldElement","querySelector","scrollIntoView","behavior","block","inline","transition","resolvedQueriesInCurrentStep","hasBeenViewed","latestResolvedQuery","sort","resolvedAt","proceedWithSubmission","allRequiredFields","validateFields","finalData","Promise","resolve","okText","cancelText","onOk","submissionData","submittedBy","submitResult","submitPlantQuestionnaire","location","reload","renderField","_field$options2","_field$options3","_field$options4","fieldQueries","hasOpenQuery","some","hasResolvedQuery","resolvedQuery","isFieldCompleted","flexWrap","minWidth","lineHeight","flexShrink","currentValue","getFieldValue","materialContext","materialType","handleRaiseQuery","validationRules","push","pattern","min","getFieldValidationRules","helpContent","resolvedBy","msds_available","cas_available","is_corrosive","highly_toxic","flash_point_65","petroleum_class","ld50_oral","ld50_dermal","lc50_inhalation","carcinogenic","recommended_ppe","is_poisonous","cmvr_listed","msihc_listed","factories_act_listed","getFieldHelpText","commonProps","_field$options","_field$options$find","displayValue","opt","fontStyle","isDisabled","inputProps","autoSize","minRows","maxRows","valuePropName","Checkbox","Group","flexDirection","minHeight","boxShadow","maxWidth","overflow","animation","currentStepData","Avatar","DashboardOutlined","x1","y1","x2","y2","offset","stopColor","cx","cy","r","inset","MenuOutlined","banner","fieldStats","stepStatus","isActive","isCompleted","MaterialContextPanel","showInfo","trailColor","closable","onValuesChange","changedValues","allValues","animationDelay","ArrowLeftOutlined","opacity","ArrowRightOutlined","Drawer","onClose","Timeline","dot","FloatButton","trigger","right","tooltip","summaryData","CloudSyncOutlined","QueryRaisingModal","_queryData","PlantView","selectedWorkflow","setSelectedWorkflow","questionnaireVisible","setQuestionnaireVisible","setCurrentPlant","userPlantData","setUserPlantData","availablePlants","setAvailablePlants","isPlantUser","isAdmin","userPlants","primaryPlant","filterByPlantAccess","useRoleBasedAccess","refreshWorkflows","usePlantWorkflows","setWorkflows","setError","setDashboardStats","completedToday","getCurrentPlant","storedPlant","storedUser","loadPlantWorkflows","dashboardData","workflowsWithProgress","getPlantDashboardData","signal","currentState","WORKFLOW_STATES","WORKFLOW_SPECIFIC_STATES","plantDataError","plantWorkflows","getWorkflowsByPlant","getTemplateFieldCounts","_workflow$plantData","calculateCorrectFieldCounts","fallbackError","controller","AbortController","aborted","fetchWorkflows","abort","filteredWorkflows","updateSearchText","updateStatusFilter","updateCompletionFilter","clearAllFilters","applyPreset","saveFilters","searchParams","setSearchParams","useSearchParams","setSearchText","get","setStatusFilter","setCompletionFilter","searchLower","_workflow$materialCod","_workflow$plantCode","_workflow$materialNam","_workflow$itemDescrip","COMPLETION_FILTERS","NOT_STARTED","applyFilters","preset","p","loadSavedFilters","saved","params","URLSearchParams","set","useWorkflowFilters","loadUserPlantData","fetchData","isAuthenticated","currentUser","getCurrentUser","locations","all","userAPI","getUserPlantAssignments","masterDataAPI","getAllLocations","assignedPlants","effectivePlant","firstPlant","plantOptions","loc","locationCode","isPrimary","handlePlantChange","newPlantCode","handleQuestionnaireComplete","_formData","PlantOnly","PlantErrorBoundary","borderBottom","_option$children","plant","PlantQuestionnaire","toString","updateUserPlantAssignments","clear","sessionStorage","accessSummary","setAccessSummary","loadAccessSummary","summary","RBACService","getUserAccessSummary","err","fallbackSummary","getFallbackAccessSummary","checkScreenAccess","hasScreenAccess","screenRoute","getFallbackScreenAccess","checkDataAccess","dataType","hasDataAccess","getFallbackDataAccess","checkPlantDataAccess","hasPlantDataAccess","getFallbackPlantDataAccess","makeAccessDecision","resourceType","resourceId","getFallbackAccessDecision","plantExtractor","filterDataByPlantAccess","primaryRole","getPrimaryRoleType","getUserPlantCodes","getPrimaryPlantCode","isJvcUser","isCqsUser","isTechUser","isViewer","hasRole","role","hasAnyRole","roles","hasAllRoles","every","refresh","onValidationChange","validateInput","useInputValidation","validationState","setValidationState","isValid","errors","wasModified","handleChange","inputValue","validation","SecurityAuditLogger","logXSSAttempt","sanitizedValue","join","securityEvents","setSecurityEvents","handleFinish","sanitizedValues","securityIssues","originalValue","InputSanitizer","sanitizeText","substring","issue","events","getRecentEvents","slice","validateTrigger","process","securityRules","baseRules","ValidationRules","username","email","password","richText","totalUserEditableFields","completedUserEditableFields","totalCqsFields","token","getToken","validationResponse","apiClient","post","plantCodes","valid","tokenError","possibleKeys","storedUserData","userData","parseError","adminToken","_userDetails$users","users","user","adminError","put","encodeURIComponent","checkUserPlantAssignment","getUserById","getAllUsers","cacheTTL","getAllUsersRealTime","useCache","getDashboardSummary","getOverdueWorkflows","dayThreshold","getRecentActivity","getWorkflowCountsByState","plantName","createWorkflow","updateWorkflow","deleteWorkflow","delete","transitionWorkflowState","newState","comment","extendWorkflow","extensionData","completeWorkflow","completionData","extendToMultiplePlantsSmartly","result","withRetry","documentReuse","totalReusedDocuments","reusedDocuments","reuseStrategy","searchWorkflows","getWorkflowsByState","getWorkflowsByUser","canTransitionTo","isReadyForCompletion","checkWorkflowExists","getWorkflowStats","timeRange","getCompletionRateByPlant","getWorkflowCompletionTrend","months","getPendingWorkflows","getWorkflowsWithOpenQueries","getCountByState","getOverdueCount","getWorkflowsWithOpenQueriesCount","getRecentlyCreated","getRecentlyCompleted","saveDraftResponses","getDraftResponses","submitQuestionnaire","questionnaireData","getAllWorkflowRelatedDocuments","exportWorkflowDocuments","includeQueryDocuments","searchUnifiedDocuments","getUnifiedDocumentInfo","uploadDocument","file","metadata","upload","uploadMultipleDocuments","files","results","successful","failed","totalFiles","successCount","failureCount","retryDocumentOperation","operationType","operationData","lastError","maxRetries","attempt","delay","pow","finalAttempt","updateAllMaterialNamesFromProjectItemMaster","updateMaterialNameFromProjectItemMaster","getQuestionnaireData","getQuestionnaireForEdit","savePlantSpecificData","plantSpecificData","getPlantQuestionnaireStats","_ref5","append","initializeSamplePlantData","getDocumentReuseStats","validateDocumentReuse","getDocumentAuditLog","queryParams","handleDocumentError","operation","enhancedError","originalError","toISOString","userMessage","technicalMessage","recoveryActions","retryable","simpleError","getLocationByCode","searchLocations","searchTerm","createLocation","locationData","updateLocation","deleteLocation","getAllProjectItems","getItemsByProject","getProjectsByItem","itemCode","getAllProjectCodes","getAllItemCodes","getItemCodesByProject","testLocationMaster","testSimpleLocation","diagnosticLocationMaster","getSimpleLocationCount"],"sourceRoot":""}