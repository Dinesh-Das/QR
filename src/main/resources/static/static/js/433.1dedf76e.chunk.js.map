{"version":3,"file":"static/js/433.1dedf76e.chunk.js","mappings":"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","sources":["screens/Reports.js"],"sourcesContent":["import { Table, Tabs, Button, Typography, message } from 'antd';\nimport React, { useEffect, useState } from 'react';\n\nimport apiClient from '../api/client';\n\nconst { Title } = Typography;\nconst { TabPane } = Tabs;\n\nconst exportToCSV = (data, filename) => {\n  if (!data || !data.length) {\n    return;\n  }\n  const keys = Object.keys(data[0]);\n  const csv = [keys.join(',')]\n    .concat(data.map(row => keys.map(k => JSON.stringify(row[k] ?? '')).join(',')))\n    .join('\\n');\n  const blob = new Blob([csv], { type: 'text/csv' });\n  const url = window.URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = filename;\n  a.click();\n  window.URL.revokeObjectURL(url);\n};\n\nconst Reports = () => {\n  const [users, setUsers] = useState([]);\n  const [roles, setRoles] = useState([]);\n  const [activity, setActivity] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    const fetchReports = async () => {\n      setLoading(true);\n      try {\n        const [usersResponse, rolesResponse, activityResponse] = await Promise.all([\n          apiClient.get('/reports/users', { signal: controller.signal }),\n          apiClient.get('/reports/roles', { signal: controller.signal }),\n          apiClient.get('/reports/activity', { signal: controller.signal })\n        ]);\n\n        if (!controller.signal.aborted) {\n          // Ensure all responses are arrays\n          setUsers(Array.isArray(usersResponse) ? usersResponse : []);\n          setRoles(Array.isArray(rolesResponse) ? rolesResponse : []);\n          setActivity(Array.isArray(activityResponse) ? activityResponse : []);\n        }\n      } catch (error) {\n        if (!controller.signal.aborted) {\n          message.error('Failed to fetch reports');\n          console.error('Error fetching reports:', error);\n          // Set empty arrays on error\n          setUsers([]);\n          setRoles([]);\n          setActivity([]);\n        }\n      } finally {\n        if (!controller.signal.aborted) {\n          setLoading(false);\n        }\n      }\n    };\n\n    fetchReports();\n\n    return () => {\n      controller.abort();\n    };\n  }, []);\n\n  return (\n    <div style={{ padding: 24 }}>\n      <Title level={2}>Reports</Title>\n      <Tabs defaultActiveKey=\"users\">\n        <TabPane tab=\"Users\" key=\"users\">\n          <Button\n            onClick={() => exportToCSV(users, 'users_report.csv')}\n            style={{ marginBottom: 8 }}\n          >\n            Export CSV\n          </Button>\n          <Table dataSource={users} rowKey=\"id\" loading={loading} bordered scroll={{ x: true }} />\n        </TabPane>\n        <TabPane tab=\"Roles\" key=\"roles\">\n          <Button\n            onClick={() => exportToCSV(roles, 'roles_report.csv')}\n            style={{ marginBottom: 8 }}\n          >\n            Export CSV\n          </Button>\n          <Table dataSource={roles} rowKey=\"id\" loading={loading} bordered scroll={{ x: true }} />\n        </TabPane>\n        <TabPane tab=\"Activity\" key=\"activity\">\n          <Button\n            onClick={() => exportToCSV(activity, 'activity_report.csv')}\n            style={{ marginBottom: 8 }}\n          >\n            Export CSV\n          </Button>\n          <Table\n            dataSource={activity}\n            rowKey=\"id\"\n            loading={loading}\n            bordered\n            scroll={{ x: true }}\n          />\n        </TabPane>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default Reports;\n"],"names":["Title","Typography","TabPane","Tabs","exportToCSV","data","filename","length","keys","Object","csv","join","concat","map","row","k","_row$k","JSON","stringify","blob","Blob","type","url","window","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","Reports","users","setUsers","useState","roles","setRoles","activity","setActivity","loading","setLoading","useEffect","controller","AbortController","async","usersResponse","rolesResponse","activityResponse","Promise","all","apiClient","get","signal","aborted","Array","isArray","error","message","console","fetchReports","abort","_jsxs","style","padding","children","_jsx","level","defaultActiveKey","tab","Button","onClick","marginBottom","Table","dataSource","rowKey","bordered","scroll","x"],"sourceRoot":""}