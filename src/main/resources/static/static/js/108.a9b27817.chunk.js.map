{"version":3,"file":"static/js/108.a9b27817.chunk.js","mappings":"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","sources":["constants/roles.js","constants/index.js","utils/dataUtils.js","screens/UserRoleManagement.js"],"sourcesContent":["/**\n * Role constants that match the backend RoleConstants.java\n */\nexport const ROLES = {\n  ADMIN: 'ADMIN',\n  JVC_USER: 'JVC_USER',\n  PLANT_USER: 'PLANT_USER',\n  CQS_USER: 'CQS_USER',\n  TECH_USER: 'TECH_USER',\n  VIEWER: 'VIEWER'\n};\n\n/**\n * Role types for backend compatibility\n */\nexport const ROLE_TYPES = {\n  ADMIN: 'ADMIN',\n  JVC_ROLE: 'JVC_ROLE',\n  PLANT_ROLE: 'PLANT_ROLE',\n  CQS_ROLE: 'CQS_ROLE',\n  TECH_ROLE: 'TECH_ROLE',\n  VIEWER_ROLE: 'VIEWER_ROLE'\n};\n\n/**\n * Role display names\n */\nexport const ROLE_DISPLAY_NAMES = {\n  [ROLES.ADMIN]: 'Administrator',\n  [ROLES.JVC_USER]: 'JVC User',\n  [ROLES.PLANT_USER]: 'Plant User',\n  [ROLES.CQS_USER]: 'CQS User',\n  [ROLES.TECH_USER]: 'Technical User',\n  [ROLES.VIEWER]: 'Viewer'\n};\n\n/**\n * Role descriptions\n */\nexport const ROLE_DESCRIPTIONS = {\n  [ROLES.ADMIN]: 'Full system access with administrative privileges',\n  [ROLES.JVC_USER]: 'Joint Venture Company user with workflow initiation rights',\n  [ROLES.PLANT_USER]: 'Plant-specific user with questionnaire completion rights',\n  [ROLES.CQS_USER]: 'Corporate Quality Services user with query management rights',\n  [ROLES.TECH_USER]: 'Technical user with system monitoring and audit access',\n  [ROLES.VIEWER]: 'Read-only access to assigned content'\n};\n\n/**\n * Role hierarchy (higher number = more privileges)\n */\nexport const ROLE_HIERARCHY = {\n  [ROLES.VIEWER]: 1,\n  [ROLES.PLANT_USER]: 2,\n  [ROLES.CQS_USER]: 3,\n  [ROLES.JVC_USER]: 3,\n  [ROLES.TECH_USER]: 4,\n  [ROLES.ADMIN]: 5\n};\n\n/**\n * Screen access mapping by role\n */\nexport const SCREEN_ACCESS = {\n  [ROLES.ADMIN]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/admin',\n    '/qrmfg/jvc',\n    '/qrmfg/cqs',\n    '/qrmfg/tech',\n    '/qrmfg/plant',\n    '/qrmfg/workflows',\n    '/qrmfg/workflow-monitoring',\n    '/qrmfg/reports',\n    '/qrmfg/users',\n    '/qrmfg/roles',\n    '/qrmfg/sessions',\n    '/qrmfg/user-role-management',\n    '/qrmfg/auditlogs',\n    '/qrmfg/settings'\n  ],\n  [ROLES.JVC_USER]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/jvc',\n    '/qrmfg/workflows',\n    '/qrmfg/reports',\n    '/qrmfg/settings'\n  ],\n  [ROLES.CQS_USER]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/cqs',\n    '/qrmfg/workflows',\n    '/qrmfg/reports',\n    '/qrmfg/settings'\n  ],\n  [ROLES.TECH_USER]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/tech',\n    '/qrmfg/workflows',\n    '/qrmfg/workflow-monitoring',\n    '/qrmfg/reports',\n    '/qrmfg/auditlogs',\n    '/qrmfg/settings'\n  ],\n  [ROLES.PLANT_USER]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/plant',\n    '/qrmfg/workflows',\n    '/qrmfg/reports',\n    '/qrmfg/settings'\n  ],\n  [ROLES.VIEWER]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/settings'\n  ]\n};\n\n/**\n * Data access permissions by role\n */\nexport const DATA_ACCESS = {\n  [ROLES.ADMIN]: ['*'], // All data\n  [ROLES.JVC_USER]: ['workflow', 'document', 'query', 'jvc'],\n  [ROLES.CQS_USER]: ['workflow', 'document', 'query', 'cqs'],\n  [ROLES.TECH_USER]: ['workflow', 'document', 'query', 'audit', 'system', 'tech'],\n  [ROLES.PLANT_USER]: ['workflow', 'document', 'query', 'plant'],\n  [ROLES.VIEWER]: ['workflow:read', 'document:read']\n};\n\n/**\n * Action permissions by role\n */\nexport const ACTION_PERMISSIONS = {\n  [ROLES.ADMIN]: ['*'], // All actions\n  [ROLES.JVC_USER]: ['create', 'read', 'update', 'initiate'],\n  [ROLES.CQS_USER]: ['create', 'read', 'update', 'respond'],\n  [ROLES.TECH_USER]: ['create', 'read', 'update', 'monitor', 'audit'],\n  [ROLES.PLANT_USER]: ['read', 'update', 'complete'],\n  [ROLES.VIEWER]: ['read']\n};\n\n/**\n * Helper functions\n */\nexport const getRoleDisplayName = (role) => {\n  return ROLE_DISPLAY_NAMES[role] || role;\n};\n\nexport const getRoleDescription = (role) => {\n  return ROLE_DESCRIPTIONS[role] || 'No description available';\n};\n\nexport const getRoleHierarchy = (role) => {\n  return ROLE_HIERARCHY[role] || 0;\n};\n\nexport const hasHigherPrivilege = (role1, role2) => {\n  return getRoleHierarchy(role1) > getRoleHierarchy(role2);\n};\n\nexport const getScreensForRole = (role) => {\n  return SCREEN_ACCESS[role] || [];\n};\n\nexport const getDataAccessForRole = (role) => {\n  return DATA_ACCESS[role] || [];\n};\n\nexport const getActionPermissionsForRole = (role) => {\n  return ACTION_PERMISSIONS[role] || [];\n};\n\nexport const canAccessScreen = (role, screen) => {\n  const screens = getScreensForRole(role);\n  return screens.includes('*') || screens.includes(screen);\n};\n\nexport const canAccessData = (role, dataType) => {\n  const dataAccess = getDataAccessForRole(role);\n  return dataAccess.includes('*') || \n         dataAccess.includes(dataType) || \n         dataAccess.some(access => access.startsWith(`${dataType}:`));\n};\n\nexport const canPerformAction = (role, action) => {\n  const actions = getActionPermissionsForRole(role);\n  return actions.includes('*') || actions.includes(action);\n};","// Application Constants\n\n// API Configuration\nexport const API_CONFIG = {\n  TIMEOUT: 30000, // 30 seconds\n  BASE_URL: process.env.REACT_APP_API_BASE_URL || '/qrmfg/api/v1',\n  RETRY_ATTEMPTS: 3\n};\n\n// Authentication\nexport const AUTH_CONFIG = {\n  TOKEN_KEY: 'qrmfg_secure_token',\n  LOGIN_PATH: '/qrmfg/login',\n  DEFAULT_REDIRECT: '/qrmfg'\n};\n\n// UI Constants\nexport const UI_CONFIG = {\n  MOBILE_BREAKPOINT: 768,\n  TABLET_BREAKPOINT: 1024,\n  PAGE_SIZE: 10,\n  DEBOUNCE_DELAY: 300\n};\n\n// Workflow States\nexport const WORKFLOW_STATES = {\n  INITIATED: 'INITIATED',\n  IN_PROGRESS: 'IN_PROGRESS',\n  PENDING_REVIEW: 'PENDING_REVIEW',\n  APPROVED: 'APPROVED',\n  REJECTED: 'REJECTED',\n  COMPLETED: 'COMPLETED'\n};\n\n// Query States\nexport const QUERY_STATES = {\n  OPEN: 'OPEN',\n  IN_PROGRESS: 'IN_PROGRESS',\n  RESOLVED: 'RESOLVED',\n  CLOSED: 'CLOSED'\n};\n\n// Priority Levels\nexport const PRIORITY_LEVELS = {\n  LOW: 'LOW',\n  MEDIUM: 'MEDIUM',\n  HIGH: 'HIGH',\n  URGENT: 'URGENT',\n  CRITICAL: 'CRITICAL'\n};\n\n// Teams\nexport const TEAMS = {\n  CQS: 'CQS',\n  TECH: 'TECH',\n  JVC: 'JVC'\n};\n\n// Error Severity\nexport const ERROR_SEVERITY = {\n  LOW: 'LOW',\n  MEDIUM: 'MEDIUM',\n  HIGH: 'HIGH',\n  CRITICAL: 'CRITICAL'\n};\n\n// Error Categories\nexport const ERROR_CATEGORY = {\n  APPLICATION: 'APPLICATION',\n  COMPONENT: 'COMPONENT',\n  API: 'API',\n  ROUTE: 'ROUTE',\n  ASYNC: 'ASYNC',\n  AUTHENTICATION: 'AUTHENTICATION'\n};\n\n// Status Colors\nexport const STATUS_COLORS = {\n  [WORKFLOW_STATES.INITIATED]: 'blue',\n  [WORKFLOW_STATES.IN_PROGRESS]: 'orange',\n  [WORKFLOW_STATES.PENDING_REVIEW]: 'purple',\n  [WORKFLOW_STATES.APPROVED]: 'green',\n  [WORKFLOW_STATES.REJECTED]: 'red',\n  [WORKFLOW_STATES.COMPLETED]: 'green'\n};\n\n// Priority Colors\nexport const PRIORITY_COLORS = {\n  [PRIORITY_LEVELS.LOW]: 'green',\n  [PRIORITY_LEVELS.MEDIUM]: 'blue',\n  [PRIORITY_LEVELS.HIGH]: 'orange',\n  [PRIORITY_LEVELS.URGENT]: 'red',\n  [PRIORITY_LEVELS.CRITICAL]: 'red'\n};\n\n// Form Validation\nexport const VALIDATION = {\n  MIN_PASSWORD_LENGTH: 8,\n  MAX_FILE_SIZE: 10 * 1024 * 1024, // 10MB\n  ALLOWED_FILE_TYPES: ['.pdf', '.doc', '.docx', '.xls', '.xlsx', '.jpg', '.jpeg', '.png'],\n  MAX_COMMENT_LENGTH: 1000,\n  MAX_DESCRIPTION_LENGTH: 500\n};\n\n// Date Formats\nexport const DATE_FORMATS = {\n  DISPLAY: 'DD/MM/YYYY',\n  DISPLAY_WITH_TIME: 'DD/MM/YYYY HH:mm',\n  API: 'YYYY-MM-DD',\n  ISO: 'YYYY-MM-DDTHH:mm:ss.SSSZ'\n};\n\n// Local Storage Keys\nexport const STORAGE_KEYS = {\n  USER_PREFERENCES: 'qrmfg_user_preferences',\n  THEME: 'qrmfg_theme',\n  LANGUAGE: 'qrmfg_language'\n};\n\n// Animation Delays\nexport const ANIMATION = {\n  FADE_IN_DELAY: 0.1, // seconds\n  STAGGER_DELAY: 0.05, // seconds\n  TRANSITION_DURATION: 0.3 // seconds\n};\n\n// Notification Types\nexport const NOTIFICATION_TYPES = {\n  SUCCESS: 'success',\n  ERROR: 'error',\n  WARNING: 'warning',\n  INFO: 'info'\n};\n\n// Component Names (for error boundaries)\nexport const COMPONENT_NAMES = {\n  USER_TABLE: 'UserTable',\n  USER_MODAL: 'UserModal',\n  PLANT_ASSIGNMENT_FORM: 'PlantAssignmentForm',\n  PLANT_DASHBOARD: 'PlantDashboard',\n  WORKFLOW_TABLE: 'WorkflowTable',\n  FILTER_PANEL: 'FilterPanel'\n};\n\n// File size constants\nexport const FILE_SIZE = {\n  MAX_UPLOAD_SIZE: 25 * 1024 * 1024, // 25MB\n  BYTES_PER_KB: 1024,\n  BYTES_PER_MB: 1024 * 1024,\n  BYTES_PER_GB: 1024 * 1024 * 1024\n};\n\n// Workflow specific states\nexport const WORKFLOW_SPECIFIC_STATES = {\n  JVC_PENDING: 'JVC_PENDING',\n  PLANT_PENDING: 'PLANT_PENDING',\n  CQS_PENDING: 'CQS_PENDING',\n  TECH_PENDING: 'TECH_PENDING',\n  DRAFT: 'DRAFT',\n  IN_PROGRESS: 'IN_PROGRESS',\n  COMPLETED: 'COMPLETED'\n};\n\n// Query status\nexport const QUERY_STATUS = {\n  OPEN: 'OPEN',\n  RESOLVED: 'RESOLVED',\n  CLOSED: 'CLOSED'\n};\n\n// Query status groups for filtering\nexport const QUERY_STATUS_GROUPS = {\n  ACTIVE: ['OPEN'],\n  INACTIVE: ['RESOLVED', 'CLOSED']\n};\n\n// Team names\nexport const TEAM_NAMES = {\n  CQS: 'CQS',\n  TECH: 'TECH',\n  JVC: 'JVC',\n  PLANT: 'PLANT'\n};\n\n// Auto-save intervals\nexport const AUTO_SAVE = {\n  INTERVAL: 30000, // 30 seconds\n  DEBOUNCE_DELAY: 2000 // 2 seconds\n};\n\n// Pagination defaults\nexport const PAGINATION = {\n  DEFAULT_PAGE_SIZE: 10,\n  SMALL_PAGE_SIZE: 5,\n  LARGE_PAGE_SIZE: 15,\n  SHOW_SIZE_CHANGER: true,\n  SHOW_QUICK_JUMPER: true\n};\n\n// Completion filter options\nexport const COMPLETION_FILTERS = {\n  ALL: 'all',\n  COMPLETED: 'completed',\n  IN_PROGRESS: 'in-progress',\n  NOT_STARTED: 'not-started'\n};\n\n// Tab keys\nexport const TAB_KEYS = {\n  INITIATE: 'initiate',\n  PENDING: 'pending',\n  COMPLETED: 'completed',\n  QUERIES: 'queries',\n  HISTORY: 'history'\n};\n\n// Re-export role constants\nexport * from './roles';\n","/**\n * @fileoverview Utility functions for safe data handling in React components\n * Provides functions to ensure data is always in the expected format for Table components\n * \n * @author QRMFG Development Team\n * @since 1.0.0\n */\n\n/**\n * Ensures the provided data is always an array\n * This prevents the \"G.some is not a function\" error in Ant Design Table components\n * \n * @param {any} data - The data to validate\n * @param {Array} fallback - Fallback array to use if data is not valid (default: [])\n * @returns {Array} Safe array that can be used with Table components\n * \n * @example\n * ```javascript\n * const safeUsers = ensureArray(users);\n * const safeRoles = ensureArray(roles, []);\n * ```\n */\nexport const ensureArray = (data, fallback = []) => {\n  if (Array.isArray(data)) {\n    return data;\n  }\n\n  console.warn('Data is not an array, using fallback:', { data, fallback });\n  return fallback;\n};\n\n/**\n * Safely processes API response data for Table components\n * Handles common API response patterns and ensures array output\n * \n * @param {any} response - API response data\n * @param {string} [dataKey] - Key to extract array from response object\n * @param {Array} [fallback] - Fallback array if extraction fails\n * @returns {Array} Safe array for Table components\n * \n * @example\n * ```javascript\n * // For direct array responses\n * const users = safeApiResponse(response);\n * \n * // For nested data\n * const users = safeApiResponse(response, 'users');\n * const roles = safeApiResponse(response, 'data.roles');\n * ```\n */\nexport const safeApiResponse = (response, dataKey = null, fallback = []) => {\n  if (!response) {\n    return fallback;\n  }\n\n  // If no dataKey specified, expect direct array\n  if (!dataKey) {\n    return ensureArray(response, fallback);\n  }\n\n  // Handle nested keys like 'data.users'\n  const keys = dataKey.split('.');\n  let data = response;\n\n  for (const key of keys) {\n    if (data && typeof data === 'object' && key in data) {\n      data = data[key];\n    } else {\n      console.warn(`Key '${key}' not found in response:`, response);\n      return fallback;\n    }\n  }\n\n  return ensureArray(data, fallback);\n};\n\n/**\n * Safely handles user roles data which can come in various formats\n * \n * @param {any} roles - Roles data from API\n * @returns {Array} Array of role objects with consistent structure\n */\nexport const safeRolesData = (roles) => {\n  const safeRoles = ensureArray(roles);\n\n  return safeRoles.map(role => {\n    if (typeof role === 'string') {\n      return { name: role, id: role };\n    }\n    if (typeof role === 'object' && role !== null) {\n      return {\n        name: role.name || role.roleName || role.id || 'Unknown Role',\n        id: role.id || role.name || role.roleName || Math.random().toString(36),\n        ...role\n      };\n    }\n    return { name: 'Unknown Role', id: Math.random().toString(36) };\n  });\n};\n\n/**\n * Safely handles plant assignment data which can come in various formats\n * \n * @param {any} plantData - Plant assignment data from API\n * @returns {Object} Normalized plant assignment object\n */\nexport const safePlantData = (plantData) => {\n  if (!plantData) {\n    return { assignedPlants: [], primaryPlant: null };\n  }\n\n  // If plantData is directly an array\n  if (Array.isArray(plantData)) {\n    return {\n      assignedPlants: plantData,\n      primaryPlant: plantData.length > 0 ? plantData[0] : null\n    };\n  }\n\n  // If plantData is an object\n  if (typeof plantData === 'object') {\n    return {\n      assignedPlants: ensureArray(plantData.assignedPlants || plantData.plants),\n      primaryPlant: plantData.primaryPlant || plantData.primary || null\n    };\n  }\n\n  return { assignedPlants: [], primaryPlant: null };\n};\n\n/**\n * Creates a safe error handler for API calls that sets empty arrays on error\n * \n * @param {Function} setStateFunction - React setState function\n * @param {string} [errorMessage] - Custom error message\n * @returns {Function} Error handler function\n */\nexport const createSafeErrorHandler = (setStateFunction, errorMessage = 'Failed to fetch data') => {\n  return (error, signal) => {\n    if (!signal?.aborted) {\n      console.error(errorMessage, error);\n      setStateFunction([]);\n    }\n  };\n};","import { UserOutlined, TeamOutlined, EditOutlined } from '@ant-design/icons';\nimport { Table, Card, Button, message, Spin, Typography, Modal, Transfer, Space, Tabs } from 'antd';\nimport React, { useState, useEffect } from 'react';\n\nimport apiClient from '../api/client';\nimport { PAGINATION } from '../constants';\nimport { ensureArray } from '../utils/dataUtils';\n\nconst { Title, Text } = Typography;\nconst { TabPane } = Tabs;\n\nconst UserRoleManagement = () => {\n  const [loading, setLoading] = useState(true);\n  const [userRoles, setUserRoles] = useState([]);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [availableRoles, setAvailableRoles] = useState([]);\n  const [assignedRoleIds, setAssignedRoleIds] = useState([]);\n  const [saveLoading, setSaveLoading] = useState(false);\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    fetchUserRoles(controller.signal);\n\n    return () => {\n      controller.abort();\n    };\n  }, []);\n\n  const fetchUserRoles = async signal => {\n    setLoading(true);\n    try {\n      const response = await apiClient.get('/admin/monitoring/user-roles', { signal });\n      if (!signal?.aborted) {\n        // Ensure response is always an array\n        const safeResponse = ensureArray(response);\n        setUserRoles(safeResponse);\n      }\n    } catch (error) {\n      if (!signal?.aborted) {\n        message.error('Failed to load user role assignments');\n        console.error('Error fetching user roles:', error);\n        // Set empty array on error\n        setUserRoles([]);\n      }\n    } finally {\n      if (!signal?.aborted) {\n        setLoading(false);\n      }\n    }\n  };\n\n  const handleEditRoles = user => {\n    setSelectedUser(user);\n    setAvailableRoles([\n      ...(user.assignedRoles || []).map(role => ({\n        ...role,\n        key: role.id.toString()\n      })),\n      ...(user.availableRoles || []).map(role => ({\n        ...role,\n        key: role.id.toString()\n      }))\n    ]);\n    setAssignedRoleIds((user.assignedRoles || []).map(role => role.id.toString()));\n    setModalVisible(true);\n  };\n\n  const handleTransferChange = nextTargetKeys => {\n    setAssignedRoleIds(nextTargetKeys);\n  };\n\n  const handleSaveRoles = async () => {\n    if (!selectedUser) {\n      return;\n    }\n\n    setSaveLoading(true);\n    try {\n      const roleIds = assignedRoleIds.map(id => parseInt(id, 10));\n      await apiClient.put(`/admin/monitoring/user-roles/${selectedUser.userId}`, roleIds);\n      message.success('User roles updated successfully');\n      setModalVisible(false);\n      fetchUserRoles();\n    } catch (error) {\n      message.error('Failed to update user roles');\n      console.error('Error updating user roles:', error);\n    } finally {\n      setSaveLoading(false);\n    }\n  };\n\n  const columns = [\n    {\n      title: 'Username',\n      dataIndex: 'username',\n      key: 'username',\n      sorter: (a, b) => a.username.localeCompare(b.username)\n    },\n    {\n      title: 'Email',\n      dataIndex: 'email',\n      key: 'email'\n    },\n    {\n      title: 'Assigned Roles',\n      dataIndex: 'assignedRoles',\n      key: 'assignedRoles',\n      render: roles => (roles || []).map(role => role.name).join(', ')\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      render: (_, record) => (\n        <Button type=\"primary\" icon={<EditOutlined />} onClick={() => handleEditRoles(record)}>\n          Edit Roles\n        </Button>\n      )\n    }\n  ];\n\n  return (\n    <div>\n      <Title level={2}>User Role Management</Title>\n\n      <Tabs defaultActiveKey=\"1\">\n        <TabPane\n          tab={\n            <span>\n              <UserOutlined />\n              User Roles\n            </span>\n          }\n          key=\"1\"\n        >\n          <Card>\n            <Button type=\"primary\" onClick={fetchUserRoles} style={{ marginBottom: 16 }}>\n              Refresh User Roles\n            </Button>\n\n            {loading ? (\n              <div style={{ textAlign: 'center', padding: '50px' }}>\n                <Spin size=\"large\" />\n                <p>Loading user role assignments...</p>\n              </div>\n            ) : (\n              <Table\n                dataSource={userRoles}\n                columns={columns}\n                rowKey=\"userId\"\n                pagination={{ pageSize: PAGINATION.DEFAULT_PAGE_SIZE }}\n              />\n            )}\n          </Card>\n        </TabPane>\n\n        <TabPane\n          tab={\n            <span>\n              <TeamOutlined />\n              Workflow Permissions\n            </span>\n          }\n          key=\"2\"\n        >\n          <Card>\n            <div style={{ padding: '20px' }}>\n              <Title level={4}>Workflow Role Permissions</Title>\n\n              <Space direction=\"vertical\" style={{ width: '100%' }}>\n                <Card title=\"JVC User Permissions\" size=\"small\">\n                  <ul>\n                    <li>Initiate MSDS workflows for materials</li>\n                    <li>Assign workflows to plant teams</li>\n                    <li>View JVC dashboard with pending extensions</li>\n                    <li>Respond to queries from plant teams</li>\n                  </ul>\n                </Card>\n\n                <Card title=\"Plant User Permissions\" size=\"small\">\n                  <ul>\n                    <li>Complete multi-step questionnaires</li>\n                    <li>Raise queries to CQS/Tech/JVC teams</li>\n                    <li>View plant dashboard with assigned materials</li>\n                    <li>Mark materials as completed</li>\n                  </ul>\n                </Card>\n\n                <Card title=\"CQS User Permissions\" size=\"small\">\n                  <ul>\n                    <li>Receive and resolve queries from plant teams</li>\n                    <li>View CQS dashboard with pending queries</li>\n                    <li>Access material context for queries</li>\n                  </ul>\n                </Card>\n\n                <Card title=\"Tech User Permissions\" size=\"small\">\n                  <ul>\n                    <li>Receive and resolve technical queries from plant teams</li>\n                    <li>View Tech dashboard with pending queries</li>\n                    <li>Access material context for queries</li>\n                  </ul>\n                </Card>\n\n                <Card title=\"Admin Permissions\" size=\"small\">\n                  <ul>\n                    <li>Access workflow monitoring dashboard</li>\n                    <li>Generate query SLA reports</li>\n                    <li>Manage user roles and permissions</li>\n                    <li>Export audit logs and workflow reports</li>\n                    <li>View all workflows regardless of state</li>\n                  </ul>\n                </Card>\n              </Space>\n\n              <Text type=\"secondary\" style={{ marginTop: 16, display: 'block' }}>\n                Note: Users can have multiple roles assigned to them. The permissions are\n                cumulative.\n              </Text>\n            </div>\n          </Card>\n        </TabPane>\n      </Tabs>\n\n      <Modal\n        title=\"Edit User Roles\"\n        open={modalVisible}\n        onOk={handleSaveRoles}\n        onCancel={() => setModalVisible(false)}\n        width={800}\n        confirmLoading={saveLoading}\n      >\n        {selectedUser && (\n          <>\n            <p>\n              <strong>User:</strong> {selectedUser.username} ({selectedUser.email})\n            </p>\n            <p>Assign or remove roles using the transfer control below:</p>\n            <Transfer\n              dataSource={availableRoles}\n              titles={['Available Roles', 'Assigned Roles']}\n              targetKeys={assignedRoleIds}\n              onChange={handleTransferChange}\n              render={item => item.name}\n              listStyle={{\n                width: 350,\n                height: 300\n              }}\n            />\n          </>\n        )}\n      </Modal>\n    </div>\n  );\n};\n\nexport default UserRoleManagement;\n"],"names":["UI_CONFIG","MOBILE_BREAKPOINT","TABLET_BREAKPOINT","PAGE_SIZE","DEBOUNCE_DELAY","WORKFLOW_STATES","INITIATED","IN_PROGRESS","PENDING_REVIEW","APPROVED","REJECTED","COMPLETED","PRIORITY_LEVELS","LOW","MEDIUM","HIGH","URGENT","CRITICAL","FILE_SIZE","MAX_UPLOAD_SIZE","BYTES_PER_KB","BYTES_PER_MB","BYTES_PER_GB","WORKFLOW_SPECIFIC_STATES","JVC_PENDING","PLANT_PENDING","CQS_PENDING","TECH_PENDING","DRAFT","QUERY_STATUS","OPEN","RESOLVED","CLOSED","QUERY_STATUS_GROUPS","ACTIVE","INACTIVE","TEAM_NAMES","CQS","TECH","JVC","PLANT","AUTO_SAVE","INTERVAL","PAGINATION","DEFAULT_PAGE_SIZE","SMALL_PAGE_SIZE","LARGE_PAGE_SIZE","SHOW_SIZE_CHANGER","SHOW_QUICK_JUMPER","COMPLETION_FILTERS","ALL","NOT_STARTED","TAB_KEYS","INITIATE","PENDING","QUERIES","HISTORY","ensureArray","data","fallback","arguments","length","undefined","Array","isArray","console","warn","safeApiResponse","response","dataKey","keys","split","key","safeRolesData","roles","map","role","name","id","roleName","Math","random","toString","safePlantData","plantData","assignedPlants","primaryPlant","plants","primary","Title","Text","Typography","TabPane","Tabs","UserRoleManagement","loading","setLoading","useState","userRoles","setUserRoles","modalVisible","setModalVisible","selectedUser","setSelectedUser","availableRoles","setAvailableRoles","assignedRoleIds","setAssignedRoleIds","saveLoading","setSaveLoading","useEffect","controller","AbortController","fetchUserRoles","signal","abort","async","apiClient","get","aborted","safeResponse","error","message","columns","title","dataIndex","sorter","a","b","username","localeCompare","render","join","_","record","_jsx","Button","type","icon","EditOutlined","onClick","handleEditRoles","user","assignedRoles","children","_jsxs","level","defaultActiveKey","tab","UserOutlined","Card","style","marginBottom","textAlign","padding","Spin","size","Table","dataSource","rowKey","pagination","pageSize","TeamOutlined","Space","direction","width","marginTop","display","Modal","open","onOk","roleIds","parseInt","put","userId","success","onCancel","confirmLoading","_Fragment","email","Transfer","titles","targetKeys","onChange","nextTargetKeys","item","listStyle","height"],"sourceRoot":""}