{"version":3,"file":"static/js/70.217f3705.chunk.js","mappings":"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","sources":["hooks/useRoleBasedAccess.js","components/WorkflowDashboard.js","screens/CQSView.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\nimport { \n  isAuthenticated, \n  isAdmin, \n  isJvcUser, \n  isCqsUser, \n  isTechUser, \n  isPlantUser, \n  isViewer,\n  hasRole,\n  getPrimaryRoleType,\n  getUserPlantCodes,\n  getPrimaryPlantCode,\n  getCurrentUser\n} from '../services/auth';\nimport RBACService from '../services/rbacService';\n\n/**\n * Custom hook for role-based access control\n * Provides reactive access to user roles and permissions\n */\nexport const useRoleBasedAccess = () => {\n  const [accessSummary, setAccessSummary] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Load user access summary\n  const loadAccessSummary = useCallback(async () => {\n    if (!isAuthenticated()) {\n      setAccessSummary(null);\n      setLoading(false);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const summary = await RBACService.getUserAccessSummary();\n      setAccessSummary(summary);\n    } catch (err) {\n      console.warn('Failed to load access summary, using fallback:', err);\n      setError(err);\n      \n      // Use fallback data\n      const fallbackSummary = RBACService.getFallbackAccessSummary();\n      setAccessSummary(fallbackSummary);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    loadAccessSummary();\n  }, [loadAccessSummary]);\n\n  // Check screen access\n  const checkScreenAccess = useCallback(async (screenRoute) => {\n    try {\n      return await RBACService.hasScreenAccess(screenRoute);\n    } catch (error) {\n      console.warn('Screen access check failed, using fallback:', error);\n      return RBACService.getFallbackScreenAccess(screenRoute);\n    }\n  }, []);\n\n  // Check data access\n  const checkDataAccess = useCallback(async (dataType, context = {}) => {\n    try {\n      return await RBACService.hasDataAccess(dataType, context);\n    } catch (error) {\n      console.warn('Data access check failed, using fallback:', error);\n      return RBACService.getFallbackDataAccess(dataType, context);\n    }\n  }, []);\n\n  // Check plant data access\n  const checkPlantDataAccess = useCallback(async (dataType, plantCode, context = {}) => {\n    try {\n      return await RBACService.hasPlantDataAccess(dataType, plantCode, context);\n    } catch (error) {\n      console.warn('Plant data access check failed, using fallback:', error);\n      return RBACService.getFallbackPlantDataAccess(dataType, plantCode, context);\n    }\n  }, []);\n\n  // Make access decision\n  const makeAccessDecision = useCallback(async (resourceType, resourceId, action, context = {}) => {\n    try {\n      return await RBACService.makeAccessDecision(resourceType, resourceId, action, context);\n    } catch (error) {\n      console.warn('Access decision failed, using fallback:', error);\n      return RBACService.getFallbackAccessDecision(resourceType, resourceId, action, context);\n    }\n  }, []);\n\n  // Filter data by plant access\n  const filterByPlantAccess = useCallback((data, plantExtractor) => {\n    return RBACService.filterDataByPlantAccess(data, plantExtractor);\n  }, []);\n\n  return {\n    // Loading states\n    loading,\n    error,\n    \n    // User info\n    isAuthenticated: isAuthenticated(),\n    currentUser: getCurrentUser(),\n    primaryRole: getPrimaryRoleType(),\n    userPlants: getUserPlantCodes(),\n    primaryPlant: getPrimaryPlantCode(),\n    \n    // Role checks\n    isAdmin: isAdmin(),\n    isJvcUser: isJvcUser(),\n    isCqsUser: isCqsUser(),\n    isTechUser: isTechUser(),\n    isPlantUser: isPlantUser(),\n    isViewer: isViewer(),\n    \n    // Access summary\n    accessSummary,\n    \n    // Helper functions\n    hasRole: (role) => hasRole(role),\n    hasAnyRole: (roles) => roles.some(role => hasRole(role)),\n    hasAllRoles: (roles) => roles.every(role => hasRole(role)),\n    \n    // Async access checks\n    checkScreenAccess,\n    checkDataAccess,\n    checkPlantDataAccess,\n    makeAccessDecision,\n    \n    // Data filtering\n    filterByPlantAccess,\n    \n    // Refresh function\n    refresh: loadAccessSummary\n  };\n};\n\n/**\n * Hook for checking specific screen access\n */\nexport const useScreenAccess = (screenRoute) => {\n  const [hasAccess, setHasAccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const checkAccess = async () => {\n      if (!isAuthenticated() || !screenRoute) {\n        setHasAccess(false);\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const access = await RBACService.hasScreenAccess(screenRoute);\n        setHasAccess(access);\n      } catch (err) {\n        console.warn('Screen access check failed:', err);\n        setError(err);\n        \n        // Use fallback\n        const fallbackAccess = RBACService.getFallbackScreenAccess(screenRoute);\n        setHasAccess(fallbackAccess);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAccess();\n  }, [screenRoute]);\n\n  return { hasAccess, loading, error };\n};\n\n/**\n * Hook for checking data access\n */\nexport const useDataAccess = (dataType, context = {}) => {\n  const [hasAccess, setHasAccess] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const checkAccess = async () => {\n      if (!isAuthenticated() || !dataType) {\n        setHasAccess(false);\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const access = await RBACService.hasDataAccess(dataType, context);\n        setHasAccess(access);\n      } catch (err) {\n        console.warn('Data access check failed:', err);\n        setError(err);\n        \n        // Use fallback\n        const fallbackAccess = RBACService.getFallbackDataAccess(dataType, context);\n        setHasAccess(fallbackAccess);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAccess();\n  }, [dataType, context]);\n\n  return { hasAccess, loading, error };\n};\n\n/**\n * Hook for plant-specific data filtering\n */\nexport const usePlantDataFilter = (data, plantExtractor) => {\n  const [filteredData, setFilteredData] = useState([]);\n\n  useEffect(() => {\n    if (!Array.isArray(data)) {\n      setFilteredData([]);\n      return;\n    }\n\n    const filtered = RBACService.filterDataByPlantAccess(data, plantExtractor);\n    setFilteredData(filtered);\n  }, [data, plantExtractor]);\n\n  return filteredData;\n};\n\nexport default useRoleBasedAccess;","import {\n  ClockCircleOutlined,\n  CheckCircleOutlined,\n  ExclamationCircleOutlined,\n  FileTextOutlined,\n  TeamOutlined,\n  CalendarOutlined\n} from '@ant-design/icons';\nimport { Card, Row, Col, Statistic, Table, Tag, Button, Space, Spin, Alert } from 'antd';\nimport React, { useState, useEffect } from 'react';\n\nimport { UI_CONFIG, PAGINATION } from '../constants';\nimport { workflowAPI } from '../services/workflowAPI';\n\n// Hook to detect screen size\nconst useResponsive = () => {\n  const [screenSize, setScreenSize] = useState({\n    isMobile: window.innerWidth <= UI_CONFIG.MOBILE_BREAKPOINT,\n    isTablet:\n      window.innerWidth > UI_CONFIG.MOBILE_BREAKPOINT &&\n      window.innerWidth <= UI_CONFIG.TABLET_BREAKPOINT,\n    isDesktop: window.innerWidth > UI_CONFIG.TABLET_BREAKPOINT\n  });\n\n  useEffect(() => {\n    const handleResize = () => {\n      setScreenSize({\n        isMobile: window.innerWidth <= UI_CONFIG.MOBILE_BREAKPOINT,\n        isTablet:\n          window.innerWidth > UI_CONFIG.MOBILE_BREAKPOINT &&\n          window.innerWidth <= UI_CONFIG.TABLET_BREAKPOINT,\n        isDesktop: window.innerWidth > UI_CONFIG.TABLET_BREAKPOINT\n      });\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return screenSize;\n};\n\nconst WorkflowDashboard = ({ onWorkflowSelect }) => {\n  const [loading, setLoading] = useState(true);\n  const [dashboardData, setDashboardData] = useState({\n    summary: {},\n    overdueWorkflows: [],\n    recentActivity: [],\n    workflowsByState: {}\n  });\n  const [error, setError] = useState(null);\n  const { isMobile } = useResponsive();\n\n  useEffect(() => {\n    loadDashboardData();\n  }, []);\n\n  const loadDashboardData = async () => {\n    try {\n      setLoading(true);\n      const [summary, overdue, recent, byState] = await Promise.all([\n        workflowAPI.getDashboardSummary(),\n        workflowAPI.getOverdueWorkflows(3),\n        workflowAPI.getRecentActivity(7),\n        workflowAPI.getWorkflowCountsByState()\n      ]);\n\n      setDashboardData({\n        summary,\n        overdueWorkflows: overdue,\n        recentActivity: recent,\n        workflowsByState: byState\n      });\n    } catch (err) {\n      setError('Failed to load dashboard data');\n      console.error('Dashboard error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStateColor = state => {\n    const colors = {\n      JVC_PENDING: 'blue',\n      PLANT_PENDING: 'orange',\n      CQS_PENDING: 'purple',\n      TECH_PENDING: 'cyan',\n      COMPLETED: 'green'\n    };\n    return colors[state] || 'default';\n  };\n\n  // Responsive column configuration\n  const getWorkflowColumns = () => {\n    const baseColumns = [\n      {\n        title: 'Material Code',\n        dataIndex: 'materialCode',\n        key: 'materialCode',\n        width: isMobile ? 120 : 140,\n        fixed: isMobile ? 'left' : false,\n        render: (text, record) => (\n          <div>\n            <div style={{ fontWeight: 'bold' }}>{text}</div>\n            {record.itemDescription && (\n              <div style={{ fontSize: '12px', color: '#666' }}>{record.itemDescription}</div>\n            )}\n          </div>\n        )\n      },\n\n      {\n        title: 'State',\n        dataIndex: 'currentState',\n        key: 'currentState',\n        width: isMobile ? 80 : 100,\n        render: state => (\n          <Tag color={getStateColor(state)} size={isMobile ? 'small' : 'default'}>\n            {isMobile ? state.split('_')[0] : state.replace('_', ' ')}\n          </Tag>\n        )\n      },\n      {\n        title: 'Plant',\n        dataIndex: 'assignedPlant',\n        key: 'assignedPlant',\n        width: 100,\n        responsive: ['lg']\n      },\n      {\n        title: 'Days',\n        dataIndex: 'daysPending',\n        key: 'daysPending',\n        width: isMobile ? 60 : 100,\n        render: days => <span style={{ color: days > 3 ? '#ff4d4f' : 'inherit' }}>{days}</span>\n      },\n      {\n        title: 'Queries',\n        key: 'queries',\n        width: isMobile ? 70 : 80,\n        responsive: ['sm'],\n        render: (_, record) => (\n          <span>\n            {record.openQueries > 0 && (\n              <Tag color=\"red\" size=\"small\">\n                {record.openQueries}\n              </Tag>\n            )}\n            {!isMobile && <small>{record.totalQueries} total</small>}\n          </span>\n        )\n      },\n      {\n        title: 'Actions',\n        key: 'actions',\n        width: isMobile ? 80 : 100,\n        fixed: isMobile ? 'right' : false,\n        render: (_, record) => (\n          <Space>\n            <Button\n              size=\"small\"\n              type=\"link\"\n              onClick={() => onWorkflowSelect && onWorkflowSelect(record.id)}\n            >\n              {isMobile ? 'View' : 'View'}\n            </Button>\n          </Space>\n        )\n      }\n    ];\n\n    return baseColumns;\n  };\n\n  if (loading) {\n    return (\n      <div style={{ textAlign: 'center', padding: '50px' }}>\n        <Spin size=\"large\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert\n        message=\"Error\"\n        description={error}\n        type=\"error\"\n        showIcon\n        action={\n          <Button size=\"small\" onClick={loadDashboardData}>\n            Retry\n          </Button>\n        }\n      />\n    );\n  }\n\n  return (\n    <div>\n      {/* Summary Statistics */}\n      <Row gutter={[16, 16]} style={{ marginBottom: 24 }} className=\"workflow-dashboard-stats\">\n        <Col xs={12} sm={12} md={6} lg={6}>\n          <Card>\n            <Statistic\n              title=\"Total Workflows\"\n              value={dashboardData.summary.totalWorkflows || 0}\n              prefix={<FileTextOutlined />}\n            />\n          </Card>\n        </Col>\n        <Col xs={12} sm={12} md={6} lg={6}>\n          <Card>\n            <Statistic\n              title=\"Active Workflows\"\n              value={dashboardData.summary.activeWorkflows || 0}\n              prefix={<ClockCircleOutlined />}\n              valueStyle={{ color: '#1890ff' }}\n            />\n          </Card>\n        </Col>\n        <Col xs={12} sm={12} md={6} lg={6}>\n          <Card>\n            <Statistic\n              title=\"Overdue\"\n              value={dashboardData.summary.overdueWorkflows || 0}\n              prefix={<ExclamationCircleOutlined />}\n              valueStyle={{ color: '#ff4d4f' }}\n            />\n          </Card>\n        </Col>\n        <Col xs={12} sm={12} md={6} lg={6}>\n          <Card>\n            <Statistic\n              title=\"Completed\"\n              value={dashboardData.summary.completedWorkflows || 0}\n              prefix={<CheckCircleOutlined />}\n              valueStyle={{ color: '#52c41a' }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Secondary Statistics */}\n      <Row gutter={[16, 16]} style={{ marginBottom: 24 }} className=\"workflow-dashboard-stats\">\n        <Col xs={24} sm={8} md={8} lg={8}>\n          <Card>\n            <Statistic\n              title=\"Open Queries\"\n              value={dashboardData.summary.openQueries || 0}\n              prefix={<TeamOutlined />}\n              valueStyle={{ color: '#fa8c16' }}\n            />\n          </Card>\n        </Col>\n        <Col xs={12} sm={8} md={8} lg={8}>\n          <Card>\n            <Statistic\n              title=\"Avg Resolution Time\"\n              value={Math.round(dashboardData.summary.avgResolutionTimeHours || 0)}\n              suffix={isMobile ? 'hrs' : 'hours'}\n              prefix={<CalendarOutlined />}\n            />\n          </Card>\n        </Col>\n        <Col xs={12} sm={8} md={8} lg={8}>\n          <Card>\n            <Statistic\n              title=\"Recent Workflows\"\n              value={dashboardData.summary.recentWorkflows || 0}\n              prefix={<FileTextOutlined />}\n              valueStyle={{ color: '#722ed1' }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Overdue Workflows */}\n      {dashboardData.overdueWorkflows.length > 0 && (\n        <Card\n          title=\"Overdue Workflows\"\n          style={{ marginBottom: 24 }}\n          extra={\n            <Button type=\"primary\" size=\"small\">\n              View All\n            </Button>\n          }\n        >\n          <Table\n            dataSource={dashboardData.overdueWorkflows}\n            columns={getWorkflowColumns()}\n            pagination={{ pageSize: PAGINATION.SMALL_PAGE_SIZE }}\n            size=\"small\"\n            rowKey=\"id\"\n            scroll={isMobile ? { x: 600 } : undefined}\n            className={isMobile ? 'workflow-table-mobile touch-friendly-table' : ''}\n          />\n        </Card>\n      )}\n\n      {/* Recent Activity */}\n      <Card\n        title=\"Recent Activity\"\n        extra={\n          <Button type=\"primary\" size=\"small\">\n            View All\n          </Button>\n        }\n      >\n        <Table\n          dataSource={dashboardData.recentActivity}\n          columns={getWorkflowColumns()}\n          pagination={{ pageSize: isMobile ? 5 : 10 }}\n          size=\"small\"\n          rowKey=\"id\"\n          scroll={isMobile ? { x: 600 } : undefined}\n          className={isMobile ? 'workflow-table-mobile touch-friendly-table' : ''}\n        />\n      </Card>\n    </div>\n  );\n};\n\nexport default WorkflowDashboard;\n","import {\n  MessageOutlined,\n  ClockCircleOutlined,\n  CheckCircleOutlined,\n  ExclamationCircleOutlined,\n  ReloadOutlined,\n  HistoryOutlined\n} from '@ant-design/icons';\nimport { Typography, Row, Col, Card, Statistic, Tabs, Alert, Space, Button } from 'antd';\nimport React, { useState, useEffect } from 'react';\n\nimport apiClient from '../api/client';\nimport QueryHistoryTracker from '../components/QueryHistoryTracker';\nimport QueryInbox from '../components/QueryInbox';\nimport { CqsOnly } from '../components/RoleBasedComponent';\nimport WorkflowDashboard from '../components/WorkflowDashboard';\nimport { TEAM_NAMES } from '../constants';\nimport { useRoleBasedAccess } from '../hooks/useRoleBasedAccess';\n\nconst { Title } = Typography;\nconst { TabPane } = Tabs;\n\nconst CQSView = () => {\n  const [queryStats, setQueryStats] = useState({\n    totalQueries: 0,\n    openQueries: 0,\n    resolvedToday: 0,\n    overdueQueries: 0,\n    avgResolutionTime: 0,\n    highPriorityQueries: 0\n  });\n\n  // Use role-based access control\n  const { isCqsUser, isAdmin } = useRoleBasedAccess();\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    loadDashboardStats(controller.signal);\n\n    return () => {\n      controller.abort();\n    };\n  }, []);\n\n  const loadDashboardStats = async signal => {\n    try {\n      const [openCount, resolvedToday, overdueQueries, avgTime, highPriorityQueries] =\n        await Promise.all([\n          apiClient.get('/queries/stats/count-open/CQS', { signal }).catch(() => 0),\n          apiClient.get('/queries/stats/resolved-today', { signal }).catch(() => 0),\n          apiClient\n            .get('/queries/overdue', { signal })\n            .then(data =>\n              Array.isArray(data) ? data.filter(q => q.assignedTeam === TEAM_NAMES.CQS).length : 0\n            )\n            .catch(() => 0),\n          apiClient.get('/queries/stats/avg-resolution-time/CQS', { signal }).catch(() => 0),\n          apiClient\n            .get('/queries/high-priority', { signal })\n            .then(data =>\n              Array.isArray(data) ? data.filter(q => q.assignedTeam === TEAM_NAMES.CQS).length : 0\n            )\n            .catch(() => 0)\n        ]);\n\n      setQueryStats({\n        totalQueries: openCount + resolvedToday,\n        openQueries: openCount,\n        resolvedToday,\n        overdueQueries,\n        avgResolutionTime: avgTime,\n        highPriorityQueries\n      });\n    } catch (error) {\n      console.error('Failed to load dashboard stats:', error);\n    }\n  };\n\n  return (\n    <CqsOnly>\n      <div style={{ padding: 24 }}>\n        <Title level={2}>CQS Dashboard</Title>\n\n      {/* Enhanced Quick Stats */}\n      <Row gutter={16} style={{ marginBottom: 16 }}>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Open Queries\"\n              value={queryStats.openQueries}\n              prefix={<MessageOutlined />}\n              valueStyle={{ color: '#cf1322' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Resolved Today\"\n              value={queryStats.resolvedToday}\n              prefix={<CheckCircleOutlined />}\n              valueStyle={{ color: '#3f8600' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Overdue\"\n              value={queryStats.overdueQueries}\n              prefix={<ExclamationCircleOutlined />}\n              valueStyle={{ color: queryStats.overdueQueries > 0 ? '#cf1322' : '#3f8600' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Avg Resolution\"\n              value={queryStats.avgResolutionTime}\n              precision={1}\n              suffix=\"hrs\"\n              prefix={<ClockCircleOutlined />}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      {/* Alerts for urgent items */}\n      {queryStats.overdueQueries > 0 && (\n        <Alert\n          message={`${queryStats.overdueQueries} queries are overdue (>3 days)`}\n          description=\"These queries require immediate attention to maintain SLA compliance.\"\n          type=\"error\"\n          showIcon\n          style={{ marginBottom: 16 }}\n          action={\n            <Button size=\"small\" danger>\n              View Overdue\n            </Button>\n          }\n        />\n      )}\n\n      {queryStats.highPriorityQueries > 0 && (\n        <Alert\n          message={`${queryStats.highPriorityQueries} high priority queries pending`}\n          description=\"These queries have been marked as high priority and need urgent resolution.\"\n          type=\"warning\"\n          showIcon\n          style={{ marginBottom: 16 }}\n          action={\n            <Button size=\"small\" type=\"primary\">\n              View High Priority\n            </Button>\n          }\n        />\n      )}\n\n      {/* Enhanced Main Content Tabs */}\n      <Tabs\n        defaultActiveKey=\"queries\"\n        size=\"large\"\n        tabBarExtraContent={\n          <Space>\n            <Button icon={<ReloadOutlined />} onClick={loadDashboardStats} size=\"small\">\n              Refresh Stats\n            </Button>\n          </Space>\n        }\n      >\n        <TabPane\n          tab={\n            <Space>\n              <MessageOutlined />\n              <span>Query Inbox</span>\n              {queryStats.openQueries > 0 && (\n                <span\n                  style={{\n                    background: '#ff4d4f',\n                    color: 'white',\n                    borderRadius: '10px',\n                    padding: '2px 6px',\n                    fontSize: '12px'\n                  }}\n                >\n                  {queryStats.openQueries}\n                </span>\n              )}\n            </Space>\n          }\n          key=\"queries\"\n        >\n          <QueryInbox team=\"CQS\" userRole=\"CQS_USER\" />\n        </TabPane>\n        <TabPane\n          tab={\n            <Space>\n              <ClockCircleOutlined />\n              <span>Workflow Dashboard</span>\n            </Space>\n          }\n          key=\"dashboard\"\n        >\n          <WorkflowDashboard userRole=\"CQS_USER\" />\n        </TabPane>\n        <TabPane\n          tab={\n            <Space>\n              <HistoryOutlined />\n              <span>Query History</span>\n            </Space>\n          }\n          key=\"history\"\n        >\n          <QueryHistoryTracker />\n        </TabPane>\n      </Tabs>\n      </div>\n    </CqsOnly>\n  );\n};\n\nexport default CQSView;\n"],"names":["useRoleBasedAccess","accessSummary","setAccessSummary","useState","loading","setLoading","error","setError","loadAccessSummary","useCallback","async","isAuthenticated","summary","RBACService","getUserAccessSummary","err","console","warn","fallbackSummary","getFallbackAccessSummary","useEffect","checkScreenAccess","hasScreenAccess","screenRoute","getFallbackScreenAccess","checkDataAccess","dataType","context","arguments","length","undefined","hasDataAccess","getFallbackDataAccess","checkPlantDataAccess","plantCode","hasPlantDataAccess","getFallbackPlantDataAccess","makeAccessDecision","resourceType","resourceId","action","getFallbackAccessDecision","filterByPlantAccess","data","plantExtractor","filterDataByPlantAccess","currentUser","getCurrentUser","primaryRole","getPrimaryRoleType","userPlants","getUserPlantCodes","primaryPlant","getPrimaryPlantCode","isAdmin","isJvcUser","isCqsUser","isTechUser","isPlantUser","isViewer","hasRole","role","hasAnyRole","roles","some","hasAllRoles","every","refresh","_ref","onWorkflowSelect","dashboardData","setDashboardData","overdueWorkflows","recentActivity","workflowsByState","isMobile","useResponsive","screenSize","setScreenSize","window","innerWidth","UI_CONFIG","MOBILE_BREAKPOINT","isTablet","TABLET_BREAKPOINT","isDesktop","handleResize","addEventListener","removeEventListener","loadDashboardData","overdue","recent","byState","Promise","all","workflowAPI","getDashboardSummary","getOverdueWorkflows","getRecentActivity","getWorkflowCountsByState","getStateColor","state","JVC_PENDING","PLANT_PENDING","CQS_PENDING","TECH_PENDING","COMPLETED","getWorkflowColumns","title","dataIndex","key","width","fixed","render","text","record","_jsxs","children","_jsx","style","fontWeight","itemDescription","fontSize","color","Tag","size","split","replace","responsive","days","_","openQueries","totalQueries","Space","Button","type","onClick","id","textAlign","padding","Spin","Alert","message","description","showIcon","Row","gutter","marginBottom","className","Col","xs","sm","md","lg","Card","Statistic","value","totalWorkflows","prefix","FileTextOutlined","activeWorkflows","ClockCircleOutlined","valueStyle","ExclamationCircleOutlined","completedWorkflows","CheckCircleOutlined","TeamOutlined","Math","round","avgResolutionTimeHours","suffix","CalendarOutlined","recentWorkflows","extra","Table","dataSource","columns","pagination","pageSize","PAGINATION","SMALL_PAGE_SIZE","rowKey","scroll","x","Title","Typography","TabPane","Tabs","CQSView","queryStats","setQueryStats","resolvedToday","overdueQueries","avgResolutionTime","highPriorityQueries","controller","AbortController","loadDashboardStats","signal","abort","openCount","avgTime","apiClient","get","catch","then","Array","isArray","filter","q","assignedTeam","TEAM_NAMES","CQS","CqsOnly","level","span","MessageOutlined","precision","danger","defaultActiveKey","tabBarExtraContent","icon","ReloadOutlined","tab","background","borderRadius","QueryInbox","team","userRole","WorkflowDashboard","HistoryOutlined","QueryHistoryTracker"],"sourceRoot":""}