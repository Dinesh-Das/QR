{"version":3,"file":"static/js/985.b23c6e4b.chunk.js","mappings":"0MAIA,MAAMA,UAA0BC,EAAAA,UAC9BC,WAAAA,CAAYC,GACVC,MAAMD,GAAO,KAsBfE,YAAc,CAACC,EAAOC,EAAWC,KAE/BC,QAAQH,MAAM,qCAAsC,CAClDA,MAAOA,EAAMI,QACbC,MAAOL,EAAMK,MACbJ,YACAC,UACAI,WAAW,IAAIC,MAAOC,iBAWxB,KAEFC,YAAc,KACZC,KAAKC,SAAS,CAAEC,UAAU,EAAOZ,MAAO,KAAMC,UAAW,OAGrDS,KAAKb,MAAMgB,SACbH,KAAKb,MAAMgB,WAEb,KAEFC,aAAe,KACbC,OAAOC,SAASC,KAAO,UAnDvBP,KAAKQ,MAAQ,CAAEN,UAAU,EAAOZ,MAAO,KAAMC,UAAW,KAC1D,CAEA,+BAAOkB,CAAyBnB,GAC9B,MAAO,CAAEY,UAAU,EAAMZ,QAC3B,CAEAoB,iBAAAA,CAAkBpB,EAAOC,GACvBS,KAAKC,SAAS,CACZX,QACAC,cAIFS,KAAKX,YAAYC,EAAOC,EAAW,CACjCoB,MAAO,YACPC,UAAW,iBACXpB,QAASQ,KAAKb,MAAMK,SAAW,mBAEnC,CAmCAqB,MAAAA,GACE,OAAIb,KAAKQ,MAAMN,UAEXY,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACLC,OAAO,QACPC,MAAM,wBACNC,SAAS,0GACTC,MAAO,EACLL,EAAAA,EAAAA,KAACM,EAAAA,GAAM,CAACC,KAAK,UAAUC,QAAStB,KAAKD,YAAYwB,SAAa,aAAR,UAGtDT,EAAAA,EAAAA,KAACM,EAAAA,GAAM,CAACE,QAAStB,KAAKI,aAAamB,SAAY,WAAP,SAI1CC,MAAO,CAAEC,QAAS,UAAWF,UAE5BG,IA2BA1B,KAAKb,MAAMoC,QACpB,EASFvC,EAAkB2C,aAAe,CAC/BnC,QAAS,kBACTW,QAAS,MAGX,U,gHCnHO,MAAMyB,EAAqBA,KAChC,MAAOC,EAAiBC,IAAsBC,EAAAA,EAAAA,UAAS,KAChDC,EAAeC,IAAoBF,EAAAA,EAAAA,WAAS,IAC5CzC,EAAO4C,IAAYH,EAAAA,EAAAA,UAAS,MAG7BI,GAAcC,EAAAA,EAAAA,aAAYC,UAC9BJ,GAAiB,GACjBC,EAAS,MAET,IACE,MAAMI,QAAkBC,EAAAA,EAAcC,gBAAgB,CAAEC,WACxD,GAAW,OAANA,QAAM,IAANA,IAAAA,EAAQC,QAAS,CACpB,MAAMC,EAAeL,EAAUM,IAAItC,IAAQ,CACzCuC,MAAO,GAAGvC,EAASwC,kBAAkBxC,EAASyC,cAC9CC,MAAO1C,EAASwC,aAChBG,IAAK3C,EAASwC,gBAEhBhB,EAAmBa,EACrB,CACF,CAAE,MAAOO,GACP,GAAW,OAANT,QAAM,IAANA,IAAAA,EAAQC,QAAS,CACpBjD,QAAQH,MAAM,0BAA2B4D,GACzChB,EAASgB,EAAIxD,SACbA,EAAAA,GAAQyD,QAAQ,oEAUhBrB,EAPuB,CACrB,CAAEe,MAAO,iCAAkCG,MAAO,OAAQC,IAAK,QAC/D,CAAEJ,MAAO,iCAAkCG,MAAO,OAAQC,IAAK,QAC/D,CAAEJ,MAAO,iCAAkCG,MAAO,OAAQC,IAAK,QAC/D,CAAEJ,MAAO,iCAAkCG,MAAO,OAAQC,IAAK,QAC/D,CAAEJ,MAAO,iCAAkCG,MAAO,OAAQC,IAAK,SAGnE,CACF,CAAC,QACY,OAANR,QAAM,IAANA,GAAAA,EAAQC,SACXT,GAAiB,EAErB,GACC,IAGGmB,GAAsBhB,EAAAA,EAAAA,aAAaiB,IACvC,MAAMC,EAAQzB,EAAgB0B,KAAKC,GAAKA,EAAER,QAAUK,GACpD,OAAOC,EAAQA,EAAMT,MAAQQ,GAC5B,CAACxB,IAGE4B,GAA2BrB,EAAAA,EAAAA,aAAY,CAACsB,EAAgBC,KAC5D,MAAMC,EAAS,GAUf,OARKF,GAA4C,IAA1BA,EAAeG,QACpCD,EAAOE,KAAK,uCAGVH,GAAgBD,IAAmBA,EAAeK,SAASJ,IAC7DC,EAAOE,KAAK,oDAGPF,GACN,IAGGI,GAAe5B,EAAAA,EAAAA,aAAY,CAAC6B,EAAOC,KAAY,IAADC,EAClD,OAAa,OAAND,QAAM,IAANA,GAAa,QAAPC,EAAND,EAAQrB,aAAK,IAAAsB,OAAP,EAANA,EAAeC,cAAcL,SAASE,EAAMG,gBAClD,IAGGC,GAAkCjC,EAAAA,EAAAA,aAAY,WAA8B,IAA7BkC,EAAkBC,UAAAV,OAAA,QAAAW,IAAAD,UAAA,GAAAA,UAAA,GAAG,GACxE,OAAO1C,EAAgB4C,OAAOnB,IAAUgB,EAAmBP,SAAST,EAAMN,OAC5E,EAAG,CAACnB,KAGJ6C,EAAAA,EAAAA,WAAU,KACR,MAAMC,EAAa,IAAIC,gBAGvB,OAFAzC,EAAYwC,EAAWlC,QAEhB,KACLkC,EAAWE,UAEZ,CAAC1C,IAGJ,MAAM2C,GAAsBC,EAAAA,EAAAA,SAAQ,IAC3BlD,EAAgBe,IAAIU,IAAK,IAC3BA,EACH0B,UAAU,KAEX,CAACnD,IAEJ,MAAO,CACLA,kBACAG,gBACA1C,QACA6C,cACAiB,sBACAK,2BACAO,eACAK,kCACAS,yBCnGE,KAAEG,GAASC,EAAAA,EAEXC,EAAsBlG,EAAAA,KAAWmG,IAKhC,IAADC,EAAAC,EAAA,IALkC,cACtCC,EAAa,MACbC,EAAK,KACLC,EAAI,cACJC,EAAgB,CAAC,GAClBN,EACC,MAAM,gBACJvD,EAAe,cACfG,EAAa,MACb1C,EAAK,YACL6C,EAAW,aACX6B,EAAY,yBACZP,GACE7B,IAGE+D,GAAsBZ,EAAAA,EAAAA,SAAQ,KAClC,IAAKQ,IAAkBC,EAAO,OAAO,EAErC,MAAMI,EAAeJ,EAClBf,OAAOoB,GAAsB,oBAAdA,EAAKC,MAA4C,eAAdD,EAAKC,MACvDlD,IAAIiD,GAAQA,EAAKE,IAEpB,OAAOR,EAAcS,KAAKC,GAAUL,EAAa7B,SAASkC,KACzD,CAACV,EAAeC,IAGbU,GAAsB9D,EAAAA,EAAAA,aAAYC,UACtC,MAAMsC,EAAa,IAAIC,sBACjBzC,EAAYwC,EAAWlC,SAC5B,CAACN,IAGEgE,GAAyB/D,EAAAA,EAAAA,aAAY,CAACgE,EAAGpD,IACxC2C,EAIA3C,GAA0B,IAAjBA,EAAMa,OAIbwC,QAAQC,UAHND,QAAQE,OAAO,IAAIC,MAAM,sDAJzBH,QAAQC,UAQhB,CAACX,IAGEc,GAAuBrE,EAAAA,EAAAA,aAAY,CAACgE,EAAGpD,KAC3C,IAAK2C,EACH,OAAOU,QAAQC,UAGjB,MAAM5C,EAAiB+B,EAAKiB,cAAc,mBAAqB,GAE/D,OAAI1D,IAAUU,EAAeK,SAASf,GAC7BqD,QAAQE,OAAO,IAAIC,MAAM,sDAG3BH,QAAQC,WACd,CAACX,EAAqBF,IAGnBkB,GAA6BvE,EAAAA,EAAAA,aAAawE,IAC9C,MAAMC,EAAsBpB,EAAKiB,cAAc,gBAG3CG,IAAwBD,EAAO7C,SAAS8C,IAC1CpB,EAAKqB,cAAc,oBAAgBtC,IAEpC,CAACiB,IAGEX,GAAsBC,EAAAA,EAAAA,SAAQ,KAClC,MAAMrB,EAAiB+B,EAAKiB,cAAc,mBAAqB,GAC/D,OAAO7E,EAAgB4C,OAAOnB,GAASI,EAAeK,SAAST,EAAMN,SACpE,CAACnB,EAAiB4D,IAarB,OAVAf,EAAAA,EAAAA,WAAU,MACJgB,EAAchC,gBAAkBgC,EAAc/B,eAChD8B,EAAKsB,eAAe,CAClBrD,eAAgBgC,EAAchC,gBAAkB,GAChDC,aAAc+B,EAAc/B,cAAgB,QAG/C,CAAC+B,EAAeD,IAGdE,GAKHqB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA1F,SAAA,EACET,EAAAA,EAAAA,KAACoG,EAAAA,EAAO,KACRF,EAAAA,EAAAA,MAAA,OACExF,MAAO,CACL2F,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZC,aAAc,GACd/F,SAAA,EAEFT,EAAAA,EAAAA,KAACmE,EAAI,CAACsC,QAAM,EAAC/F,MAAO,CAAEgG,MAAO,WAAYjG,SAAC,uBAG1CT,EAAAA,EAAAA,KAACM,EAAAA,GAAM,CACLqG,KAAK,QACLC,MAAM5G,EAAAA,EAAAA,KAAC6G,EAAAA,EAAc,IACrBrG,QAAS4E,EACT0B,QAAS5F,EACT,aAAW,sBACX,cAAY,wBAAuBT,SACpC,uBAKHT,EAAAA,EAAAA,KAACmE,EAAI,CACH5D,KAAK,YACLG,MAAO,CAAE2F,QAAS,QAASG,aAAc,GAAIO,SAAU,QAAStG,SACjE,8HAKAjC,IACCwB,EAAAA,EAAAA,KAACgH,EAAAA,EAAK,CACJpI,QAAQ,sBACRqD,YAAa,0BAA0BzD,0BACvC+B,KAAK,UACL0G,UAAQ,EACRvG,MAAO,CAAE8F,aAAc,IACvB,cAAY,uBAIhBxG,EAAAA,EAAAA,KAACkH,EAAAA,EAAKC,KAAI,CACRnC,KAAK,iBACLjD,MAAM,kBACNqF,MAAO,CACL,CAAEC,UAAWhC,IAEfiC,aAAW,EACXC,QAAQ,oDAAmD9G,UAE3DT,EAAAA,EAAAA,KAACwH,EAAAA,EAAM,CACLC,KAAK,WACLC,YAAY,qCACZZ,QAAS5F,EACTyG,QAAS5G,EACT6G,YAAU,EACVC,aAAc3E,EACd4E,SAAUjC,EACV,aAAW,4BACX,cAAY,yBACZkC,YAAY,aACZC,YAAU,OAIdhI,EAAAA,EAAAA,KAACkH,EAAAA,EAAKC,KAAI,CACRnC,KAAK,eACLjD,MAAM,gBACNqF,MAAO,CACL,CAAEC,UAAW1B,IAEf2B,aAAW,EACXC,QAAQ,gEAA+D9G,UAEvET,EAAAA,EAAAA,KAACwH,EAAAA,EAAM,CACLE,YAAY,kCACZM,YAAU,EACVlB,QAAS5F,EACTyG,QAAS3D,EACT4D,YAAU,EACVC,aAAc3E,EACd,aAAW,0BACX,cAAY,uBACZgB,WAA+C,QAArCK,EAACI,EAAKiB,cAAc,yBAAiB,IAAArB,GAApCA,EAAsCxB,aAKhB,QAApCyB,EAAAG,EAAKiB,cAAc,yBAAiB,IAAApB,OAAA,EAApCA,EAAsCzB,QAAS,IAC9C/C,EAAAA,EAAAA,KAAA,OAAKU,MAAO,CAAEuH,WAAY,GAAIzB,aAAc,IAAK/F,UAC/CT,EAAAA,EAAAA,KAACmE,EAAI,CAAC5D,KAAK,YAAYG,MAAO,CAAEqG,SAAU,QAAStG,SAAC,mFAjGnD,OA0GX4D,EAAoB6D,YAAc,sBAelC7D,EAAoBxD,aAAe,CACjC4D,cAAe,GACfG,cAAe,CAAC,GAGlB,UC1KMuD,EAAYhK,EAAAA,KAAWmG,IAOtB,IAPuB,QAC5B8D,EAAO,YACPC,EAAW,MACX3D,EAAK,OACL4D,EAAM,SACNC,EAAQ,QACRzB,GAAU,GACXxC,EACC,MAAOK,GAAQuC,EAAAA,EAAKsB,WACb/D,EAAegE,IAAoBxH,EAAAA,EAAAA,UAAS,KAC5CyH,EAAqBC,IAA0B1H,EAAAA,EAAAA,UAAS,CAAC,GAG1D2H,GAAa3E,EAAAA,EAAAA,SAAQ,IAAM4E,QAAQR,GAAc,CAACA,IAGlDS,GAAa7E,EAAAA,EAAAA,SAAQ,IACzB2E,EAAa,YAAc,WAC3B,CAACA,IAIGG,GAAkB9E,EAAAA,EAAAA,SAAQ,MAC9B+E,SAAUC,EAAAA,GAAgBD,SAC1BE,MAAOD,EAAAA,GAAgBC,MACvBC,SAAUP,EAAa,GAAKK,EAAAA,GAAgBE,SAC5CzE,MAAO,CACL,CAAE0E,UAAU,EAAMxK,QAAS,oCAC3B,CAAE2B,KAAM,QAAS8I,IAAK,EAAGzK,QAAS,uCAElC,CAACgK,IAGCU,GAAcrF,EAAAA,EAAAA,SAAQ,IAC1BS,EAAM5C,IAAIiD,IAAI,CACZhD,MAAOgD,EAAKC,KACZ9C,MAAO6C,EAAKE,GACZ9C,IAAK4C,EAAKE,MAEZ,CAACP,IAIG6E,GAAejI,EAAAA,EAAAA,aAAYC,UAC/B,UACQ+G,EAAOxC,EAAQuC,GACrB1D,EAAK6E,aACP,CAAE,MAAOhL,GACPG,QAAQH,MAAM,qBAAsBA,EAEtC,GACC,CAAC8J,EAAQD,EAAa1D,IAGnB8E,GAAenI,EAAAA,EAAAA,aAAY,KAC/BqD,EAAK6E,cACLjB,KACC,CAAC5D,EAAM4D,IAGJmB,GAAWpI,EAAAA,EAAAA,aAAY,KAC3BqD,EAAKgF,UACJ,CAAChF,IAGEiF,GAA0BtI,EAAAA,EAAAA,aAAYC,UAC1C,IACE,MAAMsI,QAAkBC,EAAAA,EAAQC,wBAAwBf,GAExD,OADAL,EAAuBkB,GAAa,CAAC,GAC9BA,CACT,CAAE,MAAOrL,GAGP,OAFAG,QAAQqL,KAAK,6CAA8CxL,GAC3DmK,EAAuB,CAAC,GACjB,CAAC,CACV,GACC,KAGH/E,EAAAA,EAAAA,WAAU,KACR,GAAIwE,GAAWC,EAAa,CAC1B,MAAM4B,GAAa5B,EAAY3D,OAAS,IAAI5C,IAAIoI,GAAM,OAADA,QAAC,IAADA,OAAC,EAADA,EAAGjF,IAAItB,OAAOkF,SACnEJ,EAAiBwB,GAGjBtF,EAAKsB,eAAe,CAClB+C,SAAUX,EAAYW,SACtBE,MAAOb,EAAYa,MACnBxE,MAAOuF,IAITL,EAAwBvB,EAAYW,SACtC,MAAWZ,IAAYC,IAErBI,EAAiB,IACjBE,EAAuB,CAAC,GACxBhE,EAAK6E,gBAEN,CAACpB,EAASC,EAAa1D,EAAMiF,IAQhC,OACE5J,EAAAA,EAAAA,KAACmK,EAAAA,EAAK,CACJhK,MAAO2I,EACPsB,KAAMhC,EACNiC,KAAMX,EACNnB,SAAUkB,EACVa,eAAgBxD,EAChByD,gBAAc,EACdC,MAAO,IACPC,cAAc,EACd,kBAAgB,mBAChB,cAAY,aAAYhK,UAExByF,EAAAA,EAAAA,MAACwE,EAAAA,GAAU,CACT/F,KAAMA,EAlBVgG,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IAmBhBE,SAAUvB,EACVwB,UAAU,EACV,aAAY,GAAGjC,SACf,cAAY,YACZkC,cAAc,YACdC,uBAAuB,EAAKxK,SAAA,EAE5BT,EAAAA,EAAAA,KAACkL,EAAAA,GAAc,CACblG,KAAK,WACLjD,MAAM,WACNoJ,eAAe,WACf7D,aAAW,EAAA7G,UAEXT,EAAAA,EAAAA,KAACoL,EAAAA,GAAW,CACV1D,YAAY,iBACZxD,SAAU0E,EACV,aAAW,iBACX,cAAY,iBACZuC,eAAe,WACfH,cAAc,YACdK,UAAU,gBAIdrL,EAAAA,EAAAA,KAACkL,EAAAA,GAAc,CACblG,KAAK,QACLjD,MAAM,QACNoJ,eAAe,QACf7D,aAAW,EAAA7G,UAEXT,EAAAA,EAAAA,KAACoL,EAAAA,GAAW,CACV1D,YAAY,sBACZ,aAAW,cACX,cAAY,cACZyD,eAAe,QACfH,cAAc,YACdK,UAAU,aAIZzC,IACA5I,EAAAA,EAAAA,KAACkL,EAAAA,GAAc,CACblG,KAAK,WACLjD,MAAM,WACNoJ,eAAe,WACf7D,aAAW,EAAA7G,UAEXT,EAAAA,EAAAA,KAACsL,EAAAA,EAAMC,SAAQ,CACb7D,YAAY,iBACZ,aAAW,iBACX,cAAY,sBAKlB1H,EAAAA,EAAAA,KAACkH,EAAAA,EAAKC,KAAI,CACRnC,KAAK,QACLjD,MAAM,QACNqF,MAAO2B,EAAgBrE,MACvB4C,aAAW,EAAA7G,UAEXT,EAAAA,EAAAA,KAACwH,EAAAA,EAAM,CACLC,KAAK,WACLC,YAAY,oBACZC,QAAS2B,EACT,aAAW,kBACX,cAAY,eACZ1B,YAAU,EACVC,aAAcA,CAAC1E,EAAOC,KAAM,IAAAC,EAAA,OACpB,OAAND,QAAM,IAANA,GAAa,QAAPC,EAAND,EAAQrB,aAAK,IAAAsB,OAAP,EAANA,EAAeC,cAAcL,SAASE,EAAMG,gBAE9CyE,YAAY,aACZD,SAAUW,OAKdzI,EAAAA,EAAAA,KAACqE,EAAmB,CAClBI,cAAeA,EACfC,MAAOA,EACPC,KAAMA,EACNC,cAAe8D,WAOzBP,EAAUD,YAAc,YAsBxBC,EAAUtH,aAAe,CACvBwH,YAAa,KACbvB,SAAS,GAGX,U,kCCpPA,MAAM0E,EAAYrN,EAAAA,KAAWmG,IAMtB,IANuB,MAC5BmH,EAAK,QACL3E,EAAO,OACP4E,EAAM,SACNC,EAAQ,gBACR5K,EAAkB,IACnBuD,EAEC,MAAMhC,GAAsBhB,EAAAA,EAAAA,aAAaiB,IACvC,MAAMC,EAAQzB,EAAgB0B,KAAKC,GAAKA,EAAER,QAAUK,GACpD,OAAOC,EAAQA,EAAMT,MAAQQ,GAC5B,CAACxB,IAGE6K,GAAU3H,EAAAA,EAAAA,SAAQ,IAAM,CAC5B,CACE9D,MAAO,WACP0L,UAAW,WACX1J,IAAK,WACL2J,OAAQA,CAACC,EAAGC,IAAMD,EAAE/C,SAASiD,cAAcD,EAAEhD,UAC7C,aAAc,mBAEhB,CACE7I,MAAO,QACP0L,UAAW,QACX1J,IAAK,QACL2J,OAAQA,CAACC,EAAGC,IAAMD,EAAE7C,MAAM+C,cAAcD,EAAE9C,OAC1C,aAAc,gBAEhB,CACE/I,MAAO,QACP0L,UAAW,QACX1J,IAAK,QACL,aAAc,eACdpC,OAAS2E,IAEYwH,MAAMC,QAAQzH,GAASA,EAAQ,IAE/C5C,IAAIiD,IAAY,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMC,OAAQD,GAAQ,IAClCpB,OAAOkF,SACPuD,KAAK,OAEY,qBAGxB,CACEjM,MAAO,kBACPgC,IAAK,SACL,aAAc,yBACdpC,OAAQA,CAACuF,EAAG+G,KAEV,IAAIzJ,EAAiB,GACjBC,EAAe,KAuBnB,GApBIwJ,EAAOC,mBACLJ,MAAMC,QAAQE,EAAOC,kBACvB1J,EAAiByJ,EAAOC,iBACfD,EAAOC,iBAAiB1J,gBAAkBsJ,MAAMC,QAAQE,EAAOC,iBAAiB1J,kBACzFA,EAAiByJ,EAAOC,iBAAiB1J,eACzCC,EAAewJ,EAAOC,iBAAiBzJ,eAKb,IAA1BD,EAAeG,QAAgBsJ,EAAOzJ,iBACpCsJ,MAAMC,QAAQE,EAAOzJ,gBACvBA,EAAiByJ,EAAOzJ,eACkB,kBAA1ByJ,EAAOzJ,gBAA+ByJ,EAAOzJ,eAAe2J,SAE5E3J,EAAiByJ,EAAOzJ,eAAe4J,MAAM,KAAK1K,IAAIU,GAASA,EAAM+J,QAAQ5I,OAAOkF,UAEtFhG,EAAewJ,EAAOxJ,eAGnBD,GAA4C,IAA1BA,EAAeG,OACpC,OAAO/C,EAAAA,EAAAA,KAAA,QAAMU,MAAO,CAAEgG,MAAO,QAAU,aAAW,qBAAoBjG,SAAC,SAGzE,MAAMgM,EAAS7J,EACZd,IAAIS,GAAaD,EAAoBC,IACrC6J,KAAK,MAER,OACElG,EAAAA,EAAAA,MAAA,OAAAzF,SAAA,EACET,EAAAA,EAAAA,KAAA,OAAK,aAAY,oBAAoByM,IAAShM,SAAEgM,IAC/C5J,IACCqD,EAAAA,EAAAA,MAAA,OACExF,MAAO,CAAEqG,SAAU,OAAQL,MAAO,QAClC,aAAY,kBAAkBpE,EAAoBO,KAAgBpC,SAAA,CACnE,YACW6B,EAAoBO,WAO1C,CACE1C,MAAO,UACPgC,IAAK,UACL,aAAc,iBACdpC,OAAQA,CAACuF,EAAG+G,KACVnG,EAAAA,EAAAA,MAAA,OAAKnB,KAAK,QAAQ,aAAY,oBAAoBsH,EAAOrD,WAAWvI,SAAA,EAClET,EAAAA,EAAAA,KAACM,EAAAA,GAAM,CACLC,KAAK,OACLqG,MAAM5G,EAAAA,EAAAA,KAAC0M,EAAAA,EAAY,IACnBlM,QAASA,IAAMkL,EAAOW,GACtB,aAAY,aAAaA,EAAOrD,WAChC,cAAa,eAAeqD,EAAOpH,KAAKxE,SACzC,UAGDT,EAAAA,EAAAA,KAACM,EAAAA,GAAM,CACLC,KAAK,OACLoM,QAAM,EACN/F,MAAM5G,EAAAA,EAAAA,KAAC4M,EAAAA,EAAc,IACrBpM,QAASA,IAAMmL,EAASU,EAAOpH,IAC/B,aAAY,eAAeoH,EAAOrD,WAClC,cAAa,iBAAiBqD,EAAOpH,KAAKxE,SAC3C,gBAMN,CAACiL,EAAQC,EAAUrJ,IAGhBuK,GAAa5I,EAAAA,EAAAA,SAAQ,KAEzB,MAAM6I,EAAYZ,MAAMC,QAAQV,GAASA,EAAQ,GAEjD,MAAO,CACLG,UACAmB,WAAYD,EACZE,OAAQ,KACRlG,UACAmG,WAAY,CACVC,SAAU,GACVC,iBAAiB,EACjBC,iBAAiB,EACjBC,UAAWA,CAACC,EAAOC,IACjB,GAAGA,EAAM,MAAMA,EAAM,SAASD,UAChC,aAAc,yBAEhBE,OAAQ,CAAEC,EAAG,KACb9G,KAAM,SACN,aAAc,cACd,cAAe,gBAEhB,CAACiF,EAASH,EAAO3E,IAGdgG,EAAYZ,MAAMC,QAAQV,GAASA,EAAQ,GACjD,OAAK3E,GAAgC,IAArBgG,EAAU/J,QAiBxB/C,EAAAA,EAAAA,KAAC0N,EAAAA,EAAK,IACAb,EACJc,OAAQ,CACNC,UAAW,qBAlBb5N,EAAAA,EAAAA,KAAA,OACEU,MAAO,CACLmN,UAAW,SACXlN,QAAS,SACT+F,MAAO,QAET3B,KAAK,SACL,aAAW,iBAAgBtE,SAC5B,iEAgBP+K,EAAUtD,YAAc,YAaxBsD,EAAU3K,aAAe,CACvB4K,MAAO,GACP3E,SAAS,EACT/F,gBAAiB,IAGnB,U,cCtOA,MAyBM+M,EAzBwBC,MAW5B,IAEE,OADkBC,EAAAA,MAAAA,OAEpB,CAAE,MAAOxP,GAEP,OADAG,QAAQqL,KAAK,wCACN,CACLiE,IAAKA,IAAM1I,QAAQC,QAAQ,IAC3B0I,KAAMA,IAAM3I,QAAQC,QAAQ,CAAC,GAC7B2I,IAAKA,IAAM5I,QAAQC,QAAQ,CAAC,GAC5B4I,OAAQA,IAAM7I,QAAQC,QAAQ,CAAC,GAEnC,GAGgBuI,GAGZM,EACS,cADTA,EAEO,YAFPA,EAGO,YAHPA,EAIO,YAJPA,EAKe,oBALfA,EAMc,mBANdA,EAOS,cAITC,EAAe,CACnB7C,MAAO,GACP/G,MAAO,GACPoC,SAAS,EACTtI,MAAO,KACP+P,cAAc,EACdlG,YAAa,MAITmG,EAAcA,CAAC9O,EAAO+O,KAC1B,OAAQA,EAAOlO,MACb,KAAK8N,EACH,MAAO,IAAK3O,EAAOoH,QAAS2H,EAAOC,SACrC,KAAKL,EACH,MAAO,IAAK3O,EAAO+L,MAAOgD,EAAOC,QAAS5H,SAAS,EAAOtI,MAAO,MACnE,KAAK6P,EACH,MAAO,IAAK3O,EAAOgF,MAAO+J,EAAOC,SACnC,KAAKL,EACH,MAAO,IAAK3O,EAAOlB,MAAOiQ,EAAOC,QAAS5H,SAAS,GACrD,KAAKuH,EACH,MAAO,IAAK3O,EAAO6O,aAAcE,EAAOC,SAC1C,KAAKL,EACH,MAAO,IAAK3O,EAAO2I,YAAaoG,EAAOC,SACzC,KAAKL,EACH,MAAO,IAAK3O,EAAO6O,cAAc,EAAOlG,YAAa,MACvD,QACE,OAAO3I,I,cCxEb,MAyJA,EAzJciP,KAEZ,MAAM,MAAElD,EAAK,MAAE/G,EAAK,QAAEoC,EAAO,aAAEyH,EAAY,YAAElG,EAAW,QAAEuG,GD2I3BC,MAC/B,MAAOnP,EAAOoP,IAAYC,EAAAA,EAAAA,YAAWP,EAAaF,GAG5CU,GAAa1N,EAAAA,EAAAA,aAAYC,UAC7BuN,EAAS,CAAEvO,KAAM8N,EAA0BK,SAAS,IACpD,IACE,MAAMO,QAAanB,EAAUG,IAAI,eAAgB,CAAEtM,WAE7CuN,GAAaC,EAAAA,EAAAA,IAAgBF,EAAM,SAGnCG,QAAwB7J,QAAQ8J,IACpCH,EAAWpN,IAAIP,UACb,IACE,MAAMsI,QAAkBC,EAAAA,EAAQC,wBAAwBuF,EAAKtG,SAAU,CAAErH,WACzE,MAAO,IACF2N,EACH5K,OAAO6K,EAAAA,EAAAA,IAAcD,EAAK5K,OAC1B4H,kBAAkBkD,EAAAA,EAAAA,IAAc3F,GAEpC,CAAE,MAAOrL,GAIP,OAHW,OAANmD,QAAM,IAANA,GAAAA,EAAQC,SACXjD,QAAQH,MAAM,mCAAoCA,GAE7C,IACF8Q,EACH5K,OAAO6K,EAAAA,EAAAA,IAAcD,EAAK5K,OAC1B4H,kBAAkBkD,EAAAA,EAAAA,IAAc,MAEpC,KAIO,OAAN7N,QAAM,IAANA,GAAAA,EAAQC,SACXkN,EAAS,CAAEvO,KAAM8N,EAAwBK,QAASU,GAEtD,CAAE,MAAO5Q,GACI,OAANmD,QAAM,IAANA,GAAAA,EAAQC,UACXjD,QAAQH,MAAM,wBAAyBA,GACvCsQ,EAAS,CAAEvO,KAAM8N,EAAwBK,QAASlQ,EAAMI,UACxDA,EAAAA,GAAQJ,MAAM,yBAEdsQ,EAAS,CAAEvO,KAAM8N,EAAwBK,QAAS,KAEtD,GACC,IAGGe,GAAanO,EAAAA,EAAAA,aAAYC,UAC7B,IACE,MAAM0N,QAAanB,EAAUG,IAAI,eAAgB,CAAEtM,WACnD,GAAW,OAANA,QAAM,IAANA,IAAAA,EAAQC,QAAS,CAEpB,MAAM8N,GAAaP,EAAAA,EAAAA,IAAgBF,EAAM,SACzCH,EAAS,CAAEvO,KAAM8N,EAAwBK,QAASgB,GACpD,CACF,CAAE,MAAOlR,GACI,OAANmD,QAAM,IAANA,GAAAA,EAAQC,UACXjD,QAAQH,MAAM,yBAA0BA,GACxCI,EAAAA,GAAQJ,MAAM,yBACdsQ,EAAS,CAAEvO,KAAM8N,EAAwBK,QAAS,KAEtD,GACC,IAGGiB,GAAarO,EAAAA,EAAAA,aAAYC,UAC7B,UACQuM,EAAUM,OAAO,gBAAgBwB,KACvChR,EAAAA,GAAQiR,QAAQ,6BAEhB,MAAMhM,EAAa,IAAIC,sBACjBkL,EAAWnL,EAAWlC,OAC9B,CAAE,MAAOnD,GAEP,MADAI,EAAAA,GAAQJ,MAAM,yBACRA,CACR,GACC,CAACwQ,IAGEc,GAAWxO,EAAAA,EAAAA,aAAYC,MAAOuE,EAAQuC,KAC1C,IAEE,MAAM,eAAEzF,EAAc,aAAEC,EAAY,MAAE6B,KAAUqL,GAAajK,EAE7D,GAAIuC,EAAa,CAKf,SAHMyF,EAAUK,IAAI,gBAAgB9F,EAAYpD,KAAM8K,GAGlDrL,GAASA,EAAM3B,OAAS,EAC1B,UACQ+K,EAAUI,KAAK,gBAAgB7F,EAAYpD,WAAY,CAC3D+K,QAAStL,GAEb,CAAE,MAAOuL,GACPtR,QAAQqL,KAAK,+BAAgCiG,GAC7CrR,EAAAA,GAAQyD,QAAQ,+CAClB,CAIEO,GAAkBA,EAAeG,OAAS,SACtC+G,EAAAA,EAAQoG,2BAA2B7H,EAAYW,SAAU,CAC7DpG,iBACAC,aAAcA,GAAgBD,EAAe,KAIjDhE,EAAAA,GAAQiR,QAAQ,4BAClB,KAAO,CAEL,MAAMM,EAAc,IACfJ,EACHrL,MAAOA,GAAS,GAChB9B,eAAgBA,GAAkB,GAClCC,aAAcA,IAAiBD,GAAkBA,EAAeG,OAAS,EAAIH,EAAe,GAAK,OAG7FwN,QAAiBtC,EAAUI,KAAK,eAAgBiC,GACtDxR,QAAQ0R,IAAI,0BAA2BD,GAGf,YAApBA,EAASlQ,OACXtB,EAAAA,GAAQyD,QAAQ+N,EAASxR,UAChBwR,EAASlQ,OAClBtB,EAAAA,GAAQiR,QAAQ,6BAMpB,CAEAf,EAAS,CAAEvO,KAAM8N,IAEjB,MAAMxK,EAAa,IAAIC,sBACjBkL,EAAWnL,EAAWlC,OAC9B,CAAE,MAAOnD,GAEP,MADAI,EAAAA,GAAQJ,MAAM,uBACRA,CACR,GACC,CAACwQ,IAGEsB,GAAgBhP,EAAAA,EAAAA,aAAYC,UAChCuN,EAAS,CAAEvO,KAAM8N,EAA+BK,QAASY,IACzDR,EAAS,CAAEvO,KAAM8N,EAAgCK,SAAS,KACzD,IAGG6B,GAAejP,EAAAA,EAAAA,aAAY,KAC/BwN,EAAS,CAAEvO,KAAM8N,EAA+BK,QAAS,OACzDI,EAAS,CAAEvO,KAAM8N,EAAgCK,SAAS,KACzD,IAGG8B,GAAalP,EAAAA,EAAAA,aAAY,KAC7BwN,EAAS,CAAEvO,KAAM8N,KAChB,IAqCH,OAlCAzK,EAAAA,EAAAA,WAAU,KACR,MAAMC,EAAa,IAAIC,gBAiBvB,MAfuBvC,WACrB,UACQgE,QAAQ8J,IAAI,CAChBL,EAAWnL,EAAWlC,QACtB8N,EAAW5L,EAAWlC,SAE1B,CAAE,MAAOnD,GACFqF,EAAWlC,OAAOC,SACrBjD,QAAQH,MAAM,2CAA4CA,EAE9D,GAGFiS,GAEO,KACL5M,EAAWE,UAEZ,CAACiL,EAAYS,IAaT,IACF/P,EACHkP,QAZc,CACdI,aACAS,aACAE,aACAG,WACAQ,gBACAC,eACAC,gBC7UoE3B,IAChE,gBAAE9N,GAAoBD,IAGtB4P,GAAwBpP,EAAAA,EAAAA,aAAYC,UACxC,IACE,MAAMoP,QAAelP,EAAAA,EAAcmP,qBACnChS,EAAAA,GAAQiR,QAAQc,EAClB,CAAE,MAAOnS,GACPI,EAAAA,GAAQJ,MAAM,gBAAkBA,EAAMI,UACxC,GACC,IAEGiS,GAAsBvP,EAAAA,EAAAA,aAAYC,UACtC,IACE,MAAMoP,QAAelP,EAAAA,EAAcqP,qBACnClS,EAAAA,GAAQiR,QAAQc,EAClB,CAAE,MAAOnS,GACPI,EAAAA,GAAQJ,MAAM,uBAAyBA,EAAMI,UAC/C,GACC,IAEGmS,GAAsBzP,EAAAA,EAAAA,aAAYC,UACtC,IACE,MAAMoP,QAAelP,EAAAA,EAAcuP,2BACnCrS,QAAQ0R,IAAI,qBAAsBM,GAClC/R,EAAAA,GAAQqS,KAAK,oCACf,CAAE,MAAOzS,GACPI,EAAAA,GAAQJ,MAAM,sBAAwBA,EAAMI,UAC9C,GACC,IAGGK,GAAcqC,EAAAA,EAAAA,aAAY,KAC9B,MAAMuC,EAAa,IAAIC,gBACvB8K,EAAQI,WAAWnL,EAAWlC,SAC7B,CAACiN,IAGEsC,GAAsB5P,EAAAA,EAAAA,aAAYC,UACtC,IAEE,MAAMuM,SAAmB,wCAAyBqD,QAC5CR,QAAe7C,EAAUG,IAAI,0BACnCtP,QAAQ0R,IAAI,0BAA2BM,GACvC/R,EAAAA,GAAQiR,QAAQ,0DAClB,CAAE,MAAOrR,GACPG,QAAQH,MAAM,0BAA2BA,GACpB,MAAjBA,EAAM0B,OACRtB,EAAAA,GAAQJ,MAAM,+CAEdI,EAAAA,GAAQJ,MAAM,gBAAgBA,EAAMI,UAExC,GACC,IAGGwS,GAAkB9P,EAAAA,EAAAA,aAAY,KAClC/B,OAAOC,SAASC,KAAO,gBACtB,IAGG4R,GAAsB/P,EAAAA,EAAAA,aAAYC,UACtC,IACE,MAAMuM,SAAmB,wCAAyBqD,QAC5CR,QAAe7C,EAAUI,KAAK,0BACpCvP,QAAQ0R,IAAI,0BAA2BM,GACvC/R,EAAAA,GAAQiR,QAAQ,8CAEhB,MAAMhM,EAAa,IAAIC,gBACvB8K,EAAQI,WAAWnL,EAAWlC,OAChC,CAAE,MAAOnD,GACPG,QAAQH,MAAM,0BAA2BA,GACzCI,EAAAA,GAAQJ,MAAM,eAAeA,EAAMI,UACrC,GACC,CAACgQ,IAGE0C,GAAcC,EAAAA,EAAAA,MACdtH,GAAYuH,EAAAA,EAAAA,MACZC,GAAgBC,EAAAA,EAAAA,MAEtB,OACE1R,EAAAA,EAAAA,KAAC9B,EAAiB,CAACQ,QAAQ,kBAAkBW,QAASJ,EAAYwB,UAChEyF,EAAAA,EAAAA,MAAA,OAAKxF,MAAO,CAAEC,QAAS,QAASF,SAAA,EAE9BT,EAAAA,EAAAA,KAACgH,EAAAA,EAAK,CACJpI,QAAS,qBAAqB0S,GAAe,mCAAmCG,aAAyBxH,EAAUmC,KAAK,OAAS,SACjI7L,KAAMkR,EAAgB,OAAS,UAC/B/Q,MAAO,CAAE8F,aAAc,IACvBS,UAAQ,EACRwH,QACGgD,IACCzR,EAAAA,EAAAA,KAACM,EAAAA,GAAM,CAACqG,KAAK,QAAQnG,QAAS4Q,EAAgB3Q,SAAC,mBAQrDT,EAAAA,EAAAA,KAAA,OAAKU,MAAO,CAAE8F,aAAc,IAAK/F,UAC/ByF,EAAAA,EAAAA,MAACyL,EAAAA,EAAK,CAACC,MAAI,EAAAnR,SAAA,EACTT,EAAAA,EAAAA,KAACM,EAAAA,GAAM,CACLC,KAAK,UACLC,QAASoO,EAAQ2B,aACjB,cAAY,kBAAiB9P,SAC9B,cAGDT,EAAAA,EAAAA,KAACM,EAAAA,GAAM,CAACE,QAASkQ,EAAsBjQ,SAAC,uBAGxCT,EAAAA,EAAAA,KAACM,EAAAA,GAAM,CAACE,QAASqQ,EAAoBpQ,SAAC,qBAGtCT,EAAAA,EAAAA,KAACM,EAAAA,GAAM,CAACE,QAASuQ,EAAoBtQ,SAAC,gBAGtCT,EAAAA,EAAAA,KAACM,EAAAA,GAAM,CAACE,QAAS0Q,EAAoBzQ,SAAC,qBAGtCT,EAAAA,EAAAA,KAACM,EAAAA,GAAM,CAACE,QAAS6Q,EAAqB9Q,KAAK,SAAQE,SAAC,0BAOxDT,EAAAA,EAAAA,KAACwL,EAAS,CACRC,MAAOA,EACP3E,QAASA,EACT4E,OAAQkD,EAAQ0B,cAChB3E,SAAUiD,EAAQe,WAClB5O,gBAAiBA,KAInBf,EAAAA,EAAAA,KAACmI,EAAS,CACRC,QAASmG,EACTlG,YAAaA,EACb3D,MAAOA,EACP4D,OAAQsG,EAAQkB,SAChBvH,SAAUqG,EAAQ4B,WAClB1J,QAASA,S,8DCtIZ,MAAM+K,EAAc,SAAC5C,GAAyB,IAAnB6C,EAAQrO,UAAAV,OAAA,QAAAW,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAC3C,OAAIyI,MAAMC,QAAQ8C,GACTA,GAGTtQ,QAAQqL,KAAK,wCAAyC,CAAEiF,OAAM6C,aACvDA,EACT,EAqBa3C,EAAkB,SAACiB,GAA6C,IAAnC2B,EAAOtO,UAAAV,OAAA,QAAAW,IAAAD,UAAA,GAAAA,UAAA,GAAG,KAAMqO,EAAQrO,UAAAV,OAAA,QAAAW,IAAAD,UAAA,GAAAA,UAAA,GAAG,GACnE,IAAK2M,EACH,OAAO0B,EAIT,IAAKC,EACH,OAAOF,EAAYzB,EAAU0B,GAI/B,MAAME,EAAOD,EAAQvF,MAAM,KAC3B,IAAIyC,EAAOmB,EAEX,IAAK,MAAMjO,KAAO6P,EAAM,CACtB,IAAI/C,GAAwB,kBAATA,KAAqB9M,KAAO8M,GAI7C,OADAtQ,QAAQqL,KAAK,QAAQ7H,4BAA+BiO,GAC7C0B,EAHP7C,EAAOA,EAAK9M,EAKhB,CAEA,OAAO0P,EAAY5C,EAAM6C,EAC3B,EAQavC,EAAiB7K,GACVmN,EAAYnN,GAEb5C,IAAIiD,GACC,kBAATA,EACF,CAAEC,KAAMD,EAAME,GAAIF,GAEP,kBAATA,GAA8B,OAATA,EACvB,CACLC,KAAMD,EAAKC,MAAQD,EAAKkN,UAAYlN,EAAKE,IAAM,eAC/CA,GAAIF,EAAKE,IAAMF,EAAKC,MAAQD,EAAKkN,UAAYC,KAAKC,SAASC,SAAS,OACjErN,GAGA,CAAEC,KAAM,eAAgBC,GAAIiN,KAAKC,SAASC,SAAS,MAUjD5C,EAAiB3F,GACvBA,EAKDqC,MAAMC,QAAQtC,GACT,CACLjH,eAAgBiH,EAChBhH,aAAcgH,EAAU9G,OAAS,EAAI8G,EAAU,GAAK,MAK/B,kBAAdA,EACF,CACLjH,eAAgBiP,EAAYhI,EAAUjH,gBAAkBiH,EAAU4C,QAClE5J,aAAcgH,EAAUhH,cAAgBgH,EAAUwI,SAAW,MAI1D,CAAEzP,eAAgB,GAAIC,aAAc,MAnBlC,CAAED,eAAgB,GAAIC,aAAc,K,4HCnF/C,MAAM,SAAEyP,GAAahH,EAAAA,EAKfF,EAAcjN,EAAAA,KAAWmG,IAQxB,IARyB,MAC9BpC,EAAK,SACL4F,EAAQ,eACRqD,EAAiB,OAAM,cACvBH,EAAgB,cAAa,UAC7BK,EAAY,QAAO,mBACnBkH,KACGlU,GACJiG,EACC,MAAM,cAAEkO,IAAkBC,EAAAA,EAAAA,OACnBC,EAAiBC,IAAsB1R,EAAAA,EAAAA,UAAS,CACrD2R,SAAS,EACT9P,OAAQ,GACR+P,aAAa,IAGTC,GAAexR,EAAAA,EAAAA,aAAayR,IAChC,MAAMC,EAAaD,EAAEE,OAAO/Q,MACtBgR,EAAaV,EAAcQ,EAAY7H,GAE7CwH,EAAmBO,GAGfA,EAAWL,cACbM,EAAAA,GAAoBC,cAClBJ,EACAE,EAAWG,eACXrI,EACAK,GAGFzM,EAAAA,GAAQyD,QAAQ,6CAIdyF,GACFA,EAAS,IACJiL,EACHE,OAAQ,IACHF,EAAEE,OACL/Q,MAAOgR,EAAWG,kBAMpBd,GACFA,EAAmBW,IAEpB,CAACpL,EAAUqD,EAAgBH,EAAeK,EAAWkH,EAAoBC,IAE5E,OACExS,EAAAA,EAAAA,KAACsL,EAAAA,EAAK,IACAjN,EACJ6D,MAAOA,EACP4F,SAAUgL,EACV5S,OAAQwS,EAAgBE,QAAU,GAAK,QACvCzS,MAAOuS,EAAgB5P,OAAOsJ,KAAK,UAQnCkH,EAAiBnV,EAAAA,KAAWoV,IAQ3B,IAR4B,MACjCrR,EAAK,SACL4F,EAAQ,eACRqD,EAAiB,WAAU,cAC3BH,EAAgB,iBAAgB,UAChCK,EAAY,WAAU,mBACtBkH,KACGlU,GACJkV,EACC,MAAM,cAAEf,IAAkBC,EAAAA,EAAAA,OACnBC,EAAiBC,IAAsB1R,EAAAA,EAAAA,UAAS,CACrD2R,SAAS,EACT9P,OAAQ,GACR+P,aAAa,IAGTC,GAAexR,EAAAA,EAAAA,aAAayR,IAChC,MAAMC,EAAaD,EAAEE,OAAO/Q,MACtBgR,EAAaV,EAAcQ,EAAY7H,GAE7CwH,EAAmBO,GAGfA,EAAWL,cACbM,EAAAA,GAAoBC,cAClBJ,EACAE,EAAWG,eACXrI,EACAK,GAGFzM,EAAAA,GAAQyD,QAAQ,6CAIdyF,GACFA,EAAS,IACJiL,EACHE,OAAQ,IACHF,EAAEE,OACL/Q,MAAOgR,EAAWG,kBAMpBd,GACFA,EAAmBW,IAEpB,CAACpL,EAAUqD,EAAgBH,EAAeK,EAAWkH,EAAoBC,IAE5E,OACExS,EAAAA,EAAAA,KAACsS,EAAQ,IACHjU,EACJ6D,MAAOA,EACP4F,SAAUgL,EACV5S,OAAQwS,EAAgBE,QAAU,GAAK,QACvCzS,MAAOuS,EAAgB5P,OAAOsJ,KAAK,UAQnC1B,EAAavM,EAAAA,KAAWqV,IAMvB,IANwB,SAC7B/S,EAAQ,SACRqK,EAAQ,cACRE,EAAgB,aAAY,sBAC5BC,GAAwB,KACrB5M,GACJmV,EACC,MAAOC,EAAgBC,IAAqBzS,EAAAA,EAAAA,UAAS,IAG/C0S,GAAerS,EAAAA,EAAAA,aAAYC,UAC/B,IAEE,MAAMqS,EAAkB,CAAC,EACnBC,EAAiB,GAEvBC,OAAO9B,KAAKlM,GAAQiO,QAAQ5R,IAC1B,MAAM6R,EAAgBlO,EAAO3D,GAE7B,GAA6B,kBAAlB6R,EAA4B,CACrC,MAAMX,EAAiBY,EAAAA,GAAeC,aAAaF,GACnDJ,EAAgBzR,GAAOkR,EAEnBA,IAAmBW,GACrBH,EAAe7Q,KAAK,CAClBmR,MAAOhS,EACP6R,cAAeA,EAAcI,UAAU,EAAG,IAC1Cf,eAAgBA,EAAee,UAAU,EAAG,KAGlD,MACER,EAAgBzR,GAAO6R,IAKvBH,EAAe9Q,OAAS,GAAKkI,IAC/B4I,EAAeE,QAAQM,IACrBlB,EAAAA,GAAoBC,cAClBiB,EAAML,cACNK,EAAMhB,eACNrI,EACAqJ,EAAMF,SAIVvV,EAAAA,GAAQyD,QAAQ,GAAGwR,EAAe9Q,gDAIhC+H,SACIA,EAAS8I,EAEnB,CAAE,MAAOpV,GAGP,MAFAG,QAAQH,MAAM,+BAAgCA,GAC9CI,EAAAA,GAAQJ,MAAM,0BACRA,CACR,GACC,CAACsM,EAAUE,EAAeC,IAU7B,OAPArH,EAAAA,EAAAA,WAAU,KACR,GAAIqH,EAAuB,CACzB,MAAMqJ,EAASnB,EAAAA,GAAoBoB,kBACnCb,EAAkBY,EAAOE,OAAO,IAClC,GACC,CAACvJ,KAGF/E,EAAAA,EAAAA,MAACgB,EAAAA,EAAI,IACC7I,EACJyM,SAAU6I,EACVc,gBAAiB,CAAC,WAAY,UAAUhU,SAAA,CAEvCA,GAGAG,OAwBDsK,EAAiB/M,EAAAA,KAAWuW,IAM3B,IAN4B,SACjCjU,EAAQ,eACR0K,EAAiB,OAAM,KACvBnG,EAAI,MACJoC,EAAQ,MACL/I,GACJqW,EAEC,MAAMC,EAAgBxW,EAAAA,QAAc,KAClC,IAAIyW,EAAY,GAEhB,OAAQzJ,GACN,IAAK,WACHyJ,EAAY3L,EAAAA,GAAgBD,SAC5B,MACF,IAAK,QACH4L,EAAY3L,EAAAA,GAAgBC,MAC5B,MACF,IAAK,WACH0L,EAAY3L,EAAAA,GAAgBE,SAC5B,MACF,IAAK,cACHyL,EAAY3L,EAAAA,GAAgB4L,YAC5B,MACF,IAAK,eACHD,EAAY3L,EAAAA,GAAgB6L,aAC5B,MACF,IAAK,YACHF,EAAY3L,EAAAA,GAAgB1G,UAC5B,MACF,IAAK,OACHqS,EAAY3L,EAAAA,GAAgB8L,MAAK,EAAO,EAAG,KAC3C,MACF,IAAK,WACHH,EAAY3L,EAAAA,GAAgB+L,UAAS,EAAO,EAAG,KAC/C,MACF,QACEJ,EAAY,GAGhB,MAAO,IAAIA,KAAcxN,IACxB,CAAC+D,EAAgB/D,IAEpB,OACEpH,EAAAA,EAAAA,KAACkH,EAAAA,EAAKC,KAAI,IACJ9I,EACJ2G,KAAMA,EACNoC,MAAOuN,EAAclU,SAEpBA,MAuCP2K,EAAYlD,YAAc,cAC1BoL,EAAepL,YAAc,iBAC7BwC,EAAWxC,YAAc,aACzBgD,EAAehD,YAAc,iBAI7B,S,0DC3VO,MAAM4B,EAAU,CAOrBC,wBAAyBxI,eAAOyH,GAA4B,IAAlBrB,EAAOlE,UAAAV,OAAA,QAAAW,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACnD,IAKE,GAJA9E,QAAQ0R,IAAI,sCAAuCrH,GACnDrK,QAAQ0R,IAAI,qBAAqBqB,EAAAA,EAAAA,SAG5BA,EAAAA,EAAAA,MAEH,OADA/S,QAAQqL,KAAK,2DACN,CACLpH,eAAgB,GAChBC,aAAc,KACdoS,eAAgB,KAChBC,aAAa,GAKjB,MAAMC,GAAQC,EAAAA,EAAAA,MAGd,GAFAzW,QAAQ0R,IAAI,mBAAoB8E,EAAQ,cAAgB,kBAEpDA,EACF,IACE,MAAME,QAA2BvH,EAAAA,QAAUI,KAAK,iBAAkB,CAAEiH,SAASxN,GAM7E,GALAhJ,QAAQ0R,IAAI,6BAA8BgF,GAC1C1W,QAAQ0R,IAAI,wBAAyBgF,EAAmBC,YACxD3W,QAAQ0R,IAAI,0BAA2BgF,EAAmBxS,cAC1DlE,QAAQ0R,IAAI,iBAAkBgF,EAAmBH,aAE7CG,EAAmBE,MAAO,CAE5B,GAAIF,EAAmBC,YAAcD,EAAmBC,WAAWvS,OAAS,EAE1E,OADApE,QAAQ0R,IAAI,gCAAiCgF,GACtC,CACLzS,eAAgByS,EAAmBC,YAAc,GACjDzS,aAAcwS,EAAmBxS,cAAgB,KACjDoS,eAAgBI,EAAmBxS,cAAiBwS,EAAmBC,YAAcD,EAAmBC,WAAW,IAAO,KAC1HJ,YAAaG,EAAmBH,cAAe,GAKnD,GAAIG,EAAmBxS,cAAgBwS,EAAmBH,YAExD,OADAvW,QAAQ0R,IAAI,sFAAuFgF,EAAmBxS,cAC/G,CACLD,eAAgB,CAACyS,EAAmBxS,cACpCA,aAAcwS,EAAmBxS,aACjCoS,eAAgBI,EAAmBxS,aACnCqS,YAAaG,EAAmBH,cAAe,GAKnDvW,QAAQ0R,IAAI,kDACd,CACF,CAAE,MAAOmF,GACP7W,QAAQqL,KAAK,kDAAmDwL,EAClE,CAIF,MAAMC,EAAe,CAAC,WAAY,kBAAmB,aACrD,IAAK,MAAMtT,KAAOsT,EAAc,CAC9B,MAAMC,EAAiBC,aAAaC,QAAQzT,IAAQ0T,eAAeD,QAAQzT,GAC3E,GAAIuT,EACF,IACE,MAAM3F,EAAW+F,KAAKC,MAAML,GAC5B,GAAI3F,EAASuF,YAAcvF,EAASnN,eAElC,OADAjE,QAAQ0R,IAAI,sCAAuCN,GAC5C,CACLnN,eAAgBmN,EAASuF,YAAcvF,EAASnN,gBAAkB,GAClEC,aAAckN,EAASlN,cAAgB,KACvCoS,eAAgBlF,EAASlN,eAAkBkN,EAASuF,YAAcvF,EAASnN,kBAAoBmN,EAASuF,YAAcvF,EAASnN,gBAAgB,IAAO,KACtJsS,YAAanF,EAASmF,cAAe,EAG3C,CAAE,MAAOc,GACPrX,QAAQqL,KAAK,yCAAyC7H,KAAQ6T,EAChE,CAEJ,CAGA,IAEE,MAAMC,GAAab,EAAAA,EAAAA,MACbC,QAA2BvH,EAAAA,QAAUI,KAAK,iBAAkB,CAAEiH,MAAOc,GAActO,GACzF,GAAI0N,EAAmBE,OAASF,EAAmBa,QAAS,CAAC,IAADC,EAC1DxX,QAAQ0R,IAAI,uDAEZ,MACMiB,EAA+B,QAApB6E,SADSrI,EAAAA,QAAUG,IAAI,eAAgBtG,IACxB8D,aAAK,IAAA0K,OAAA,EAAjBA,EAAmB1T,KAAK6M,GAAQA,EAAKtG,WAAaA,GAEtE,GAAIsI,GAAeA,EAAY1O,eAG7B,OAFAjE,QAAQ0R,IAAI,4DAA6DiB,GAElE,CACL1O,eAAgB0O,EAAY1O,gBAAkB,GAC9CC,aAAcyO,EAAYzO,cAAgB,KAC1CoS,eAAgB3D,EAAYzO,cAAiByO,EAAY1O,gBAAkB0O,EAAY1O,eAAe,IAAO,KAC7GsS,YAAc5D,EAAY1O,gBAAkB0O,EAAY1O,eAAeG,OAAS,IAAM,EAG5F,CACF,CAAE,MAAOqT,GACPzX,QAAQqL,KAAK,iEAAkEoM,EAAWxX,QAC5F,CAIA,OADAD,QAAQqL,KAAK,+CAAgDhB,GACtD,CACLpG,eAAgB,GAChBC,aAAc,KACdoS,eAAgB,KAChBC,aAAa,EAEjB,CAAE,MAAO1W,GAGP,OAFAG,QAAQH,MAAM,wCAAyCA,GAEhD,CACLoE,eAAgB,GAChBC,aAAc,KACdoS,eAAgB,KAChBC,aAAa,EAEjB,CACF,EAQAhF,2BAA4BA,CAAClH,EAAUa,IACrCiE,EAAAA,QAAUK,IAAI,gBAAgBkI,mBAAmBrN,YAAoBa,GAQvEyM,yBAA0BA,CAACtN,EAAUzG,IACnCuL,EAAAA,QAAUG,IACR,gBAAgBoI,mBAAmBrN,aAAoBqN,mBAAmB9T,YAQ9EgU,YAAatR,GAAM6I,EAAAA,QAAUG,IAAI,gBAAgBhJ,KAOjDuR,YAAa,eAAC7O,EAAOlE,UAAAV,OAAA,QAAAW,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,OAAKqK,EAAAA,QAAUG,IAAI,eAAgB,CAC3DwI,SAAU,OACP9O,GACH,EAOF+O,oBAAqB,eAAC/O,EAAOlE,UAAAV,OAAA,QAAAW,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,OAAKqK,EAAAA,QAAUG,IAAI,eAAgB,CACnE0I,UAAU,KACPhP,GACH,E,+HCxLJ,MAAMiP,EAAsBzB,IAC1B,MAAM,aACJ0B,GACE1B,EACJ,MAAO,CACL,CAAC0B,GAAe,CACd,eAAgB,CACd,CAAC,IAAIA,KAAiB,CACpB,OAAQ,CACNC,YAAa3B,EAAM4B,UAErB,OAAQ,CACND,YAAa3B,EAAM6B,aAQzBC,EAAwB9B,IAC5B,MAAM,aACJ0B,EAAY,0BACZK,EAAyB,WACzBC,EAAU,UACVC,EAAS,kBACTC,EAAiB,kBACjBC,EAAiB,qBACjBC,GACEpC,EACJ,MAAO,CACL,CAAC0B,GAAe/C,OAAO0D,OAAO1D,OAAO0D,OAAO,CAAC,GAAGC,EAAAA,EAAAA,IAAetC,IAAS,CACtEuC,iBAAkB,IAAGC,EAAAA,EAAAA,IAAKP,YAAoBD,IAE9C,aAAc,CACZS,SAAU,WACVC,IAAK,UACLxR,QAAS,eACTyR,OAAQ,QACRC,aAAcR,EACdT,YAAa,EACbkB,cAAe,SACfC,UAAW,EACXC,kBAAmB,IAAGP,EAAAA,EAAAA,IAAKP,YAAoBD,KAEjD,eAAgB,CACd9Q,QAAS,OACT8R,MAAO,OACP3N,MAAO,OACP4N,SAAU,OAEVpB,OAAQ,IAAGW,EAAAA,EAAAA,IAAKxC,EAAMkD,eAExB,CAAC,eAAexB,eAA2B,CACzCxQ,QAAS,OACTE,WAAY,SACZyQ,OAAQ,IAAGW,EAAAA,EAAAA,IAAKxC,EAAMmD,2CACtB5R,MAAOyO,EAAMoD,iBACbC,WAAY,IACZzR,SAAUoO,EAAMsD,WAChBC,WAAY,SACZ7K,UAAW,SACX6J,iBAAkB,KAAKP,IACvB,sBAAuB,CACrBS,SAAU,WACVpN,MAAO,MACPkN,iBAAkB,IAAGC,EAAAA,EAAAA,IAAKP,uBAE1BuB,sBAAuB,UACvBC,eAAgB,EAChBC,UAAW,kBACXC,QAAS,OAGb,CAAC,eAAejC,qBAAiC,CAC/C,YAAa,CACXrM,MAAO,QAAQ8M,aAEjB,WAAY,CACV9M,MAAO,eAAe8M,cAG1B,CAAC,eAAeT,mBAA+B,CAC7C,YAAa,CACXrM,MAAO,eAAe8M,aAExB,WAAY,CACV9M,MAAO,QAAQ8M,cAGnB,CAAC,GAAGT,gBAA4B,CAC9BxQ,QAAS,eACT0S,aAAc,EACdC,cAAe3B,GAEjB,WAAY,CACV4B,WAAY,OACZC,YAAa/B,EACbgC,YAAa,SACbC,YAAa,IAAGzB,EAAAA,EAAAA,IAAKP,UAEvB,CAAC,eAAeP,cAAyBA,YAAwB,CAC/D,sBAAuB,CACrBsC,YAAa,qBAGjB,CAAC,aAAatC,YAAwB,CACpCwC,uBAAwBjC,EACxBkC,gBAAiB,EACjB5B,iBAAkB,EAClBkB,eAAgB,GAElB,WAAY,CACVK,WAAY,OACZC,YAAa/B,EACbgC,YAAa,SACbC,YAAa,IAAGzB,EAAAA,EAAAA,IAAKP,UAEvB,CAAC,eAAeP,cAAyBA,YAAwB,CAC/D,sBAAuB,CACrBsC,YAAa,qBAGjB,CAAC,aAAatC,YAAwB,CACpCwC,uBAAwBjC,EACxBkC,gBAAiB,EACjB5B,iBAAkB,EAClBkB,eAAgB,GAElB,CAAC,UAAU/B,eAA2B,CACpCnQ,MAAOyO,EAAMoE,UACbf,WAAY,SACZzR,SAAUoO,EAAMpO,UAElB,CAAC,eAAe8P,oBAA+BA,yCAAqD,CAClG,YAAa,CACXrM,MAAO,GAET,WAAY,CACVA,MAAO,QAET,CAAC,GAAGqM,gBAA4B,CAC9B2C,mBAAoBtC,IAGxB,CAAC,eAAeL,kBAA6BA,uCAAmD,CAC9F,YAAa,CACXrM,MAAO,QAET,WAAY,CACVA,MAAO,GAET,CAAC,GAAGqM,gBAA4B,CAC9B4C,iBAAkBvC,QAY5B,GAAewC,EAAAA,EAAAA,IAAc,UAAWvE,IACtC,MAAMwE,GAAeC,EAAAA,EAAAA,IAAWzE,EAAO,CACrCmD,sCAAuCnD,EAAM6B,OAC7CE,0BAA2B,IAE7B,MAAO,CAACD,EAAsB0C,GAAe/C,EAAoB+C,KAX9BxE,IAAS,CAC5CkC,kBAAmB,MACnBC,kBAAmB,IACnBC,qBAAsBpC,EAAM4B,WASJ,CACxB8C,SAAU,CACRvC,mBAAmB,KC/KvB,IAAIwC,EAAgC,SAAUC,EAAGhH,GAC/C,IAAIiH,EAAI,CAAC,EACT,IAAK,IAAItX,KAAKqX,EAAOjG,OAAOmG,UAAUC,eAAeC,KAAKJ,EAAGrX,IAAMqQ,EAAEqH,QAAQ1X,GAAK,IAAGsX,EAAEtX,GAAKqX,EAAErX,IAC9F,GAAS,MAALqX,GAAqD,oBAAjCjG,OAAOuG,sBAA2C,KAAIC,EAAI,EAAb,IAAgB5X,EAAIoR,OAAOuG,sBAAsBN,GAAIO,EAAI5X,EAAEK,OAAQuX,IAClIvH,EAAEqH,QAAQ1X,EAAE4X,IAAM,GAAKxG,OAAOmG,UAAUM,qBAAqBJ,KAAKJ,EAAGrX,EAAE4X,MAAKN,EAAEtX,EAAE4X,IAAMP,EAAErX,EAAE4X,IADuB,CAGvH,OAAON,CACT,EAOA,MAAMQ,EAAmB,CACvBC,MAAO,KACPC,OAAQ,MAkFV,QAhFgBrc,IACd,MAAM,aACJsc,EAAY,UACZC,EACAC,UAAWC,EACXpa,MAAOqa,IACLC,EAAAA,EAAAA,IAAmB,YAEnBC,UAAWC,EAAkB,KAC7B3a,EAAO,aAAY,YACnB4a,EAAc,SAAQ,kBACtB7D,EAAiB,UACjBuD,EAAS,cACTO,EAAa,SACb3a,EAAQ,OACR4a,EAAM,QACNC,EAAU,QAAO,MACjBC,EAAK,MACL7a,EACAiG,KAAM6U,GACJnd,EACJod,EAAY3B,EAAOzb,EAAO,CAAC,YAAa,OAAQ,cAAe,oBAAqB,YAAa,gBAAiB,WAAY,SAAU,UAAW,QAAS,QAAS,SACjK4c,EAAYN,EAAa,UAAWO,IACnCQ,EAAYC,EAAQC,GAAaC,EAASZ,GAC3Ca,GAAeC,EAAAA,EAAAA,GAAQP,GACvBQ,EAAUxB,EAAiBsB,GAC3BG,IAAgBxb,EAChByb,EAAoB/d,EAAAA,QAAc,IAClB,SAAhBgd,EACmB,QAAdP,EAAsB,MAAQ,QAEnB,UAAhBO,EACmB,QAAdP,EAAsB,QAAU,MAElCO,EACN,CAACP,EAAWO,IACTgB,EAAuC,UAAtBD,GAAsD,MAArB5E,EAClD8E,EAAqC,QAAtBF,GAAoD,MAArB5E,EAC9C+E,EAAcC,IAAWrB,EAAWH,EAAkBa,EAAQC,EAAW,GAAGX,KAAa1a,IAAQ,CACrG,CAAC,GAAG0a,eAAwBgB,EAC5B,CAAC,GAAGhB,eAAuBiB,KAAsBD,EACjD,CAAC,GAAGhB,cAAuBI,EAC3B,CAAC,GAAGJ,KAAaK,KAAwB,UAAZA,EAC7B,CAAC,GAAGL,aAAsBM,EAC1B,CAAC,GAAGN,SAAgC,QAAdL,EACtB,CAAC,GAAGK,yCAAkDkB,EACtD,CAAC,GAAGlB,uCAAgDmB,EACpD,CAAC,GAAGnB,KAAae,OAAcA,GAC9BnB,EAAWO,GACRmB,EAA4Bpe,EAAAA,QAAc,IACb,kBAAtBmZ,EACFA,EAEL,QAAQkF,KAAKlF,GACRmF,OAAOnF,GAETA,EACN,CAACA,IACEoF,EAAa,CACjBC,kBAAmBR,EAAiBI,OAA4B7Y,EAChEkZ,gBAAiBR,EAAeG,OAA4B7Y,GAO9D,OAAOgY,EAAwBvd,EAAAA,cAAoB,MAAO2V,OAAO0D,OAAO,CACtEqD,UAAWwB,EACX3b,MAAOoT,OAAO0D,OAAO1D,OAAO0D,OAAO,CAAC,EAAGuD,GAAera,IACrD+a,EAAW,CACZ1W,KAAM,cACJtE,GAAqB,aAATF,GAAqCpC,EAAAA,cAAoB,OAAQ,CAC/E0c,UAAW,GAAGI,eACdva,MAAOgc,GACNjc,K,gDC7FE,MAAMgB,EAAgB,CAE3BC,gBAAiBH,UACf,IACE,aAAauM,EAAAA,QAAUG,IAAI,yBAC7B,CAAE,MAAOzP,GACPG,QAAQqL,KAAK,mDAAoDxL,GACjE,IACE,aAAasP,EAAAA,QAAUG,IAAI,kCAC7B,CAAE,MAAO4O,GACPle,QAAQqL,KAAK,oDAAqD6S,GAClE,IACE,aAAa/O,EAAAA,QAAUG,IAAI,oBAC7B,CAAE,MAAO6O,GAEP,MADAne,QAAQH,MAAM,kCAAmCse,GAC3CA,CACR,CACF,CACF,GAGFC,kBAAmB/a,GACjB8L,EAAAA,QAAUG,IAAI,0BAA0BoI,mBAAmBrU,MAE7Dgb,gBAAiBC,GACfnP,EAAAA,QAAUG,IAAI,sCAAsCoI,mBAAmB4G,MAEzEC,eAAgBC,GAAgBrP,EAAAA,QAAUI,KAAK,yBAA0BiP,GAEzEC,eAAgBA,CAACpb,EAAcmb,IAC7BrP,EAAAA,QAAUK,IAAI,0BAA0BkI,mBAAmBrU,KAAiBmb,GAE9EE,eAAgBrb,GACd8L,EAAAA,QAAUM,OAAO,0BAA0BiI,mBAAmBrU,MAKhEsb,mBAAoBA,IAAMxP,EAAAA,QAAUG,IAAI,8BAExCsP,kBAAmB1I,GACjB/G,EAAAA,QAAUG,IAAI,uCAAuCoI,mBAAmBxB,MAE1E2I,kBAAmBC,GACjB3P,EAAAA,QAAUG,IAAI,oCAAoCoI,mBAAmBoH,MAEvEC,mBAAoBA,IAAM5P,EAAAA,QAAUG,IAAI,8BAExC0P,gBAAiBA,IAAM7P,EAAAA,QAAUG,IAAI,2BAErC2P,sBAAuB/I,GACrB/G,EAAAA,QAAUG,IAAI,8BAA8BoI,mBAAmBxB,YAGjEjE,mBAAoBA,IAAM9C,EAAAA,QAAUG,IAAI,+BAExC6C,mBAAoBA,IAAMhD,EAAAA,QAAUG,IAAI,0BAExC+C,yBAA0BA,IAAMlD,EAAAA,QAAUG,IAAI,qCAE9C4P,uBAAwBA,IAAM/P,EAAAA,QAAUG,IAAI,2B","sources":["components/ErrorBoundaries/UserErrorBoundary.js","hooks/usePlantAssignment.js","components/User/PlantAssignmentForm.js","components/User/UserModal.js","components/User/UserTable.js","hooks/useUserManagement.js","screens/Users.js","utils/dataUtils.js","components/SecureForm.js","services/userAPI.js","../node_modules/antd/es/divider/style/index.js","../node_modules/antd/es/divider/index.js","services/masterDataAPI.js"],"sourcesContent":["import { Result, Button } from 'antd';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nclass UserErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false, error: null, errorInfo: null };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({\n      error,\n      errorInfo\n    });\n\n    // Report error to monitoring service\n    this.reportError(error, errorInfo, { \n      level: 'component',\n      component: 'UserManagement',\n      context: this.props.context || 'user-management'\n    });\n  }\n\n  reportError = (error, errorInfo, context) => {\n    // In a real application, this would send to a monitoring service\n    console.error('UserErrorBoundary caught an error:', {\n      error: error.message,\n      stack: error.stack,\n      errorInfo,\n      context,\n      timestamp: new Date().toISOString()\n    });\n\n    // Example: Send to monitoring service\n    // monitoringService.reportError({\n    //   message: error.message,\n    //   stack: error.stack,\n    //   component: context.component,\n    //   level: context.level,\n    //   timestamp: new Date().toISOString()\n    // });\n  };\n\n  handleRetry = () => {\n    this.setState({ hasError: false, error: null, errorInfo: null });\n    \n    // Call retry callback if provided\n    if (this.props.onRetry) {\n      this.props.onRetry();\n    }\n  };\n\n  handleGoHome = () => {\n    window.location.href = '/qrmfg';\n  };\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <Result\n          status=\"error\"\n          title=\"User Management Error\"\n          subTitle=\"Something went wrong while managing users. Please try again or contact support if the problem persists.\"\n          extra={[\n            <Button type=\"primary\" onClick={this.handleRetry} key=\"retry\">\n              Try Again\n            </Button>,\n            <Button onClick={this.handleGoHome} key=\"home\">\n              Go Home\n            </Button>\n          ]}\n          style={{ padding: '50px 0' }}\n        >\n          {process.env.NODE_ENV === 'development' && (\n            <div style={{ textAlign: 'left', marginTop: 20 }}>\n              <details style={{ whiteSpace: 'pre-wrap' }}>\n                <summary>Error Details (Development Only)</summary>\n                <div style={{ marginTop: 10, fontSize: '12px', color: '#666' }}>\n                  <strong>Error:</strong> {this.state.error?.message}\n                  <br />\n                  <strong>Stack:</strong>\n                  <pre style={{ fontSize: '11px', marginTop: 5 }}>\n                    {this.state.error?.stack}\n                  </pre>\n                  {this.state.errorInfo?.componentStack && (\n                    <>\n                      <strong>Component Stack:</strong>\n                      <pre style={{ fontSize: '11px', marginTop: 5 }}>\n                        {this.state.errorInfo.componentStack}\n                      </pre>\n                    </>\n                  )}\n                </div>\n              </details>\n            </div>\n          )}\n        </Result>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nUserErrorBoundary.propTypes = {\n  children: PropTypes.node.isRequired,\n  context: PropTypes.string,\n  onRetry: PropTypes.func\n};\n\nUserErrorBoundary.defaultProps = {\n  context: 'user-management',\n  onRetry: null\n};\n\nexport default UserErrorBoundary;","import { message } from 'antd';\nimport { useState, useCallback, useEffect, useMemo } from 'react';\n\nimport { masterDataAPI } from '../services/masterDataAPI';\n\nexport const usePlantAssignment = () => {\n  const [availablePlants, setAvailablePlants] = useState([]);\n  const [plantsLoading, setPlantsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch plants from master data API\n  const fetchPlants = useCallback(async (signal) => {\n    setPlantsLoading(true);\n    setError(null);\n    \n    try {\n      const locations = await masterDataAPI.getAllLocations({ signal });\n      if (!signal?.aborted) {\n        const plantOptions = locations.map(location => ({\n          label: `${location.locationCode} - ${location.description}`,\n          value: location.locationCode,\n          key: location.locationCode\n        }));\n        setAvailablePlants(plantOptions);\n      }\n    } catch (err) {\n      if (!signal?.aborted) {\n        console.error('Failed to fetch plants:', err);\n        setError(err.message);\n        message.warning('Failed to fetch plants from location master, using fallback data');\n\n        // Fallback plant data\n        const fallbackPlants = [\n          { label: '1107 - Manufacturing Unit 1107', value: '1107', key: '1107' },\n          { label: '1106 - Manufacturing Unit 1106', value: '1106', key: '1106' },\n          { label: '1104 - Manufacturing Unit 1104', value: '1104', key: '1104' },\n          { label: '1103 - Manufacturing Unit 1103', value: '1103', key: '1103' },\n          { label: '1102 - Manufacturing Unit 1102', value: '1102', key: '1102' }\n        ];\n        setAvailablePlants(fallbackPlants);\n      }\n    } finally {\n      if (!signal?.aborted) {\n        setPlantsLoading(false);\n      }\n    }\n  }, []);\n\n  // Get plant description by code\n  const getPlantDescription = useCallback((plantCode) => {\n    const plant = availablePlants.find(p => p.value === plantCode);\n    return plant ? plant.label : plantCode;\n  }, [availablePlants]);\n\n  // Validate plant assignments\n  const validatePlantAssignments = useCallback((assignedPlants, primaryPlant) => {\n    const errors = [];\n\n    if (!assignedPlants || assignedPlants.length === 0) {\n      errors.push('At least one plant must be assigned');\n    }\n\n    if (primaryPlant && assignedPlants && !assignedPlants.includes(primaryPlant)) {\n      errors.push('Primary plant must be one of the assigned plants');\n    }\n\n    return errors;\n  }, []);\n\n  // Filter available plants based on search\n  const filterPlants = useCallback((input, option) => {\n    return option?.label?.toLowerCase().includes(input.toLowerCase());\n  }, []);\n\n  // Get plants that are available for assignment (not already assigned)\n  const getAvailablePlantsForAssignment = useCallback((currentAssignments = []) => {\n    return availablePlants.filter(plant => !currentAssignments.includes(plant.value));\n  }, [availablePlants]);\n\n  // Initialize plants on mount\n  useEffect(() => {\n    const controller = new AbortController();\n    fetchPlants(controller.signal);\n\n    return () => {\n      controller.abort();\n    };\n  }, [fetchPlants]);\n\n  // Memoized plant options for primary plant selection\n  const primaryPlantOptions = useMemo(() => {\n    return availablePlants.map(plant => ({\n      ...plant,\n      disabled: false // All plants can be primary\n    }));\n  }, [availablePlants]);\n\n  return {\n    availablePlants,\n    plantsLoading,\n    error,\n    fetchPlants,\n    getPlantDescription,\n    validatePlantAssignments,\n    filterPlants,\n    getAvailablePlantsForAssignment,\n    primaryPlantOptions\n  };\n};","import { ReloadOutlined } from '@ant-design/icons';\nimport { Form, Select, Button, Divider, Typography, Space, Alert } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useMemo, useEffect } from 'react';\n\nimport { usePlantAssignment } from '../../hooks/usePlantAssignment';\n\nconst { Text } = Typography;\n\nconst PlantAssignmentForm = React.memo(({ \n  selectedRoles, \n  roles, \n  form,\n  initialValues = {}\n}) => {\n  const {\n    availablePlants,\n    plantsLoading,\n    error,\n    fetchPlants,\n    filterPlants,\n    validatePlantAssignments\n  } = usePlantAssignment();\n\n  // Check if selected roles include plant user role\n  const isPlantUserSelected = useMemo(() => {\n    if (!selectedRoles || !roles) return false;\n    \n    const plantRoleIds = roles\n      .filter(role => role.name === 'ROLE_PLANT_USER' || role.name === 'PLANT_USER')\n      .map(role => role.id);\n\n    return selectedRoles.some(roleId => plantRoleIds.includes(roleId));\n  }, [selectedRoles, roles]);\n\n  // Handle refresh plants button click\n  const handleRefreshPlants = useCallback(async () => {\n    const controller = new AbortController();\n    await fetchPlants(controller.signal);\n  }, [fetchPlants]);\n\n  // Custom validator for assigned plants\n  const validateAssignedPlants = useCallback((_, value) => {\n    if (!isPlantUserSelected) {\n      return Promise.resolve();\n    }\n\n    if (!value || value.length === 0) {\n      return Promise.reject(new Error('Please select at least one plant for plant users!'));\n    }\n\n    return Promise.resolve();\n  }, [isPlantUserSelected]);\n\n  // Custom validator for primary plant\n  const validatePrimaryPlant = useCallback((_, value) => {\n    if (!isPlantUserSelected) {\n      return Promise.resolve();\n    }\n\n    const assignedPlants = form.getFieldValue('assignedPlants') || [];\n    \n    if (value && !assignedPlants.includes(value)) {\n      return Promise.reject(new Error('Primary plant must be one of the assigned plants!'));\n    }\n\n    return Promise.resolve();\n  }, [isPlantUserSelected, form]);\n\n  // Handle assigned plants change to update primary plant options\n  const handleAssignedPlantsChange = useCallback((values) => {\n    const currentPrimaryPlant = form.getFieldValue('primaryPlant');\n    \n    // If current primary plant is not in the new assigned plants, clear it\n    if (currentPrimaryPlant && !values.includes(currentPrimaryPlant)) {\n      form.setFieldValue('primaryPlant', undefined);\n    }\n  }, [form]);\n\n  // Get primary plant options based on assigned plants\n  const primaryPlantOptions = useMemo(() => {\n    const assignedPlants = form.getFieldValue('assignedPlants') || [];\n    return availablePlants.filter(plant => assignedPlants.includes(plant.value));\n  }, [availablePlants, form]);\n\n  // Set initial values when component mounts or initialValues change\n  useEffect(() => {\n    if (initialValues.assignedPlants || initialValues.primaryPlant) {\n      form.setFieldsValue({\n        assignedPlants: initialValues.assignedPlants || [],\n        primaryPlant: initialValues.primaryPlant || null\n      });\n    }\n  }, [initialValues, form]);\n\n  // Don't render if plant user role is not selected\n  if (!isPlantUserSelected) {\n    return null;\n  }\n\n  return (\n    <>\n      <Divider />\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          marginBottom: 8\n        }}\n      >\n        <Text strong style={{ color: '#1890ff' }}>\n          Plant Assignments\n        </Text>\n        <Button \n          size=\"small\" \n          icon={<ReloadOutlined />}\n          onClick={handleRefreshPlants} \n          loading={plantsLoading}\n          aria-label=\"Refresh plants list\"\n          data-testid=\"refresh-plants-button\"\n        >\n          Refresh Plants\n        </Button>\n      </div>\n\n      <Text\n        type=\"secondary\"\n        style={{ display: 'block', marginBottom: 16, fontSize: '12px' }}\n      >\n        Plant users need to be assigned to specific plants to access plant-specific data.\n        Plants are loaded from Location Master.\n      </Text>\n\n      {error && (\n        <Alert\n          message=\"Plant Loading Error\"\n          description={`Failed to load plants: ${error}. Using fallback data.`}\n          type=\"warning\"\n          showIcon\n          style={{ marginBottom: 16 }}\n          data-testid=\"plant-error-alert\"\n        />\n      )}\n\n      <Form.Item\n        name=\"assignedPlants\"\n        label=\"Assigned Plants\"\n        rules={[\n          { validator: validateAssignedPlants }\n        ]}\n        hasFeedback\n        tooltip=\"Select all plants this user should have access to\"\n      >\n        <Select\n          mode=\"multiple\"\n          placeholder=\"Select plants this user can access\"\n          loading={plantsLoading}\n          options={availablePlants}\n          showSearch\n          filterOption={filterPlants}\n          onChange={handleAssignedPlantsChange}\n          aria-label=\"Assigned plants selection\"\n          data-testid=\"assigned-plants-select\"\n          maxTagCount=\"responsive\"\n          allowClear\n        />\n      </Form.Item>\n\n      <Form.Item\n        name=\"primaryPlant\"\n        label=\"Primary Plant\"\n        rules={[\n          { validator: validatePrimaryPlant }\n        ]}\n        hasFeedback\n        tooltip=\"The default plant that will be selected when the user logs in\"\n      >\n        <Select\n          placeholder=\"Select primary plant (optional)\"\n          allowClear\n          loading={plantsLoading}\n          options={primaryPlantOptions}\n          showSearch\n          filterOption={filterPlants}\n          aria-label=\"Primary plant selection\"\n          data-testid=\"primary-plant-select\"\n          disabled={!form.getFieldValue('assignedPlants')?.length}\n        />\n      </Form.Item>\n\n      {/* Helper text for primary plant */}\n      {form.getFieldValue('assignedPlants')?.length > 0 && (\n        <div style={{ marginTop: -16, marginBottom: 16 }}>\n          <Text type=\"secondary\" style={{ fontSize: '11px' }}>\n            Primary plant will be auto-selected from assigned plants if not specified\n          </Text>\n        </div>\n      )}\n    </>\n  );\n});\n\nPlantAssignmentForm.displayName = 'PlantAssignmentForm';\n\nPlantAssignmentForm.propTypes = {\n  selectedRoles: PropTypes.arrayOf(PropTypes.string),\n  roles: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired\n  })).isRequired,\n  form: PropTypes.object.isRequired,\n  initialValues: PropTypes.shape({\n    assignedPlants: PropTypes.arrayOf(PropTypes.string),\n    primaryPlant: PropTypes.string\n  })\n};\n\nPlantAssignmentForm.defaultProps = {\n  selectedRoles: [],\n  initialValues: {}\n};\n\nexport default PlantAssignmentForm;","import { Modal, Form, Input, Select } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { userAPI } from '../../services/userAPI';\nimport { ValidationRules } from '../../utils/inputValidation';\nimport SecureForm, { SecureInput, SecureFormItem } from '../SecureForm';\n\nimport PlantAssignmentForm from './PlantAssignmentForm';\n\n/**\n * UserModal Component\n * \n * A modal dialog for creating and editing user information including roles and plant assignments.\n * Supports both create and edit modes with form validation and error handling.\n * \n * @component\n * @example\n * ```jsx\n * const roles = [\n *   { value: 'USER', label: 'User' },\n *   { value: 'ADMIN', label: 'Administrator' }\n * ];\n * \n * <UserModal\n *   visible={true}\n *   editingUser={{ id: '1', username: 'john', email: 'john@example.com' }}\n *   roles={roles}\n *   onSave={(userData) => console.log('Save user:', userData)}\n *   onCancel={() => console.log('Cancel edit')}\n *   loading={false}\n * />\n * ```\n * \n * @param {Object} props - Component props\n * @param {boolean} props.visible - Whether the modal is visible\n * @param {Object|null} props.editingUser - User object being edited (null for create mode)\n * @param {string} props.editingUser.id - User ID\n * @param {string} props.editingUser.username - Username\n * @param {string} props.editingUser.email - Email address\n * @param {Array<string>} props.editingUser.roles - User roles\n * @param {Array<Object>} props.roles - Available roles for selection\n * @param {string} props.roles[].value - Role value\n * @param {string} props.roles[].label - Role display name\n * @param {Function} props.onSave - Callback when user data is saved\n * @param {Function} props.onCancel - Callback when modal is cancelled\n * @param {boolean} [props.loading=false] - Whether save operation is in progress\n * \n * @returns {React.ReactElement} Rendered UserModal component\n * \n * @since 1.0.0\n * @author QRMFG Development Team\n */\nconst UserModal = React.memo(({ \n  visible, \n  editingUser, \n  roles, \n  onSave, \n  onCancel,\n  loading = false \n}) => {\n  const [form] = Form.useForm();\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const [plantAssignmentData, setPlantAssignmentData] = useState({});\n\n  // Determine if this is edit or create mode\n  const isEditMode = useMemo(() => Boolean(editingUser), [editingUser]);\n\n  // Modal title based on mode\n  const modalTitle = useMemo(() => \n    isEditMode ? 'Edit User' : 'Add User', \n    [isEditMode]\n  );\n\n  // Form validation rules with enhanced security\n  const validationRules = useMemo(() => ({\n    username: ValidationRules.username,\n    email: ValidationRules.email,\n    password: isEditMode ? [] : ValidationRules.password,\n    roles: [\n      { required: true, message: 'Please select at least one role!' },\n      { type: 'array', min: 1, message: 'Please select at least one role!' }\n    ]\n  }), [isEditMode]);\n\n  // Role options for select\n  const roleOptions = useMemo(() => \n    roles.map(role => ({\n      label: role.name,\n      value: role.id,\n      key: role.id\n    })), \n    [roles]\n  );\n\n  // Handle form submission\n  const handleSubmit = useCallback(async (values) => {\n    try {\n      await onSave(values, editingUser);\n      form.resetFields();\n    } catch (error) {\n      console.error('Error saving user:', error);\n      // Error message is handled in the parent component\n    }\n  }, [onSave, editingUser, form]);\n\n  // Handle modal cancel\n  const handleCancel = useCallback(() => {\n    form.resetFields();\n    onCancel();\n  }, [form, onCancel]);\n\n  // Handle modal OK button\n  const handleOk = useCallback(() => {\n    form.submit();\n  }, [form]);\n\n  // Load plant assignment data for editing user\n  const loadPlantAssignmentData = useCallback(async (username) => {\n    try {\n      const plantData = await userAPI.getUserPlantAssignments(username);\n      setPlantAssignmentData(plantData || {});\n      return plantData;\n    } catch (error) {\n      console.warn('Could not load plant assignments for user:', error);\n      setPlantAssignmentData({});\n      return {};\n    }\n  }, []);\n\n  // Reset form when modal opens/closes or editing user changes\n  useEffect(() => {\n    if (visible && editingUser) {\n      const userRoles = (editingUser.roles || []).map(r => r?.id).filter(Boolean);\n      setSelectedRoles(userRoles);\n      \n      // Populate form with editing user data\n      form.setFieldsValue({\n        username: editingUser.username,\n        email: editingUser.email,\n        roles: userRoles\n      });\n\n      // Load plant assignments for editing user\n      loadPlantAssignmentData(editingUser.username);\n    } else if (visible && !editingUser) {\n      // Reset form for new user\n      setSelectedRoles([]);\n      setPlantAssignmentData({});\n      form.resetFields();\n    }\n  }, [visible, editingUser, form, loadPlantAssignmentData]);\n\n  // Form layout configuration\n  const formLayout = {\n    labelCol: { span: 6 },\n    wrapperCol: { span: 18 }\n  };\n\n  return (\n    <Modal\n      title={modalTitle}\n      open={visible}\n      onOk={handleOk}\n      onCancel={handleCancel}\n      confirmLoading={loading}\n      destroyOnClose\n      width={600}\n      maskClosable={false}\n      aria-labelledby=\"user-modal-title\"\n      data-testid=\"user-modal\"\n    >\n      <SecureForm\n        form={form}\n        {...formLayout}\n        onFinish={handleSubmit}\n        preserve={false}\n        aria-label={`${modalTitle} form`}\n        data-testid=\"user-form\"\n        componentName=\"UserModal\"\n        enableSecurityLogging={true}\n      >\n        <SecureFormItem\n          name=\"username\"\n          label=\"Username\"\n          validationType=\"username\"\n          hasFeedback\n        >\n          <SecureInput\n            placeholder=\"Enter username\"\n            disabled={isEditMode} // Username cannot be changed in edit mode\n            aria-label=\"Username input\"\n            data-testid=\"username-input\"\n            validationType=\"username\"\n            componentName=\"UserModal\"\n            fieldName=\"username\"\n          />\n        </SecureFormItem>\n\n        <SecureFormItem\n          name=\"email\"\n          label=\"Email\"\n          validationType=\"email\"\n          hasFeedback\n        >\n          <SecureInput\n            placeholder=\"Enter email address\"\n            aria-label=\"Email input\"\n            data-testid=\"email-input\"\n            validationType=\"email\"\n            componentName=\"UserModal\"\n            fieldName=\"email\"\n          />\n        </SecureFormItem>\n\n        {!isEditMode && (\n          <SecureFormItem\n            name=\"password\"\n            label=\"Password\"\n            validationType=\"password\"\n            hasFeedback\n          >\n            <Input.Password\n              placeholder=\"Enter password\"\n              aria-label=\"Password input\"\n              data-testid=\"password-input\"\n            />\n          </SecureFormItem>\n        )}\n\n        <Form.Item\n          name=\"roles\"\n          label=\"Roles\"\n          rules={validationRules.roles}\n          hasFeedback\n        >\n          <Select\n            mode=\"multiple\"\n            placeholder=\"Select user roles\"\n            options={roleOptions}\n            aria-label=\"Roles selection\"\n            data-testid=\"roles-select\"\n            showSearch\n            filterOption={(input, option) =>\n              option?.label?.toLowerCase().includes(input.toLowerCase())\n            }\n            maxTagCount=\"responsive\"\n            onChange={setSelectedRoles}\n          />\n        </Form.Item>\n\n        {/* Plant Assignment Section */}\n        <PlantAssignmentForm\n          selectedRoles={selectedRoles}\n          roles={roles}\n          form={form}\n          initialValues={plantAssignmentData}\n        />\n      </SecureForm>\n    </Modal>\n  );\n});\n\nUserModal.displayName = 'UserModal';\n\nUserModal.propTypes = {\n  visible: PropTypes.bool.isRequired,\n  editingUser: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    username: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    roles: PropTypes.arrayOf(PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string\n    }))\n  }),\n  roles: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired\n  })).isRequired,\n  onSave: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired,\n  loading: PropTypes.bool\n};\n\nUserModal.defaultProps = {\n  editingUser: null,\n  loading: false\n};\n\nexport default UserModal;","import { EditOutlined, DeleteOutlined } from '@ant-design/icons';\nimport { Table, Button } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { useMemo, useCallback } from 'react';\n\n/**\n * UserTable Component\n * \n * A performant, accessible table component for displaying and managing users.\n * Features include sorting, editing, deletion, and plant assignment display.\n * \n * @component\n * @example\n * ```jsx\n * const users = [\n *   { id: '1', username: 'john', email: 'john@example.com', roles: ['USER'], plantAssignments: ['PLANT1'] }\n * ];\n * \n * <UserTable\n *   users={users}\n *   loading={false}\n *   onEdit={(user) => console.log('Edit user:', user)}\n *   onDelete={(userId) => console.log('Delete user:', userId)}\n *   availablePlants={[{ value: 'PLANT1', label: 'Plant 1' }]}\n * />\n * ```\n * \n * @param {Object} props - Component props\n * @param {Array<Object>} props.users - Array of user objects to display\n * @param {string} props.users[].id - Unique user identifier\n * @param {string} props.users[].username - User's username\n * @param {string} props.users[].email - User's email address\n * @param {Array<string>} props.users[].roles - User's assigned roles\n * @param {Array<string>} props.users[].plantAssignments - User's plant assignments\n * @param {boolean} props.loading - Whether the table is in loading state\n * @param {Function} props.onEdit - Callback function when edit button is clicked\n * @param {Function} props.onDelete - Callback function when delete button is clicked\n * @param {Array<Object>} [props.availablePlants=[]] - Available plants for display mapping\n * @param {string} props.availablePlants[].value - Plant code\n * @param {string} props.availablePlants[].label - Plant display name\n * \n * @returns {React.ReactElement} Rendered UserTable component\n * \n * @since 1.0.0\n * @author QRMFG Development Team\n */\nconst UserTable = React.memo(({ \n  users, \n  loading, \n  onEdit, \n  onDelete, \n  availablePlants = [] \n}) => {\n  // Memoized function to get plant description by code\n  const getPlantDescription = useCallback((plantCode) => {\n    const plant = availablePlants.find(p => p.value === plantCode);\n    return plant ? plant.label : plantCode;\n  }, [availablePlants]);\n\n  // Memoized column definitions\n  const columns = useMemo(() => [\n    {\n      title: 'Username',\n      dataIndex: 'username',\n      key: 'username',\n      sorter: (a, b) => a.username.localeCompare(b.username),\n      'aria-label': 'Username column'\n    },\n    {\n      title: 'Email',\n      dataIndex: 'email',\n      key: 'email',\n      sorter: (a, b) => a.email.localeCompare(b.email),\n      'aria-label': 'Email column'\n    },\n    {\n      title: 'Roles',\n      dataIndex: 'roles',\n      key: 'roles',\n      'aria-label': 'Roles column',\n      render: (roles) => {\n        // Ensure roles is always an array\n        const rolesArray = Array.isArray(roles) ? roles : [];\n        const roleNames = rolesArray\n          .map(role => role?.name || role || '')\n          .filter(Boolean)\n          .join(', ');\n          \n        return roleNames || 'No roles assigned';\n      }\n    },\n    {\n      title: 'Assigned Plants',\n      key: 'plants',\n      'aria-label': 'Assigned plants column',\n      render: (_, record) => {\n        // Handle multiple data sources for plant assignments\n        let assignedPlants = [];\n        let primaryPlant = null;\n        \n        // Check for plantAssignments (from hook)\n        if (record.plantAssignments) {\n          if (Array.isArray(record.plantAssignments)) {\n            assignedPlants = record.plantAssignments;\n          } else if (record.plantAssignments.assignedPlants && Array.isArray(record.plantAssignments.assignedPlants)) {\n            assignedPlants = record.plantAssignments.assignedPlants;\n            primaryPlant = record.plantAssignments.primaryPlant;\n          }\n        }\n        \n        // Check for assignedPlants directly from backend (comma-separated string)\n        if (assignedPlants.length === 0 && record.assignedPlants) {\n          if (Array.isArray(record.assignedPlants)) {\n            assignedPlants = record.assignedPlants;\n          } else if (typeof record.assignedPlants === 'string' && record.assignedPlants.trim()) {\n            // Parse comma-separated string\n            assignedPlants = record.assignedPlants.split(',').map(plant => plant.trim()).filter(Boolean);\n          }\n          primaryPlant = record.primaryPlant;\n        }\n        \n        if (!assignedPlants || assignedPlants.length === 0) {\n          return <span style={{ color: '#999' }} aria-label=\"No plants assigned\">None</span>;\n        }\n\n        const plants = assignedPlants\n          .map(plantCode => getPlantDescription(plantCode))\n          .join(', ');\n\n        return (\n          <div>\n            <div aria-label={`Assigned plants: ${plants}`}>{plants}</div>\n            {primaryPlant && (\n              <div \n                style={{ fontSize: '11px', color: '#666' }}\n                aria-label={`Primary plant: ${getPlantDescription(primaryPlant)}`}\n              >\n                Primary: {getPlantDescription(primaryPlant)}\n              </div>\n            )}\n          </div>\n        );\n      }\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      'aria-label': 'Actions column',\n      render: (_, record) => (\n        <div role=\"group\" aria-label={`Actions for user ${record.username}`}>\n          <Button \n            type=\"link\" \n            icon={<EditOutlined />} \n            onClick={() => onEdit(record)}\n            aria-label={`Edit user ${record.username}`}\n            data-testid={`edit-button-${record.id}`}\n          >\n            Edit\n          </Button>\n          <Button\n            type=\"link\"\n            danger\n            icon={<DeleteOutlined />}\n            onClick={() => onDelete(record.id)}\n            aria-label={`Delete user ${record.username}`}\n            data-testid={`delete-button-${record.id}`}\n          >\n            Delete\n          </Button>\n        </div>\n      )\n    }\n  ], [onEdit, onDelete, getPlantDescription]);\n\n  // Memoized table props with safety checks\n  const tableProps = useMemo(() => {\n    // Ensure users is always an array\n    const safeUsers = Array.isArray(users) ? users : [];\n    \n    return {\n      columns,\n      dataSource: safeUsers,\n      rowKey: 'id', // Use user.id instead of array index for better performance\n      loading,\n      pagination: {\n        pageSize: 10,\n        showSizeChanger: true,\n        showQuickJumper: true,\n        showTotal: (total, range) => \n          `${range[0]}-${range[1]} of ${total} users`,\n        'aria-label': 'User table pagination'\n      },\n      scroll: { x: 800 }, // Enable horizontal scroll on small screens\n      size: 'middle',\n      'aria-label': 'Users table',\n      'data-testid': 'users-table'\n    };\n  }, [columns, users, loading]);\n\n  // Show empty state when no users\n  const safeUsers = Array.isArray(users) ? users : [];\n  if (!loading && safeUsers.length === 0) {\n    return (\n      <div \n        style={{ \n          textAlign: 'center', \n          padding: '40px 0', \n          color: '#999' \n        }}\n        role=\"status\"\n        aria-label=\"No users found\"\n      >\n        No users found. Click \"Add User\" to create the first user.\n      </div>\n    );\n  }\n\n  return (\n    <Table \n      {...tableProps}\n      locale={{\n        emptyText: 'No users found'\n      }}\n    />\n  );\n});\n\nUserTable.displayName = 'UserTable';\n\nUserTable.propTypes = {\n  users: PropTypes.array, // Made more flexible to handle null/undefined gracefully\n  loading: PropTypes.bool,\n  onEdit: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  availablePlants: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired\n  }))\n};\n\nUserTable.defaultProps = {\n  users: [],\n  loading: false,\n  availablePlants: []\n};\n\nexport default UserTable;","import { message } from 'antd';\nimport { useReducer, useCallback, useEffect } from 'react';\n\nimport { userAPI } from '../services/userAPI';\nimport { ensureArray, safeApiResponse, safeRolesData, safePlantData } from '../utils/dataUtils';\n\n/**\n * @fileoverview Custom hook for managing user operations including CRUD operations,\n * state management, and error handling. Provides a centralized way to handle\n * user-related business logic with proper loading states and error handling.\n * \n * @author QRMFG Development Team\n * @since 1.0.0\n */\n\n// Simple API client mock for development\nconst createSimpleApiClient = () => {\n  if (process.env.NODE_ENV === 'test') {\n    return {\n      get: jest.fn(),\n      post: jest.fn(),\n      put: jest.fn(),\n      delete: jest.fn()\n    };\n  }\n  \n  // In production, import the real API client\n  try {\n    const apiClient = require('../api/client').default;\n    return apiClient;\n  } catch (error) {\n    console.warn('API client not available, using mock');\n    return {\n      get: () => Promise.resolve([]),\n      post: () => Promise.resolve({}),\n      put: () => Promise.resolve({}),\n      delete: () => Promise.resolve({})\n    };\n  }\n};\n\nconst apiClient = createSimpleApiClient();\n\n// Action types\nconst USER_ACTIONS = {\n  SET_LOADING: 'SET_LOADING',\n  SET_USERS: 'SET_USERS',\n  SET_ROLES: 'SET_ROLES',\n  SET_ERROR: 'SET_ERROR',\n  SET_MODAL_VISIBLE: 'SET_MODAL_VISIBLE',\n  SET_EDITING_USER: 'SET_EDITING_USER',\n  RESET_MODAL: 'RESET_MODAL'\n};\n\n// Initial state\nconst initialState = {\n  users: [],\n  roles: [],\n  loading: false,\n  error: null,\n  modalVisible: false,\n  editingUser: null\n};\n\n// Reducer function\nconst userReducer = (state, action) => {\n  switch (action.type) {\n    case USER_ACTIONS.SET_LOADING:\n      return { ...state, loading: action.payload };\n    case USER_ACTIONS.SET_USERS:\n      return { ...state, users: action.payload, loading: false, error: null };\n    case USER_ACTIONS.SET_ROLES:\n      return { ...state, roles: action.payload };\n    case USER_ACTIONS.SET_ERROR:\n      return { ...state, error: action.payload, loading: false };\n    case USER_ACTIONS.SET_MODAL_VISIBLE:\n      return { ...state, modalVisible: action.payload };\n    case USER_ACTIONS.SET_EDITING_USER:\n      return { ...state, editingUser: action.payload };\n    case USER_ACTIONS.RESET_MODAL:\n      return { ...state, modalVisible: false, editingUser: null };\n    default:\n      return state;\n  }\n};\n\n/**\n * Custom hook for comprehensive user management operations\n * \n * Provides a complete set of user management functionality including:\n * - User CRUD operations (Create, Read, Update, Delete)\n * - Plant assignment management\n * - Modal state management for user editing\n * - Loading states and error handling\n * - Automatic data fetching and caching\n * \n * @hook\n * @example\n * ```jsx\n * function UsersScreen() {\n *   const {\n *     users,\n *     loading,\n *     error,\n *     modalVisible,\n *     editingUser,\n *     actions\n *   } = useUserManagement();\n * \n *   useEffect(() => {\n *     actions.fetchUsers();\n *   }, [actions.fetchUsers]);\n * \n *   return (\n *     <div>\n *       <UserTable \n *         users={users}\n *         loading={loading}\n *         onEdit={actions.openEditModal}\n *         onDelete={actions.deleteUser}\n *       />\n *       <UserModal\n *         visible={modalVisible}\n *         editingUser={editingUser}\n *         onSave={actions.saveUser}\n *         onCancel={actions.closeModal}\n *       />\n *     </div>\n *   );\n * }\n * ```\n * \n * @returns {Object} User management state and actions\n * @returns {Array<Object>} returns.users - Array of user objects with plant assignments\n * @returns {boolean} returns.loading - Loading state for async operations\n * @returns {string|null} returns.error - Error message if any operation failed\n * @returns {boolean} returns.modalVisible - Whether the user edit modal is visible\n * @returns {Object|null} returns.editingUser - User object being edited (null for create mode)\n * @returns {Object} returns.actions - Object containing all available actions\n * @returns {Function} returns.actions.fetchUsers - Fetch all users from the server\n * @returns {Function} returns.actions.saveUser - Save user data (create or update)\n * @returns {Function} returns.actions.deleteUser - Delete a user by ID\n * @returns {Function} returns.actions.openEditModal - Open modal for editing a user\n * @returns {Function} returns.actions.openCreateModal - Open modal for creating a new user\n * @returns {Function} returns.actions.closeModal - Close the user edit/create modal\n * @returns {Function} returns.actions.assignPlantToUser - Assign a plant to a user\n * @returns {Function} returns.actions.removePlantFromUser - Remove plant assignment from user\n * \n * @since 1.0.0\n * @author QRMFG Development Team\n */\nexport const useUserManagement = () => {\n  const [state, dispatch] = useReducer(userReducer, initialState);\n\n  // Fetch users with plant assignments\n  const fetchUsers = useCallback(async (signal) => {\n    dispatch({ type: USER_ACTIONS.SET_LOADING, payload: true });\n    try {\n      const data = await apiClient.get('/admin/users', { signal });\n      // Safely extract users array from the response\n      const usersArray = safeApiResponse(data, 'users');\n\n      // Load plant assignments for each user\n      const usersWithPlants = await Promise.all(\n        usersArray.map(async (user) => {\n          try {\n            const plantData = await userAPI.getUserPlantAssignments(user.username, { signal });\n            return {\n              ...user,\n              roles: safeRolesData(user.roles),\n              plantAssignments: safePlantData(plantData)\n            };\n          } catch (error) {\n            if (!signal?.aborted) {\n              console.error('Error loading plant assignments:', error);\n            }\n            return {\n              ...user,\n              roles: safeRolesData(user.roles),\n              plantAssignments: safePlantData(null)\n            };\n          }\n        })\n      );\n\n      if (!signal?.aborted) {\n        dispatch({ type: USER_ACTIONS.SET_USERS, payload: usersWithPlants });\n      }\n    } catch (error) {\n      if (!signal?.aborted) {\n        console.error('Error fetching users:', error);\n        dispatch({ type: USER_ACTIONS.SET_ERROR, payload: error.message });\n        message.error('Failed to fetch users');\n        // Ensure we always set an empty array on error\n        dispatch({ type: USER_ACTIONS.SET_USERS, payload: [] });\n      }\n    }\n  }, []);\n\n  // Fetch roles\n  const fetchRoles = useCallback(async (signal) => {\n    try {\n      const data = await apiClient.get('/admin/roles', { signal });\n      if (!signal?.aborted) {\n        // Safely extract roles array from the response\n        const rolesArray = safeApiResponse(data, 'roles');\n        dispatch({ type: USER_ACTIONS.SET_ROLES, payload: rolesArray });\n      }\n    } catch (error) {\n      if (!signal?.aborted) {\n        console.error('Failed to fetch roles:', error);\n        message.error('Failed to fetch roles');\n        dispatch({ type: USER_ACTIONS.SET_ROLES, payload: [] });\n      }\n    }\n  }, []);\n\n  // Delete user\n  const deleteUser = useCallback(async (userId) => {\n    try {\n      await apiClient.delete(`/admin/users/${userId}`);\n      message.success('User deleted successfully');\n      // Refetch users after deletion\n      const controller = new AbortController();\n      await fetchUsers(controller.signal);\n    } catch (error) {\n      message.error('Failed to delete user');\n      throw error;\n    }\n  }, [fetchUsers]);\n\n  // Save user (create or update)\n  const saveUser = useCallback(async (values, editingUser) => {\n    try {\n      // Separate user data from plant data and roles\n      const { assignedPlants, primaryPlant, roles, ...userData } = values;\n\n      if (editingUser) {\n        // Update user basic info\n        await apiClient.put(`/admin/users/${editingUser.id}`, userData);\n\n        // Update roles if provided\n        if (roles && roles.length > 0) {\n          try {\n            await apiClient.post(`/admin/users/${editingUser.id}/roles`, {\n              roleIds: roles\n            });\n          } catch (roleError) {\n            console.warn('Failed to update user roles:', roleError);\n            message.warning('User updated but roles could not be assigned');\n          }\n        }\n\n        // Update plant assignments if provided\n        if (assignedPlants && assignedPlants.length > 0) {\n          await userAPI.updateUserPlantAssignments(editingUser.username, {\n            assignedPlants,\n            primaryPlant: primaryPlant || assignedPlants[0]\n          });\n        }\n\n        message.success('User updated successfully');\n      } else {\n        // Create new user with roles and plants included in the initial request\n        const userPayload = {\n          ...userData,\n          roles: roles || [],\n          assignedPlants: assignedPlants || [],\n          primaryPlant: primaryPlant || (assignedPlants && assignedPlants.length > 0 ? assignedPlants[0] : null)\n        };\n        \n        const response = await apiClient.post('/admin/users', userPayload);\n        console.log('User creation response:', response);\n        \n        // Check if the response indicates any warnings (like role assignment failures)\n        if (response.status === 'warning') {\n          message.warning(response.message);\n        } else if (response.status === 'success') {\n          message.success('User created successfully');\n        } else {\n          message.success('User created successfully');\n        }\n\n\n      }\n\n      dispatch({ type: USER_ACTIONS.RESET_MODAL });\n      // Refetch users after save\n      const controller = new AbortController();\n      await fetchUsers(controller.signal);\n    } catch (error) {\n      message.error('Failed to save user');\n      throw error;\n    }\n  }, [fetchUsers]);\n\n  // Open edit modal\n  const openEditModal = useCallback(async (user) => {\n    dispatch({ type: USER_ACTIONS.SET_EDITING_USER, payload: user });\n    dispatch({ type: USER_ACTIONS.SET_MODAL_VISIBLE, payload: true });\n  }, []);\n\n  // Open add modal\n  const openAddModal = useCallback(() => {\n    dispatch({ type: USER_ACTIONS.SET_EDITING_USER, payload: null });\n    dispatch({ type: USER_ACTIONS.SET_MODAL_VISIBLE, payload: true });\n  }, []);\n\n  // Close modal\n  const closeModal = useCallback(() => {\n    dispatch({ type: USER_ACTIONS.RESET_MODAL });\n  }, []);\n\n  // Initialize data on mount\n  useEffect(() => {\n    const controller = new AbortController();\n\n    const initializeData = async () => {\n      try {\n        await Promise.all([\n          fetchUsers(controller.signal),\n          fetchRoles(controller.signal)\n        ]);\n      } catch (error) {\n        if (!controller.signal.aborted) {\n          console.error('Error initializing user management data:', error);\n        }\n      }\n    };\n\n    initializeData();\n\n    return () => {\n      controller.abort();\n    };\n  }, [fetchUsers, fetchRoles]);\n\n  // Memoized actions object\n  const actions = {\n    fetchUsers,\n    fetchRoles,\n    deleteUser,\n    saveUser,\n    openEditModal,\n    openAddModal,\n    closeModal\n  };\n\n  return {\n    ...state,\n    actions\n  };\n};","import { Button, Space, message, Alert } from 'antd';\nimport React, { useCallback } from 'react';\n\nimport UserErrorBoundary from '../components/ErrorBoundaries/UserErrorBoundary';\nimport UserModal from '../components/User/UserModal';\nimport UserTable from '../components/User/UserTable';\nimport { usePlantAssignment } from '../hooks/usePlantAssignment';\nimport { useUserManagement } from '../hooks/useUserManagement';\nimport { getCurrentUser, isAuthenticated, getUserRoles } from '../services/auth';\nimport { masterDataAPI } from '../services/masterDataAPI';\nconst Users = () => {\n  // Use custom hooks for state management\n  const { users, roles, loading, modalVisible, editingUser, actions } = useUserManagement();\n  const { availablePlants } = usePlantAssignment();\n\n  // Handle test API calls (keeping existing functionality)\n  const handleTestLocationAPI = useCallback(async () => {\n    try {\n      const result = await masterDataAPI.testLocationMaster();\n      message.success(result);\n    } catch (error) {\n      message.error(`Test failed: ${  error.message}`);\n    }\n  }, []);\n\n  const handleTestSimpleAPI = useCallback(async () => {\n    try {\n      const result = await masterDataAPI.testSimpleLocation();\n      message.success(result);\n    } catch (error) {\n      message.error(`Simple test failed: ${  error.message}`);\n    }\n  }, []);\n\n  const handleDiagnosticAPI = useCallback(async () => {\n    try {\n      const result = await masterDataAPI.diagnosticLocationMaster();\n      console.log('Diagnostic result:', result);\n      message.info('Check console for diagnostic info');\n    } catch (error) {\n      message.error(`Diagnostic failed: ${  error.message}`);\n    }\n  }, []);\n\n  // Handle retry for error boundary\n  const handleRetry = useCallback(() => {\n    const controller = new AbortController();\n    actions.fetchUsers(controller.signal);\n  }, [actions]);\n\n  // Test user roles endpoint\n  const handleTestUserRoles = useCallback(async () => {\n    try {\n      // Import the API client\n      const apiClient = (await import('../api/client')).default;\n      const result = await apiClient.get('/admin/test/user-roles');\n      console.log('Test user roles result:', result);\n      message.success('Test successful! Check console for user roles test data');\n    } catch (error) {\n      console.error('Test user roles failed:', error);\n      if (error.status === 401) {\n        message.error('Authentication failed. Please log in first.');\n      } else {\n        message.error(`Test failed: ${error.message}`);\n      }\n    }\n  }, []);\n\n  // Quick login redirect\n  const handleGoToLogin = useCallback(() => {\n    window.location.href = '/qrmfg/login';\n  }, []);\n\n  // Fix admin roles\n  const handleFixAdminRoles = useCallback(async () => {\n    try {\n      const apiClient = (await import('../api/client')).default;\n      const result = await apiClient.post('/admin/fix-admin-roles');\n      console.log('Fix admin roles result:', result);\n      message.success('Admin roles fixed! Refreshing user data...');\n      // Refresh the users data\n      const controller = new AbortController();\n      actions.fetchUsers(controller.signal);\n    } catch (error) {\n      console.error('Fix admin roles failed:', error);\n      message.error(`Fix failed: ${error.message}`);\n    }\n  }, [actions]);\n\n  // Get current user info for debugging\n  const currentUser = getCurrentUser();\n  const userRoles = getUserRoles();\n  const authenticated = isAuthenticated();\n\n  return (\n    <UserErrorBoundary context=\"user-management\" onRetry={handleRetry}>\n      <div style={{ padding: '24px' }}>\n        {/* Debug info */}\n        <Alert\n          message={`Debug Info: User: ${currentUser || 'Not logged in'}, Authenticated: ${authenticated}, Roles: ${userRoles.join(', ') || 'None'}`}\n          type={authenticated ? \"info\" : \"warning\"}\n          style={{ marginBottom: 16 }}\n          showIcon\n          action={\n            !authenticated && (\n              <Button size=\"small\" onClick={handleGoToLogin}>\n                Go to Login\n              </Button>\n            )\n          }\n        />\n\n        {/* Action buttons */}\n        <div style={{ marginBottom: 16 }}>\n          <Space wrap>\n            <Button \n              type=\"primary\" \n              onClick={actions.openAddModal}\n              data-testid=\"add-user-button\"\n            >\n              Add User\n            </Button>\n            <Button onClick={handleTestLocationAPI}>\n              Test Location API\n            </Button>\n            <Button onClick={handleTestSimpleAPI}>\n              Test Simple API\n            </Button>\n            <Button onClick={handleDiagnosticAPI}>\n              Diagnostic\n            </Button>\n            <Button onClick={handleTestUserRoles}>\n              Test User Roles\n            </Button>\n            <Button onClick={handleFixAdminRoles} type=\"dashed\">\n              Fix Admin Roles\n            </Button>\n          </Space>\n        </div>\n\n        {/* Users table */}\n        <UserTable\n          users={users}\n          loading={loading}\n          onEdit={actions.openEditModal}\n          onDelete={actions.deleteUser}\n          availablePlants={availablePlants}\n        />\n\n        {/* User modal */}\n        <UserModal\n          visible={modalVisible}\n          editingUser={editingUser}\n          roles={roles}\n          onSave={actions.saveUser}\n          onCancel={actions.closeModal}\n          loading={loading}\n        />\n      </div>\n    </UserErrorBoundary>\n  );\n};\n\nexport default Users;\n","/**\n * @fileoverview Utility functions for safe data handling in React components\n * Provides functions to ensure data is always in the expected format for Table components\n * \n * @author QRMFG Development Team\n * @since 1.0.0\n */\n\n/**\n * Ensures the provided data is always an array\n * This prevents the \"G.some is not a function\" error in Ant Design Table components\n * \n * @param {any} data - The data to validate\n * @param {Array} fallback - Fallback array to use if data is not valid (default: [])\n * @returns {Array} Safe array that can be used with Table components\n * \n * @example\n * ```javascript\n * const safeUsers = ensureArray(users);\n * const safeRoles = ensureArray(roles, []);\n * ```\n */\nexport const ensureArray = (data, fallback = []) => {\n  if (Array.isArray(data)) {\n    return data;\n  }\n\n  console.warn('Data is not an array, using fallback:', { data, fallback });\n  return fallback;\n};\n\n/**\n * Safely processes API response data for Table components\n * Handles common API response patterns and ensures array output\n * \n * @param {any} response - API response data\n * @param {string} [dataKey] - Key to extract array from response object\n * @param {Array} [fallback] - Fallback array if extraction fails\n * @returns {Array} Safe array for Table components\n * \n * @example\n * ```javascript\n * // For direct array responses\n * const users = safeApiResponse(response);\n * \n * // For nested data\n * const users = safeApiResponse(response, 'users');\n * const roles = safeApiResponse(response, 'data.roles');\n * ```\n */\nexport const safeApiResponse = (response, dataKey = null, fallback = []) => {\n  if (!response) {\n    return fallback;\n  }\n\n  // If no dataKey specified, expect direct array\n  if (!dataKey) {\n    return ensureArray(response, fallback);\n  }\n\n  // Handle nested keys like 'data.users'\n  const keys = dataKey.split('.');\n  let data = response;\n\n  for (const key of keys) {\n    if (data && typeof data === 'object' && key in data) {\n      data = data[key];\n    } else {\n      console.warn(`Key '${key}' not found in response:`, response);\n      return fallback;\n    }\n  }\n\n  return ensureArray(data, fallback);\n};\n\n/**\n * Safely handles user roles data which can come in various formats\n * \n * @param {any} roles - Roles data from API\n * @returns {Array} Array of role objects with consistent structure\n */\nexport const safeRolesData = (roles) => {\n  const safeRoles = ensureArray(roles);\n\n  return safeRoles.map(role => {\n    if (typeof role === 'string') {\n      return { name: role, id: role };\n    }\n    if (typeof role === 'object' && role !== null) {\n      return {\n        name: role.name || role.roleName || role.id || 'Unknown Role',\n        id: role.id || role.name || role.roleName || Math.random().toString(36),\n        ...role\n      };\n    }\n    return { name: 'Unknown Role', id: Math.random().toString(36) };\n  });\n};\n\n/**\n * Safely handles plant assignment data which can come in various formats\n * \n * @param {any} plantData - Plant assignment data from API\n * @returns {Object} Normalized plant assignment object\n */\nexport const safePlantData = (plantData) => {\n  if (!plantData) {\n    return { assignedPlants: [], primaryPlant: null };\n  }\n\n  // If plantData is directly an array\n  if (Array.isArray(plantData)) {\n    return {\n      assignedPlants: plantData,\n      primaryPlant: plantData.length > 0 ? plantData[0] : null\n    };\n  }\n\n  // If plantData is an object\n  if (typeof plantData === 'object') {\n    return {\n      assignedPlants: ensureArray(plantData.assignedPlants || plantData.plants),\n      primaryPlant: plantData.primaryPlant || plantData.primary || null\n    };\n  }\n\n  return { assignedPlants: [], primaryPlant: null };\n};\n\n/**\n * Creates a safe error handler for API calls that sets empty arrays on error\n * \n * @param {Function} setStateFunction - React setState function\n * @param {string} [errorMessage] - Custom error message\n * @returns {Function} Error handler function\n */\nexport const createSafeErrorHandler = (setStateFunction, errorMessage = 'Failed to fetch data') => {\n  return (error, signal) => {\n    if (!signal?.aborted) {\n      console.error(errorMessage, error);\n      setStateFunction([]);\n    }\n  };\n};","/**\n * SecureForm Component\n * \n * A wrapper component that provides enhanced security features for forms including:\n * - Input validation and sanitization\n * - XSS prevention\n * - Security audit logging\n * - Real-time validation feedback\n * \n * @component\n * @since 1.0.0\n * @author QRMFG Security Team\n */\n\nimport { Form, Input, message } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { \n  InputSanitizer, \n  ValidationRules, \n  useInputValidation, \n  SecurityAuditLogger \n} from '../utils/inputValidation';\n\nconst { TextArea } = Input;\n\n/**\n * SecureInput Component - Enhanced input with validation and sanitization\n */\nconst SecureInput = React.memo(({ \n  value, \n  onChange, \n  validationType = 'text',\n  componentName = 'SecureInput',\n  fieldName = 'input',\n  onValidationChange,\n  ...props \n}) => {\n  const { validateInput } = useInputValidation();\n  const [validationState, setValidationState] = useState({\n    isValid: true,\n    errors: [],\n    wasModified: false\n  });\n\n  const handleChange = useCallback((e) => {\n    const inputValue = e.target.value;\n    const validation = validateInput(inputValue, validationType);\n    \n    setValidationState(validation);\n    \n    // Log potential security issues\n    if (validation.wasModified) {\n      SecurityAuditLogger.logXSSAttempt(\n        inputValue,\n        validation.sanitizedValue,\n        componentName,\n        fieldName\n      );\n      \n      message.warning('Input was sanitized for security reasons');\n    }\n    \n    // Call parent onChange with sanitized value\n    if (onChange) {\n      onChange({\n        ...e,\n        target: {\n          ...e.target,\n          value: validation.sanitizedValue\n        }\n      });\n    }\n    \n    // Notify parent of validation state\n    if (onValidationChange) {\n      onValidationChange(validation);\n    }\n  }, [onChange, validationType, componentName, fieldName, onValidationChange, validateInput]);\n\n  return (\n    <Input\n      {...props}\n      value={value}\n      onChange={handleChange}\n      status={validationState.isValid ? '' : 'error'}\n      title={validationState.errors.join(', ')}\n    />\n  );\n});\n\n/**\n * SecureTextArea Component - Enhanced textarea with validation and sanitization\n */\nconst SecureTextArea = React.memo(({ \n  value, \n  onChange, \n  validationType = 'richtext',\n  componentName = 'SecureTextArea',\n  fieldName = 'textarea',\n  onValidationChange,\n  ...props \n}) => {\n  const { validateInput } = useInputValidation();\n  const [validationState, setValidationState] = useState({\n    isValid: true,\n    errors: [],\n    wasModified: false\n  });\n\n  const handleChange = useCallback((e) => {\n    const inputValue = e.target.value;\n    const validation = validateInput(inputValue, validationType);\n    \n    setValidationState(validation);\n    \n    // Log potential security issues\n    if (validation.wasModified) {\n      SecurityAuditLogger.logXSSAttempt(\n        inputValue,\n        validation.sanitizedValue,\n        componentName,\n        fieldName\n      );\n      \n      message.warning('Input was sanitized for security reasons');\n    }\n    \n    // Call parent onChange with sanitized value\n    if (onChange) {\n      onChange({\n        ...e,\n        target: {\n          ...e.target,\n          value: validation.sanitizedValue\n        }\n      });\n    }\n    \n    // Notify parent of validation state\n    if (onValidationChange) {\n      onValidationChange(validation);\n    }\n  }, [onChange, validationType, componentName, fieldName, onValidationChange, validateInput]);\n\n  return (\n    <TextArea\n      {...props}\n      value={value}\n      onChange={handleChange}\n      status={validationState.isValid ? '' : 'error'}\n      title={validationState.errors.join(', ')}\n    />\n  );\n});\n\n/**\n * SecureForm Component - Enhanced form with security features\n */\nconst SecureForm = React.memo(({ \n  children, \n  onFinish, \n  componentName = 'SecureForm',\n  enableSecurityLogging = true,\n  ...props \n}) => {\n  const [securityEvents, setSecurityEvents] = useState([]);\n\n  // Handle form submission with security validation\n  const handleFinish = useCallback(async (values) => {\n    try {\n      // Sanitize all form values before submission\n      const sanitizedValues = {};\n      const securityIssues = [];\n\n      Object.keys(values).forEach(key => {\n        const originalValue = values[key];\n        \n        if (typeof originalValue === 'string') {\n          const sanitizedValue = InputSanitizer.sanitizeText(originalValue);\n          sanitizedValues[key] = sanitizedValue;\n          \n          if (sanitizedValue !== originalValue) {\n            securityIssues.push({\n              field: key,\n              originalValue: originalValue.substring(0, 50),\n              sanitizedValue: sanitizedValue.substring(0, 50)\n            });\n          }\n        } else {\n          sanitizedValues[key] = originalValue;\n        }\n      });\n\n      // Log security issues if any\n      if (securityIssues.length > 0 && enableSecurityLogging) {\n        securityIssues.forEach(issue => {\n          SecurityAuditLogger.logXSSAttempt(\n            issue.originalValue,\n            issue.sanitizedValue,\n            componentName,\n            issue.field\n          );\n        });\n        \n        message.warning(`${securityIssues.length} field(s) were sanitized for security`);\n      }\n\n      // Call original onFinish with sanitized values\n      if (onFinish) {\n        await onFinish(sanitizedValues);\n      }\n    } catch (error) {\n      console.error('SecureForm submission error:', error);\n      message.error('Form submission failed');\n      throw error;\n    }\n  }, [onFinish, componentName, enableSecurityLogging]);\n\n  // Track security events\n  useEffect(() => {\n    if (enableSecurityLogging) {\n      const events = SecurityAuditLogger.getRecentEvents();\n      setSecurityEvents(events.slice(-10)); // Keep last 10 events\n    }\n  }, [enableSecurityLogging]);\n\n  return (\n    <Form\n      {...props}\n      onFinish={handleFinish}\n      validateTrigger={['onChange', 'onBlur']}\n    >\n      {children}\n      \n      {/* Development mode security info */}\n      {process.env.NODE_ENV === 'development' && securityEvents.length > 0 && (\n        <div style={{ \n          marginTop: 16, \n          padding: 8, \n          background: '#fff7e6', \n          border: '1px solid #ffd591',\n          borderRadius: 4,\n          fontSize: 12\n        }}>\n          <strong>Security Events (Dev Mode):</strong>\n          <ul style={{ margin: '4px 0', paddingLeft: 16 }}>\n            {securityEvents.slice(-3).map((event, index) => (\n              <li key={index}>\n                {event.type} in {event.component}.{event.field} at {new Date(event.timestamp).toLocaleTimeString()}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </Form>\n  );\n});\n\n// Form.Item wrapper with enhanced validation\nconst SecureFormItem = React.memo(({ \n  children, \n  validationType = 'text',\n  name,\n  rules = [],\n  ...props \n}) => {\n  // Combine custom rules with security validation rules\n  const securityRules = React.useMemo(() => {\n    let baseRules = [];\n    \n    switch (validationType) {\n      case 'username':\n        baseRules = ValidationRules.username;\n        break;\n      case 'email':\n        baseRules = ValidationRules.email;\n        break;\n      case 'password':\n        baseRules = ValidationRules.password;\n        break;\n      case 'projectCode':\n        baseRules = ValidationRules.projectCode;\n        break;\n      case 'materialCode':\n        baseRules = ValidationRules.materialCode;\n        break;\n      case 'plantCode':\n        baseRules = ValidationRules.plantCode;\n        break;\n      case 'text':\n        baseRules = ValidationRules.text(false, 0, 255);\n        break;\n      case 'richtext':\n        baseRules = ValidationRules.richText(false, 0, 1000);\n        break;\n      default:\n        baseRules = [];\n    }\n    \n    return [...baseRules, ...rules];\n  }, [validationType, rules]);\n\n  return (\n    <Form.Item\n      {...props}\n      name={name}\n      rules={securityRules}\n    >\n      {children}\n    </Form.Item>\n  );\n});\n\n// PropTypes\nSecureInput.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  validationType: PropTypes.oneOf(['text', 'username', 'email', 'sql', 'filename', 'url']),\n  componentName: PropTypes.string,\n  fieldName: PropTypes.string,\n  onValidationChange: PropTypes.func\n};\n\nSecureTextArea.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  validationType: PropTypes.oneOf(['text', 'richtext']),\n  componentName: PropTypes.string,\n  fieldName: PropTypes.string,\n  onValidationChange: PropTypes.func\n};\n\nSecureForm.propTypes = {\n  children: PropTypes.node.isRequired,\n  onFinish: PropTypes.func,\n  componentName: PropTypes.string,\n  enableSecurityLogging: PropTypes.bool\n};\n\nSecureFormItem.propTypes = {\n  children: PropTypes.node.isRequired,\n  validationType: PropTypes.string,\n  name: PropTypes.string,\n  rules: PropTypes.array\n};\n\n// Display names\nSecureInput.displayName = 'SecureInput';\nSecureTextArea.displayName = 'SecureTextArea';\nSecureForm.displayName = 'SecureForm';\nSecureFormItem.displayName = 'SecureFormItem';\n\n// Exports\nexport { SecureInput, SecureTextArea, SecureFormItem };\nexport default SecureForm;","import apiClient from '../api/client';\nimport { getToken, isAuthenticated } from '../services/auth';\n\n/**\n * User API service providing user management functionality\n * Migrated to use unified APIClient with standardized error handling\n *\n * @namespace userAPI\n */\nexport const userAPI = {\n  /**\n   * Get current user's plant assignments from backend API\n   * @param {string} username - Username to get plant assignments for\n   * @param {Object} options - Additional options including signal for AbortController\n   * @returns {Promise<Object>} Plant assignment data\n   */\n  getUserPlantAssignments: async (username, options = {}) => {\n    try {\n      console.log('Getting plant assignments for user:', username);\n      console.log('Is authenticated:', isAuthenticated());\n\n      // Check if user is authenticated first\n      if (!isAuthenticated()) {\n        console.warn('User is not authenticated, cannot get plant assignments');\n        return {\n          assignedPlants: [],\n          primaryPlant: null,\n          effectivePlant: null,\n          isPlantUser: false\n        };\n      }\n\n      // Primary method: Get plant info from JWT token validation\n      const token = getToken();\n      console.log('Retrieved token:', token ? 'Token found' : 'No token found');\n\n      if (token) {\n        try {\n          const validationResponse = await apiClient.post('/auth/validate', { token }, options);\n          console.log('Token validation response:', validationResponse);\n          console.log('Plant codes in token:', validationResponse.plantCodes);\n          console.log('Primary plant in token:', validationResponse.primaryPlant);\n          console.log('Is plant user:', validationResponse.isPlantUser);\n\n          if (validationResponse.valid) {\n            // Check if we have plant data in the token\n            if (validationResponse.plantCodes && validationResponse.plantCodes.length > 0) {\n              console.log('Plant assignments from token:', validationResponse);\n              return {\n                assignedPlants: validationResponse.plantCodes || [],\n                primaryPlant: validationResponse.primaryPlant || null,\n                effectivePlant: validationResponse.primaryPlant || (validationResponse.plantCodes && validationResponse.plantCodes[0]) || null,\n                isPlantUser: validationResponse.isPlantUser || false\n              };\n            }\n\n            // Handle case where user has primaryPlant but empty plantCodes array\n            if (validationResponse.primaryPlant && validationResponse.isPlantUser) {\n              console.log('User has primary plant but empty plantCodes, using primary plant as assigned plant:', validationResponse.primaryPlant);\n              return {\n                assignedPlants: [validationResponse.primaryPlant],\n                primaryPlant: validationResponse.primaryPlant,\n                effectivePlant: validationResponse.primaryPlant,\n                isPlantUser: validationResponse.isPlantUser || false\n              };\n            }\n\n            // If no plant data in token but token is valid, user might not have plants assigned\n            console.log('Token is valid but no plant data found in token');\n          }\n        } catch (tokenError) {\n          console.warn('Failed to validate token for plant assignments:', tokenError);\n        }\n      }\n\n      // Fallback: try to get from stored user data (check multiple storage keys)\n      const possibleKeys = ['userData', 'qrmfg_user_data', 'user_info'];\n      for (const key of possibleKeys) {\n        const storedUserData = localStorage.getItem(key) || sessionStorage.getItem(key);\n        if (storedUserData) {\n          try {\n            const userData = JSON.parse(storedUserData);\n            if (userData.plantCodes || userData.assignedPlants) {\n              console.log('Plant assignments from stored data:', userData);\n              return {\n                assignedPlants: userData.plantCodes || userData.assignedPlants || [],\n                primaryPlant: userData.primaryPlant || null,\n                effectivePlant: userData.primaryPlant || ((userData.plantCodes || userData.assignedPlants) && (userData.plantCodes || userData.assignedPlants)[0]) || null,\n                isPlantUser: userData.isPlantUser || false\n              };\n            }\n          } catch (parseError) {\n            console.warn(`Failed to parse stored user data from ${key}:`, parseError);\n          }\n        }\n      }\n\n      // Last resort: Try admin endpoints only if user might have admin access\n      try {\n        // Only try admin endpoints if we think the user might be an admin\n        const adminToken = getToken();\n        const validationResponse = await apiClient.post('/auth/validate', { token: adminToken }, options);\n        if (validationResponse.valid && validationResponse.isAdmin) {\n          console.log('User appears to be admin, trying admin endpoints...');\n\n          const userDetails = await apiClient.get('/admin/users', options);\n          const currentUser = userDetails.users?.find(user => user.username === username);\n\n          if (currentUser && currentUser.assignedPlants) {\n            console.log('Admin endpoint: Using user details for plant assignments:', currentUser);\n\n            return {\n              assignedPlants: currentUser.assignedPlants || [],\n              primaryPlant: currentUser.primaryPlant || null,\n              effectivePlant: currentUser.primaryPlant || (currentUser.assignedPlants && currentUser.assignedPlants[0]) || null,\n              isPlantUser: (currentUser.assignedPlants && currentUser.assignedPlants.length > 0) || false\n            };\n          }\n        }\n      } catch (adminError) {\n        console.warn('Admin endpoints not accessible (expected for non-admin users):', adminError.message);\n      }\n\n      // If no plant data available, return empty structure\n      console.warn('No plant assignment data available for user:', username);\n      return {\n        assignedPlants: [],\n        primaryPlant: null,\n        effectivePlant: null,\n        isPlantUser: false\n      };\n    } catch (error) {\n      console.error('Error getting user plant assignments:', error);\n      // Return empty structure on error to prevent crashes\n      return {\n        assignedPlants: [],\n        primaryPlant: null,\n        effectivePlant: null,\n        isPlantUser: false\n      };\n    }\n  },\n\n  /**\n   * Update user's plant assignments\n   * @param {string} username - Username to update plant assignments for\n   * @param {Object} plantData - Plant assignment data\n   * @returns {Promise<Object>} Updated plant assignments\n   */\n  updateUserPlantAssignments: (username, plantData) =>\n    apiClient.put(`/admin/users/${encodeURIComponent(username)}/plants`, plantData),\n\n  /**\n   * Check if user is assigned to a specific plant\n   * @param {string} username - Username to check\n   * @param {string} plantCode - Plant code to check assignment for\n   * @returns {Promise<boolean>} True if user is assigned to plant\n   */\n  checkUserPlantAssignment: (username, plantCode) =>\n    apiClient.get(\n      `/admin/users/${encodeURIComponent(username)}/plants/${encodeURIComponent(plantCode)}/check`\n    ),\n\n  /**\n   * Get user information by ID\n   * @param {string} id - User ID\n   * @returns {Promise<Object>} User information\n   */\n  getUserById: id => apiClient.get(`/admin/users/${id}`),\n\n  /**\n   * Get all users (cached for 5 minutes)\n   * @param {Object} options - Additional options including signal for AbortController\n   * @returns {Promise<Array>} Array of all users\n   */\n  getAllUsers: (options = {}) => apiClient.get('/admin/users', {\n    cacheTTL: 5 * 60 * 1000, // Cache for 5 minutes\n    ...options\n  }),\n\n  /**\n   * Get all users without cache (for real-time data)\n   * @param {Object} options - Additional options including signal for AbortController\n   * @returns {Promise<Array>} Array of all users\n   */\n  getAllUsersRealTime: (options = {}) => apiClient.get('/admin/users', {\n    useCache: false,\n    ...options\n  })\n};\n","import { unit } from '@ant-design/cssinjs';\nimport { resetComponent } from '../../style';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\n// ============================== Size ================================\nconst genSizeDividerStyle = token => {\n  const {\n    componentCls\n  } = token;\n  return {\n    [componentCls]: {\n      '&-horizontal': {\n        [`&${componentCls}`]: {\n          '&-sm': {\n            marginBlock: token.marginXS\n          },\n          '&-md': {\n            marginBlock: token.margin\n          }\n        }\n      }\n    }\n  };\n};\n// ============================== Shared ==============================\nconst genSharedDividerStyle = token => {\n  const {\n    componentCls,\n    sizePaddingEdgeHorizontal,\n    colorSplit,\n    lineWidth,\n    textPaddingInline,\n    orientationMargin,\n    verticalMarginInline\n  } = token;\n  return {\n    [componentCls]: Object.assign(Object.assign({}, resetComponent(token)), {\n      borderBlockStart: `${unit(lineWidth)} solid ${colorSplit}`,\n      // vertical\n      '&-vertical': {\n        position: 'relative',\n        top: '-0.06em',\n        display: 'inline-block',\n        height: '0.9em',\n        marginInline: verticalMarginInline,\n        marginBlock: 0,\n        verticalAlign: 'middle',\n        borderTop: 0,\n        borderInlineStart: `${unit(lineWidth)} solid ${colorSplit}`\n      },\n      '&-horizontal': {\n        display: 'flex',\n        clear: 'both',\n        width: '100%',\n        minWidth: '100%',\n        // Fix https://github.com/ant-design/ant-design/issues/10914\n        margin: `${unit(token.marginLG)} 0`\n      },\n      [`&-horizontal${componentCls}-with-text`]: {\n        display: 'flex',\n        alignItems: 'center',\n        margin: `${unit(token.dividerHorizontalWithTextGutterMargin)} 0`,\n        color: token.colorTextHeading,\n        fontWeight: 500,\n        fontSize: token.fontSizeLG,\n        whiteSpace: 'nowrap',\n        textAlign: 'center',\n        borderBlockStart: `0 ${colorSplit}`,\n        '&::before, &::after': {\n          position: 'relative',\n          width: '50%',\n          borderBlockStart: `${unit(lineWidth)} solid transparent`,\n          // Chrome not accept `inherit` in `border-top`\n          borderBlockStartColor: 'inherit',\n          borderBlockEnd: 0,\n          transform: 'translateY(50%)',\n          content: \"''\"\n        }\n      },\n      [`&-horizontal${componentCls}-with-text-start`]: {\n        '&::before': {\n          width: `calc(${orientationMargin} * 100%)`\n        },\n        '&::after': {\n          width: `calc(100% - ${orientationMargin} * 100%)`\n        }\n      },\n      [`&-horizontal${componentCls}-with-text-end`]: {\n        '&::before': {\n          width: `calc(100% - ${orientationMargin} * 100%)`\n        },\n        '&::after': {\n          width: `calc(${orientationMargin} * 100%)`\n        }\n      },\n      [`${componentCls}-inner-text`]: {\n        display: 'inline-block',\n        paddingBlock: 0,\n        paddingInline: textPaddingInline\n      },\n      '&-dashed': {\n        background: 'none',\n        borderColor: colorSplit,\n        borderStyle: 'dashed',\n        borderWidth: `${unit(lineWidth)} 0 0`\n      },\n      [`&-horizontal${componentCls}-with-text${componentCls}-dashed`]: {\n        '&::before, &::after': {\n          borderStyle: 'dashed none none'\n        }\n      },\n      [`&-vertical${componentCls}-dashed`]: {\n        borderInlineStartWidth: lineWidth,\n        borderInlineEnd: 0,\n        borderBlockStart: 0,\n        borderBlockEnd: 0\n      },\n      '&-dotted': {\n        background: 'none',\n        borderColor: colorSplit,\n        borderStyle: 'dotted',\n        borderWidth: `${unit(lineWidth)} 0 0`\n      },\n      [`&-horizontal${componentCls}-with-text${componentCls}-dotted`]: {\n        '&::before, &::after': {\n          borderStyle: 'dotted none none'\n        }\n      },\n      [`&-vertical${componentCls}-dotted`]: {\n        borderInlineStartWidth: lineWidth,\n        borderInlineEnd: 0,\n        borderBlockStart: 0,\n        borderBlockEnd: 0\n      },\n      [`&-plain${componentCls}-with-text`]: {\n        color: token.colorText,\n        fontWeight: 'normal',\n        fontSize: token.fontSize\n      },\n      [`&-horizontal${componentCls}-with-text-start${componentCls}-no-default-orientation-margin-start`]: {\n        '&::before': {\n          width: 0\n        },\n        '&::after': {\n          width: '100%'\n        },\n        [`${componentCls}-inner-text`]: {\n          paddingInlineStart: sizePaddingEdgeHorizontal\n        }\n      },\n      [`&-horizontal${componentCls}-with-text-end${componentCls}-no-default-orientation-margin-end`]: {\n        '&::before': {\n          width: '100%'\n        },\n        '&::after': {\n          width: 0\n        },\n        [`${componentCls}-inner-text`]: {\n          paddingInlineEnd: sizePaddingEdgeHorizontal\n        }\n      }\n    })\n  };\n};\nexport const prepareComponentToken = token => ({\n  textPaddingInline: '1em',\n  orientationMargin: 0.05,\n  verticalMarginInline: token.marginXS\n});\n// ============================== Export ==============================\nexport default genStyleHooks('Divider', token => {\n  const dividerToken = mergeToken(token, {\n    dividerHorizontalWithTextGutterMargin: token.margin,\n    sizePaddingEdgeHorizontal: 0\n  });\n  return [genSharedDividerStyle(dividerToken), genSizeDividerStyle(dividerToken)];\n}, prepareComponentToken, {\n  unitless: {\n    orientationMargin: true\n  }\n});","\"use client\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { devUseWarning } from '../_util/warning';\nimport { useComponentConfig } from '../config-provider/context';\nimport useSize from '../config-provider/hooks/useSize';\nimport useStyle from './style';\nconst sizeClassNameMap = {\n  small: 'sm',\n  middle: 'md'\n};\nconst Divider = props => {\n  const {\n    getPrefixCls,\n    direction,\n    className: dividerClassName,\n    style: dividerStyle\n  } = useComponentConfig('divider');\n  const {\n      prefixCls: customizePrefixCls,\n      type = 'horizontal',\n      orientation = 'center',\n      orientationMargin,\n      className,\n      rootClassName,\n      children,\n      dashed,\n      variant = 'solid',\n      plain,\n      style,\n      size: customSize\n    } = props,\n    restProps = __rest(props, [\"prefixCls\", \"type\", \"orientation\", \"orientationMargin\", \"className\", \"rootClassName\", \"children\", \"dashed\", \"variant\", \"plain\", \"style\", \"size\"]);\n  const prefixCls = getPrefixCls('divider', customizePrefixCls);\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls);\n  const sizeFullName = useSize(customSize);\n  const sizeCls = sizeClassNameMap[sizeFullName];\n  const hasChildren = !!children;\n  const mergedOrientation = React.useMemo(() => {\n    if (orientation === 'left') {\n      return direction === 'rtl' ? 'end' : 'start';\n    }\n    if (orientation === 'right') {\n      return direction === 'rtl' ? 'start' : 'end';\n    }\n    return orientation;\n  }, [direction, orientation]);\n  const hasMarginStart = mergedOrientation === 'start' && orientationMargin != null;\n  const hasMarginEnd = mergedOrientation === 'end' && orientationMargin != null;\n  const classString = classNames(prefixCls, dividerClassName, hashId, cssVarCls, `${prefixCls}-${type}`, {\n    [`${prefixCls}-with-text`]: hasChildren,\n    [`${prefixCls}-with-text-${mergedOrientation}`]: hasChildren,\n    [`${prefixCls}-dashed`]: !!dashed,\n    [`${prefixCls}-${variant}`]: variant !== 'solid',\n    [`${prefixCls}-plain`]: !!plain,\n    [`${prefixCls}-rtl`]: direction === 'rtl',\n    [`${prefixCls}-no-default-orientation-margin-start`]: hasMarginStart,\n    [`${prefixCls}-no-default-orientation-margin-end`]: hasMarginEnd,\n    [`${prefixCls}-${sizeCls}`]: !!sizeCls\n  }, className, rootClassName);\n  const memoizedOrientationMargin = React.useMemo(() => {\n    if (typeof orientationMargin === 'number') {\n      return orientationMargin;\n    }\n    if (/^\\d+$/.test(orientationMargin)) {\n      return Number(orientationMargin);\n    }\n    return orientationMargin;\n  }, [orientationMargin]);\n  const innerStyle = {\n    marginInlineStart: hasMarginStart ? memoizedOrientationMargin : undefined,\n    marginInlineEnd: hasMarginEnd ? memoizedOrientationMargin : undefined\n  };\n  // Warning children not work in vertical mode\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('Divider');\n    process.env.NODE_ENV !== \"production\" ? warning(!children || type !== 'vertical', 'usage', '`children` not working in `vertical` mode.') : void 0;\n  }\n  return wrapCSSVar(/*#__PURE__*/React.createElement(\"div\", Object.assign({\n    className: classString,\n    style: Object.assign(Object.assign({}, dividerStyle), style)\n  }, restProps, {\n    role: \"separator\"\n  }), children && type !== 'vertical' && (/*#__PURE__*/React.createElement(\"span\", {\n    className: `${prefixCls}-inner-text`,\n    style: innerStyle\n  }, children))));\n};\nif (process.env.NODE_ENV !== 'production') {\n  Divider.displayName = 'Divider';\n}\nexport default Divider;","import apiClient from '../api/client';\n\nexport const masterDataAPI = {\n  // Location Master (Plants) endpoints\n  getAllLocations: async () => {\n    try {\n      return await apiClient.get('/master-data/locations');\n    } catch (error) {\n      console.warn('Main locations endpoint failed, trying fallback:', error);\n      try {\n        return await apiClient.get('/master-data/locations/fallback');\n      } catch (fallbackError) {\n        console.warn('Fallback endpoint failed, trying simple endpoint:', fallbackError);\n        try {\n          return await apiClient.get('/simple-locations');\n        } catch (simpleError) {\n          console.error('All locations endpoints failed:', simpleError);\n          throw simpleError;\n        }\n      }\n    }\n  },\n\n  getLocationByCode: locationCode =>\n    apiClient.get(`/master-data/locations/${encodeURIComponent(locationCode)}`),\n\n  searchLocations: searchTerm =>\n    apiClient.get(`/master-data/locations/search?term=${encodeURIComponent(searchTerm)}`),\n\n  createLocation: locationData => apiClient.post('/master-data/locations', locationData),\n\n  updateLocation: (locationCode, locationData) =>\n    apiClient.put(`/master-data/locations/${encodeURIComponent(locationCode)}`, locationData),\n\n  deleteLocation: locationCode =>\n    apiClient.delete(`/master-data/locations/${encodeURIComponent(locationCode)}`),\n\n\n\n  // Project Item Master endpoints\n  getAllProjectItems: () => apiClient.get('/master-data/project-items'),\n\n  getItemsByProject: projectCode =>\n    apiClient.get(`/master-data/project-items/projects/${encodeURIComponent(projectCode)}`),\n\n  getProjectsByItem: itemCode =>\n    apiClient.get(`/master-data/project-items/items/${encodeURIComponent(itemCode)}`),\n\n  getAllProjectCodes: () => apiClient.get('/master-data/project-codes'),\n\n  getAllItemCodes: () => apiClient.get('/master-data/item-codes'),\n\n  getItemCodesByProject: projectCode =>\n    apiClient.get(`/master-data/project-codes/${encodeURIComponent(projectCode)}/items`),\n\n  // Test endpoints\n  testLocationMaster: () => apiClient.get('/master-data/locations/test'),\n\n  testSimpleLocation: () => apiClient.get('/simple-locations/test'),\n\n  diagnosticLocationMaster: () => apiClient.get('/master-data/locations/diagnostic'),\n\n  getSimpleLocationCount: () => apiClient.get('/simple-locations/count')\n};\n"],"names":["UserErrorBoundary","React","constructor","props","super","reportError","error","errorInfo","context","console","message","stack","timestamp","Date","toISOString","handleRetry","this","setState","hasError","onRetry","handleGoHome","window","location","href","state","getDerivedStateFromError","componentDidCatch","level","component","render","_jsx","Result","status","title","subTitle","extra","Button","type","onClick","children","style","padding","process","defaultProps","usePlantAssignment","availablePlants","setAvailablePlants","useState","plantsLoading","setPlantsLoading","setError","fetchPlants","useCallback","async","locations","masterDataAPI","getAllLocations","signal","aborted","plantOptions","map","label","locationCode","description","value","key","err","warning","getPlantDescription","plantCode","plant","find","p","validatePlantAssignments","assignedPlants","primaryPlant","errors","length","push","includes","filterPlants","input","option","_option$label","toLowerCase","getAvailablePlantsForAssignment","currentAssignments","arguments","undefined","filter","useEffect","controller","AbortController","abort","primaryPlantOptions","useMemo","disabled","Text","Typography","PlantAssignmentForm","_ref","_form$getFieldValue","_form$getFieldValue2","selectedRoles","roles","form","initialValues","isPlantUserSelected","plantRoleIds","role","name","id","some","roleId","handleRefreshPlants","validateAssignedPlants","_","Promise","resolve","reject","Error","validatePrimaryPlant","getFieldValue","handleAssignedPlantsChange","values","currentPrimaryPlant","setFieldValue","setFieldsValue","_jsxs","_Fragment","Divider","display","justifyContent","alignItems","marginBottom","strong","color","size","icon","ReloadOutlined","loading","fontSize","Alert","showIcon","Form","Item","rules","validator","hasFeedback","tooltip","Select","mode","placeholder","options","showSearch","filterOption","onChange","maxTagCount","allowClear","marginTop","displayName","UserModal","visible","editingUser","onSave","onCancel","useForm","setSelectedRoles","plantAssignmentData","setPlantAssignmentData","isEditMode","Boolean","modalTitle","validationRules","username","ValidationRules","email","password","required","min","roleOptions","handleSubmit","resetFields","handleCancel","handleOk","submit","loadPlantAssignmentData","plantData","userAPI","getUserPlantAssignments","warn","userRoles","r","Modal","open","onOk","confirmLoading","destroyOnClose","width","maskClosable","SecureForm","labelCol","span","wrapperCol","onFinish","preserve","componentName","enableSecurityLogging","SecureFormItem","validationType","SecureInput","fieldName","Input","Password","UserTable","users","onEdit","onDelete","columns","dataIndex","sorter","a","b","localeCompare","Array","isArray","join","record","plantAssignments","trim","split","plants","EditOutlined","danger","DeleteOutlined","tableProps","safeUsers","dataSource","rowKey","pagination","pageSize","showSizeChanger","showQuickJumper","showTotal","total","range","scroll","x","Table","locale","emptyText","textAlign","apiClient","createSimpleApiClient","require","get","post","put","delete","USER_ACTIONS","initialState","modalVisible","userReducer","action","payload","Users","actions","useUserManagement","dispatch","useReducer","fetchUsers","data","usersArray","safeApiResponse","usersWithPlants","all","user","safeRolesData","safePlantData","fetchRoles","rolesArray","deleteUser","userId","success","saveUser","userData","roleIds","roleError","updateUserPlantAssignments","userPayload","response","log","openEditModal","openAddModal","closeModal","initializeData","handleTestLocationAPI","result","testLocationMaster","handleTestSimpleAPI","testSimpleLocation","handleDiagnosticAPI","diagnosticLocationMaster","info","handleTestUserRoles","default","handleGoToLogin","handleFixAdminRoles","currentUser","getCurrentUser","getUserRoles","authenticated","isAuthenticated","Space","wrap","ensureArray","fallback","dataKey","keys","roleName","Math","random","toString","primary","TextArea","onValidationChange","validateInput","useInputValidation","validationState","setValidationState","isValid","wasModified","handleChange","e","inputValue","target","validation","SecurityAuditLogger","logXSSAttempt","sanitizedValue","SecureTextArea","_ref2","_ref3","securityEvents","setSecurityEvents","handleFinish","sanitizedValues","securityIssues","Object","forEach","originalValue","InputSanitizer","sanitizeText","field","substring","issue","events","getRecentEvents","slice","validateTrigger","_ref4","securityRules","baseRules","projectCode","materialCode","text","richText","effectivePlant","isPlantUser","token","getToken","validationResponse","plantCodes","valid","tokenError","possibleKeys","storedUserData","localStorage","getItem","sessionStorage","JSON","parse","parseError","adminToken","isAdmin","_userDetails$users","adminError","encodeURIComponent","checkUserPlantAssignment","getUserById","getAllUsers","cacheTTL","getAllUsersRealTime","useCache","genSizeDividerStyle","componentCls","marginBlock","marginXS","margin","genSharedDividerStyle","sizePaddingEdgeHorizontal","colorSplit","lineWidth","textPaddingInline","orientationMargin","verticalMarginInline","assign","resetComponent","borderBlockStart","unit","position","top","height","marginInline","verticalAlign","borderTop","borderInlineStart","clear","minWidth","marginLG","dividerHorizontalWithTextGutterMargin","colorTextHeading","fontWeight","fontSizeLG","whiteSpace","borderBlockStartColor","borderBlockEnd","transform","content","paddingBlock","paddingInline","background","borderColor","borderStyle","borderWidth","borderInlineStartWidth","borderInlineEnd","colorText","paddingInlineStart","paddingInlineEnd","genStyleHooks","dividerToken","mergeToken","unitless","__rest","s","t","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","sizeClassNameMap","small","middle","getPrefixCls","direction","className","dividerClassName","dividerStyle","useComponentConfig","prefixCls","customizePrefixCls","orientation","rootClassName","dashed","variant","plain","customSize","restProps","wrapCSSVar","hashId","cssVarCls","useStyle","sizeFullName","useSize","sizeCls","hasChildren","mergedOrientation","hasMarginStart","hasMarginEnd","classString","classNames","memoizedOrientationMargin","test","Number","innerStyle","marginInlineStart","marginInlineEnd","fallbackError","simpleError","getLocationByCode","searchLocations","searchTerm","createLocation","locationData","updateLocation","deleteLocation","getAllProjectItems","getItemsByProject","getProjectsByItem","itemCode","getAllProjectCodes","getAllItemCodes","getItemCodesByProject","getSimpleLocationCount"],"sourceRoot":""}