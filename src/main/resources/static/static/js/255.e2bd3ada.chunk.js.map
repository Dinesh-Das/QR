{"version":3,"file":"static/js/255.e2bd3ada.chunk.js","mappings":"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","sources":["screens/WorkflowMonitoring.js"],"sourcesContent":["import {\n  BarChartOutlined,\n  DownloadOutlined,\n  ClockCircleOutlined,\n  CheckCircleOutlined,\n  ExclamationCircleOutlined,\n  QuestionCircleOutlined\n} from '@ant-design/icons';\nimport {\n  Row,\n  Col,\n  Card,\n  Statistic,\n  Table,\n  DatePicker,\n  Button,\n  Spin,\n  Tabs,\n  Typography,\n  message,\n  Progress\n} from 'antd';\nimport { Chart, registerables } from 'chart.js';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Bar, Line, Pie } from 'react-chartjs-2';\n\nimport apiClient from '../api/client';\n\n\n// Register Chart.js components\nChart.register(...registerables);\n\nconst { Title, Text } = Typography;\nconst { RangePicker } = DatePicker;\nconst { TabPane } = Tabs;\n// const { Option } = Select; // Not currently used\n\nconst WorkflowMonitoring = () => {\n  const [loading, setLoading] = useState(true);\n  const [dashboardData, setDashboardData] = useState(null);\n  const [dateRange, setDateRange] = useState([null, null]);\n  const [slaReport, setSlaReport] = useState(null);\n  const [slaLoading, setSlaLoading] = useState(false);\n  const [exportLoading, setExportLoading] = useState(false);\n  const [bottlenecks, setBottlenecks] = useState(null);\n  const [bottlenecksLoading, setBottlenecksLoading] = useState(false);\n  const [performanceMetrics, setPerformanceMetrics] = useState(null);\n  const [performanceLoading, setPerformanceLoading] = useState(false);\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    const fetchData = async () => {\n      try {\n        await Promise.all([\n          fetchDashboardData(controller.signal),\n          fetchBottlenecks(controller.signal),\n          fetchPerformanceMetrics(controller.signal)\n        ]);\n      } catch (error) {\n        if (!controller.signal.aborted) {\n          console.error('Error fetching workflow monitoring data:', error);\n        }\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      controller.abort();\n    };\n  }, [fetchDashboardData, fetchBottlenecks, fetchPerformanceMetrics]);\n\n  const fetchDashboardData = useCallback(async signal => {\n    setLoading(true);\n    try {\n      const response = await apiClient.get('/admin/monitoring/dashboard', { signal });\n      if (!signal?.aborted) {\n        setDashboardData(response);\n      }\n    } catch (error) {\n      if (!signal?.aborted) {\n        message.error('Failed to load dashboard data');\n        console.error('Error fetching dashboard data:', error);\n      }\n    } finally {\n      if (!signal?.aborted) {\n        setLoading(false);\n      }\n    }\n  }, []);\n\n  const fetchSlaReport = async () => {\n    setSlaLoading(true);\n    try {\n      let url = '/admin/monitoring/query-sla';\n      if (dateRange[0] && dateRange[1]) {\n        url += `?startDate=${dateRange[0].toISOString()}&endDate=${dateRange[1].toISOString()}`;\n      }\n      const response = await apiClient.get(url);\n      setSlaReport(response);\n    } catch (error) {\n      message.error('Failed to load SLA report');\n      console.error('Error fetching SLA report:', error);\n    } finally {\n      setSlaLoading(false);\n    }\n  };\n\n  const fetchBottlenecks = useCallback(async signal => {\n    setBottlenecksLoading(true);\n    try {\n      const response = await apiClient.get('/admin/monitoring/bottlenecks', { signal });\n      if (!signal?.aborted) {\n        setBottlenecks(response);\n      }\n    } catch (error) {\n      if (!signal?.aborted) {\n        message.error('Failed to load bottlenecks analysis');\n        console.error('Error fetching bottlenecks:', error);\n      }\n    } finally {\n      if (!signal?.aborted) {\n        setBottlenecksLoading(false);\n      }\n    }\n  }, []);\n\n  const fetchPerformanceMetrics = useCallback(async signal => {\n    setPerformanceLoading(true);\n    try {\n      let url = '/admin/monitoring/performance';\n      if (dateRange[0] && dateRange[1]) {\n        url += `?startDate=${dateRange[0].toISOString()}&endDate=${dateRange[1].toISOString()}`;\n      }\n      const response = await apiClient.get(url, { signal });\n      if (!signal?.aborted) {\n        setPerformanceMetrics(response);\n      }\n    } catch (error) {\n      if (!signal?.aborted) {\n        message.error('Failed to load performance metrics');\n        console.error('Error fetching performance metrics:', error);\n      }\n    } finally {\n      if (!signal?.aborted) {\n        setPerformanceLoading(false);\n      }\n    }\n  }, [dateRange]);\n\n  const handleDateRangeChange = dates => {\n    setDateRange(dates);\n  };\n\n  const handleApplyDateFilter = () => {\n    fetchSlaReport();\n    fetchPerformanceMetrics();\n  };\n\n  const handleExportAuditLogs = async () => {\n    setExportLoading(true);\n    try {\n      let url = '/admin/monitoring/audit-logs/export';\n      if (dateRange[0] && dateRange[1]) {\n        url += `?startDate=${dateRange[0].toISOString()}&endDate=${dateRange[1].toISOString()}`;\n      }\n\n      const response = await apiClient.get(url, { responseType: 'blob' });\n      const blob = response;\n\n      // Create a download link and trigger download\n      const downloadUrl = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      link.setAttribute('download', `audit-logs-${new Date().toISOString().split('T')[0]}.csv`);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n\n      message.success('Audit logs exported successfully');\n    } catch (error) {\n      message.error('Failed to export audit logs');\n      console.error('Error exporting audit logs:', error);\n    } finally {\n      setExportLoading(false);\n    }\n  };\n\n  const handleExportWorkflowReport = async (state = null) => {\n    setExportLoading(true);\n    try {\n      let url = '/admin/monitoring/workflows/export';\n      const params = [];\n\n      if (dateRange[0] && dateRange[1]) {\n        params.push(`startDate=${dateRange[0].toISOString()}`);\n        params.push(`endDate=${dateRange[1].toISOString()}`);\n      }\n\n      if (state) {\n        params.push(`state=${state}`);\n      }\n\n      if (params.length > 0) {\n        url += `?${  params.join('&')}`;\n      }\n\n      const response = await apiClient.get(url, { responseType: 'blob' });\n      const blob = response;\n\n      // Create a download link and trigger download\n      const downloadUrl = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      link.setAttribute('download', `workflow-report-${new Date().toISOString().split('T')[0]}.csv`);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n\n      message.success('Workflow report exported successfully');\n    } catch (error) {\n      message.error('Failed to export workflow report');\n      console.error('Error exporting workflow report:', error);\n    } finally {\n      setExportLoading(false);\n    }\n  };\n\n  // Prepare chart data for workflow status distribution\n  const getWorkflowStatusChartData = () => {\n    if (!dashboardData || !dashboardData.workflowsByState) {\n      return null;\n    }\n\n    const labels = Object.keys(dashboardData.workflowsByState);\n    const data = Object.values(dashboardData.workflowsByState);\n\n    return {\n      labels,\n      datasets: [\n        {\n          label: 'Workflows by State',\n          data,\n          backgroundColor: [\n            'rgba(54, 162, 235, 0.6)',\n            'rgba(255, 206, 86, 0.6)',\n            'rgba(75, 192, 192, 0.6)',\n            'rgba(153, 102, 255, 0.6)',\n            'rgba(255, 159, 64, 0.6)'\n          ],\n          borderColor: [\n            'rgba(54, 162, 235, 1)',\n            'rgba(255, 206, 86, 1)',\n            'rgba(75, 192, 192, 1)',\n            'rgba(153, 102, 255, 1)',\n            'rgba(255, 159, 64, 1)'\n          ],\n          borderWidth: 1\n        }\n      ]\n    };\n  };\n\n  // Prepare chart data for SLA compliance\n  const getSlaComplianceChartData = () => {\n    if (!slaReport || !slaReport.slaComplianceByTeam) {\n      return null;\n    }\n\n    const labels = Object.keys(slaReport.slaComplianceByTeam);\n    const data = Object.values(slaReport.slaComplianceByTeam);\n\n    return {\n      labels,\n      datasets: [\n        {\n          label: 'SLA Compliance (%)',\n          data,\n          backgroundColor: 'rgba(75, 192, 192, 0.6)',\n          borderColor: 'rgba(75, 192, 192, 1)',\n          borderWidth: 1\n        }\n      ]\n    };\n  };\n\n  // Prepare chart data for resolution times\n  const getResolutionTimesChartData = () => {\n    if (!slaReport || !slaReport.averageResolutionTimesByTeam) {\n      return null;\n    }\n\n    const labels = Object.keys(slaReport.averageResolutionTimesByTeam);\n    const data = Object.values(slaReport.averageResolutionTimesByTeam);\n\n    return {\n      labels,\n      datasets: [\n        {\n          label: 'Average Resolution Time (hours)',\n          data,\n          backgroundColor: 'rgba(255, 159, 64, 0.6)',\n          borderColor: 'rgba(255, 159, 64, 1)',\n          borderWidth: 1\n        }\n      ]\n    };\n  };\n\n  // Prepare chart data for recent activity\n  const getRecentActivityChartData = () => {\n    if (!dashboardData || !dashboardData.recentActivity) {\n      return null;\n    }\n\n    const sortedDates = Object.keys(dashboardData.recentActivity).sort();\n    const data = sortedDates.map(date => dashboardData.recentActivity[date]);\n\n    return {\n      labels: sortedDates,\n      datasets: [\n        {\n          label: 'Workflow Activity',\n          data,\n          fill: false,\n          backgroundColor: 'rgba(54, 162, 235, 0.6)',\n          borderColor: 'rgba(54, 162, 235, 1)',\n          tension: 0.1\n        }\n      ]\n    };\n  };\n\n  // Render loading state\n  if (loading && !dashboardData) {\n    return (\n      <div style={{ textAlign: 'center', padding: '50px' }}>\n        <Spin size=\"large\" />\n        <p>Loading dashboard data...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <Title level={2}>Workflow Monitoring Dashboard</Title>\n\n      <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>\n        <Col span={24}>\n          <Card>\n            <Row gutter={16}>\n              <Col span={8}>\n                <RangePicker onChange={handleDateRangeChange} style={{ width: '100%' }} />\n              </Col>\n              <Col span={4}>\n                <Button type=\"primary\" onClick={handleApplyDateFilter}>\n                  Apply Filter\n                </Button>\n              </Col>\n              <Col span={12} style={{ textAlign: 'right' }}>\n                <Button\n                  icon={<DownloadOutlined />}\n                  onClick={handleExportAuditLogs}\n                  loading={exportLoading}\n                  style={{ marginRight: 8 }}\n                >\n                  Export Audit Logs\n                </Button>\n                <Button\n                  icon={<DownloadOutlined />}\n                  onClick={() => handleExportWorkflowReport()}\n                  loading={exportLoading}\n                >\n                  Export Workflow Report\n                </Button>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n      </Row>\n\n      <Row gutter={[16, 16]}>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Total Workflows\"\n              value={dashboardData?.totalWorkflows || 0}\n              prefix={<BarChartOutlined />}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Active Workflows\"\n              value={dashboardData?.activeWorkflows || 0}\n              prefix={<ClockCircleOutlined />}\n              valueStyle={{ color: '#1890ff' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Completed Workflows\"\n              value={dashboardData?.completedWorkflows || 0}\n              prefix={<CheckCircleOutlined />}\n              valueStyle={{ color: '#3f8600' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Overdue Workflows\"\n              value={dashboardData?.overdueWorkflows || 0}\n              prefix={<ExclamationCircleOutlined />}\n              valueStyle={{ color: '#cf1322' }}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      <Row gutter={[16, 16]} style={{ marginTop: 16 }}>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Total Queries\"\n              value={dashboardData?.totalQueries || 0}\n              prefix={<QuestionCircleOutlined />}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Open Queries\"\n              value={dashboardData?.openQueries || 0}\n              valueStyle={{ color: '#1890ff' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Overdue Queries\"\n              value={dashboardData?.overdueQueries || 0}\n              valueStyle={{ color: '#cf1322' }}\n            />\n          </Card>\n        </Col>\n        <Col span={6}>\n          <Card>\n            <Statistic\n              title=\"Avg. Completion Time (hrs)\"\n              value={dashboardData?.averageCompletionTimeHours?.toFixed(1) || 0}\n              precision={1}\n            />\n          </Card>\n        </Col>\n      </Row>\n\n      <Tabs defaultActiveKey=\"1\" style={{ marginTop: 16 }}>\n        <TabPane tab=\"Workflow Status\" key=\"1\">\n          <Row gutter={[16, 16]}>\n            <Col span={12}>\n              <Card title=\"Workflow Status Distribution\">\n                {dashboardData && dashboardData.workflowsByState && (\n                  <Pie\n                    data={getWorkflowStatusChartData()}\n                    options={{ responsive: true, maintainAspectRatio: false }}\n                    height={300}\n                  />\n                )}\n              </Card>\n            </Col>\n            <Col span={12}>\n              <Card title=\"Recent Activity\">\n                {dashboardData && dashboardData.recentActivity && (\n                  <Line\n                    data={getRecentActivityChartData()}\n                    options={{ responsive: true, maintainAspectRatio: false }}\n                    height={300}\n                  />\n                )}\n              </Card>\n            </Col>\n          </Row>\n\n          <Row gutter={[16, 16]} style={{ marginTop: 16 }}>\n            <Col span={24}>\n              <Card title=\"Workflows by Plant\">\n                <Table\n                  dataSource={\n                    dashboardData && dashboardData.workflowsByPlant\n                      ? Object.entries(dashboardData.workflowsByPlant).map(([plant, count]) => ({\n                          key: plant,\n                          plant,\n                          count\n                        }))\n                      : []\n                  }\n                  columns={[\n                    { title: 'Plant', dataIndex: 'plant', key: 'plant' },\n                    { title: 'Workflow Count', dataIndex: 'count', key: 'count' }\n                  ]}\n                  pagination={false}\n                />\n              </Card>\n            </Col>\n          </Row>\n        </TabPane>\n\n        <TabPane tab=\"Query SLA Reports\" key=\"2\">\n          <Button\n            type=\"primary\"\n            onClick={fetchSlaReport}\n            loading={slaLoading}\n            style={{ marginBottom: 16 }}\n          >\n            Generate SLA Report\n          </Button>\n\n          {slaLoading ? (\n            <div style={{ textAlign: 'center', padding: '50px' }}>\n              <Spin />\n              <p>Generating SLA report...</p>\n            </div>\n          ) : slaReport ? (\n            <>\n              <Row gutter={[16, 16]}>\n                <Col span={8}>\n                  <Card>\n                    <Statistic\n                      title=\"Overall SLA Compliance\"\n                      value={slaReport.overallSlaCompliance.toFixed(1)}\n                      suffix=\"%\"\n                      precision={1}\n                    />\n                    <Progress\n                      percent={slaReport.overallSlaCompliance}\n                      status={slaReport.overallSlaCompliance >= 90 ? 'success' : 'active'}\n                    />\n                  </Card>\n                </Col>\n                <Col span={8}>\n                  <Card>\n                    <Statistic\n                      title=\"Average Resolution Time\"\n                      value={slaReport.overallAverageResolutionTime.toFixed(1)}\n                      suffix=\"hours\"\n                      precision={1}\n                    />\n                  </Card>\n                </Col>\n                <Col span={8}>\n                  <Card>\n                    <Statistic\n                      title=\"Resolution Rate\"\n                      value={(\n                        (slaReport.totalResolvedQueries / slaReport.totalQueries) *\n                        100\n                      ).toFixed(1)}\n                      suffix=\"%\"\n                      precision={1}\n                    />\n                  </Card>\n                </Col>\n              </Row>\n\n              <Row gutter={[16, 16]} style={{ marginTop: 16 }}>\n                <Col span={12}>\n                  <Card title=\"SLA Compliance by Team\">\n                    <Bar\n                      data={getSlaComplianceChartData()}\n                      options={{\n                        responsive: true,\n                        maintainAspectRatio: false,\n                        scales: {\n                          y: {\n                            beginAtZero: true,\n                            max: 100\n                          }\n                        }\n                      }}\n                      height={300}\n                    />\n                  </Card>\n                </Col>\n                <Col span={12}>\n                  <Card title=\"Average Resolution Times by Team\">\n                    <Bar\n                      data={getResolutionTimesChartData()}\n                      options={{\n                        responsive: true,\n                        maintainAspectRatio: false\n                      }}\n                      height={300}\n                    />\n                  </Card>\n                </Col>\n              </Row>\n\n              <Row gutter={[16, 16]} style={{ marginTop: 16 }}>\n                <Col span={24}>\n                  <Card title=\"Query Metrics by Team\">\n                    <Table\n                      dataSource={\n                        slaReport.totalQueriesByTeam\n                          ? Object.keys(slaReport.totalQueriesByTeam).map(team => ({\n                              key: team,\n                              team,\n                              total: slaReport.totalQueriesByTeam[team],\n                              resolved: slaReport.resolvedQueriesByTeam[team],\n                              overdue: slaReport.overdueQueriesByTeam[team],\n                              avgTime: slaReport.averageResolutionTimesByTeam[team]?.toFixed(1),\n                              compliance: slaReport.slaComplianceByTeam[team]?.toFixed(1)\n                            }))\n                          : []\n                      }\n                      columns={[\n                        { title: 'Team', dataIndex: 'team', key: 'team' },\n                        { title: 'Total Queries', dataIndex: 'total', key: 'total' },\n                        { title: 'Resolved', dataIndex: 'resolved', key: 'resolved' },\n                        { title: 'Overdue', dataIndex: 'overdue', key: 'overdue' },\n                        {\n                          title: 'Avg. Resolution Time (hrs)',\n                          dataIndex: 'avgTime',\n                          key: 'avgTime'\n                        },\n                        {\n                          title: 'SLA Compliance',\n                          dataIndex: 'compliance',\n                          key: 'compliance',\n                          render: text => `${text}%`\n                        }\n                      ]}\n                      pagination={false}\n                    />\n                  </Card>\n                </Col>\n              </Row>\n            </>\n          ) : (\n            <div style={{ textAlign: 'center', padding: '50px' }}>\n              <Text type=\"secondary\">Click \"Generate SLA Report\" to view query SLA metrics</Text>\n            </div>\n          )}\n        </TabPane>\n\n        <TabPane tab=\"Bottlenecks Analysis\" key=\"3\">\n          <Button\n            type=\"primary\"\n            onClick={fetchBottlenecks}\n            loading={bottlenecksLoading}\n            style={{ marginBottom: 16 }}\n          >\n            Refresh Bottlenecks Analysis\n          </Button>\n\n          {bottlenecksLoading ? (\n            <div style={{ textAlign: 'center', padding: '50px' }}>\n              <Spin />\n              <p>Analyzing bottlenecks...</p>\n            </div>\n          ) : bottlenecks ? (\n            <>\n              <Row gutter={[16, 16]}>\n                <Col span={12}>\n                  <Card title=\"Average Time in Each State (hours)\">\n                    <Table\n                      dataSource={\n                        bottlenecks.averageTimeInState\n                          ? Object.entries(bottlenecks.averageTimeInState).map(\n                              ([state, hours]) => ({\n                                key: state,\n                                state,\n                                hours: hours.toFixed(1)\n                              })\n                            )\n                          : []\n                      }\n                      columns={[\n                        { title: 'Workflow State', dataIndex: 'state', key: 'state' },\n                        { title: 'Average Hours', dataIndex: 'hours', key: 'hours' }\n                      ]}\n                      pagination={false}\n                    />\n                  </Card>\n                </Col>\n                <Col span={12}>\n                  <Card title=\"Overdue Workflows by State\">\n                    <Table\n                      dataSource={\n                        bottlenecks.overdueByState\n                          ? Object.entries(bottlenecks.overdueByState).map(([state, count]) => ({\n                              key: state,\n                              state,\n                              count\n                            }))\n                          : []\n                      }\n                      columns={[\n                        { title: 'Workflow State', dataIndex: 'state', key: 'state' },\n                        { title: 'Overdue Count', dataIndex: 'count', key: 'count' }\n                      ]}\n                      pagination={false}\n                    />\n                  </Card>\n                </Col>\n              </Row>\n\n              <Row gutter={[16, 16]} style={{ marginTop: 16 }}>\n                <Col span={12}>\n                  <Card title=\"Open Queries by Team\">\n                    <Table\n                      dataSource={\n                        bottlenecks.openQueriesByTeam\n                          ? Object.entries(bottlenecks.openQueriesByTeam).map(([team, count]) => ({\n                              key: team,\n                              team,\n                              count\n                            }))\n                          : []\n                      }\n                      columns={[\n                        { title: 'Team', dataIndex: 'team', key: 'team' },\n                        { title: 'Open Queries', dataIndex: 'count', key: 'count' }\n                      ]}\n                      pagination={false}\n                    />\n                  </Card>\n                </Col>\n                <Col span={12}>\n                  <Card title=\"Delayed Workflows by Plant\">\n                    <Table\n                      dataSource={\n                        bottlenecks.delayedByPlant\n                          ? Object.entries(bottlenecks.delayedByPlant).map(([plant, count]) => ({\n                              key: plant,\n                              plant,\n                              count\n                            }))\n                          : []\n                      }\n                      columns={[\n                        { title: 'Plant', dataIndex: 'plant', key: 'plant' },\n                        { title: 'Delayed Count', dataIndex: 'count', key: 'count' }\n                      ]}\n                      pagination={false}\n                    />\n                  </Card>\n                </Col>\n              </Row>\n            </>\n          ) : (\n            <div style={{ textAlign: 'center', padding: '50px' }}>\n              <Text type=\"secondary\">\n                Click \"Refresh Bottlenecks Analysis\" to view workflow bottlenecks\n              </Text>\n            </div>\n          )}\n        </TabPane>\n\n        <TabPane tab=\"Performance Metrics\" key=\"4\">\n          <Button\n            type=\"primary\"\n            onClick={fetchPerformanceMetrics}\n            loading={performanceLoading}\n            style={{ marginBottom: 16 }}\n          >\n            Refresh Performance Metrics\n          </Button>\n\n          {performanceLoading ? (\n            <div style={{ textAlign: 'center', padding: '50px' }}>\n              <Spin />\n              <p>Loading performance metrics...</p>\n            </div>\n          ) : performanceMetrics ? (\n            <>\n              <Row gutter={[16, 16]}>\n                <Col span={8}>\n                  <Card>\n                    <Statistic\n                      title=\"Completion Rate\"\n                      value={performanceMetrics.completionRate?.toFixed(1)}\n                      suffix=\"%\"\n                      precision={1}\n                    />\n                    <Progress\n                      percent={performanceMetrics.completionRate}\n                      status={performanceMetrics.completionRate >= 80 ? 'success' : 'active'}\n                    />\n                  </Card>\n                </Col>\n                <Col span={8}>\n                  <Card>\n                    <Statistic\n                      title=\"Average Completion Time\"\n                      value={performanceMetrics.averageCompletionTimeHours?.toFixed(1)}\n                      suffix=\"hours\"\n                      precision={1}\n                    />\n                  </Card>\n                </Col>\n                <Col span={8}>\n                  <Card>\n                    <Statistic\n                      title=\"Queries Per Workflow\"\n                      value={performanceMetrics.queriesPerWorkflow?.toFixed(1)}\n                      precision={1}\n                    />\n                  </Card>\n                </Col>\n              </Row>\n\n              <Row gutter={[16, 16]} style={{ marginTop: 16 }}>\n                <Col span={24}>\n                  <Card title=\"Monthly Workflow Throughput\">\n                    {performanceMetrics.throughputByMonth && (\n                      <Bar\n                        data={{\n                          labels: Object.keys(performanceMetrics.throughputByMonth),\n                          datasets: [\n                            {\n                              label: 'Completed Workflows',\n                              data: Object.values(performanceMetrics.throughputByMonth),\n                              backgroundColor: 'rgba(75, 192, 192, 0.6)',\n                              borderColor: 'rgba(75, 192, 192, 1)',\n                              borderWidth: 1\n                            }\n                          ]\n                        }}\n                        options={{\n                          responsive: true,\n                          maintainAspectRatio: false\n                        }}\n                        height={300}\n                      />\n                    )}\n                  </Card>\n                </Col>\n              </Row>\n            </>\n          ) : (\n            <div style={{ textAlign: 'center', padding: '50px' }}>\n              <Text type=\"secondary\">\n                Click \"Refresh Performance Metrics\" to view workflow performance data\n              </Text>\n            </div>\n          )}\n        </TabPane>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default WorkflowMonitoring;\n"],"names":["Chart","register","registerables","Title","Text","Typography","RangePicker","DatePicker","TabPane","Tabs","WorkflowMonitoring","_dashboardData$averag","_performanceMetrics$c","_performanceMetrics$a","_performanceMetrics$q","loading","setLoading","useState","dashboardData","setDashboardData","dateRange","setDateRange","slaReport","setSlaReport","slaLoading","setSlaLoading","exportLoading","setExportLoading","bottlenecks","setBottlenecks","bottlenecksLoading","setBottlenecksLoading","performanceMetrics","setPerformanceMetrics","performanceLoading","setPerformanceLoading","useEffect","controller","AbortController","async","Promise","all","fetchDashboardData","signal","fetchBottlenecks","fetchPerformanceMetrics","error","aborted","console","fetchData","abort","useCallback","response","apiClient","get","message","fetchSlaReport","url","toISOString","_jsxs","style","textAlign","padding","children","_jsx","Spin","size","level","Row","gutter","marginBottom","Col","span","Card","onChange","dates","width","Button","type","onClick","handleApplyDateFilter","icon","DownloadOutlined","blob","responseType","downloadUrl","window","URL","createObjectURL","link","document","createElement","href","setAttribute","Date","split","body","appendChild","click","remove","success","marginRight","state","arguments","length","undefined","params","push","join","handleExportWorkflowReport","Statistic","title","value","totalWorkflows","prefix","BarChartOutlined","activeWorkflows","ClockCircleOutlined","valueStyle","color","completedWorkflows","CheckCircleOutlined","overdueWorkflows","ExclamationCircleOutlined","marginTop","totalQueries","QuestionCircleOutlined","openQueries","overdueQueries","averageCompletionTimeHours","toFixed","precision","defaultActiveKey","tab","workflowsByState","Pie","data","getWorkflowStatusChartData","labels","Object","keys","datasets","label","values","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","height","recentActivity","Line","getRecentActivityChartData","sortedDates","sort","map","date","fill","tension","Table","dataSource","workflowsByPlant","entries","_ref","plant","count","key","columns","dataIndex","pagination","_Fragment","overallSlaCompliance","suffix","Progress","percent","status","overallAverageResolutionTime","totalResolvedQueries","Bar","getSlaComplianceChartData","slaComplianceByTeam","scales","y","beginAtZero","max","getResolutionTimesChartData","averageResolutionTimesByTeam","totalQueriesByTeam","team","_slaReport$averageRes","_slaReport$slaComplia","total","resolved","resolvedQueriesByTeam","overdue","overdueQueriesByTeam","avgTime","compliance","render","text","averageTimeInState","_ref2","hours","overdueByState","_ref3","openQueriesByTeam","_ref4","delayedByPlant","_ref5","completionRate","queriesPerWorkflow","throughputByMonth"],"sourceRoot":""}