{"version":3,"file":"static/js/664.b139734c.chunk.js","mappings":"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","sources":["constants/roles.js","constants/index.js","services/queryAPI.js","components/QueryWidget.js","screens/WorkflowPage.js"],"sourcesContent":["/**\n * Role constants that match the backend RoleConstants.java\n */\nexport const ROLES = {\n  ADMIN: 'ADMIN',\n  JVC_USER: 'JVC_USER',\n  PLANT_USER: 'PLANT_USER',\n  CQS_USER: 'CQS_USER',\n  TECH_USER: 'TECH_USER',\n  VIEWER: 'VIEWER'\n};\n\n/**\n * Role types for backend compatibility\n */\nexport const ROLE_TYPES = {\n  ADMIN: 'ADMIN',\n  JVC_ROLE: 'JVC_ROLE',\n  PLANT_ROLE: 'PLANT_ROLE',\n  CQS_ROLE: 'CQS_ROLE',\n  TECH_ROLE: 'TECH_ROLE',\n  VIEWER_ROLE: 'VIEWER_ROLE'\n};\n\n/**\n * Role display names\n */\nexport const ROLE_DISPLAY_NAMES = {\n  [ROLES.ADMIN]: 'Administrator',\n  [ROLES.JVC_USER]: 'JVC User',\n  [ROLES.PLANT_USER]: 'Plant User',\n  [ROLES.CQS_USER]: 'CQS User',\n  [ROLES.TECH_USER]: 'Technical User',\n  [ROLES.VIEWER]: 'Viewer'\n};\n\n/**\n * Role descriptions\n */\nexport const ROLE_DESCRIPTIONS = {\n  [ROLES.ADMIN]: 'Full system access with administrative privileges',\n  [ROLES.JVC_USER]: 'Joint Venture Company user with workflow initiation rights',\n  [ROLES.PLANT_USER]: 'Plant-specific user with questionnaire completion rights',\n  [ROLES.CQS_USER]: 'Corporate Quality Services user with query management rights',\n  [ROLES.TECH_USER]: 'Technical user with system monitoring and audit access',\n  [ROLES.VIEWER]: 'Read-only access to assigned content'\n};\n\n/**\n * Role hierarchy (higher number = more privileges)\n */\nexport const ROLE_HIERARCHY = {\n  [ROLES.VIEWER]: 1,\n  [ROLES.PLANT_USER]: 2,\n  [ROLES.CQS_USER]: 3,\n  [ROLES.JVC_USER]: 3,\n  [ROLES.TECH_USER]: 4,\n  [ROLES.ADMIN]: 5\n};\n\n/**\n * Screen access mapping by role\n */\nexport const SCREEN_ACCESS = {\n  [ROLES.ADMIN]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/admin',\n    '/qrmfg/jvc',\n    '/qrmfg/cqs',\n    '/qrmfg/tech',\n    '/qrmfg/plant',\n    '/qrmfg/workflows',\n    '/qrmfg/workflow-monitoring',\n    '/qrmfg/reports',\n    '/qrmfg/users',\n    '/qrmfg/roles',\n    '/qrmfg/sessions',\n    '/qrmfg/user-role-management',\n    '/qrmfg/auditlogs',\n    '/qrmfg/settings'\n  ],\n  [ROLES.JVC_USER]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/jvc',\n    '/qrmfg/workflows',\n    '/qrmfg/reports',\n    '/qrmfg/settings'\n  ],\n  [ROLES.CQS_USER]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/cqs',\n    '/qrmfg/workflows',\n    '/qrmfg/reports',\n    '/qrmfg/settings'\n  ],\n  [ROLES.TECH_USER]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/tech',\n    '/qrmfg/workflows',\n    '/qrmfg/workflow-monitoring',\n    '/qrmfg/reports',\n    '/qrmfg/auditlogs',\n    '/qrmfg/settings'\n  ],\n  [ROLES.PLANT_USER]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/plant',\n    '/qrmfg/workflows',\n    '/qrmfg/reports',\n    '/qrmfg/settings'\n  ],\n  [ROLES.VIEWER]: [\n    '/qrmfg',\n    '/qrmfg/dashboard',\n    '/qrmfg/settings'\n  ]\n};\n\n/**\n * Data access permissions by role\n */\nexport const DATA_ACCESS = {\n  [ROLES.ADMIN]: ['*'], // All data\n  [ROLES.JVC_USER]: ['workflow', 'document', 'query', 'jvc'],\n  [ROLES.CQS_USER]: ['workflow', 'document', 'query', 'cqs'],\n  [ROLES.TECH_USER]: ['workflow', 'document', 'query', 'audit', 'system', 'tech'],\n  [ROLES.PLANT_USER]: ['workflow', 'document', 'query', 'plant'],\n  [ROLES.VIEWER]: ['workflow:read', 'document:read']\n};\n\n/**\n * Action permissions by role\n */\nexport const ACTION_PERMISSIONS = {\n  [ROLES.ADMIN]: ['*'], // All actions\n  [ROLES.JVC_USER]: ['create', 'read', 'update', 'initiate'],\n  [ROLES.CQS_USER]: ['create', 'read', 'update', 'respond'],\n  [ROLES.TECH_USER]: ['create', 'read', 'update', 'monitor', 'audit'],\n  [ROLES.PLANT_USER]: ['read', 'update', 'complete'],\n  [ROLES.VIEWER]: ['read']\n};\n\n/**\n * Helper functions\n */\nexport const getRoleDisplayName = (role) => {\n  return ROLE_DISPLAY_NAMES[role] || role;\n};\n\nexport const getRoleDescription = (role) => {\n  return ROLE_DESCRIPTIONS[role] || 'No description available';\n};\n\nexport const getRoleHierarchy = (role) => {\n  return ROLE_HIERARCHY[role] || 0;\n};\n\nexport const hasHigherPrivilege = (role1, role2) => {\n  return getRoleHierarchy(role1) > getRoleHierarchy(role2);\n};\n\nexport const getScreensForRole = (role) => {\n  return SCREEN_ACCESS[role] || [];\n};\n\nexport const getDataAccessForRole = (role) => {\n  return DATA_ACCESS[role] || [];\n};\n\nexport const getActionPermissionsForRole = (role) => {\n  return ACTION_PERMISSIONS[role] || [];\n};\n\nexport const canAccessScreen = (role, screen) => {\n  const screens = getScreensForRole(role);\n  return screens.includes('*') || screens.includes(screen);\n};\n\nexport const canAccessData = (role, dataType) => {\n  const dataAccess = getDataAccessForRole(role);\n  return dataAccess.includes('*') || \n         dataAccess.includes(dataType) || \n         dataAccess.some(access => access.startsWith(`${dataType}:`));\n};\n\nexport const canPerformAction = (role, action) => {\n  const actions = getActionPermissionsForRole(role);\n  return actions.includes('*') || actions.includes(action);\n};","// Application Constants\n\n// API Configuration\nexport const API_CONFIG = {\n  TIMEOUT: 30000, // 30 seconds\n  BASE_URL: process.env.REACT_APP_API_BASE_URL || '/qrmfg/api/v1',\n  RETRY_ATTEMPTS: 3\n};\n\n// Authentication\nexport const AUTH_CONFIG = {\n  TOKEN_KEY: 'qrmfg_secure_token',\n  LOGIN_PATH: '/qrmfg/login',\n  DEFAULT_REDIRECT: '/qrmfg'\n};\n\n// UI Constants\nexport const UI_CONFIG = {\n  MOBILE_BREAKPOINT: 768,\n  TABLET_BREAKPOINT: 1024,\n  PAGE_SIZE: 10,\n  DEBOUNCE_DELAY: 300\n};\n\n// Workflow States\nexport const WORKFLOW_STATES = {\n  INITIATED: 'INITIATED',\n  IN_PROGRESS: 'IN_PROGRESS',\n  PENDING_REVIEW: 'PENDING_REVIEW',\n  APPROVED: 'APPROVED',\n  REJECTED: 'REJECTED',\n  COMPLETED: 'COMPLETED'\n};\n\n// Query States\nexport const QUERY_STATES = {\n  OPEN: 'OPEN',\n  IN_PROGRESS: 'IN_PROGRESS',\n  RESOLVED: 'RESOLVED',\n  CLOSED: 'CLOSED'\n};\n\n// Priority Levels\nexport const PRIORITY_LEVELS = {\n  LOW: 'LOW',\n  MEDIUM: 'MEDIUM',\n  HIGH: 'HIGH',\n  URGENT: 'URGENT',\n  CRITICAL: 'CRITICAL'\n};\n\n// Teams\nexport const TEAMS = {\n  CQS: 'CQS',\n  TECH: 'TECH',\n  JVC: 'JVC'\n};\n\n// Error Severity\nexport const ERROR_SEVERITY = {\n  LOW: 'LOW',\n  MEDIUM: 'MEDIUM',\n  HIGH: 'HIGH',\n  CRITICAL: 'CRITICAL'\n};\n\n// Error Categories\nexport const ERROR_CATEGORY = {\n  APPLICATION: 'APPLICATION',\n  COMPONENT: 'COMPONENT',\n  API: 'API',\n  ROUTE: 'ROUTE',\n  ASYNC: 'ASYNC',\n  AUTHENTICATION: 'AUTHENTICATION'\n};\n\n// Status Colors\nexport const STATUS_COLORS = {\n  [WORKFLOW_STATES.INITIATED]: 'blue',\n  [WORKFLOW_STATES.IN_PROGRESS]: 'orange',\n  [WORKFLOW_STATES.PENDING_REVIEW]: 'purple',\n  [WORKFLOW_STATES.APPROVED]: 'green',\n  [WORKFLOW_STATES.REJECTED]: 'red',\n  [WORKFLOW_STATES.COMPLETED]: 'green'\n};\n\n// Priority Colors\nexport const PRIORITY_COLORS = {\n  [PRIORITY_LEVELS.LOW]: 'green',\n  [PRIORITY_LEVELS.MEDIUM]: 'blue',\n  [PRIORITY_LEVELS.HIGH]: 'orange',\n  [PRIORITY_LEVELS.URGENT]: 'red',\n  [PRIORITY_LEVELS.CRITICAL]: 'red'\n};\n\n// Form Validation\nexport const VALIDATION = {\n  MIN_PASSWORD_LENGTH: 8,\n  MAX_FILE_SIZE: 10 * 1024 * 1024, // 10MB\n  ALLOWED_FILE_TYPES: ['.pdf', '.doc', '.docx', '.xls', '.xlsx', '.jpg', '.jpeg', '.png'],\n  MAX_COMMENT_LENGTH: 1000,\n  MAX_DESCRIPTION_LENGTH: 500\n};\n\n// Date Formats\nexport const DATE_FORMATS = {\n  DISPLAY: 'DD/MM/YYYY',\n  DISPLAY_WITH_TIME: 'DD/MM/YYYY HH:mm',\n  API: 'YYYY-MM-DD',\n  ISO: 'YYYY-MM-DDTHH:mm:ss.SSSZ'\n};\n\n// Local Storage Keys\nexport const STORAGE_KEYS = {\n  USER_PREFERENCES: 'qrmfg_user_preferences',\n  THEME: 'qrmfg_theme',\n  LANGUAGE: 'qrmfg_language'\n};\n\n// Animation Delays\nexport const ANIMATION = {\n  FADE_IN_DELAY: 0.1, // seconds\n  STAGGER_DELAY: 0.05, // seconds\n  TRANSITION_DURATION: 0.3 // seconds\n};\n\n// Notification Types\nexport const NOTIFICATION_TYPES = {\n  SUCCESS: 'success',\n  ERROR: 'error',\n  WARNING: 'warning',\n  INFO: 'info'\n};\n\n// Component Names (for error boundaries)\nexport const COMPONENT_NAMES = {\n  USER_TABLE: 'UserTable',\n  USER_MODAL: 'UserModal',\n  PLANT_ASSIGNMENT_FORM: 'PlantAssignmentForm',\n  PLANT_DASHBOARD: 'PlantDashboard',\n  WORKFLOW_TABLE: 'WorkflowTable',\n  FILTER_PANEL: 'FilterPanel'\n};\n\n// File size constants\nexport const FILE_SIZE = {\n  MAX_UPLOAD_SIZE: 25 * 1024 * 1024, // 25MB\n  BYTES_PER_KB: 1024,\n  BYTES_PER_MB: 1024 * 1024,\n  BYTES_PER_GB: 1024 * 1024 * 1024\n};\n\n// Workflow specific states\nexport const WORKFLOW_SPECIFIC_STATES = {\n  JVC_PENDING: 'JVC_PENDING',\n  PLANT_PENDING: 'PLANT_PENDING',\n  CQS_PENDING: 'CQS_PENDING',\n  TECH_PENDING: 'TECH_PENDING',\n  DRAFT: 'DRAFT',\n  IN_PROGRESS: 'IN_PROGRESS',\n  COMPLETED: 'COMPLETED'\n};\n\n// Query status\nexport const QUERY_STATUS = {\n  OPEN: 'OPEN',\n  RESOLVED: 'RESOLVED',\n  CLOSED: 'CLOSED'\n};\n\n// Query status groups for filtering\nexport const QUERY_STATUS_GROUPS = {\n  ACTIVE: ['OPEN'],\n  INACTIVE: ['RESOLVED', 'CLOSED']\n};\n\n// Team names\nexport const TEAM_NAMES = {\n  CQS: 'CQS',\n  TECH: 'TECH',\n  JVC: 'JVC',\n  PLANT: 'PLANT'\n};\n\n// Auto-save intervals\nexport const AUTO_SAVE = {\n  INTERVAL: 40000, // 40 seconds\n  DEBOUNCE_DELAY: 15000 // 15 seconds\n};\n\n// Pagination defaults\nexport const PAGINATION = {\n  DEFAULT_PAGE_SIZE: 10,\n  SMALL_PAGE_SIZE: 5,\n  LARGE_PAGE_SIZE: 15,\n  SHOW_SIZE_CHANGER: true,\n  SHOW_QUICK_JUMPER: true\n};\n\n// Completion filter options\nexport const COMPLETION_FILTERS = {\n  ALL: 'all',\n  COMPLETED: 'completed',\n  IN_PROGRESS: 'in-progress',\n  NOT_STARTED: 'not-started'\n};\n\n// Tab keys\nexport const TAB_KEYS = {\n  INITIATE: 'initiate',\n  PENDING: 'pending',\n  COMPLETED: 'completed',\n  QUERIES: 'queries',\n  HISTORY: 'history'\n};\n\n// Re-export role constants\nexport * from './roles';\n","import apiClient from '../api/client';\n\n/**\n * Query API service providing query management functionality\n * Migrated to use unified APIClient with standardized error handling\n *\n * @namespace queryAPI\n */\nexport const queryAPI = {\n  // Query CRUD operations\n  /**\n   * Create a new query for a workflow\n   * @param {string} workflowId - Workflow ID to create query for\n   * @param {Object} queryData - Query data\n   * @returns {Promise<Object>} Created query object\n   */\n  createQuery: (workflowId, queryData) =>\n    apiClient.post(`/queries/workflow/${workflowId}`, queryData),\n\n  /**\n   * Get query by ID\n   * @param {string} id - Query ID\n   * @returns {Promise<Object>} Query object\n   */\n  getQuery: id => apiClient.get(`/queries/${id}`),\n\n  /**\n   * Update query by ID\n   * @param {string} id - Query ID\n   * @param {Object} queryData - Updated query data\n   * @returns {Promise<Object>} Updated query object\n   */\n  updateQuery: (id, queryData) => apiClient.put(`/queries/${id}`, queryData),\n\n  /**\n   * Delete query by ID\n   * @param {string} id - Query ID\n   * @returns {Promise<void>} Promise that resolves when query is deleted\n   */\n  deleteQuery: id => apiClient.delete(`/queries/${id}`),\n\n  // Query resolution\n  /**\n   * Resolve a query\n   * @param {string} id - Query ID\n   * @param {Object} resolutionData - Resolution data\n   * @returns {Promise<Object>} Resolved query object\n   */\n  resolveQuery: (id, resolutionData) => apiClient.post(`/queries/${id}/resolve`, resolutionData),\n\n  /**\n   * Reopen a resolved query\n   * @param {string} id - Query ID\n   * @param {string} reason - Reason for reopening\n   * @returns {Promise<Object>} Reopened query object\n   */\n  reopenQuery: (id, reason) => apiClient.post(`/queries/${id}/reopen`, { reason }),\n\n  // Query assignment\n  /**\n   * Assign query to team/user\n   * @param {string} id - Query ID\n   * @param {Object} assignmentData - Assignment data\n   * @returns {Promise<Object>} Assigned query object\n   */\n  assignQuery: (id, assignmentData) => apiClient.post(`/queries/${id}/assign`, assignmentData),\n\n  /**\n   * Reassign query to different team\n   * @param {string} id - Query ID\n   * @param {string} newTeam - New team to assign to\n   * @param {string} reason - Reason for reassignment\n   * @returns {Promise<Object>} Reassigned query object\n   */\n  reassignQuery: (id, newTeam, reason) =>\n    apiClient.put(`/queries/${id}/assign`, { team: newTeam, reason }),\n\n  // Query search and filtering\n  /**\n   * Get all queries from all time\n   * @returns {Promise<Array>} Array of all queries\n   */\n  getAllQueries: () => apiClient.get('/queries'),\n\n  /**\n   * Get queries for a specific workflow\n   * @param {string} workflowId - Workflow ID\n   * @returns {Promise<Array>} Array of queries for the workflow\n   */\n  getQueriesByWorkflow: workflowId => apiClient.get(`/queries/workflow/${workflowId}`),\n\n  /**\n   * Get queries assigned to a team\n   * @param {string} team - Team name\n   * @returns {Promise<Array>} Array of queries for the team\n   */\n  getQueriesByTeam: team => apiClient.get(`/queries/team/${team}`),\n\n  /**\n   * Get queries by status\n   * @param {string} status - Query status\n   * @returns {Promise<Array>} Array of queries with the specified status\n   */\n  getQueriesByStatus: status => apiClient.get(`/queries/status/${status}`),\n\n  /**\n   * Get queries raised by current user\n   * @param {string} username - Username (unused in current implementation)\n   * @returns {Promise<Array>} Array of queries raised by user\n   */\n  getQueriesByUser: _username => apiClient.get(`/queries/my-raised`),\n\n  /**\n   * Search queries with parameters\n   * @param {Object} searchParams - Search parameters\n   * @returns {Promise<Array>} Array of matching queries\n   */\n  searchQueries: searchParams => {\n    const queryString = new URLSearchParams(searchParams).toString();\n    return apiClient.get(`/queries/search?${queryString}`);\n  },\n\n  // Query statistics\n  /**\n   * Get query statistics for time range\n   * @param {number} timeRange - Number of days to look back\n   * @returns {Promise<Object>} Query statistics\n   */\n  getQueryStats: timeRange => apiClient.get(`/queries/recent?days=${timeRange}`),\n\n  /**\n   * Get query counts by team\n   * @param {string} team - Team name\n   * @returns {Promise<number>} Number of open queries for team\n   */\n  getQueryCountsByTeam: team => apiClient.get(`/queries/stats/count-open/${team}`),\n\n  /**\n   * Get average resolution time by team\n   * @param {string} team - Team name\n   * @returns {Promise<number>} Average resolution time in hours\n   */\n  getAvgResolutionTimeByTeam: team => apiClient.get(`/queries/stats/avg-resolution-time/${team}`),\n\n  /**\n   * Get overdue queries\n   * @param {number} dayThreshold - Days threshold for overdue (default: 3)\n   * @returns {Promise<Array>} Array of overdue queries\n   */\n  getOverdueQueries: (_dayThreshold = 3) => apiClient.get('/queries/overdue'),\n\n  // Team-specific statistics\n  /**\n   * Get overdue queries count by team\n   * @param {string} team - Team name\n   * @returns {Promise<number>} Number of overdue queries for team\n   */\n  getOverdueQueriesCountByTeam: team => apiClient.get(`/queries/stats/overdue-count/${team}`),\n\n  /**\n   * Get queries resolved today by team\n   * @param {string} team - Team name\n   * @returns {Promise<number>} Number of queries resolved today by team\n   */\n  getQueriesResolvedTodayByTeam: team => apiClient.get(`/queries/stats/resolved-today/${team}`),\n\n  // Query SLA tracking\n  /**\n   * Get query SLA status\n   * @param {string} id - Query ID\n   * @returns {Promise<boolean>} True if query is overdue\n   */\n  getQuerySLAStatus: id => apiClient.get(`/queries/${id}/is-overdue`),\n\n  /**\n   * Get queries nearing SLA deadline\n   * @param {number} hoursThreshold - Hours threshold (default: 24)\n   * @returns {Promise<Array>} Array of queries needing attention\n   */\n  getQueriesNearingSLA: (_hoursThreshold = 24) => apiClient.get('/queries/needing-attention'),\n\n  // Query comments/updates (not implemented in backend yet)\n  /**\n   * Add comment to query\n   * @param {string} id - Query ID\n   * @param {string} comment - Comment text\n   * @returns {Promise<Object>} Added comment object\n   */\n  addQueryComment: (id, comment) => apiClient.post(`/queries/${id}/comments`, { comment }),\n\n  /**\n   * Get comments for query\n   * @param {string} id - Query ID\n   * @returns {Promise<Array>} Array of comments for the query\n   */\n  getQueryComments: id => apiClient.get(`/queries/${id}/comments`),\n\n  // Query priority management\n  /**\n   * Update query priority\n   * @param {string} id - Query ID\n   * @param {string} priority - New priority level\n   * @returns {Promise<Object>} Updated query object\n   */\n  updateQueryPriority: (id, priority) => apiClient.put(`/queries/${id}/priority`, { priority }),\n\n  /**\n   * Escalate query priority\n   * @param {string} id - Query ID\n   * @param {string} escalationReason - Reason for escalation\n   * @returns {Promise<Object>} Escalated query object\n   */\n  escalateQuery: (id, _escalationReason) =>\n    apiClient.put(`/queries/${id}/priority`, { priorityLevel: 'HIGH' }),\n\n  // Query document management\n  /**\n   * Upload documents to a query\n   * @param {string} queryId - Query ID\n   * @param {Array<File>} files - Files to upload\n   * @returns {Promise<Array>} Array of uploaded document objects\n   */\n  uploadQueryDocuments: (queryId, files) => {\n    return apiClient.upload(`/queries/${queryId}/documents`, files);\n  },\n\n  /**\n   * Upload documents to a query response\n   * @param {string} queryId - Query ID\n   * @param {string} responseId - Response ID\n   * @param {Array<File>} files - Files to upload\n   * @returns {Promise<Array>} Array of uploaded document objects\n   */\n  uploadResponseDocuments: (queryId, responseId, files) => {\n    return apiClient.upload(`/queries/${queryId}/responses/${responseId}/documents`, files);\n  },\n\n  /**\n   * Get all documents associated with a query\n   * @param {string} queryId - Query ID\n   * @returns {Promise<Array>} Array of document objects\n   */\n  getQueryDocuments: (queryId) => apiClient.get(`/queries/${queryId}/documents`),\n\n  /**\n   * Download a query document\n   * @param {string} queryId - Query ID\n   * @param {string} documentId - Document ID\n   * @returns {Promise<Blob>} Document file blob\n   */\n  downloadQueryDocument: (queryId, documentId) => {\n    return apiClient.download(`/queries/${queryId}/documents/${documentId}/download`);\n  },\n\n  /**\n   * Delete a query document\n   * @param {string} queryId - Query ID\n   * @param {string} documentId - Document ID\n   * @returns {Promise<void>} Promise that resolves when document is deleted\n   */\n  deleteQueryDocument: (queryId, documentId) => {\n    return apiClient.delete(`/queries/${queryId}/documents/${documentId}`);\n  },\n\n  // Enhanced Query Status Management (New APIs)\n\n  /**\n   * Close query without resolution\n   * @param {string} queryId - Query ID\n   * @param {string} reason - Reason for closing\n   * @returns {Promise<Object>} Updated query object\n   */\n  closeQuery: (queryId, reason) => \n    apiClient.post(`/queries/${queryId}/close`, { reason }),\n\n  /**\n   * Check if plant can edit form while queries are active\n   * @param {string} workflowId - Workflow ID\n   * @returns {Promise<Object>} Object with canEdit boolean\n   */\n  canPlantEditForm: (workflowId) => \n    apiClient.get(`/queries/workflow/${workflowId}/can-edit`),\n\n  /**\n   * Get comprehensive query status summary for workflow\n   * @param {string} workflowId - Workflow ID\n   * @returns {Promise<Object>} Query status summary\n   */\n  getQueryStatusSummary: (workflowId) => \n    apiClient.get(`/queries/workflow/${workflowId}/status-summary`)\n};","import { PlusOutlined, FilterOutlined, ReloadOutlined } from '@ant-design/icons';\nimport { Card, Tabs, Table, Tag, Button, Space, Modal, Form, Input, Select, Badge, Row, Col } from 'antd';\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport { UI_CONFIG, QUERY_STATUS, QUERY_STATUS_GROUPS, TEAM_NAMES } from '../constants';\nimport { queryAPI } from '../services/queryAPI';\n\n// Hook to detect screen size\nconst useResponsive = () => {\n  const [screenSize, setScreenSize] = useState({\n    isMobile: window.innerWidth <= UI_CONFIG.MOBILE_BREAKPOINT,\n    isTablet:\n      window.innerWidth > UI_CONFIG.MOBILE_BREAKPOINT &&\n      window.innerWidth <= UI_CONFIG.TABLET_BREAKPOINT,\n    isDesktop: window.innerWidth > UI_CONFIG.TABLET_BREAKPOINT\n  });\n\n  useEffect(() => {\n    const handleResize = () => {\n      setScreenSize({\n        isMobile: window.innerWidth <= UI_CONFIG.MOBILE_BREAKPOINT,\n        isTablet:\n          window.innerWidth > UI_CONFIG.MOBILE_BREAKPOINT &&\n          window.innerWidth <= UI_CONFIG.TABLET_BREAKPOINT,\n        isDesktop: window.innerWidth > UI_CONFIG.TABLET_BREAKPOINT\n      });\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return screenSize;\n};\n\nconst { TabPane } = Tabs;\nconst { TextArea } = Input;\nconst { Option } = Select;\n\nconst QueryWidget = ({ workflowId, userRole }) => {\n  const [loading, setLoading] = useState(false);\n  const [queries, setQueries] = useState({\n    all: [],\n    open: [],\n    resolved: [],\n    myQueries: []\n  });\n  const [filteredQueries, setFilteredQueries] = useState({\n    all: [],\n    open: [],\n    resolved: [],\n    myQueries: []\n  });\n  const [createModalVisible, setCreateModalVisible] = useState(false);\n  const [resolveModalVisible, setResolveModalVisible] = useState(false);\n  const [selectedQuery, setSelectedQuery] = useState(null);\n  const [form] = Form.useForm();\n  const [resolveForm] = Form.useForm();\n  const { isMobile } = useResponsive();\n  \n  // Filter states\n  const [filters, setFilters] = useState({\n    team: 'all',\n    status: 'all',\n    priority: 'all',\n    dateRange: 'all',\n    materialCode: '',\n    projectCode: '',\n    plantCode: ''\n  });\n\n  useEffect(() => {\n    // Always load all queries, not just for a specific workflow\n    const controller = new AbortController();\n\n    const loadQueriesWithAbort = async () => {\n      try {\n        setLoading(true);\n        // Use the general queries endpoint to get all queries from all time\n        const allQueries = await queryAPI.getAllQueries({\n          signal: controller.signal\n        });\n\n        if (!controller.signal.aborted) {\n          const queriesData = {\n            all: allQueries,\n            open: allQueries.filter(q => QUERY_STATUS_GROUPS.ACTIVE.includes(q.status)),\n            resolved: allQueries.filter(q => QUERY_STATUS_GROUPS.INACTIVE.includes(q.status)),\n            myQueries: allQueries.filter(q => q.createdBy === getCurrentUser())\n          };\n          setQueries(queriesData);\n          setFilteredQueries(queriesData);\n        }\n      } catch (error) {\n        if (!controller.signal.aborted) {\n          console.error('Failed to load queries:', error);\n        }\n      } finally {\n        if (!controller.signal.aborted) {\n          setLoading(false);\n        }\n      }\n    };\n\n    loadQueriesWithAbort();\n\n    return () => {\n      controller.abort();\n    };\n  }, []); // Remove workflowId dependency to load all queries\n\n  const loadQueries = useCallback(\n    async signal => {\n      try {\n        setLoading(true);\n        // Load all queries from all time\n        const allQueries = await queryAPI.getAllQueries({ signal });\n\n        if (!signal?.aborted) {\n          const queriesData = {\n            all: allQueries,\n            open: allQueries.filter(q => QUERY_STATUS_GROUPS.ACTIVE.includes(q.status)),\n            resolved: allQueries.filter(q => QUERY_STATUS_GROUPS.INACTIVE.includes(q.status)),\n            myQueries: allQueries.filter(q => q.createdBy === getCurrentUser())\n          };\n          setQueries(queriesData);\n          setFilteredQueries(queriesData);\n        }\n      } catch (error) {\n        if (!signal?.aborted) {\n          console.error('Failed to load queries:', error);\n        }\n      } finally {\n        if (!signal?.aborted) {\n          setLoading(false);\n        }\n      }\n    },\n    [] // Remove workflowId dependency\n  );\n\n  const getCurrentUser = () => {\n    // Get current user from auth context or localStorage\n    return localStorage.getItem('username') || 'current_user';\n  };\n\n  // Filter queries based on current filter settings\n  const applyFilters = useCallback(() => {\n    const filterQueries = (queryList) => {\n      return queryList.filter(query => {\n        // Team filter\n        if (filters.team !== 'all' && query.assignedTeam !== filters.team) {\n          return false;\n        }\n\n        // Status filter\n        if (filters.status !== 'all' && query.status !== filters.status) {\n          return false;\n        }\n\n        // Priority filter\n        if (filters.priority !== 'all' && query.priorityLevel !== filters.priority) {\n          return false;\n        }\n\n        // Material Code filter\n        if (filters.materialCode && !query.materialCode?.toLowerCase().includes(filters.materialCode.toLowerCase())) {\n          return false;\n        }\n\n        // Project Code filter (if available)\n        if (filters.projectCode && query.projectCode && !query.projectCode.toLowerCase().includes(filters.projectCode.toLowerCase())) {\n          return false;\n        }\n\n        // Plant Code filter\n        if (filters.plantCode && !query.assignedPlant?.toLowerCase().includes(filters.plantCode.toLowerCase())) {\n          return false;\n        }\n\n        // Date Range filter\n        if (filters.dateRange !== 'all') {\n          const queryDate = new Date(query.createdAt);\n          const now = new Date();\n          let startDate;\n\n          switch (filters.dateRange) {\n            case 'today':\n              startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n              break;\n            case 'week':\n              startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n              break;\n            case 'month':\n              startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n              break;\n            case '3months':\n              startDate = new Date(now.getFullYear(), now.getMonth() - 3, 1);\n              break;\n            default:\n              return true;\n          }\n\n          if (queryDate < startDate) {\n            return false;\n          }\n        }\n\n        return true;\n      });\n    };\n\n    setFilteredQueries({\n      all: filterQueries(queries.all),\n      open: filterQueries(queries.open),\n      resolved: filterQueries(queries.resolved),\n      myQueries: filterQueries(queries.myQueries)\n    });\n  }, [queries, filters]);\n\n  // Apply filters whenever queries or filters change\n  useEffect(() => {\n    applyFilters();\n  }, [queries, filters, applyFilters]);\n\n  const handleCreateQuery = async values => {\n    try {\n      await queryAPI.createQuery({\n        workflowId,\n        ...values,\n        createdBy: getCurrentUser()\n      });\n      setCreateModalVisible(false);\n      form.resetFields();\n      loadQueries();\n    } catch (error) {\n      console.error('Failed to create query:', error);\n    }\n  };\n\n  const handleResolveQuery = async values => {\n    try {\n      await queryAPI.resolveQuery(selectedQuery.id, {\n        resolution: values.resolution,\n        resolvedBy: getCurrentUser()\n      });\n      setResolveModalVisible(false);\n      resolveForm.resetFields();\n      setSelectedQuery(null);\n      loadQueries();\n    } catch (error) {\n      console.error('Failed to resolve query:', error);\n    }\n  };\n\n  const getStatusColor = status => {\n    const statusColors = {\n      [QUERY_STATUS.OPEN]: 'red',\n      [QUERY_STATUS.RESOLVED]: 'green',\n      [QUERY_STATUS.CLOSED]: 'gray'\n    };\n    return statusColors[status] || 'default';\n  };\n\n  const getTeamColor = team => {\n    const colors = {\n      CQS: 'blue',\n      TECH: 'purple',\n      PLANT: 'orange',\n      JVC: 'cyan'\n    };\n    return colors[team] || 'default';\n  };\n\n  // Responsive column configuration for queries\n  const getQueryColumns = () => {\n    const baseColumns = [\n      {\n        title: 'ID',\n        dataIndex: 'id',\n        key: 'id',\n        width: isMobile ? 50 : 60,\n        fixed: isMobile ? 'left' : false\n      },\n      {\n        title: 'Question',\n        dataIndex: 'question',\n        key: 'question',\n        ellipsis: true,\n        render: text => (\n          <span title={text}>\n            {isMobile && text.length > 30 ? `${text.substring(0, 30)}...` : text}\n          </span>\n        )\n      },\n      {\n        title: 'Team',\n        dataIndex: 'assignedTeam',\n        key: 'assignedTeam',\n        width: isMobile ? 60 : 80,\n        render: team => (\n          <Tag color={getTeamColor(team)} size={isMobile ? 'small' : 'default'}>\n            {team}\n          </Tag>\n        )\n      },\n      {\n        title: 'Status',\n        dataIndex: 'status',\n        key: 'status',\n        width: isMobile ? 60 : 80,\n        render: status => {\n          const statusDisplayNames = {\n            [QUERY_STATUS.OPEN]: 'Open',\n            [QUERY_STATUS.RESOLVED]: 'Resolved',\n            [QUERY_STATUS.CLOSED]: 'Closed'\n          };\n          \n          return (\n            <Tag color={getStatusColor(status)} size={isMobile ? 'small' : 'default'}>\n              {statusDisplayNames[status] || status}\n            </Tag>\n          );\n        }\n      },\n      {\n        title: 'Context',\n        dataIndex: 'fieldContext',\n        key: 'fieldContext',\n        width: 120,\n        ellipsis: true,\n        responsive: ['md']\n      },\n      {\n        title: 'Created',\n        dataIndex: 'createdAt',\n        key: 'createdAt',\n        width: isMobile ? 80 : 100,\n        responsive: ['sm'],\n        render: date => {\n          if (!date) {\n            return '-';\n          }\n          const d = new Date(date);\n          return isMobile\n            ? d.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })\n            : d.toLocaleDateString();\n        }\n      },\n      {\n        title: 'Actions',\n        key: 'actions',\n        width: isMobile ? 70 : 120,\n        fixed: isMobile ? 'right' : false,\n        render: (_, record) => (\n          <Space>\n            {/* Resolve Button - For team members on OPEN queries */}\n            {record.status === QUERY_STATUS.OPEN && canResolveQuery(record) && (\n              <Button\n                size=\"small\"\n                type=\"primary\"\n                onClick={() => {\n                  setSelectedQuery(record);\n                  setResolveModalVisible(true);\n                }}\n              >\n                {isMobile ? 'Resolve' : 'Resolve'}\n              </Button>\n            )}\n            \n            {/* View Button - For inactive queries */}\n            {QUERY_STATUS_GROUPS.INACTIVE.includes(record.status) && (\n              <Button\n                size=\"small\"\n                type=\"link\"\n                onClick={() => {\n                  setSelectedQuery(record);\n                  setResolveModalVisible(true);\n                }}\n              >\n                View\n              </Button>\n            )}\n          </Space>\n        )\n      }\n    ];\n\n    return baseColumns;\n  };\n\n  const canCreateQuery = () => {\n    return [TEAM_NAMES.PLANT, TEAM_NAMES.JVC].includes(userRole);\n  };\n\n  const canResolveQuery = query => {\n    return query.assignedTeam === userRole || userRole === 'ADMIN';\n  };\n\n\n\n  const getTabCount = queryList => {\n    return queryList.length > 0 ? queryList.length : null;\n  };\n\n  return (\n    <Card\n      title=\"Queries\"\n      extra={\n        <Space>\n          <Button\n            icon={<ReloadOutlined />}\n            onClick={() => {\n              const controller = new AbortController();\n              loadQueries(controller.signal);\n            }}\n          >\n            Refresh\n          </Button>\n          {canCreateQuery() && (\n            <Button\n              type=\"primary\"\n              icon={<PlusOutlined />}\n              onClick={() => setCreateModalVisible(true)}\n            >\n              Raise Query\n            </Button>\n          )}\n        </Space>\n      }\n    >\n      {/* Filter Controls */}\n      <Card size=\"small\" style={{ marginBottom: 16, background: '#fafafa' }}>\n        <Row gutter={[16, 8]} align=\"middle\">\n          <Col xs={24} sm={6} md={4}>\n            <Select\n              placeholder=\"Team\"\n              value={filters.team}\n              onChange={value => setFilters({ ...filters, team: value })}\n              style={{ width: '100%' }}\n              size=\"small\"\n            >\n              <Select.Option value=\"all\">All Teams</Select.Option>\n              <Select.Option value=\"CQS\">CQS</Select.Option>\n              <Select.Option value=\"TECH\">TECH</Select.Option>\n              <Select.Option value=\"JVC\">JVC</Select.Option>\n              <Select.Option value=\"PLANT\">PLANT</Select.Option>\n            </Select>\n          </Col>\n          <Col xs={24} sm={6} md={4}>\n            <Select\n              placeholder=\"Status\"\n              value={filters.status}\n              onChange={value => setFilters({ ...filters, status: value })}\n              style={{ width: '100%' }}\n              size=\"small\"\n            >\n              <Select.Option value=\"all\">All Status</Select.Option>\n              <Select.Option value=\"OPEN\">Open</Select.Option>\n              <Select.Option value=\"RESOLVED\">Resolved</Select.Option>\n              <Select.Option value=\"CLOSED\">Closed</Select.Option>\n            </Select>\n          </Col>\n          <Col xs={24} sm={6} md={4}>\n            <Select\n              placeholder=\"Priority\"\n              value={filters.priority}\n              onChange={value => setFilters({ ...filters, priority: value })}\n              style={{ width: '100%' }}\n              size=\"small\"\n            >\n              <Select.Option value=\"all\">All Priority</Select.Option>\n              <Select.Option value=\"LOW\">Low</Select.Option>\n              <Select.Option value=\"MEDIUM\">Medium</Select.Option>\n              <Select.Option value=\"HIGH\">High</Select.Option>\n              <Select.Option value=\"URGENT\">Urgent</Select.Option>\n            </Select>\n          </Col>\n          <Col xs={24} sm={6} md={4}>\n            <Select\n              placeholder=\"Date Range\"\n              value={filters.dateRange}\n              onChange={value => setFilters({ ...filters, dateRange: value })}\n              style={{ width: '100%' }}\n              size=\"small\"\n            >\n              <Select.Option value=\"all\">All Time</Select.Option>\n              <Select.Option value=\"today\">Today</Select.Option>\n              <Select.Option value=\"week\">Past Week</Select.Option>\n              <Select.Option value=\"month\">Past Month</Select.Option>\n              <Select.Option value=\"3months\">Past 3 Months</Select.Option>\n            </Select>\n          </Col>\n          <Col xs={24} sm={12} md={4}>\n            <Input\n              placeholder=\"Material Code\"\n              value={filters.materialCode}\n              onChange={e => setFilters({ ...filters, materialCode: e.target.value })}\n              size=\"small\"\n            />\n          </Col>\n          <Col xs={24} sm={12} md={4}>\n            <Input\n              placeholder=\"Project Code\"\n              value={filters.projectCode}\n              onChange={e => setFilters({ ...filters, projectCode: e.target.value })}\n              size=\"small\"\n            />\n          </Col>\n          <Col xs={24} sm={12} md={4}>\n            <Input\n              placeholder=\"Plant Code\"\n              value={filters.plantCode}\n              onChange={e => setFilters({ ...filters, plantCode: e.target.value })}\n              size=\"small\"\n            />\n          </Col>\n          <Col xs={24} sm={12} md={4}>\n            <Button\n              icon={<FilterOutlined />}\n              onClick={() => setFilters({\n                team: 'all',\n                status: 'all',\n                priority: 'all',\n                dateRange: 'all',\n                materialCode: '',\n                projectCode: '',\n                plantCode: ''\n              })}\n              size=\"small\"\n            >\n              Clear\n            </Button>\n          </Col>\n        </Row>\n      </Card>\n\n      <Tabs\n        defaultActiveKey=\"all\"\n        className={isMobile ? 'query-widget-mobile' : ''}\n        size={isMobile ? 'small' : 'default'}\n      >\n        <TabPane\n          tab={\n            <Badge count={getTabCount(filteredQueries.all)} size=\"small\">\n              <span>All Queries</span>\n            </Badge>\n          }\n          key=\"all\"\n        >\n          <Table\n            dataSource={filteredQueries.all}\n            columns={getQueryColumns()}\n            loading={loading}\n            pagination={{ pageSize: isMobile ? 5 : 10 }}\n            size=\"small\"\n            rowKey=\"id\"\n            scroll={isMobile ? { x: 500 } : undefined}\n            className={isMobile ? 'touch-friendly-table' : ''}\n          />\n        </TabPane>\n\n        <TabPane\n          tab={\n            <Badge count={getTabCount(filteredQueries.open)} size=\"small\">\n              <span style={{ color: '#ff4d4f' }}>Open</span>\n            </Badge>\n          }\n          key=\"open\"\n        >\n          <Table\n            dataSource={filteredQueries.open}\n            columns={getQueryColumns()}\n            loading={loading}\n            pagination={{ pageSize: isMobile ? 5 : 10 }}\n            size=\"small\"\n            rowKey=\"id\"\n            scroll={isMobile ? { x: 500 } : undefined}\n            className={isMobile ? 'touch-friendly-table' : ''}\n          />\n        </TabPane>\n\n        <TabPane\n          tab={\n            <Badge count={getTabCount(filteredQueries.resolved)} size=\"small\">\n              <span style={{ color: '#52c41a' }}>Resolved</span>\n            </Badge>\n          }\n          key=\"resolved\"\n        >\n          <Table\n            dataSource={filteredQueries.resolved}\n            columns={getQueryColumns()}\n            loading={loading}\n            pagination={{ pageSize: isMobile ? 5 : 10 }}\n            size=\"small\"\n            rowKey=\"id\"\n            scroll={isMobile ? { x: 500 } : undefined}\n            className={isMobile ? 'touch-friendly-table' : ''}\n          />\n        </TabPane>\n\n        <TabPane\n          tab={\n            <Badge count={getTabCount(filteredQueries.myQueries)} size=\"small\">\n              <span>My Queries</span>\n            </Badge>\n          }\n          key=\"my\"\n        >\n          <Table\n            dataSource={filteredQueries.myQueries}\n            columns={getQueryColumns()}\n            loading={loading}\n            pagination={{ pageSize: isMobile ? 5 : 10 }}\n            size=\"small\"\n            rowKey=\"id\"\n            scroll={isMobile ? { x: 500 } : undefined}\n            className={isMobile ? 'touch-friendly-table' : ''}\n          />\n        </TabPane>\n      </Tabs>\n\n      {/* Create Query Modal */}\n      <Modal\n        title=\"Raise New Query\"\n        open={createModalVisible}\n        onCancel={() => {\n          setCreateModalVisible(false);\n          form.resetFields();\n        }}\n        onOk={() => form.submit()}\n        width={600}\n      >\n        <Form form={form} layout=\"vertical\" onFinish={handleCreateQuery}>\n          <Form.Item\n            name=\"assignedTeam\"\n            label=\"Assign to Team\"\n            rules={[{ required: true, message: 'Please select a team' }]}\n          >\n            <Select placeholder=\"Select team\">\n              <Option value=\"CQS\">CQS Team</Option>\n              <Option value=\"TECH\">Tech Team</Option>\n              <Option value=\"JVC\">JVC Team</Option>\n            </Select>\n          </Form.Item>\n\n          <Form.Item\n            name=\"fieldContext\"\n            label=\"Field Context\"\n            help=\"Which field or section is this query about?\"\n          >\n            <Input placeholder=\"e.g., Material Name, Safety Data, etc.\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"question\"\n            label=\"Question\"\n            rules={[{ required: true, message: 'Please enter your question' }]}\n          >\n            <TextArea rows={4} placeholder=\"Describe your question or issue in detail...\" />\n          </Form.Item>\n\n          <Form.Item name=\"priority\" label=\"Priority\" initialValue=\"MEDIUM\">\n            <Select>\n              <Option value=\"LOW\">Low</Option>\n              <Option value=\"MEDIUM\">Medium</Option>\n              <Option value=\"HIGH\">High</Option>\n              <Option value=\"URGENT\">Urgent</Option>\n            </Select>\n          </Form.Item>\n        </Form>\n      </Modal>\n\n      {/* Resolve Query Modal */}\n      <Modal\n        title={`Resolve Query #${selectedQuery?.id}`}\n        open={resolveModalVisible}\n        onCancel={() => {\n          setResolveModalVisible(false);\n          resolveForm.resetFields();\n          setSelectedQuery(null);\n        }}\n        onOk={() => resolveForm.submit()}\n        width={600}\n      >\n        {selectedQuery && (\n          <>\n            <div style={{ marginBottom: 16, padding: 12, background: '#f5f5f5', borderRadius: 4 }}>\n              <strong>Question:</strong> {selectedQuery.question}\n              {selectedQuery.fieldContext && (\n                <div>\n                  <strong>Field Context:</strong> {selectedQuery.fieldContext}\n                </div>\n              )}\n            </div>\n\n            <Form form={resolveForm} layout=\"vertical\" onFinish={handleResolveQuery}>\n              <Form.Item\n                name=\"resolution\"\n                label=\"Resolution\"\n                rules={[{ required: true, message: 'Please provide a resolution' }]}\n              >\n                <TextArea\n                  rows={6}\n                  placeholder=\"Provide detailed resolution or answer to the query...\"\n                />\n              </Form.Item>\n            </Form>\n          </>\n        )}\n      </Modal>\n\n\n    </Card>\n  );\n};\n\nexport default QueryWidget;\n","import {\n  DashboardOutlined,\n  QuestionCircleOutlined,\n  ReloadOutlined,\n  FileTextOutlined,\n  InfoCircleOutlined,\n  FilterOutlined\n} from '@ant-design/icons';\nimport {\n  Tabs,\n  Card,\n  Row,\n  Col,\n  Typography,\n  Table,\n  Tag,\n  Button,\n  message,\n  Space,\n  Badge,\n  Modal,\n  Descriptions,\n  Select,\n  DatePicker\n} from 'antd';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport apiClient from '../api/client';\nimport QueryWidget from '../components/QueryWidget';\nimport { PAGINATION, WORKFLOW_STATES } from '../constants';\nimport { getCurrentUser, getUserRole } from '../services/auth';\n\nimport QuestionnaireViewerPage from './QuestionnaireViewerPage';\n\n// Test auth imports removed - files not found\n\nconst { TabPane } = Tabs;\nconst { Title, Text } = Typography;\nconst { Option } = Select;\nconst { RangePicker } = DatePicker;\n\nconst WorkflowPage = () => {\n  const navigate = useNavigate();\n  const [activeTab, setActiveTab] = useState('dashboard');\n  const [selectedWorkflowId, setSelectedWorkflowId] = useState(null);\n  const [selectedWorkflow, setSelectedWorkflow] = useState(null);\n  const [detailsModalVisible, setDetailsModalVisible] = useState(false);\n  const [questionnaireModalVisible, setQuestionnaireModalVisible] = useState(false);\n  const [questionnaireWorkflowId, setQuestionnaireWorkflowId] = useState(null);\n\n  // All Workflows State (for dashboard)\n  const [allWorkflows, setAllWorkflows] = useState([]);\n  const [filteredWorkflows, setFilteredWorkflows] = useState([]);\n  const [dashboardLoading, setDashboardLoading] = useState(false);\n\n  // Date filtering state\n  const [dateFilter, setDateFilter] = useState('all_time');\n  const [customDateRange, setCustomDateRange] = useState(null);\n\n  const currentUser = getCurrentUser();\n  const userRole = getUserRole();\n\n  // Debug logging\n  console.log('WorkflowPage - currentUser:', currentUser);\n  console.log('WorkflowPage - userRole:', userRole);\n\n  // Apply date filtering to workflows\n  const applyDateFilter = useCallback((workflows, filter, customRange) => {\n    // Ensure workflows is always an array\n    const safeWorkflows = Array.isArray(workflows) ? workflows : [];\n    const now = new Date();\n    let startDate;\n\n    switch (filter) {\n      case 'all_time':\n        // Show all data without any date filtering\n        setFilteredWorkflows(safeWorkflows);\n        return;\n      case 'current_month':\n        startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n        break;\n      case 'past_3_months':\n        startDate = new Date(now.getFullYear(), now.getMonth() - 3, 1);\n        break;\n      case 'past_6_months':\n        startDate = new Date(now.getFullYear(), now.getMonth() - 6, 1);\n        break;\n      case 'past_12_months':\n        startDate = new Date(now.getFullYear(), now.getMonth() - 12, 1);\n        break;\n      case 'custom':\n        if (customRange && customRange.length === 2) {\n          startDate = customRange[0].toDate();\n          const endDate = customRange[1].toDate();\n          const filtered = safeWorkflows.filter(w => {\n            const workflowDate = new Date(w.createdAt);\n            return workflowDate >= startDate && workflowDate <= endDate;\n          });\n          setFilteredWorkflows(filtered);\n          return;\n        }\n        break;\n      default:\n        setFilteredWorkflows(safeWorkflows);\n        return;\n    }\n\n    if (startDate) {\n      const filtered = safeWorkflows.filter(w => {\n        const workflowDate = new Date(w.createdAt);\n        return workflowDate >= startDate;\n      });\n      setFilteredWorkflows(filtered);\n    } else {\n      setFilteredWorkflows(safeWorkflows);\n    }\n  }, []);\n\n  // Fetch all workflows for dashboard\n  const fetchAllWorkflows = useCallback(async signal => {\n    setDashboardLoading(true);\n    try {\n      const response = await apiClient.get('/workflows', { signal });\n      if (!signal?.aborted) {\n        // Ensure response is always an array\n        const safeResponse = Array.isArray(response) ? response : [];\n        setAllWorkflows(safeResponse);\n        applyDateFilter(safeResponse, dateFilter, customDateRange);\n      }\n    } catch (error) {\n      if (!signal?.aborted) {\n        console.error('Error fetching workflows:', error);\n        message.error('Failed to fetch workflows');\n        // Set empty arrays on error\n        setAllWorkflows([]);\n        setFilteredWorkflows([]);\n      }\n    } finally {\n      if (!signal?.aborted) {\n        setDashboardLoading(false);\n      }\n    }\n  }, [dateFilter, customDateRange, applyDateFilter]);\n\n  // Handle date filter change\n  const handleDateFilterChange = (value) => {\n    setDateFilter(value);\n    if (value !== 'custom') {\n      setCustomDateRange(null);\n    }\n    applyDateFilter(allWorkflows, value, customDateRange);\n  };\n\n  // Handle custom date range change\n  const handleCustomDateRangeChange = (dates) => {\n    setCustomDateRange(dates);\n    if (dates && dates.length === 2) {\n      applyDateFilter(allWorkflows, 'custom', dates);\n    }\n  };\n\n  useEffect(() => {\n    const controller = new AbortController();\n    fetchAllWorkflows(controller.signal);\n\n    return () => {\n      controller.abort();\n    };\n  }, [fetchAllWorkflows]);\n\n  // Apply date filter when dateFilter or customDateRange changes\n  useEffect(() => {\n    if (allWorkflows.length > 0) {\n      applyDateFilter(allWorkflows, dateFilter, customDateRange);\n    }\n  }, [dateFilter, customDateRange, allWorkflows, applyDateFilter]);\n\n  const handleTabChange = key => {\n    setActiveTab(key);\n  };\n\n  const showWorkflowDetails = workflow => {\n    setSelectedWorkflow(workflow);\n    setDetailsModalVisible(true);\n  };\n\n  const openQuestionnaire = workflowId => {\n    // Open questionnaire in modal overlay\n    setQuestionnaireWorkflowId(workflowId);\n    setQuestionnaireModalVisible(true);\n  };\n\n\n\n  const downloadExcelReport = async workflowId => {\n    try {\n      const response = await apiClient.get(`/workflows/${workflowId}/excel-report`, {\n        responseType: 'blob'\n      });\n\n      // Create download link\n      const url = window.URL.createObjectURL(new Blob([response]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `QRMFG_Report_Workflow_${workflowId}.xlsx`;\n      document.body.appendChild(link);\n      link.click();\n\n      // Cleanup\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(link);\n\n      message.success('Excel report downloaded successfully');\n    } catch (error) {\n      message.error('Failed to download Excel report');\n    }\n  };\n\n  const closeDetailsModal = () => {\n    setDetailsModalVisible(false);\n    setSelectedWorkflow(null);\n  };\n\n  // Dashboard Table Columns - Optimized for no horizontal scrolling\n  const dashboardColumns = [\n    {\n      title: 'ID',\n      dataIndex: 'id',\n      key: 'id',\n      width: 80,\n      render: id => (\n        <Text\n          style={{\n            fontFamily: 'monospace',\n            fontSize: '13px',\n            fontWeight: 600,\n            color: '#495057',\n            padding: '4px 8px',\n            background: '#f8f9fa',\n            borderRadius: '4px',\n            border: '1px solid #e9ecef'\n          }}\n        >\n          #{id}\n        </Text>\n      )\n    },\n    {\n      title: 'Project',\n      dataIndex: 'projectCode',\n      key: 'projectCode',\n      width: 80,\n      render: text => <Text strong>{text}</Text>\n    },\n    {\n      title: 'Material',\n      dataIndex: 'materialCode',\n      key: 'materialCode',\n      width: 90,\n      render: text => <Text strong>{text}</Text>\n    },\n    {\n      title: 'Description',\n      dataIndex: 'materialName',\n      key: 'materialName',\n      width: 100,\n      ellipsis: true,\n      render: text => text || 'No description'\n    },\n    {\n      title: 'Plant',\n      dataIndex: 'assignedPlant',\n      key: 'assignedPlant',\n      width: 70,\n      render: plant => <Tag color=\"green\">{plant}</Tag>\n    },\n    {\n      title: 'Status',\n      dataIndex: 'state',\n      key: 'state',\n      width: 100,\n      render: state => {\n        const stateConfig = {\n          JVC_PENDING: { color: 'orange', text: 'JVC' },\n          PLANT_PENDING: { color: 'blue', text: 'Plant' },\n          CQS_PENDING: { color: 'purple', text: 'CQS' },\n          TECH_PENDING: { color: 'cyan', text: 'Tech' },\n          [WORKFLOW_STATES.COMPLETED]: { color: 'green', text: 'Done' }\n        };\n        const config = stateConfig[state] || { color: 'default', text: state };\n        return <Tag color={config.color}>{config.text}</Tag>;\n      }\n    },\n    {\n      title: 'Start Date',\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      width: 90,\n      render: date => date ? new Date(date).toLocaleDateString('en-GB') : 'N/A'\n    },\n    {\n      title: 'Actions',\n      key: 'actions',\n      width: 180,\n      render: (_, record) => (\n        <Space size=\"small\">\n          <Button\n            size=\"small\"\n            icon={<FileTextOutlined />}\n            onClick={() => openQuestionnaire(record.id)}\n            title=\"Open Questionnaire\"\n          >\n            Quest.\n          </Button>\n          <Button\n            size=\"small\"\n            type=\"default\"\n            style={{ backgroundColor: '#52c41a', borderColor: '#52c41a', color: 'white' }}\n            onClick={() => downloadExcelReport(record.id)}\n            title=\"Download Excel Report\"\n          >\n            Excel\n          </Button>\n        </Space>\n      )\n    }\n  ];\n\n  // Calculate analytics for filtered workflows\n  const calculateAnalytics = (workflows) => {\n    const total = workflows.length;\n    const completed = workflows.filter(w => w.state === WORKFLOW_STATES.COMPLETED).length;\n    const jvcPending = workflows.filter(w => w.state === 'JVC_PENDING').length;\n    const plantPending = workflows.filter(w => w.state === 'PLANT_PENDING').length;\n    const cqsPending = workflows.filter(w => w.state === 'CQS_PENDING').length;\n    const techPending = workflows.filter(w => w.state === 'TECH_PENDING').length;\n    const overdue = workflows.filter(w => (w.daysPending || 0) > 7).length;\n\n    return { total, completed, jvcPending, plantPending, cqsPending, techPending, overdue };\n  };\n\n  // Render Dashboard Tab\n  const renderDashboardTab = () => {\n    const analytics = calculateAnalytics(filteredWorkflows);\n\n    return (\n      <div>\n        {/* Header Section with Date Filters */}\n        <div style={{ marginBottom: 24 }}>\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 16 }}>\n            {/* <Title level={3} style={{ margin: 0, color: '#1a1a1a', fontSize: '20px', fontWeight: 600 }}>\n              Dashboard\n            </Title> */}\n            <Button\n              icon={<ReloadOutlined />}\n              onClick={() => {\n                const controller = new AbortController();\n                fetchAllWorkflows(controller.signal);\n              }}\n              loading={dashboardLoading}\n              type=\"default\"\n            >\n              Refresh\n            </Button>\n          </div>\n\n          {/* Date Filter Controls */}\n          <div style={{\n            padding: '16px 24px',\n            background: '#f8f9fa',\n            borderRadius: '8px',\n            border: '1px solid #e9ecef',\n            marginBottom: '24px'\n          }}>\n            <Space align=\"center\">\n              <FilterOutlined style={{ color: '#495057' }} />\n              <Text style={{ color: '#495057', fontSize: '14px', fontWeight: 500 }}>Filter by:</Text>\n              <Select\n                value={dateFilter}\n                onChange={handleDateFilterChange}\n                size=\"middle\"\n                style={{ width: 160 }}\n              >\n                <Option value=\"all_time\">All Time</Option>\n                <Option value=\"current_month\">Current Month</Option>\n                <Option value=\"past_3_months\">Past 3 Months</Option>\n                <Option value=\"past_6_months\">Past 6 Months</Option>\n                <Option value=\"past_12_months\">Past 12 Months</Option>\n                <Option value=\"custom\">Custom Range</Option>\n              </Select>\n              {dateFilter === 'custom' && (\n                <RangePicker\n                  value={customDateRange}\n                  onChange={handleCustomDateRangeChange}\n                  size=\"middle\"\n                  style={{ width: 260 }}\n                />\n              )}\n            </Space>\n          </div>\n        </div>\n\n        {/* Analytics Cards */}\n        <div style={{ marginBottom: '32px' }}>\n          <Row gutter={[20, 16]}>\n            <Col xs={24} sm={12} md={8} lg={6} xl={4}>\n              <Card\n                style={{\n                  borderRadius: '8px',\n                  border: '1px solid #e8e9ea',\n                  boxShadow: 'none',\n                  background: '#ffffff'\n                }}\n                bodyStyle={{ padding: '24px 20px' }}\n              >\n                <div style={{ textAlign: 'center' }}>\n                  <div style={{ fontSize: '32px', fontWeight: 700, marginBottom: '8px', color: '#1a1a1a' }}>\n                    {analytics.total}\n                  </div>\n                  <div style={{ fontSize: '14px', color: '#666', fontWeight: 500 }}>Total Projects</div>\n                </div>\n              </Card>\n            </Col>\n            <Col xs={24} sm={12} md={8} lg={6} xl={4}>\n              <Card\n                style={{\n                  borderRadius: '8px',\n                  border: '1px solid #d4edda',\n                  boxShadow: 'none',\n                  background: '#f8fff9'\n                }}\n                bodyStyle={{ padding: '24px 20px' }}\n              >\n                <div style={{ textAlign: 'center' }}>\n                  <div style={{ fontSize: '32px', fontWeight: 700, marginBottom: '8px', color: '#28a745' }}>\n                    {analytics.completed}\n                  </div>\n                  <div style={{ fontSize: '14px', color: '#155724', fontWeight: 500 }}>Completed</div>\n                </div>\n              </Card>\n            </Col>\n            <Col xs={24} sm={12} md={8} lg={6} xl={4}>\n              <Card\n                style={{\n                  borderRadius: '8px',\n                  border: '1px solid #f5c6cb',\n                  boxShadow: 'none',\n                  background: '#fdf2f2'\n                }}\n                bodyStyle={{ padding: '24px 20px' }}\n              >\n                <div style={{ textAlign: 'center' }}>\n                  <div style={{ fontSize: '32px', fontWeight: 700, marginBottom: '8px', color: '#dc3545' }}>\n                    {analytics.jvcPending}\n                  </div>\n                  <div style={{ fontSize: '14px', color: '#721c24', fontWeight: 500 }}>JVC Pending</div>\n                </div>\n              </Card>\n            </Col>\n            <Col xs={24} sm={12} md={8} lg={6} xl={4}>\n              <Card\n                style={{\n                  borderRadius: '8px',\n                  border: '1px solid #bee5eb',\n                  boxShadow: 'none',\n                  background: '#f1f9fa'\n                }}\n                bodyStyle={{ padding: '24px 20px' }}\n              >\n                <div style={{ textAlign: 'center' }}>\n                  <div style={{ fontSize: '32px', fontWeight: 700, marginBottom: '8px', color: '#17a2b8' }}>\n                    {analytics.plantPending}\n                  </div>\n                  <div style={{ fontSize: '14px', color: '#0c5460', fontWeight: 500 }}>Plant Pending</div>\n                </div>\n              </Card>\n            </Col>\n            <Col xs={24} sm={12} md={8} lg={6} xl={4}>\n              <Card\n                style={{\n                  borderRadius: '8px',\n                  border: '1px solid #d1ecf1',\n                  boxShadow: 'none',\n                  background: '#f8f9fa'\n                }}\n                bodyStyle={{ padding: '24px 20px' }}\n              >\n                <div style={{ textAlign: 'center' }}>\n                  <div style={{ fontSize: '32px', fontWeight: 700, marginBottom: '8px', color: '#6c757d' }}>\n                    {analytics.cqsPending}\n                  </div>\n                  <div style={{ fontSize: '14px', color: '#495057', fontWeight: 500 }}>CQS Pending</div>\n                </div>\n              </Card>\n            </Col>\n            <Col xs={24} sm={12} md={8} lg={6} xl={4}>\n              <Card\n                style={{\n                  borderRadius: '8px',\n                  border: '1px solid #ffeaa7',\n                  boxShadow: 'none',\n                  background: '#fffbf0'\n                }}\n                bodyStyle={{ padding: '24px 20px' }}\n              >\n                <div style={{ textAlign: 'center' }}>\n                  <div style={{ fontSize: '32px', fontWeight: 700, marginBottom: '8px', color: '#fd7e14' }}>\n                    {analytics.overdue}\n                  </div>\n                  <div style={{ fontSize: '14px', color: '#8a4a00', fontWeight: 500 }}>Overdue</div>\n                </div>\n              </Card>\n            </Col>\n          </Row>\n        </div>\n\n        {/* Data Table */}\n        <div style={{\n          background: '#fff',\n          border: '1px solid #e8e9ea',\n          borderRadius: '8px',\n          boxShadow: '0 2px 8px rgba(0, 0, 0, 0.06)'\n        }}>\n          <div style={{\n            padding: '20px 24px',\n            borderBottom: '1px solid #e8e9ea',\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center'\n          }}>\n            <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n              <FileTextOutlined style={{ color: '#495057', fontSize: '16px' }} />\n              <span style={{ fontSize: '16px', fontWeight: 600, color: '#1a1a1a' }}>\n                Workflows\n              </span>\n              <span style={{ \n                fontSize: '14px', \n                color: '#6c757d',\n                background: '#f8f9fa',\n                padding: '2px 8px',\n                borderRadius: '12px',\n                fontWeight: 500\n              }}>\n                {filteredWorkflows.length}\n              </span>\n            </div>\n          </div>\n          <Table\n            columns={dashboardColumns}\n            dataSource={filteredWorkflows}\n            rowKey=\"id\"\n            loading={dashboardLoading}\n            pagination={{\n              pageSize: PAGINATION.LARGE_PAGE_SIZE,\n              showSizeChanger: true,\n              showQuickJumper: true,\n              showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} items`,\n              style: { padding: '16px 24px', borderTop: '1px solid #e8e9ea' }\n            }}\n            size=\"middle\"\n            onRow={(record) => ({\n              onClick: () => {\n                setSelectedWorkflowId(record.id);\n                showWorkflowDetails(record);\n              },\n              style: {\n                cursor: 'pointer'\n              }\n            })}\n          />\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div style={{\n      padding: '0',\n      background: '#f5f5f5',\n      minHeight: '100vh'\n    }}>\n      {/* Clean Header */}\n      <div style={{\n        background: '#fff',\n        borderBottom: '1px solid #e8e9ea',\n        padding: '24px 40px',\n        marginBottom: '0'\n      }}>\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <div>\n            <Title level={2} style={{ color: '#1a1a1a', margin: 0, fontWeight: 600, fontSize: '24px' }}>\n              Workflow Management\n            </Title>\n          </div>\n          <div style={{\n            textAlign: 'right',\n            padding: '12px 20px',\n            background: '#f8f9fa',\n            borderRadius: '8px',\n            border: '1px solid #e9ecef'\n          }}>\n            <Text style={{ color: '#495057', fontSize: '14px', fontWeight: 500 }}>\n              {currentUser} ({userRole})\n            </Text>\n          </div>\n        </div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div style={{\n        background: '#fff',\n        borderBottom: '1px solid #e8e9ea',\n        marginBottom: '24px'\n      }}>\n        <Tabs\n          activeKey={activeTab}\n          onChange={handleTabChange}\n          size=\"large\"\n          style={{ margin: 0 }}\n          tabBarStyle={{\n            margin: 0,\n            padding: '0 24px',\n            background: 'transparent',\n            borderBottom: 'none'\n          }}\n        >\n          <TabPane\n            tab={\n              <span>\n                <DashboardOutlined />\n                Dashboard\n              </span>\n            }\n            key=\"dashboard\"\n          >\n            {renderDashboardTab()}\n          </TabPane>\n\n          <TabPane\n            tab={\n              <span>\n                <QuestionCircleOutlined />\n                Queries\n              </span>\n            }\n            key=\"queries\"\n          >\n            <Row gutter={[16, 16]}>\n              <Col span={24}>\n                <QueryWidget workflowId={selectedWorkflowId} userRole={userRole} />\n              </Col>\n            </Row>\n          </TabPane>\n        </Tabs>\n      </div>\n\n      {/* Workflow Details Modal */}\n      <Modal\n        title={\n          <Space>\n            <InfoCircleOutlined />\n            Workflow Details\n            {selectedWorkflow && (\n              <Badge count={selectedWorkflow.id} style={{ backgroundColor: '#1890ff' }} />\n            )}\n          </Space>\n        }\n        open={detailsModalVisible}\n        onCancel={closeDetailsModal}\n        footer={[\n          <Button key=\"close\" onClick={closeDetailsModal}>\n            Close\n          </Button>,\n          selectedWorkflow && (\n            <Button\n              key=\"questionnaire\"\n              type=\"primary\"\n              icon={<FileTextOutlined />}\n              onClick={() => {\n                openQuestionnaire(selectedWorkflow.id);\n                closeDetailsModal();\n              }}\n            >\n              Open Questionnaire\n            </Button>\n          ),\n          selectedWorkflow && (\n            <Button\n              key=\"excel-report\"\n              type=\"default\"\n              style={{ backgroundColor: '#52c41a', borderColor: '#52c41a', color: 'white' }}\n              onClick={() => {\n                downloadExcelReport(selectedWorkflow.id);\n                closeDetailsModal();\n              }}\n            >\n              Download Excel Report\n            </Button>\n          )\n        ]}\n        width={800}\n      >\n        {selectedWorkflow && (\n          <Descriptions column={2} bordered size=\"small\">\n            <Descriptions.Item label=\"Workflow ID\">{selectedWorkflow.id}</Descriptions.Item>\n            <Descriptions.Item label=\"Status\">\n              <Tag color=\"blue\">{selectedWorkflow.state}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Material Code\">\n              {selectedWorkflow.materialCode}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Material Name\">\n              {selectedWorkflow.materialName || 'Not available'}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Project Code\">\n              {selectedWorkflow.projectCode}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Assigned Plant\">\n              <Tag color=\"green\">{selectedWorkflow.assignedPlant}</Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Days Pending\">\n              <Tag color={(selectedWorkflow.daysPending || 0) > 7 ? 'red' : 'green'}>\n                {selectedWorkflow.daysPending || 0} days\n              </Tag>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Initiated By\">\n              {selectedWorkflow.initiatedBy}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Created At\">\n              {selectedWorkflow.createdAt\n                ? new Date(selectedWorkflow.createdAt).toLocaleString()\n                : 'N/A'}\n            </Descriptions.Item>\n          </Descriptions>\n        )}\n      </Modal>\n\n      {/* Questionnaire Modal */}\n      <Modal\n        title=\"QRMFG Questionnaire Viewer\"\n        open={questionnaireModalVisible}\n        onCancel={() => setQuestionnaireModalVisible(false)}\n        footer={null}\n        width=\"90%\"\n        style={{ top: 20 }}\n        bodyStyle={{ padding: 0, height: 'calc(100vh - 200px)', overflow: 'hidden' }}\n      >\n        {questionnaireWorkflowId && (\n          <div style={{ height: '100%', overflow: 'auto' }}>\n            <QuestionnaireViewerPage\n              workflowId={questionnaireWorkflowId}\n              onClose={() => setQuestionnaireModalVisible(false)}\n            />\n          </div>\n        )}\n      </Modal>\n    </div>\n  );\n};\n\nexport default WorkflowPage;"],"names":["UI_CONFIG","MOBILE_BREAKPOINT","TABLET_BREAKPOINT","PAGE_SIZE","DEBOUNCE_DELAY","WORKFLOW_STATES","INITIATED","IN_PROGRESS","PENDING_REVIEW","APPROVED","REJECTED","COMPLETED","PRIORITY_LEVELS","LOW","MEDIUM","HIGH","URGENT","CRITICAL","FILE_SIZE","MAX_UPLOAD_SIZE","BYTES_PER_KB","BYTES_PER_MB","BYTES_PER_GB","WORKFLOW_SPECIFIC_STATES","JVC_PENDING","PLANT_PENDING","CQS_PENDING","TECH_PENDING","DRAFT","QUERY_STATUS","OPEN","RESOLVED","CLOSED","QUERY_STATUS_GROUPS","ACTIVE","INACTIVE","TEAM_NAMES","CQS","TECH","JVC","PLANT","AUTO_SAVE","INTERVAL","PAGINATION","DEFAULT_PAGE_SIZE","SMALL_PAGE_SIZE","LARGE_PAGE_SIZE","SHOW_SIZE_CHANGER","SHOW_QUICK_JUMPER","COMPLETION_FILTERS","ALL","NOT_STARTED","TAB_KEYS","INITIATE","PENDING","QUERIES","HISTORY","queryAPI","createQuery","workflowId","queryData","apiClient","post","getQuery","id","get","updateQuery","put","deleteQuery","delete","resolveQuery","resolutionData","reopenQuery","reason","assignQuery","assignmentData","reassignQuery","newTeam","team","getAllQueries","getQueriesByWorkflow","getQueriesByTeam","getQueriesByStatus","status","getQueriesByUser","_username","searchQueries","searchParams","queryString","URLSearchParams","toString","getQueryStats","timeRange","getQueryCountsByTeam","getAvgResolutionTimeByTeam","getOverdueQueries","getOverdueQueriesCountByTeam","getQueriesResolvedTodayByTeam","getQuerySLAStatus","getQueriesNearingSLA","addQueryComment","comment","getQueryComments","updateQueryPriority","priority","escalateQuery","_escalationReason","priorityLevel","uploadQueryDocuments","queryId","files","upload","uploadResponseDocuments","responseId","getQueryDocuments","downloadQueryDocument","documentId","download","deleteQueryDocument","closeQuery","canPlantEditForm","getQueryStatusSummary","TabPane","Tabs","TextArea","Input","Option","Select","_ref","userRole","loading","setLoading","useState","queries","setQueries","all","open","resolved","myQueries","filteredQueries","setFilteredQueries","createModalVisible","setCreateModalVisible","resolveModalVisible","setResolveModalVisible","selectedQuery","setSelectedQuery","form","Form","useForm","resolveForm","isMobile","useResponsive","screenSize","setScreenSize","window","innerWidth","isTablet","isDesktop","useEffect","handleResize","addEventListener","removeEventListener","filters","setFilters","dateRange","materialCode","projectCode","plantCode","controller","AbortController","async","allQueries","signal","aborted","queriesData","filter","q","includes","createdBy","getCurrentUser","error","console","loadQueriesWithAbort","abort","loadQueries","useCallback","localStorage","getItem","applyFilters","filterQueries","queryList","query","_query$materialCode","_query$assignedPlant","assignedTeam","toLowerCase","assignedPlant","queryDate","Date","createdAt","now","startDate","getFullYear","getMonth","getDate","getTime","getStatusColor","getTeamColor","getQueryColumns","title","dataIndex","key","width","fixed","ellipsis","render","text","_jsx","children","length","substring","Tag","color","size","statusDisplayNames","responsive","date","d","toLocaleDateString","month","day","_","record","_jsxs","Space","canResolveQuery","Button","type","onClick","getTabCount","Card","extra","icon","ReloadOutlined","PlusOutlined","style","marginBottom","background","Row","gutter","align","Col","xs","sm","md","placeholder","value","onChange","e","target","FilterOutlined","defaultActiveKey","className","tab","Badge","count","Table","dataSource","columns","pagination","pageSize","rowKey","scroll","x","undefined","Modal","onCancel","resetFields","onOk","submit","layout","onFinish","values","Item","name","label","rules","required","message","help","rows","initialValue","_Fragment","padding","borderRadius","question","fieldContext","resolution","resolvedBy","Title","Text","Typography","RangePicker","DatePicker","WorkflowPage","useNavigate","activeTab","setActiveTab","selectedWorkflowId","setSelectedWorkflowId","selectedWorkflow","setSelectedWorkflow","detailsModalVisible","setDetailsModalVisible","questionnaireModalVisible","setQuestionnaireModalVisible","questionnaireWorkflowId","setQuestionnaireWorkflowId","allWorkflows","setAllWorkflows","filteredWorkflows","setFilteredWorkflows","dashboardLoading","setDashboardLoading","dateFilter","setDateFilter","customDateRange","setCustomDateRange","currentUser","getUserRole","log","applyDateFilter","workflows","customRange","safeWorkflows","Array","isArray","toDate","endDate","filtered","w","workflowDate","fetchAllWorkflows","response","safeResponse","handleDateFilterChange","handleCustomDateRangeChange","dates","openQuestionnaire","downloadExcelReport","responseType","url","URL","createObjectURL","Blob","link","document","createElement","href","body","appendChild","click","revokeObjectURL","removeChild","success","closeDetailsModal","dashboardColumns","fontFamily","fontSize","fontWeight","border","strong","plant","state","config","FileTextOutlined","backgroundColor","borderColor","minHeight","borderBottom","display","justifyContent","alignItems","level","margin","textAlign","activeKey","tabBarStyle","DashboardOutlined","renderDashboardTab","analytics","total","completed","jvcPending","plantPending","cqsPending","techPending","overdue","daysPending","lg","xl","boxShadow","bodyStyle","gap","showSizeChanger","showQuickJumper","showTotal","range","borderTop","onRow","cursor","QuestionCircleOutlined","span","QueryWidget","InfoCircleOutlined","footer","Descriptions","column","bordered","materialName","initiatedBy","toLocaleString","top","height","overflow","QuestionnaireViewerPage","onClose"],"sourceRoot":""}