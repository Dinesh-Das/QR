{"version":3,"file":"static/js/173.dabf678c.chunk.js","mappings":"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","sources":["components/MaterialContextDisplay.js","components/QueryDocumentList.js","components/QueryInbox.js","components/QueryHistoryTracker.js"],"sourcesContent":["import {\n  InfoCircleOutlined,\n  FileTextOutlined,\n  SafetyCertificateOutlined,\n  ExperimentOutlined\n} from '@ant-design/icons';\nimport { Card, Descriptions, Tag, Spin, Alert, Collapse, Typography, Space, Button } from 'antd';\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport apiClient from '../api/client';\n\nconst { Panel } = Collapse;\nconst { Text } = Typography;\n\nconst MaterialContextDisplay = ({ materialCode, workflowId, compact = false }) => {\n  const [loading, setLoading] = useState(false);\n  const [materialData, setMaterialData] = useState(null);\n  const [workflowData, setWorkflowData] = useState(null);\n  const [error, setError] = useState(null);\n\n  const loadMaterialContext = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const promises = [];\n\n      if (workflowId) {\n        promises.push(\n          apiClient.get(`/workflows/${workflowId}`).then(data => setWorkflowData(data))\n        );\n      }\n\n      if (materialCode) {\n        // In a real implementation, this would fetch material details from a materials API\n        promises.push(\n          Promise.resolve({\n            id: materialCode,\n            name: `Material ${materialCode}`,\n            description: 'Sample material description',\n            category: 'Chemical',\n            supplier: 'Sample Supplier',\n            hazardClass: 'Class 3',\n            physicalState: 'Liquid',\n            flashPoint: '25°C',\n            autoIgnitionTemp: '300°C',\n            density: '0.85 g/cm³',\n            solubility: 'Soluble in water',\n            ph: '7.2',\n            viscosity: '2.5 cP'\n          }).then(data => setMaterialData(data))\n        );\n      }\n\n      await Promise.all(promises);\n    } catch (error) {\n      console.error('Failed to load material context:', error);\n      setError('Failed to load material information');\n    } finally {\n      setLoading(false);\n    }\n  }, [workflowId, materialCode]);\n\n  useEffect(() => {\n    if (materialCode || workflowId) {\n      loadMaterialContext();\n    }\n  }, [materialCode, workflowId, loadMaterialContext]);\n\n  const getWorkflowStateColor = state => {\n    const colors = {\n      JVC_PENDING: 'blue',\n      PLANT_PENDING: 'orange',\n      CQS_PENDING: 'red',\n      TECH_PENDING: 'purple',\n      COMPLETED: 'green'\n    };\n    return colors[state] || 'default';\n  };\n\n  const getHazardClassColor = hazardClass => {\n    const colors = {\n      'Class 1': 'red',\n      'Class 2': 'orange',\n      'Class 3': 'yellow',\n      'Class 4': 'blue',\n      'Class 5': 'green',\n      'Class 6': 'purple',\n      'Class 7': 'magenta',\n      'Class 8': 'cyan',\n      'Class 9': 'lime'\n    };\n    return colors[hazardClass] || 'default';\n  };\n\n  if (loading) {\n    return (\n      <Card size=\"small\">\n        <div style={{ textAlign: 'center', padding: '20px' }}>\n          <Spin size=\"small\" />\n          <div style={{ marginTop: 8 }}>Loading material context...</div>\n        </div>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert message=\"Context Error\" description={error} type=\"warning\" showIcon size=\"small\" />\n    );\n  }\n\n  if (compact) {\n    return (\n      <Card size=\"small\" title=\"Material Context\" style={{ marginBottom: 16 }}>\n        <Space direction=\"vertical\" style={{ width: '100%' }}>\n          {materialData && (\n            <div>\n              <Text strong>Material:</Text> {materialData.name} ({materialData.id})\n              <br />\n              <Text strong>Category:</Text> {materialData.category}\n              <br />\n              <Text strong>Hazard Class:</Text>{' '}\n              <Tag color={getHazardClassColor(materialData.hazardClass)}>\n                {materialData.hazardClass}\n              </Tag>\n            </div>\n          )}\n\n          {workflowData && (\n            <div>\n              <Text strong>Workflow State:</Text>{' '}\n              <Tag color={getWorkflowStateColor(workflowData.state)}>\n                {workflowData.state?.replace('_', ' ')}\n              </Tag>\n              <br />\n              <Text strong>Plant:</Text> {workflowData.assignedPlant}\n            </div>\n          )}\n        </Space>\n      </Card>\n    );\n  }\n\n  return (\n    <Card\n      title={\n        <Space>\n          <InfoCircleOutlined />\n          <span>Material Context</span>\n        </Space>\n      }\n      size=\"small\"\n      style={{ marginBottom: 16 }}\n    >\n      <Collapse size=\"small\" ghost>\n        {materialData && (\n          <Panel\n            header={\n              <Space>\n                <ExperimentOutlined />\n                <span>Material Properties</span>\n              </Space>\n            }\n            key=\"material\"\n          >\n            <Descriptions size=\"small\" column={2} bordered>\n              <Descriptions.Item label=\"Material ID\">{materialData.id}</Descriptions.Item>\n              <Descriptions.Item label=\"Name\">{materialData.name}</Descriptions.Item>\n              <Descriptions.Item label=\"Category\">\n                <Tag color=\"blue\">{materialData.category}</Tag>\n              </Descriptions.Item>\n              <Descriptions.Item label=\"Supplier\">{materialData.supplier}</Descriptions.Item>\n              <Descriptions.Item label=\"Hazard Class\">\n                <Tag color={getHazardClassColor(materialData.hazardClass)}>\n                  {materialData.hazardClass}\n                </Tag>\n              </Descriptions.Item>\n              <Descriptions.Item label=\"Physical State\">\n                {materialData.physicalState}\n              </Descriptions.Item>\n              <Descriptions.Item label=\"Flash Point\">\n                <Text type=\"danger\">{materialData.flashPoint}</Text>\n              </Descriptions.Item>\n              <Descriptions.Item label=\"Auto-Ignition Temp\">\n                <Text type=\"danger\">{materialData.autoIgnitionTemp}</Text>\n              </Descriptions.Item>\n              <Descriptions.Item label=\"Density\">{materialData.density}</Descriptions.Item>\n              <Descriptions.Item label=\"Solubility\">{materialData.solubility}</Descriptions.Item>\n              <Descriptions.Item label=\"pH\">{materialData.ph}</Descriptions.Item>\n              <Descriptions.Item label=\"Viscosity\">{materialData.viscosity}</Descriptions.Item>\n            </Descriptions>\n\n            {materialData.description && (\n              <div style={{ marginTop: 12 }}>\n                <Text strong>Description:</Text>\n                <div\n                  style={{\n                    marginTop: 4,\n                    padding: 8,\n                    background: '#f5f5f5',\n                    borderRadius: 4\n                  }}\n                >\n                  {materialData.description}\n                </div>\n              </div>\n            )}\n          </Panel>\n        )}\n\n        {workflowData && (\n          <Panel\n            header={\n              <Space>\n                <FileTextOutlined />\n                <span>Workflow Information</span>\n              </Space>\n            }\n            key=\"workflow\"\n          >\n            <Descriptions size=\"small\" column={2} bordered>\n              <Descriptions.Item label=\"Workflow ID\">{workflowData.id}</Descriptions.Item>\n              <Descriptions.Item label=\"Current State\">\n                <Tag color={getWorkflowStateColor(workflowData.state)}>\n                  {workflowData.state?.replace('_', ' ')}\n                </Tag>\n              </Descriptions.Item>\n              <Descriptions.Item label=\"Assigned Plant\">\n                {workflowData.assignedPlant}\n              </Descriptions.Item>\n              <Descriptions.Item label=\"Initiated By\">{workflowData.initiatedBy}</Descriptions.Item>\n              <Descriptions.Item label=\"Created\">\n                {workflowData.createdAt && new Date(workflowData.createdAt).toLocaleString()}\n              </Descriptions.Item>\n              <Descriptions.Item label=\"Last Modified\">\n                {workflowData.lastModified && new Date(workflowData.lastModified).toLocaleString()}\n              </Descriptions.Item>\n            </Descriptions>\n          </Panel>\n        )}\n\n        <Panel\n          header={\n            <Space>\n              <SafetyCertificateOutlined />\n              <span>Safety Guidelines</span>\n            </Space>\n          }\n          key=\"safety\"\n        >\n          <Alert\n            message=\"Safety Reminders\"\n            description={\n              <ul style={{ marginBottom: 0, paddingLeft: 20 }}>\n                <li>Always verify material properties before providing guidance</li>\n                <li>Consider plant-specific safety protocols and equipment</li>\n                <li>Reference latest SDS (Safety Data Sheet) when available</li>\n                <li>Escalate to safety team for Class 1-2 hazardous materials</li>\n                <li>Ensure compliance with local and international regulations</li>\n              </ul>\n            }\n            type=\"info\"\n            showIcon\n          />\n        </Panel>\n      </Collapse>\n\n      <div style={{ marginTop: 12, textAlign: 'right' }}>\n        <Button size=\"small\" icon={<InfoCircleOutlined />} onClick={loadMaterialContext}>\n          Refresh Context\n        </Button>\n      </div>\n    </Card>\n  );\n};\n\nexport default MaterialContextDisplay;\n","import {\n  FileTextOutlined,\n  DownloadOutlined,\n  DeleteOutlined,\n  FolderOpenOutlined,\n  QuestionCircleOutlined,\n  MessageOutlined,\n  CalendarOutlined,\n  UserOutlined,\n  FileOutlined\n} from '@ant-design/icons';\nimport {\n  Card,\n  List,\n  Button,\n  Space,\n  Typography,\n  Tag,\n  Divider,\n  Empty,\n  message,\n  Popconfirm,\n  Tooltip,\n  Alert,\n  Spin\n} from 'antd';\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport { queryAPI } from '../services/queryAPI';\n\n\nconst { Text, Title } = Typography;\n\n/**\n * QueryDocumentList Component\n * \n * Displays all documents associated with a query, including:\n * - Documents attached to the original query\n * - Documents attached to query responses\n * - Grouped display with clear source indicators\n * - Download functionality with proper error handling\n * - Document metadata (size, type, upload date, uploader)\n * \n * @param {Object} props\n * @param {string} props.queryId - Query ID to fetch documents for\n * @param {boolean} props.allowDelete - Whether to show delete buttons (default: false)\n * @param {Function} props.onDocumentDeleted - Callback when document is deleted\n * @param {boolean} props.showBulkActions - Whether to show bulk action buttons (default: true)\n * @param {string} props.currentUser - Current user for permission checks\n */\nconst QueryDocumentList = ({\n  queryId,\n  allowDelete = false,\n  onDocumentDeleted,\n  showBulkActions = true,\n  currentUser\n}) => {\n  const [documents, setDocuments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [downloadingIds, setDownloadingIds] = useState(new Set());\n  const [deletingIds, setDeletingIds] = useState(new Set());\n\n  // Fetch documents on component mount and when queryId changes\n  useEffect(() => {\n    if (queryId) {\n      fetchDocuments();\n    }\n  }, [queryId, fetchDocuments]);\n\n  // Fetch all documents for the query\n  const fetchDocuments = useCallback(async () => {\n    try {\n      setLoading(true);\n      const result = await queryAPI.getQueryDocuments(queryId);\n      setDocuments(result || []);\n    } catch (error) {\n      console.error('Error fetching query documents:', error);\n      message.error('Failed to load documents. Please try again.');\n      setDocuments([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [queryId]);\n\n  // Format file size for display\n  const formatFileSize = (bytes) => {\n    if (!bytes || bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;\n  };\n\n  // Format date for display\n  const formatDate = (dateString) => {\n    if (!dateString) return 'Unknown';\n    try {\n      return new Date(dateString).toLocaleDateString('en-GB', {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    } catch (error) {\n      return 'Invalid Date';\n    }\n  };\n\n  // Get file type icon based on file extension\n  const getFileIcon = (fileName) => {\n    if (!fileName) return <FileOutlined />;\n    \n    const extension = fileName.toLowerCase().split('.').pop();\n    const iconStyle = { fontSize: '16px' };\n    \n    switch (extension) {\n      case 'pdf':\n        return <FileTextOutlined style={{ ...iconStyle, color: '#ff4d4f' }} />;\n      case 'doc':\n      case 'docx':\n        return <FileTextOutlined style={{ ...iconStyle, color: '#1890ff' }} />;\n      case 'xls':\n      case 'xlsx':\n        return <FileTextOutlined style={{ ...iconStyle, color: '#52c41a' }} />;\n      case 'jpg':\n      case 'jpeg':\n      case 'png':\n        return <FileOutlined style={{ ...iconStyle, color: '#722ed1' }} />;\n      default:\n        return <FileOutlined style={iconStyle} />;\n    }\n  };\n\n  // Handle document download\n  const handleDownload = async (document) => {\n    try {\n      setDownloadingIds(prev => new Set([...prev, document.id]));\n      \n      const blob = await queryAPI.downloadQueryDocument(queryId, document.id);\n      \n      // Create download link\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = document.originalFileName || document.fileName;\n      document.body.appendChild(link);\n      link.click();\n      \n      // Cleanup\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(link);\n      \n      message.success(`Downloaded ${document.originalFileName || document.fileName}`);\n    } catch (error) {\n      console.error('Error downloading document:', error);\n      message.error('Failed to download document. Please try again.');\n    } finally {\n      setDownloadingIds(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(document.id);\n        return newSet;\n      });\n    }\n  };\n\n  // Handle document deletion\n  const handleDelete = async (document) => {\n    try {\n      setDeletingIds(prev => new Set([...prev, document.id]));\n      \n      await queryAPI.deleteQueryDocument(queryId, document.id);\n      \n      message.success(`Deleted ${document.originalFileName || document.fileName}`);\n      \n      // Remove from local state\n      setDocuments(prev => prev.filter(doc => doc.id !== document.id));\n      \n      // Notify parent component\n      if (onDocumentDeleted) {\n        onDocumentDeleted(document);\n      }\n    } catch (error) {\n      console.error('Error deleting document:', error);\n      message.error('Failed to delete document. Please try again.');\n    } finally {\n      setDeletingIds(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(document.id);\n        return newSet;\n      });\n    }\n  };\n\n  // Handle bulk download\n  const handleBulkDownload = async () => {\n    if (documents.length === 0) {\n      message.warning('No documents to download.');\n      return;\n    }\n\n    message.info(`Starting download of ${documents.length} documents...`);\n    \n    for (const doc of documents) {\n      try {\n        await handleDownload(doc);\n        // Small delay between downloads to avoid overwhelming the server\n        await new Promise(resolve => setTimeout(resolve, 500));\n      } catch (error) {\n        console.error(`Failed to download ${doc.originalFileName}:`, error);\n      }\n    }\n  };\n\n  // Group documents by source (query vs response)\n  const groupedDocuments = documents.reduce((groups, doc) => {\n    const source = doc.responseId ? 'response' : 'query';\n    if (!groups[source]) {\n      groups[source] = [];\n    }\n    groups[source].push(doc);\n    return groups;\n  }, {});\n\n  // Check if user can delete document\n  const canDeleteDocument = (document) => {\n    if (!allowDelete) return false;\n    if (!currentUser) return false;\n    return document.uploadedBy === currentUser || currentUser.role === 'ADMIN';\n  };\n\n  if (loading) {\n    return (\n      <Card>\n        <div style={{ textAlign: 'center', padding: '20px' }}>\n          <Spin size=\"large\" />\n          <div style={{ marginTop: '16px' }}>\n            <Text type=\"secondary\">Loading documents...</Text>\n          </div>\n        </div>\n      </Card>\n    );\n  }\n\n  if (documents.length === 0) {\n    return (\n      <Card>\n        <Empty\n          image={Empty.PRESENTED_IMAGE_SIMPLE}\n          description={\n            <Space direction=\"vertical\">\n              <Text type=\"secondary\">No documents attached to this query</Text>\n              <Text type=\"secondary\" style={{ fontSize: '12px' }}>\n                Documents can be attached when creating queries or responding to them\n              </Text>\n            </Space>\n          }\n        />\n      </Card>\n    );\n  }\n\n  return (\n    <Card\n      title={\n        <Space>\n          <FolderOpenOutlined />\n          <span>Query Documents ({documents.length})</span>\n        </Space>\n      }\n      extra={\n        showBulkActions && documents.length > 0 && (\n          <Space>\n            <Button\n              icon={<DownloadOutlined />}\n              onClick={handleBulkDownload}\n              size=\"small\"\n            >\n              Download All\n            </Button>\n          </Space>\n        )\n      }\n    >\n      <Space direction=\"vertical\" style={{ width: '100%' }}>\n        {/* Summary Alert */}\n        <Alert\n          message={`${documents.length} document(s) attached to this query`}\n          description={\n            <Space>\n              {groupedDocuments.query && (\n                <Text type=\"secondary\">\n                  {groupedDocuments.query.length} from original query\n                </Text>\n              )}\n              {groupedDocuments.response && (\n                <Text type=\"secondary\">\n                  {groupedDocuments.response.length} from responses\n                </Text>\n              )}\n            </Space>\n          }\n          type=\"info\"\n          showIcon\n          size=\"small\"\n        />\n\n        {/* Original Query Documents */}\n        {groupedDocuments.query && groupedDocuments.query.length > 0 && (\n          <>\n            <Title level={5}>\n              <QuestionCircleOutlined style={{ color: '#1890ff' }} />\n              <span style={{ marginLeft: '8px' }}>\n                Original Query Documents ({groupedDocuments.query.length})\n              </span>\n            </Title>\n            \n            <List\n              size=\"small\"\n              dataSource={groupedDocuments.query}\n              renderItem={document => (\n                <List.Item\n                  actions={[\n                    <Tooltip title=\"Download document\" key=\"download\">\n                      <Button\n                        type=\"text\"\n                        icon={<DownloadOutlined />}\n                        onClick={() => handleDownload(document)}\n                        loading={downloadingIds.has(document.id)}\n                        size=\"small\"\n                      />\n                    </Tooltip>,\n                    ...(canDeleteDocument(document) ? [\n                      <Popconfirm\n                        key=\"delete\"\n                        title=\"Delete Document\"\n                        description=\"Are you sure you want to delete this document?\"\n                        onConfirm={() => handleDelete(document)}\n                        okText=\"Yes\"\n                        cancelText=\"No\"\n                        icon={<QuestionCircleOutlined style={{ color: 'red' }} />}\n                      >\n                        <Tooltip title=\"Delete document\">\n                          <Button\n                            type=\"text\"\n                            danger\n                            icon={<DeleteOutlined />}\n                            loading={deletingIds.has(document.id)}\n                            size=\"small\"\n                          />\n                        </Tooltip>\n                      </Popconfirm>\n                    ] : [])\n                  ]}\n                >\n                  <List.Item.Meta\n                    avatar={getFileIcon(document.originalFileName)}\n                    title={\n                      <Space>\n                        <Text strong>{document.originalFileName || document.fileName}</Text>\n                        <Tag color=\"blue\" size=\"small\">Query</Tag>\n                      </Space>\n                    }\n                    description={\n                      <Space direction=\"vertical\" size=\"small\">\n                        <Space size=\"large\">\n                          <Text type=\"secondary\">\n                            <FileOutlined style={{ marginRight: '4px' }} />\n                            {formatFileSize(document.fileSize)}\n                          </Text>\n                          <Text type=\"secondary\">\n                            <CalendarOutlined style={{ marginRight: '4px' }} />\n                            {formatDate(document.uploadedAt)}\n                          </Text>\n                          <Text type=\"secondary\">\n                            <UserOutlined style={{ marginRight: '4px' }} />\n                            {document.uploadedBy || 'Unknown'}\n                          </Text>\n                        </Space>\n                      </Space>\n                    }\n                  />\n                </List.Item>\n              )}\n            />\n          </>\n        )}\n\n        {/* Response Documents */}\n        {groupedDocuments.response && groupedDocuments.response.length > 0 && (\n          <>\n            {groupedDocuments.query && <Divider />}\n            \n            <Title level={5}>\n              <MessageOutlined style={{ color: '#52c41a' }} />\n              <span style={{ marginLeft: '8px' }}>\n                Response Documents ({groupedDocuments.response.length})\n              </span>\n            </Title>\n            \n            <List\n              size=\"small\"\n              dataSource={groupedDocuments.response}\n              renderItem={document => (\n                <List.Item\n                  actions={[\n                    <Tooltip title=\"Download document\" key=\"download\">\n                      <Button\n                        type=\"text\"\n                        icon={<DownloadOutlined />}\n                        onClick={() => handleDownload(document)}\n                        loading={downloadingIds.has(document.id)}\n                        size=\"small\"\n                      />\n                    </Tooltip>,\n                    ...(canDeleteDocument(document) ? [\n                      <Popconfirm\n                        key=\"delete\"\n                        title=\"Delete Document\"\n                        description=\"Are you sure you want to delete this document?\"\n                        onConfirm={() => handleDelete(document)}\n                        okText=\"Yes\"\n                        cancelText=\"No\"\n                        icon={<QuestionCircleOutlined style={{ color: 'red' }} />}\n                      >\n                        <Tooltip title=\"Delete document\">\n                          <Button\n                            type=\"text\"\n                            danger\n                            icon={<DeleteOutlined />}\n                            loading={deletingIds.has(document.id)}\n                            size=\"small\"\n                          />\n                        </Tooltip>\n                      </Popconfirm>\n                    ] : [])\n                  ]}\n                >\n                  <List.Item.Meta\n                    avatar={getFileIcon(document.originalFileName)}\n                    title={\n                      <Space>\n                        <Text strong>{document.originalFileName || document.fileName}</Text>\n                        <Tag color=\"green\" size=\"small\">Response</Tag>\n                        {document.responseId && (\n                          <Tag color=\"orange\" size=\"small\">#{document.responseId}</Tag>\n                        )}\n                      </Space>\n                    }\n                    description={\n                      <Space direction=\"vertical\" size=\"small\">\n                        <Space size=\"large\">\n                          <Text type=\"secondary\">\n                            <FileOutlined style={{ marginRight: '4px' }} />\n                            {formatFileSize(document.fileSize)}\n                          </Text>\n                          <Text type=\"secondary\">\n                            <CalendarOutlined style={{ marginRight: '4px' }} />\n                            {formatDate(document.uploadedAt)}\n                          </Text>\n                          <Text type=\"secondary\">\n                            <UserOutlined style={{ marginRight: '4px' }} />\n                            {document.uploadedBy || 'Unknown'}\n                          </Text>\n                        </Space>\n                      </Space>\n                    }\n                  />\n                </List.Item>\n              )}\n            />\n          </>\n        )}\n      </Space>\n    </Card>\n  );\n};\n\nexport default QueryDocumentList;","import {\r\n  MessageOutlined,\r\n  ClockCircleOutlined,\r\n  ExclamationCircleOutlined,\r\n  CheckCircleOutlined,\r\n  FilterOutlined,\r\n  ReloadOutlined,\r\n  EyeOutlined,\r\n  PaperClipOutlined\r\n} from '@ant-design/icons';\r\nimport {\r\n  Card,\r\n  Table,\r\n  Tag,\r\n  Button,\r\n  Space,\r\n  Modal,\r\n  Form,\r\n  Input,\r\n  Select,\r\n  Alert,\r\n  Row,\r\n  Col,\r\n  Statistic,\r\n  Progress,\r\n  Typography,\r\n  Divider,\r\n  message\r\n} from 'antd';\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\n\r\nimport apiClient from '../api/client';\r\nimport { PAGINATION, QUERY_STATUS, TEAM_NAMES, PRIORITY_LEVELS } from '../constants';\r\n\r\nimport { AsyncErrorBoundary, ComponentErrorBoundary } from './ErrorBoundaries';\r\nimport MaterialContextDisplay from './MaterialContextDisplay';\r\nimport QueryDocumentList from './QueryDocumentList';\r\nimport QueryDocumentUpload from './QueryDocumentUpload';\r\nimport QueryHistoryTracker from './QueryHistoryTracker';\r\n\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\nconst { Text, Title } = Typography;\r\n\r\nconst QueryInbox = ({ team }) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [queries, setQueries] = useState([]);\r\n  const [filteredQueries, setFilteredQueries] = useState([]);\r\n  const [selectedQuery, setSelectedQuery] = useState(null);\r\n  const [queryModalVisible, setQueryModalVisible] = useState(false);\r\n  const [resolveForm] = Form.useForm();\r\n  const [responseDocuments, setResponseDocuments] = useState([]);\r\n  const [responseId, setResponseId] = useState(null);\r\n  const [queryDocuments, setQueryDocuments] = useState([]);\r\n  const [filters, setFilters] = useState({\r\n    status: 'all',\r\n    priority: 'all',\r\n    material: '',\r\n    daysOpen: 'all',\r\n    project: '',\r\n    plant: '',\r\n    assignedTeam: 'all',\r\n    hasAttachments: 'all'\r\n  });\r\n  const [stats, setStats] = useState({\r\n    total: 0,\r\n    open: 0,\r\n    resolved: 0,\r\n    resolvedToday: 0,\r\n    overdue: 0,\r\n    avgResolutionTime: 0\r\n  });\r\n\r\n  // Define functions before useEffect hooks that depend on them\r\n  const loadQueries = useCallback(async signal => {\r\n    try {\r\n      setLoading(true);\r\n      const data = await apiClient.get(`/queries/inbox/${team}`, { signal });\r\n      if (!signal?.aborted) {\r\n        setQueries(data);\r\n      }\r\n    } catch (error) {\r\n      if (!signal?.aborted) {\r\n        console.error('Failed to load queries:', error);\r\n        message.error('Failed to load queries');\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [team]);\r\n\r\n  const loadStats = useCallback(async signal => {\r\n    try {\r\n      const [openCount, resolvedCount, resolvedTodayCount, overdueCount, avgTime] =\r\n        await Promise.all([\r\n          apiClient.get(`/queries/stats/count-open/${team}`, { signal }).catch(() => 0),\r\n          apiClient.get(`/queries/stats/count-resolved/${team}`, { signal }).catch(() => 0),\r\n          apiClient.get(`/queries/stats/resolved-today/${team}`, { signal }).catch(() => 0),\r\n          apiClient.get(`/queries/stats/overdue-count/${team}`, { signal }).catch(() => 0),\r\n          apiClient.get(`/queries/stats/avg-resolution-time/${team}`, { signal }).catch(() => 0)\r\n        ]);\r\n\r\n      if (!signal?.aborted) {\r\n        setStats({\r\n          total: openCount + resolvedCount,\r\n          open: openCount,\r\n          resolved: resolvedCount,\r\n          resolvedToday: resolvedTodayCount,\r\n          overdue: overdueCount,\r\n          avgResolutionTime: avgTime\r\n        });\r\n      }\r\n    } catch (error) {\r\n      if (!signal?.aborted) {\r\n        console.error('Failed to load stats:', error);\r\n      }\r\n    }\r\n  }, [team]);\r\n\r\n  const applyFilters = useCallback(() => {\r\n    let filtered = [...queries];\r\n\r\n    if (filters.status !== 'all') {\r\n      filtered = filtered.filter(q => q.status === filters.status);\r\n    }\r\n\r\n    if (filters.priority !== 'all') {\r\n      filtered = filtered.filter(q => q.priorityLevel === filters.priority);\r\n    }\r\n\r\n    if (filters.material) {\r\n      filtered = filtered.filter(\r\n        q =>\r\n          q.materialCode?.toLowerCase().includes(filters.material.toLowerCase()) ||\r\n          q.materialName?.toLowerCase().includes(filters.material.toLowerCase())\r\n      );\r\n    }\r\n\r\n    if (filters.project) {\r\n      filtered = filtered.filter(q =>\r\n        q.projectCode?.toLowerCase().includes(filters.project.toLowerCase())\r\n      );\r\n    }\r\n\r\n    if (filters.plant) {\r\n      filtered = filtered.filter(\r\n        q =>\r\n          q.plantCode?.toLowerCase().includes(filters.plant.toLowerCase())\r\n      );\r\n    }\r\n\r\n    if (filters.assignedTeam !== 'all') {\r\n      filtered = filtered.filter(q => q.assignedTeam === filters.assignedTeam);\r\n    }\r\n\r\n    if (filters.daysOpen !== 'all') {\r\n      const threshold = parseInt(filters.daysOpen);\r\n      filtered = filtered.filter(q => q.daysOpen >= threshold);\r\n    }\r\n\r\n    if (filters.hasAttachments !== 'all') {\r\n      if (filters.hasAttachments === 'with') {\r\n        filtered = filtered.filter(q => (q.documentCount || 0) > 0);\r\n      } else if (filters.hasAttachments === 'without') {\r\n        filtered = filtered.filter(q => (q.documentCount || 0) === 0);\r\n      }\r\n    }\r\n\r\n    setFilteredQueries(filtered);\r\n  }, [queries, filters]);\r\n\r\n  useEffect(() => {\r\n    const controller = new AbortController();\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        await Promise.all([loadQueries(controller.signal), loadStats(controller.signal)]);\r\n      } catch (error) {\r\n        if (!controller.signal.aborted) {\r\n          console.error('Error loading query inbox data:', error);\r\n        }\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n\r\n    return () => {\r\n      controller.abort();\r\n    };\r\n  }, [team, loadQueries, loadStats]);\r\n\r\n  useEffect(() => {\r\n    applyFilters();\r\n  }, [queries, filters, applyFilters]);\r\n\r\n  const handleResolveQuery = async values => {\r\n    try {\r\n      const resolveData = {\r\n        response: values.response,\r\n        priorityLevel: values.priorityLevel\r\n      };\r\n\r\n      const resolvedQuery = await apiClient.put(`/queries/${selectedQuery.id}/resolve`, resolveData);\r\n\r\n      // Set response ID for document uploads\r\n      if (resolvedQuery.responseId) {\r\n        setResponseId(resolvedQuery.responseId);\r\n      }\r\n\r\n      const documentMessage = responseDocuments.length > 0\r\n        ? ` with ${responseDocuments.length} document(s) attached`\r\n        : '';\r\n      message.success(`Query resolved successfully${documentMessage}`);\r\n\r\n      setQueryModalVisible(false);\r\n      resolveForm.resetFields();\r\n      setSelectedQuery(null);\r\n      setResponseDocuments([]);\r\n      setResponseId(null);\r\n      setQueryDocuments([]);\r\n      loadQueries();\r\n      loadStats();\r\n    } catch (error) {\r\n      console.error('Failed to resolve query:', error);\r\n      message.error('Failed to resolve query');\r\n    }\r\n  };\r\n\r\n  // Load query documents when a query is selected\r\n  const loadQueryDocuments = useCallback(async (queryId) => {\r\n    try {\r\n      const documents = await apiClient.get(`/queries/${queryId}/documents`);\r\n      setQueryDocuments(documents);\r\n    } catch (error) {\r\n      console.error('Failed to load query documents:', error);\r\n      setQueryDocuments([]);\r\n    }\r\n  }, []);\r\n\r\n  // Handle response document upload\r\n  const handleResponseDocumentUpload = (documents) => {\r\n    setResponseDocuments(prev => [...prev, ...documents]);\r\n    message.success(`${documents.length} document(s) uploaded to response`);\r\n  };\r\n\r\n  const getStatusColor = status => {\r\n    return status === QUERY_STATUS.OPEN ? 'red' : 'green';\r\n  };\r\n\r\n  const getPriorityColor = priority => {\r\n    const colors = {\r\n      LOW: 'blue',\r\n      MEDIUM: 'orange',\r\n      HIGH: 'red',\r\n      URGENT: 'purple'\r\n    };\r\n    return colors[priority] || 'default';\r\n  };\r\n\r\n  const getDaysOpenColor = days => {\r\n    if (days >= 3) {\r\n      return '#ff4d4f';\r\n    }\r\n    if (days >= 2) {\r\n      return '#faad14';\r\n    }\r\n    return '#52c41a';\r\n  };\r\n\r\n  const getSLAProgress = daysOpen => {\r\n    const slaThreshold = 3; // 3 days SLA\r\n    const progress = Math.min((daysOpen / slaThreshold) * 100, 100);\r\n    let status = 'normal';\r\n    if (progress >= 100) {\r\n      status = 'exception';\r\n    } else if (progress >= 80) {\r\n      status = 'active';\r\n    }\r\n\r\n    return { progress, status };\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Material Context',\r\n      dataIndex: 'materialCode',\r\n      key: 'materialContext',\r\n      width: 180,\r\n      render: (text, record) => (\r\n        <div>\r\n          <Text strong>{text}</Text>\r\n          {record.materialName && (\r\n            <div style={{ fontSize: '12px', color: '#666' }}>{record.materialName}</div>\r\n          )}\r\n          {record.projectCode && (\r\n            <div style={{ fontSize: '11px', color: '#999' }}>Project: {record.projectCode}</div>\r\n          )}\r\n          {record.plantCode && (\r\n            <div style={{ fontSize: '11px', color: '#999' }}>\r\n              Plant: {record.plantCode}\r\n            </div>\r\n          )}\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      title: 'Query',\r\n      dataIndex: 'question',\r\n      key: 'question',\r\n      width: 300,\r\n      ellipsis: true,\r\n      render: (text) => (\r\n        <div>\r\n          <Text style={{ color: '#1890ff' }}>\r\n            {text || 'No query text available'}\r\n          </Text>\r\n        </div>\r\n      )\r\n    },\r\n    {\r\n      title: 'Attachments',\r\n      key: 'attachments',\r\n      width: 100,\r\n      render: (_, record) => {\r\n        const documentCount = (record.documentCount || 0);\r\n        return documentCount > 0 ? (\r\n          <Space>\r\n            <PaperClipOutlined style={{ color: '#1890ff' }} />\r\n            <Text type=\"secondary\">{documentCount}</Text>\r\n          </Space>\r\n        ) : (\r\n          <Text type=\"secondary\">-</Text>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      title: 'Field',\r\n      dataIndex: 'fieldName',\r\n      key: 'fieldName',\r\n      width: 120,\r\n      render: (text) => (\r\n        text ? <Tag color=\"blue\">{text}</Tag> : <Text type=\"secondary\">-</Text>\r\n      )\r\n    },\r\n    {\r\n      title: 'Priority',\r\n      dataIndex: 'priorityLevel',\r\n      key: 'priorityLevel',\r\n      width: 80,\r\n      render: priority => (\r\n        <Tag color={getPriorityColor(priority)}>{priority || PRIORITY_LEVELS.MEDIUM}</Tag>\r\n      )\r\n    },\r\n    {\r\n      title: 'Status',\r\n      dataIndex: 'status',\r\n      key: 'status',\r\n      width: 80,\r\n      render: status => <Tag color={getStatusColor(status)}>{status}</Tag>\r\n    },\r\n    {\r\n      title: 'Days Open',\r\n      dataIndex: 'daysOpen',\r\n      key: 'daysOpen',\r\n      width: 100,\r\n      render: (days, _record) => {\r\n        const { progress, status } = getSLAProgress(days);\r\n        return (\r\n          <div>\r\n            <Text style={{ color: getDaysOpenColor(days) }}>{days} days</Text>\r\n            <Progress\r\n              percent={progress}\r\n              status={status}\r\n              size=\"small\"\r\n              showInfo={false}\r\n              style={{ marginTop: 4 }}\r\n            />\r\n          </div>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      title: 'Raised By',\r\n      dataIndex: 'raisedBy',\r\n      key: 'raisedBy',\r\n      width: 100\r\n    },\r\n    {\r\n      title: 'Actions',\r\n      key: 'actions',\r\n      width: 120,\r\n      render: (_, record) => (\r\n        <Space>\r\n          <Button\r\n            size=\"small\"\r\n            icon={<EyeOutlined />}\r\n            onClick={() => {\r\n              setSelectedQuery(record);\r\n              setQueryModalVisible(true);\r\n              loadQueryDocuments(record.id);\r\n            }}\r\n          >\r\n            View\r\n          </Button>\r\n        </Space>\r\n      )\r\n    }\r\n  ]; return\r\n  (\r\n    <ComponentErrorBoundary componentName=\"QueryInbox\">\r\n      <div>\r\n        {/* Team-Specific Statistics */}\r\n        <Alert\r\n          message={`${team} Team Statistics`}\r\n          description=\"All statistics below are specific to your team and update in real-time.\"\r\n          type=\"info\"\r\n          showIcon\r\n          style={{ marginBottom: 16 }}\r\n        />\r\n\r\n        {/* Statistics Cards - Team Specific */}\r\n        <AsyncErrorBoundary operation=\"query statistics loading\" onRetry={loadStats} maxRetries={3}>\r\n          <Row gutter={16} style={{ marginBottom: 16 }}>\r\n            <Col span={5}>\r\n              <Card>\r\n                <Statistic title=\"Total Queries\" value={stats.total} prefix={<MessageOutlined />} />\r\n              </Card>\r\n            </Col>\r\n            <Col span={5}>\r\n              <Card>\r\n                <Statistic\r\n                  title=\"Open Queries\"\r\n                  value={stats.open}\r\n                  valueStyle={{ color: '#cf1322' }}\r\n                  prefix={<ClockCircleOutlined />}\r\n                />\r\n              </Card>\r\n            </Col>\r\n            <Col span={5}>\r\n              <Card>\r\n                <Statistic\r\n                  title=\"Resolved Today\"\r\n                  value={stats.resolvedToday}\r\n                  valueStyle={{ color: '#3f8600' }}\r\n                  prefix={<CheckCircleOutlined />}\r\n                />\r\n              </Card>\r\n            </Col>\r\n            <Col span={5}>\r\n              <Card>\r\n                <Statistic\r\n                  title=\"Overdue\"\r\n                  value={stats.overdue}\r\n                  valueStyle={{ color: stats.overdue > 0 ? '#cf1322' : '#3f8600' }}\r\n                  prefix={<ExclamationCircleOutlined />}\r\n                />\r\n              </Card>\r\n            </Col>\r\n            <Col span={4}>\r\n              <Card>\r\n                <Statistic\r\n                  title=\"Avg Resolution Time\"\r\n                  value={stats.avgResolutionTime}\r\n                  suffix=\"hrs\"\r\n                  precision={1}\r\n                  prefix={<CheckCircleOutlined />}\r\n                />\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </AsyncErrorBoundary>\r\n\r\n        {/* Enhanced Filters */}\r\n        <Card size=\"small\" style={{ marginBottom: 16 }}>\r\n          <Row gutter={[16, 8]} align=\"middle\">\r\n            <Col span={4}>\r\n              <Select\r\n                placeholder=\"Status\"\r\n                value={filters.status}\r\n                onChange={value => setFilters({ ...filters, status: value })}\r\n                style={{ width: '100%' }}\r\n              >\r\n                <Option value=\"all\">All Status</Option>\r\n                <Option value=\"OPEN\">Open</Option>\r\n                <Option value=\"RESOLVED\">Resolved</Option>\r\n              </Select>\r\n            </Col>\r\n            <Col span={4}>\r\n              <Select\r\n                placeholder=\"Priority\"\r\n                value={filters.priority}\r\n                onChange={value => setFilters({ ...filters, priority: value })}\r\n                style={{ width: '100%' }}\r\n              >\r\n                <Option value=\"all\">All Priority</Option>\r\n                <Option value=\"LOW\">Low</Option>\r\n                <Option value=\"MEDIUM\">Medium</Option>\r\n                <Option value=\"HIGH\">High</Option>\r\n                <Option value=\"URGENT\">Urgent</Option>\r\n              </Select>\r\n            </Col>\r\n            <Col span={4}>\r\n              <Input\r\n                placeholder=\"Material ID/Name\"\r\n                value={filters.material}\r\n                onChange={e => setFilters({ ...filters, material: e.target.value })}\r\n              />\r\n            </Col>\r\n            <Col span={4}>\r\n              <Input\r\n                placeholder=\"Project Code\"\r\n                value={filters.project}\r\n                onChange={e => setFilters({ ...filters, project: e.target.value })}\r\n              />\r\n            </Col>\r\n            <Col span={4}>\r\n              <Input\r\n                placeholder=\"Plant\"\r\n                value={filters.plant}\r\n                onChange={e => setFilters({ ...filters, plant: e.target.value })}\r\n              />\r\n            </Col>\r\n            <Col span={4}>\r\n              <Select\r\n                placeholder=\"Team\"\r\n                value={filters.assignedTeam}\r\n                onChange={value => setFilters({ ...filters, assignedTeam: value })}\r\n                style={{ width: '100%' }}\r\n              >\r\n                <Option value=\"all\">All Teams</Option>\r\n                <Option value=\"CQS\">CQS</Option>\r\n                <Option value=\"TECH\">Tech</Option>\r\n                <Option value=\"JVC\">JVC</Option>\r\n              </Select>\r\n            </Col>\r\n            <Col span={4}>\r\n              <Select\r\n                placeholder=\"Attachments\"\r\n                value={filters.hasAttachments}\r\n                onChange={value => setFilters({ ...filters, hasAttachments: value })}\r\n                style={{ width: '100%' }}\r\n              >\r\n                <Option value=\"all\">All Queries</Option>\r\n                <Option value=\"with\">With Attachments</Option>\r\n                <Option value=\"without\">Without Attachments</Option>\r\n              </Select>\r\n            </Col>\r\n            <Col span={4}>\r\n              <Select\r\n                placeholder=\"Days Open\"\r\n                value={filters.daysOpen}\r\n                onChange={value => setFilters({ ...filters, daysOpen: value })}\r\n                style={{ width: '100%' }}\r\n              >\r\n                <Option value=\"all\">All</Option>\r\n                <Option value=\"1\">1+ days</Option>\r\n                <Option value=\"2\">2+ days</Option>\r\n                <Option value=\"3\">3+ days (Overdue)</Option>\r\n              </Select>\r\n            </Col>\r\n            <Col span={8}>\r\n              <Space>\r\n                <Button\r\n                  icon={<ReloadOutlined />}\r\n                  onClick={() => {\r\n                    loadQueries();\r\n                    loadStats();\r\n                  }}\r\n                >\r\n                  Refresh\r\n                </Button>\r\n                <Button\r\n                  icon={<FilterOutlined />}\r\n                  onClick={() =>\r\n                    setFilters({\r\n                      status: 'all',\r\n                      priority: 'all',\r\n                      material: '',\r\n                      daysOpen: 'all',\r\n                      project: '',\r\n                      plant: '',\r\n                      assignedTeam: 'all',\r\n                      hasAttachments: 'all'\r\n                    })\r\n                  }\r\n                >\r\n                  Clear Filters\r\n                </Button>\r\n              </Space>\r\n            </Col>\r\n          </Row>\r\n        </Card>\r\n\r\n        {/* Query Table */}\r\n        <AsyncErrorBoundary operation=\"query data loading\" onRetry={loadQueries} maxRetries={3}>\r\n          <Card\r\n            title={\r\n              <div>\r\n                <Title level={4} style={{ margin: 0 }}>\r\n                  {team} Team Query Inbox\r\n                </Title>\r\n                <Text type=\"secondary\">\r\n                  {filteredQueries.length} of {queries.length} queries\r\n                </Text>\r\n              </div>\r\n            }\r\n          >\r\n            {stats.overdue > 0 && (\r\n              <Alert\r\n                message={`${stats.overdue} queries are overdue (>3 days)`}\r\n                type=\"warning\"\r\n                showIcon\r\n                style={{ marginBottom: 16 }}\r\n              />\r\n            )}\r\n\r\n            <Table\r\n              dataSource={filteredQueries}\r\n              columns={columns}\r\n              loading={loading}\r\n              pagination={{\r\n                pageSize: PAGINATION.DEFAULT_PAGE_SIZE,\r\n                showSizeChanger: true,\r\n                showQuickJumper: true,\r\n                showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} queries`\r\n              }}\r\n              rowKey=\"id\"\r\n              size=\"small\"\r\n              rowClassName={record => (record.daysOpen >= 3 ? 'overdue-row' : '')}\r\n            />\r\n          </Card>\r\n        </AsyncErrorBoundary>\r\n        {/* Unified Query Modal - Single View */}\r\n        <Modal\r\n          title={`Query #${selectedQuery?.id} - Details`}\r\n          open={queryModalVisible}\r\n          onCancel={() => {\r\n            setQueryModalVisible(false);\r\n            setSelectedQuery(null);\r\n            setQueryDocuments([]);\r\n            resolveForm.resetFields();\r\n            setResponseDocuments([]);\r\n            setResponseId(null);\r\n          }}\r\n          footer={[\r\n            <Button\r\n              key=\"close\"\r\n              onClick={() => {\r\n                setQueryModalVisible(false);\r\n                setSelectedQuery(null);\r\n                setQueryDocuments([]);\r\n                resolveForm.resetFields();\r\n                setResponseDocuments([]);\r\n                setResponseId(null);\r\n              }}\r\n            >\r\n              Close\r\n            </Button>,\r\n            selectedQuery?.status === QUERY_STATUS.OPEN && (\r\n              <Button\r\n                key=\"resolve\"\r\n                type=\"primary\"\r\n                onClick={() => resolveForm.submit()}\r\n                size=\"large\"\r\n              >\r\n                Resolve Query\r\n              </Button>\r\n            )\r\n          ]}\r\n          width={1400}\r\n        >\r\n          {selectedQuery && (\r\n            <Row gutter={16}>\r\n              <Col span={16}>\r\n                {/* Query Details Section */}\r\n                <div style={{ marginBottom: 24 }}>\r\n                  <Row gutter={16}>\r\n                    <Col span={12}>\r\n                      <Text strong>Material Code:</Text> {selectedQuery.materialCode}\r\n                      {selectedQuery.materialName && (\r\n                        <div style={{ fontSize: '12px', color: '#666' }}>\r\n                          {selectedQuery.materialName}\r\n                        </div>\r\n                      )}\r\n                    </Col>\r\n                    <Col span={12}>\r\n                      <Text strong>Status:</Text>{' '}\r\n                      <Tag color={getStatusColor(selectedQuery.status)}>{selectedQuery.status}</Tag>\r\n                    </Col>\r\n                  </Row>\r\n                  <Divider />\r\n\r\n                  <Row gutter={16}>\r\n                    <Col span={8}>\r\n                      <Text strong>Priority:</Text>{' '}\r\n                      <Tag color={getPriorityColor(selectedQuery.priorityLevel)}>\r\n                        {selectedQuery.priorityLevel || PRIORITY_LEVELS.MEDIUM}\r\n                      </Tag>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                      <Text strong>Team:</Text>{' '}\r\n                      <Tag\r\n                        color={\r\n                          selectedQuery.assignedTeam === TEAM_NAMES.CQS\r\n                            ? 'blue'\r\n                            : selectedQuery.assignedTeam === TEAM_NAMES.TECH\r\n                              ? 'purple'\r\n                              : 'orange'\r\n                        }\r\n                      >\r\n                        {selectedQuery.assignedTeam}\r\n                      </Tag>\r\n                    </Col>\r\n                    <Col span={8}>\r\n                      <Text strong>Days Open:</Text>{' '}\r\n                      <Text style={{ color: getDaysOpenColor(selectedQuery.daysOpen) }}>\r\n                        {selectedQuery.daysOpen} days\r\n                      </Text>\r\n                    </Col>\r\n                  </Row>\r\n                  <Divider />\r\n\r\n                  {/* Enhanced Context Information */}\r\n                  {(selectedQuery.projectCode || selectedQuery.plantCode) && (\r\n                    <>\r\n                      <Row gutter={16}>\r\n                        {selectedQuery.projectCode && (\r\n                          <Col span={8}>\r\n                            <Text strong>Project:</Text> {selectedQuery.projectCode}\r\n                          </Col>\r\n                        )}\r\n                        {selectedQuery.plantCode && (\r\n                          <Col span={8}>\r\n                            <Text strong>Plant:</Text> {selectedQuery.plantCode}\r\n                          </Col>\r\n                        )}\r\n                      </Row>\r\n                      <Divider />\r\n                    </>\r\n                  )}\r\n\r\n                  {/* Field Context Section */}\r\n                  {selectedQuery.fieldName && (\r\n                    <div style={{ marginBottom: 16 }}>\r\n                      <Text strong style={{ fontSize: '16px', color: '#1890ff' }}>\r\n                        Field Context\r\n                      </Text>\r\n                      <div style={{\r\n                        marginTop: 8,\r\n                        padding: 12,\r\n                        background: '#e6f7ff',\r\n                        borderRadius: 6,\r\n                        border: '1px solid #91d5ff'\r\n                      }}>\r\n                        <div style={{ fontSize: '14px', fontWeight: 'bold' }}>\r\n                          {selectedQuery.fieldName}\r\n                        </div>\r\n                        {selectedQuery.stepNumber && (\r\n                          <div style={{ fontSize: '12px', color: '#666', marginTop: 4 }}>\r\n                            Step {selectedQuery.stepNumber}\r\n                            {selectedQuery.stepTitle && `: ${selectedQuery.stepTitle}`}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  {/* Original Question Section */}\r\n                  {selectedQuery.originalQuestion && (\r\n                    <div style={{ marginBottom: 16 }}>\r\n                      <Text strong style={{ fontSize: '16px', color: '#52c41a' }}>\r\n                        Original Questionnaire Question\r\n                      </Text>\r\n                      <div style={{\r\n                        marginTop: 8,\r\n                        padding: 12,\r\n                        background: '#f6ffed',\r\n                        borderRadius: 6,\r\n                        border: '1px solid #b7eb8f',\r\n                        fontStyle: 'italic'\r\n                      }}>\r\n                        {selectedQuery.originalQuestion}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  {/* Query Category Section */}\r\n                  {selectedQuery.queryCategory && (\r\n                    <div style={{ marginBottom: 16 }}>\r\n                      <Text strong style={{ fontSize: '16px', color: '#722ed1' }}>\r\n                        Query Category\r\n                      </Text>\r\n                      <div style={{\r\n                        marginTop: 8,\r\n                        padding: 8,\r\n                        background: '#f9f0ff',\r\n                        borderRadius: 6,\r\n                        border: '1px solid #d3adf7'\r\n                      }}>\r\n                        <Tag color=\"purple\">{selectedQuery.queryCategory}</Tag>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  {/* Raised Query Text Section */}\r\n                  <div style={{ marginBottom: 16 }}>\r\n                    <Text strong style={{ fontSize: '16px', color: '#fa8c16' }}>\r\n                      Query Text (What was asked)\r\n                    </Text>\r\n                    <div style={{\r\n                      marginTop: 8,\r\n                      padding: 12,\r\n                      background: '#fff7e6',\r\n                      borderRadius: 6,\r\n                      border: '1px solid #ffd591',\r\n                      whiteSpace: 'pre-wrap',\r\n                      minHeight: '60px'\r\n                    }}>\r\n                      {selectedQuery.question || 'No query text available'}\r\n                    </div>\r\n                  </div>\r\n\r\n                  {selectedQuery.response && (\r\n                    <>\r\n                      <Divider />\r\n                      <Text strong>Response:</Text>\r\n                      <div\r\n                        style={{\r\n                          marginTop: 8,\r\n                          padding: 12,\r\n                          background: '#f0f9ff',\r\n                          borderRadius: 4,\r\n                          whiteSpace: 'pre-wrap'\r\n                        }}\r\n                      >\r\n                        {selectedQuery.response}\r\n                      </div>\r\n                      <div style={{ marginTop: 8, fontSize: '12px', color: '#666' }}>\r\n                        Resolved by: {selectedQuery.resolvedBy} on{' '}\r\n                        {selectedQuery.resolvedAt &&\r\n                          new Date(selectedQuery.resolvedAt).toLocaleString()}\r\n                      </div>\r\n                    </>\r\n                  )}\r\n\r\n                  <Divider />\r\n                  <div style={{ fontSize: '12px', color: '#666' }}>\r\n                    <div>Raised by: {selectedQuery.raisedBy}</div>\r\n                    <div>\r\n                      Created:{' '}\r\n                      {selectedQuery.createdAt &&\r\n                        new Date(selectedQuery.createdAt).toLocaleString()}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Documents Section */}\r\n                {queryDocuments.length > 0 && (\r\n                  <div style={{ marginBottom: 24 }}>\r\n                    <Text strong style={{ fontSize: '16px', color: '#1890ff' }}>\r\n                      <Space>\r\n                        <PaperClipOutlined />\r\n                        Attached Documents ({queryDocuments.length})\r\n                      </Space>\r\n                    </Text>\r\n                    <div style={{ marginTop: 8 }}>\r\n                      <QueryDocumentList\r\n                        documents={queryDocuments}\r\n                        showActions={true}\r\n                        compact={false}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                {/* Resolution Form - Only for Open Queries */}\r\n                {selectedQuery?.status === QUERY_STATUS.OPEN && (\r\n                  <div>\r\n                    <Divider />\r\n                    <Text strong style={{ fontSize: '18px', color: '#52c41a' }}>\r\n                      <Space>\r\n                        <CheckCircleOutlined />\r\n                        Resolve Query\r\n                      </Space>\r\n                    </Text>\r\n\r\n                    <Form form={resolveForm} layout=\"vertical\" onFinish={handleResolveQuery} style={{ marginTop: 16 }}>\r\n                      <Form.Item\r\n                        name=\"response\"\r\n                        label={\r\n                          <Space>\r\n                            <span>Resolution Response</span>\r\n                            <Text type=\"secondary\">(Required)</Text>\r\n                          </Space>\r\n                        }\r\n                        rules={[{ required: true, message: 'Please provide a resolution response' }]}\r\n                      >\r\n                        <TextArea\r\n                          rows={6}\r\n                          placeholder=\"Provide detailed resolution or answer to the query. Include any relevant technical details, safety considerations, or references to documentation...\"\r\n                          showCount\r\n                          maxLength={2000}\r\n                          style={{\r\n                            direction: 'ltr',\r\n                            textAlign: 'left',\r\n                            fontFamily: 'inherit'\r\n                          }}\r\n                        />\r\n                      </Form.Item>\r\n\r\n                      {/* Document Upload for Response */}\r\n                      <Form.Item label={\r\n                        <Space>\r\n                          <PaperClipOutlined />\r\n                          <span>Attach Documents to Response</span>\r\n                          <Text type=\"secondary\">(Optional)</Text>\r\n                        </Space>\r\n                      }>\r\n                        <QueryDocumentUpload\r\n                          queryId={selectedQuery?.id}\r\n                          responseId={responseId}\r\n                          context=\"response\"\r\n                          onUploadComplete={handleResponseDocumentUpload}\r\n                          maxFiles={5}\r\n                          disabled={false}\r\n                        />\r\n                      </Form.Item>\r\n\r\n                      <Row gutter={16}>\r\n                        <Col span={12}>\r\n                          <Form.Item\r\n                            name=\"priorityLevel\"\r\n                            label=\"Update Priority (Optional)\"\r\n                            initialValue={selectedQuery.priorityLevel || 'MEDIUM'}\r\n                          >\r\n                            <Select size=\"large\">\r\n                              <Option value=\"LOW\">Low Priority</Option>\r\n                              <Option value=\"MEDIUM\">Medium Priority</Option>\r\n                              <Option value=\"HIGH\">High Priority</Option>\r\n                              <Option value=\"URGENT\">Urgent Priority</Option>\r\n                            </Select>\r\n                          </Form.Item>\r\n                        </Col>\r\n                        <Col span={12}>\r\n                          <div style={{ marginTop: 30 }}>\r\n                            <Text type=\"secondary\">\r\n                              This resolution will be sent to the plant team and the workflow will\r\n                              continue.\r\n                            </Text>\r\n                          </div>\r\n                        </Col>\r\n                      </Row>\r\n                    </Form>\r\n                  </div>\r\n                )}\r\n              </Col>\r\n              <Col span={8}>\r\n                {/* Shared Material Context and Query History */}\r\n                <ComponentErrorBoundary componentName=\"MaterialContextDisplay\">\r\n                  <MaterialContextDisplay\r\n                    materialCode={selectedQuery.materialCode}\r\n                    workflowId={selectedQuery.workflowId}\r\n                    compact={true}\r\n                  />\r\n                </ComponentErrorBoundary>\r\n                <ComponentErrorBoundary componentName=\"QueryHistoryTracker\">\r\n                  <QueryHistoryTracker\r\n                    materialCode={selectedQuery.materialCode}\r\n                    workflowId={selectedQuery.workflowId}\r\n                    compact={true}\r\n                  />\r\n                </ComponentErrorBoundary>\r\n              </Col>\r\n            </Row>\r\n          )}\r\n        </Modal>\r\n\r\n        <style>{`\r\n          .overdue-row {\r\n            background-color: #fff2f0;\r\n          }\r\n          .overdue-row:hover {\r\n            background-color: #ffebe6 !important;\r\n          }\r\n        `}</style>\r\n      </div>\r\n    </ComponentErrorBoundary>\r\n  );\r\n};\r\n\r\nexport default QueryInbox;","import {\n  ClockCircleOutlined,\n  CheckCircleOutlined,\n  UserOutlined,\n  MessageOutlined,\n  HistoryOutlined\n} from '@ant-design/icons';\nimport {\n  Card,\n  Timeline,\n  Tag,\n  Typography,\n  Space,\n  Button,\n  Spin,\n  Empty,\n  Row,\n  Col,\n  Statistic\n} from 'antd';\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport apiClient from '../api/client';\nimport { getUserRole } from '../services/auth';\n\n\nconst { Text } = Typography;\n\nconst QueryHistoryTracker = ({ queryId, materialCode, workflowId, compact = false }) => {\n  const [loading, setLoading] = useState(false);\n  const [history, setHistory] = useState([]);\n  const [stats, setStats] = useState({\n    totalQueries: 0,\n    resolvedQueries: 0,\n    avgResolutionTime: 0,\n    currentSLA: 0\n  });\n\n  // Define function before useEffect that depends on it\n  const loadQueryHistory = useCallback(async () => {\n    try {\n      setLoading(true);\n\n      // Get current user's role to filter queries\n      const userRole = getUserRole();\n      console.log('QueryHistoryTracker - userRole:', userRole);\n      \n      let endpoint = '/queries';\n      \n      // If specific query/workflow/material is requested, use those endpoints\n      if (queryId) {\n        endpoint += `/${queryId}/history`;\n      } else if (workflowId) {\n        endpoint += `/workflow/${workflowId}`;\n      } else if (materialCode) {\n        endpoint += `/material/${materialCode}`;\n      } else {\n        // Default: Get all resolved queries for the user's team\n        if (userRole) {\n          // Map user role to team name for the endpoint\n          const teamMap = {\n            'CQS_USER': 'CQS',\n            'TECH_USER': 'TECH', \n            'JVC_USER': 'JVC'\n          };\n          const team = teamMap[userRole];\n          console.log('QueryHistoryTracker - mapped team:', team);\n          if (team) {\n            endpoint += `/resolved/${team}`;\n          } else {\n            console.warn('QueryHistoryTracker - unknown role, using CQS fallback');\n            endpoint += `/resolved/CQS`; // fallback\n          }\n        } else {\n          endpoint += `/resolved/CQS`; // fallback if no role\n        }\n      }\n\n      console.log('QueryHistoryTracker - endpoint:', endpoint);\n      \n      const data = await apiClient.get(endpoint);\n      \n      console.log('QueryHistoryTracker - received data:', data);\n      console.log('QueryHistoryTracker - data type:', typeof data);\n      console.log('QueryHistoryTracker - is array:', Array.isArray(data));\n      console.log('QueryHistoryTracker - data length:', data?.length);\n      \n      const historyData = Array.isArray(data) ? data : (data ? [data] : []);\n      console.log('QueryHistoryTracker - setting history:', historyData);\n      setHistory(historyData);\n\n      // Calculate stats\n      const dataArray = Array.isArray(data) ? data : (data ? [data] : []);\n      const resolved = dataArray.filter(q => q.status === 'RESOLVED');\n      const avgTime =\n        resolved.length > 0\n          ? resolved.reduce((sum, q) => sum + (q.daysOpen || 0), 0) / resolved.length\n          : 0;\n\n      console.log('QueryHistoryTracker - stats calculation:', {\n        dataArray: dataArray.length,\n        resolved: resolved.length,\n        avgTime\n      });\n\n      setStats({\n        totalQueries: dataArray.length,\n        resolvedQueries: resolved.length,\n        avgResolutionTime: avgTime,\n        currentSLA: dataArray.filter(q => q.daysOpen > 3).length\n      });\n    } catch (error) {\n      console.error('Failed to load query history:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [queryId, materialCode, workflowId]);\n\n  useEffect(() => {\n    // Always load query history - either for specific context or all resolved queries for the team\n    loadQueryHistory();\n  }, [queryId, materialCode, workflowId, loadQueryHistory]);\n\n  const getStatusColor = status => {\n    return status === 'OPEN' ? 'red' : 'green';\n  };\n\n  const getTeamColor = team => {\n    const colors = {\n      CQS: 'blue',\n      TECH: 'purple',\n      JVC: 'orange'\n    };\n    return colors[team] || 'default';\n  };\n\n  const getPriorityColor = priority => {\n    const colors = {\n      LOW: 'blue',\n      MEDIUM: 'orange',\n      HIGH: 'red',\n      URGENT: 'purple'\n    };\n    return colors[priority] || 'default';\n  };\n\n  const formatTimelineItem = query => {\n    const isResolved = query.status === 'RESOLVED';\n\n    return {\n      dot: isResolved ? (\n        <CheckCircleOutlined style={{ color: '#52c41a' }} />\n      ) : (\n        <ClockCircleOutlined style={{ color: '#faad14' }} />\n      ),\n      color: isResolved ? 'green' : 'blue',\n      children: (\n        <div>\n          <div style={{ marginBottom: 8 }}>\n            <Space wrap>\n              <Text strong>Query #{query.id}</Text>\n              <Tag color={getStatusColor(query.status)}>{query.status}</Tag>\n              <Tag color={getTeamColor(query.assignedTeam)}>{query.assignedTeam}</Tag>\n              {query.priorityLevel && (\n                <Tag color={getPriorityColor(query.priorityLevel)}>{query.priorityLevel}</Tag>\n              )}\n            </Space>\n          </div>\n\n          <div style={{ marginBottom: 8 }}>\n            <Text>{query.question}</Text>\n          </div>\n\n          {query.fieldName && (\n            <div style={{ marginBottom: 4, fontSize: '12px', color: '#666' }}>\n              Field: {query.fieldName} {query.stepNumber && `(Step ${query.stepNumber})`}\n            </div>\n          )}\n\n          <div style={{ fontSize: '12px', color: '#666', marginBottom: 8 }}>\n            <Space>\n              <span>\n                <UserOutlined /> Raised by: {query.raisedBy}\n              </span>\n              <span>\n                <ClockCircleOutlined />{' '}\n                {query.createdAt && new Date(query.createdAt).toLocaleString()}\n              </span>\n              <span>Days open: {query.daysOpen}</span>\n            </Space>\n          </div>\n\n          {query.response && (\n            <div\n              style={{\n                marginTop: 8,\n                padding: 8,\n                background: '#f0f9ff',\n                borderRadius: 4,\n                borderLeft: '3px solid #1890ff'\n              }}\n            >\n              <div style={{ marginBottom: 4 }}>\n                <Text strong>Resolution:</Text>\n              </div>\n              <div style={{ marginBottom: 4 }}>\n                <Text>{query.response}</Text>\n              </div>\n              <div style={{ fontSize: '11px', color: '#666' }}>\n                Resolved by: {query.resolvedBy} on{' '}\n                {query.resolvedAt && new Date(query.resolvedAt).toLocaleString()}\n              </div>\n            </div>\n          )}\n        </div>\n      )\n    };\n  };\n\n  if (loading) {\n    return (\n      <Card size=\"small\">\n        <div style={{ textAlign: 'center', padding: '20px' }}>\n          <Spin size=\"small\" />\n          <div style={{ marginTop: 8 }}>Loading query history...</div>\n        </div>\n      </Card>\n    );\n  }\n\n  if (compact) {\n    return (\n      <Card\n        size=\"small\"\n        title={\n          <Space>\n            <HistoryOutlined />\n            <span>\n              {queryId ? 'Query History' : \n               workflowId ? 'Workflow Queries' :\n               materialCode ? 'Material Queries' :\n               'Team History'}\n            </span>\n          </Space>\n        }\n        style={{ marginBottom: 16 }}\n      >\n        <Row gutter={16}>\n          <Col span={6}>\n            <Statistic title=\"Total\" value={stats.totalQueries} prefix={<MessageOutlined />} />\n          </Col>\n          <Col span={6}>\n            <Statistic\n              title=\"Resolved\"\n              value={stats.resolvedQueries}\n              prefix={<CheckCircleOutlined />}\n              valueStyle={{ color: '#3f8600' }}\n            />\n          </Col>\n          <Col span={6}>\n            <Statistic\n              title=\"Avg Days\"\n              value={stats.avgResolutionTime}\n              precision={1}\n              prefix={<ClockCircleOutlined />}\n            />\n          </Col>\n          <Col span={6}>\n            <Statistic\n              title=\"Overdue\"\n              value={stats.currentSLA}\n              prefix={<ClockCircleOutlined />}\n              valueStyle={{ color: stats.currentSLA > 0 ? '#cf1322' : '#3f8600' }}\n            />\n          </Col>\n        </Row>\n      </Card>\n    );\n  }\n\n  return (\n    <Card\n      title={\n        <Space>\n          <HistoryOutlined />\n          <span>\n            {queryId ? 'Query History' : \n             workflowId ? 'Workflow Query History' :\n             materialCode ? 'Material Query History' :\n             'Team Resolved Queries'}\n          </span>\n        </Space>\n      }\n      size=\"small\"\n      extra={\n        <Button size=\"small\" icon={<HistoryOutlined />} onClick={loadQueryHistory}>\n          Refresh\n        </Button>\n      }\n    >\n      {/* Stats Summary */}\n      <Row gutter={16} style={{ marginBottom: 16 }}>\n        <Col span={6}>\n          <Statistic\n            title=\"Total Queries\"\n            value={stats.totalQueries}\n            prefix={<MessageOutlined />}\n          />\n        </Col>\n        <Col span={6}>\n          <Statistic\n            title=\"Resolved\"\n            value={stats.resolvedQueries}\n            prefix={<CheckCircleOutlined />}\n            valueStyle={{ color: '#3f8600' }}\n          />\n        </Col>\n        <Col span={6}>\n          <Statistic\n            title=\"Avg Resolution Time\"\n            value={stats.avgResolutionTime}\n            precision={1}\n            suffix=\"days\"\n            prefix={<ClockCircleOutlined />}\n          />\n        </Col>\n        <Col span={6}>\n          <Statistic\n            title=\"Overdue Queries\"\n            value={stats.currentSLA}\n            prefix={<ClockCircleOutlined />}\n            valueStyle={{ color: stats.currentSLA > 0 ? '#cf1322' : '#3f8600' }}\n          />\n        </Col>\n      </Row>\n\n      {/* Timeline */}\n      {history.length > 0 ? (\n        <Timeline items={history.map(formatTimelineItem)} mode=\"left\" />\n      ) : (\n        <Empty description=\"No query history available\" image={Empty.PRESENTED_IMAGE_SIMPLE} />\n      )}\n    </Card>\n  );\n};\n\nexport default QueryHistoryTracker;\n"],"names":["Panel","Collapse","Text","Typography","Title","TextArea","Input","Option","Select","_ref","team","loading","setLoading","useState","queries","setQueries","filteredQueries","setFilteredQueries","selectedQuery","setSelectedQuery","queryModalVisible","setQueryModalVisible","resolveForm","Form","useForm","responseDocuments","setResponseDocuments","responseId","setResponseId","queryDocuments","setQueryDocuments","filters","setFilters","status","priority","material","daysOpen","project","plant","assignedTeam","hasAttachments","stats","setStats","total","open","resolved","resolvedToday","overdue","avgResolutionTime","loadQueries","useCallback","async","data","apiClient","get","signal","aborted","error","console","message","loadStats","openCount","resolvedCount","resolvedTodayCount","overdueCount","avgTime","Promise","all","catch","applyFilters","filtered","filter","q","priorityLevel","_q$materialCode","_q$materialName","materialCode","toLowerCase","includes","materialName","_q$projectCode","projectCode","_q$plantCode","plantCode","threshold","parseInt","documentCount","useEffect","controller","AbortController","fetchData","abort","documents","queryId","workflowId","compact","history","setHistory","totalQueries","resolvedQueries","currentSLA","loadQueryHistory","userRole","getUserRole","log","endpoint","warn","Array","isArray","length","historyData","dataArray","reduce","sum","_jsx","Card","size","children","_jsxs","style","textAlign","padding","Spin","marginTop","title","Space","HistoryOutlined","marginBottom","Row","gutter","Col","span","Statistic","value","prefix","MessageOutlined","CheckCircleOutlined","valueStyle","color","precision","ClockCircleOutlined","extra","Button","icon","onClick","suffix","Timeline","items","map","query","isResolved","dot","wrap","strong","id","Tag","CQS","TECH","JVC","LOW","MEDIUM","HIGH","URGENT","question","fieldName","fontSize","stepNumber","UserOutlined","raisedBy","createdAt","Date","toLocaleString","response","background","borderRadius","borderLeft","resolvedBy","resolvedAt","mode","Empty","description","image","PRESENTED_IMAGE_SIMPLE"],"sourceRoot":""}