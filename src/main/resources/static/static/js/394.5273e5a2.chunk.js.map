{"version":3,"file":"static/js/394.5273e5a2.chunk.js","mappings":"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","sources":["services/workflowAPI.js"],"sourcesContent":["import apiClient from '../api/client';\n\n/**\n * Workflow API service providing comprehensive workflow management functionality\n * Migrated to use unified APIClient with standardized error handling\n *\n * @namespace workflowAPI\n */\nexport const workflowAPI = {\n  // Dashboard endpoints\n  /**\n   * Get dashboard summary data\n   * @returns {Promise<Object>} Dashboard summary data\n   */\n  getDashboardSummary: () => apiClient.get('/dashboard/summary'),\n\n  /**\n   * Get overdue workflows based on day threshold\n   * @param {number} dayThreshold - Number of days to consider as overdue (default: 3)\n   * @returns {Promise<Array>} Array of overdue workflows\n   */\n  getOverdueWorkflows: (dayThreshold = 3) =>\n    apiClient.get(`/workflows/overdue?days=${dayThreshold}`),\n\n  /**\n   * Get recent workflow activity\n   * @param {number} days - Number of days to look back (default: 7)\n   * @returns {Promise<Array>} Array of recent workflows\n   */\n  getRecentActivity: (days = 7) => apiClient.get(`/workflows/recent/created?days=${days}`),\n\n  /**\n   * Get workflow counts grouped by state\n   * @returns {Promise<Object>} Workflow counts by state\n   */\n  getWorkflowCountsByState: () => apiClient.get('/dashboard/counts-by-state'),\n\n  /**\n   * Get workflows for a specific plant\n   * @param {string} plantName - Name of the plant\n   * @returns {Promise<Array>} Array of workflows for the plant\n   */\n  getWorkflowsByPlant: plantName =>\n    apiClient.get(`/workflows/plant/${encodeURIComponent(plantName)}`),\n\n  // Workflow CRUD operations\n  /**\n   * Create a new workflow\n   * @param {Object} workflowData - Workflow data to create\n   * @returns {Promise<Object>} Created workflow object\n   */\n  createWorkflow: workflowData => apiClient.post('/workflows', workflowData),\n\n  /**\n   * Get workflow by ID\n   * @param {string} id - Workflow ID\n   * @returns {Promise<Object>} Workflow object\n   */\n  getWorkflow: id => apiClient.get(`/workflows/${id}`),\n\n  /**\n   * Update workflow by ID\n   * @param {string} id - Workflow ID\n   * @param {Object} workflowData - Updated workflow data\n   * @returns {Promise<Object>} Updated workflow object\n   */\n  updateWorkflow: (id, workflowData) => apiClient.put(`/workflows/${id}`, workflowData),\n\n  /**\n   * Delete workflow by ID\n   * @param {string} id - Workflow ID\n   * @returns {Promise<void>} Promise that resolves when workflow is deleted\n   */\n  deleteWorkflow: id => apiClient.delete(`/workflows/${id}`),\n\n  // Workflow state management\n  /**\n   * Transition workflow to a new state\n   * @param {string} id - Workflow ID\n   * @param {string} newState - New state to transition to\n   * @param {string} comment - Comment for the transition\n   * @returns {Promise<Object>} Updated workflow object\n   */\n  transitionWorkflowState: (id, newState, comment) =>\n    apiClient.put(`/workflows/${id}/transition`, { newState, comment }),\n\n  /**\n   * Extend workflow deadline\n   * @param {string} id - Workflow ID\n   * @param {Object} extensionData - Extension data including new deadline\n   * @returns {Promise<Object>} Updated workflow object\n   */\n  extendWorkflow: (id, extensionData) => apiClient.put(`/workflows/${id}/extend`, extensionData),\n\n  /**\n   * Complete workflow\n   * @param {string} id - Workflow ID\n   * @param {Object} completionData - Completion data\n   * @returns {Promise<Object>} Completed workflow object\n   */\n  completeWorkflow: (id, completionData) =>\n    apiClient.put(`/workflows/${id}/complete`, completionData),\n\n  /**\n   * Smart plant extension - only extend to plants that don't have workflows yet\n   * Enhanced to handle document reuse information and provide detailed results\n   * @param {Object} extensionData - Extension data with projectCode, materialCode, and plantCodes\n   * @returns {Promise<Object>} Smart extension result with created, duplicate, failed workflows, and document reuse information\n   */\n  extendToMultiplePlantsSmartly: async (extensionData) => {\n    try {\n      const result = await apiClient.withRetry(\n        () => apiClient.post('/workflows/extend-to-plants', extensionData),\n        3, // maxRetries\n        1000 // baseDelay in ms\n      );\n\n      // Enhanced result includes document reuse information\n      return {\n        ...result,\n        documentReuse: result.documentReuse || {\n          totalReusedDocuments: 0,\n          reusedDocuments: [],\n          reuseStrategy: 'NONE',\n          sourceDescription: 'No documents available for reuse'\n        }\n      };\n    } catch (error) {\n      console.error('[WorkflowAPI] Smart extension failed:', error);\n      throw {\n        ...error,\n        context: 'SMART_PLANT_EXTENSION',\n        extensionData\n      };\n    }\n  },\n\n  // Workflow search and filtering\n  /**\n   * Search workflows with advanced filters\n   * @param {Object} searchParams - Search parameters and filters\n   * @returns {Promise<Array>} Array of matching workflows\n   */\n  searchWorkflows: searchParams => apiClient.post('/workflows/search', searchParams),\n\n  /**\n   * Get workflows by state\n   * @param {string} state - Workflow state\n   * @returns {Promise<Array>} Array of workflows in the specified state\n   */\n  getWorkflowsByState: state => apiClient.get(`/workflows/state/${state}`),\n\n  /**\n   * Get workflows initiated by a specific user\n   * @param {string} username - Username of the initiator\n   * @returns {Promise<Array>} Array of workflows initiated by the user\n   */\n  getWorkflowsByUser: username =>\n    apiClient.get(`/workflows/initiated-by/${encodeURIComponent(username)}`),\n\n  // Workflow validation\n  canTransitionTo: (id, newState) => apiClient.get(`/workflows/${id}/can-transition/${newState}`),\n\n  isReadyForCompletion: id => apiClient.get(`/workflows/${id}/ready-for-completion`),\n\n  checkWorkflowExists: (projectCode, materialCode, plantCode) =>\n    apiClient.get(\n      `/workflows/check-exists?projectCode=${encodeURIComponent(projectCode)}&materialCode=${encodeURIComponent(materialCode)}&plantCode=${encodeURIComponent(plantCode)}`\n    ),\n\n  // Workflow statistics\n  getWorkflowStats: timeRange => apiClient.get(`/workflows/stats?range=${timeRange}`),\n\n  getCompletionRateByPlant: () => apiClient.get('/workflows/completion-rate-by-plant'),\n\n  getWorkflowCompletionTrend: (months = 6) =>\n    apiClient.get(`/workflows/completion-trend?months=${months}`),\n\n  // State-based queries\n  getPendingWorkflows: () => apiClient.get('/workflows/pending'),\n\n  getWorkflowsWithOpenQueries: () => apiClient.get('/workflows/with-open-queries'),\n\n  // Count endpoints\n  getCountByState: state => apiClient.get(`/workflows/stats/count-by-state/${state}`),\n\n  getOverdueCount: () => apiClient.get('/workflows/stats/overdue-count'),\n\n  getWorkflowsWithOpenQueriesCount: () => apiClient.get('/workflows/stats/with-open-queries-count'),\n\n  // Recent workflows\n  getRecentlyCreated: (days = 7) => apiClient.get(`/workflows/recent/created?days=${days}`),\n\n  getRecentlyCompleted: (days = 7) => apiClient.get(`/workflows/recent/completed?days=${days}`),\n\n  // Questionnaire and draft management\n  saveDraftResponses: (workflowId, draftData) =>\n    apiClient.post(`/workflows/${workflowId}/draft-responses`, draftData),\n\n  getDraftResponses: workflowId => apiClient.get(`/workflows/${workflowId}/draft-responses`),\n\n  submitQuestionnaire: (workflowId, questionnaireData) =>\n    apiClient.post(`/workflows/${workflowId}/submit-questionnaire`, questionnaireData),\n\n  // Document management\n  getWorkflowDocuments: workflowId => apiClient.get(`/workflows/${workflowId}/documents`),\n\n  // Enhanced document management - get all related documents (workflow + query documents)\n  getAllWorkflowRelatedDocuments: async (workflowId) => {\n    try {\n      return await apiClient.withRetry(\n        () => apiClient.get(`/workflows/${workflowId}/documents/all`),\n        2, // maxRetries for document operations\n        500 // shorter delay for document operations\n      );\n    } catch (error) {\n      console.error(`[WorkflowAPI] Failed to get all documents for workflow ${workflowId}:`, error);\n      throw {\n        ...error,\n        context: 'GET_ALL_WORKFLOW_DOCUMENTS',\n        workflowId\n      };\n    }\n  },\n\n  // Export workflow documents as ZIP with retry functionality\n  exportWorkflowDocuments: async (workflowId, includeQueryDocuments = true) => {\n    try {\n      return await apiClient.withRetry(\n        () => apiClient.download(`/workflows/${workflowId}/documents/export?includeQueryDocuments=${includeQueryDocuments}`),\n        2, // maxRetries for download operations\n        1000 // longer delay for file operations\n      );\n    } catch (error) {\n      console.error(`[WorkflowAPI] Failed to export documents for workflow ${workflowId}:`, error);\n      throw {\n        ...error,\n        context: 'EXPORT_WORKFLOW_DOCUMENTS',\n         workflowId,\n         includeQueryDocuments\n      };\n    }\n  },\n\n  // Get unified document search results across all document types\n  searchUnifiedDocuments: async (searchParams) => {\n    try {\n      return await apiClient.withRetry(\n        () => apiClient.post('/documents/search/unified', searchParams),\n        2, // maxRetries\n        500 // baseDelay\n      );\n    } catch (error) {\n      console.error('[WorkflowAPI] Unified document search failed:', error);\n      throw {\n        ...error,\n        context: 'UNIFIED_DOCUMENT_SEARCH',\n         searchParams\n      };\n    }\n  },\n\n  // Get comprehensive document information for a project/material combination\n  getUnifiedDocumentInfo: async (projectCode, materialCode) => {\n    try {\n      return await apiClient.withRetry(\n        () => apiClient.get(\n          `/documents/unified-info?projectCode=${encodeURIComponent(projectCode)}&materialCode=${encodeURIComponent(materialCode)}`\n        ),\n        2, // maxRetries\n        500 // baseDelay\n      );\n    } catch (error) {\n      console.error(`[WorkflowAPI] Failed to get unified document info for ${projectCode}/${materialCode}:`, error);\n      throw {\n        ...error,\n        context: 'GET_UNIFIED_DOCUMENT_INFO',\n         projectCode,\n         materialCode\n      };\n    }\n  },\n\n  getReusableDocuments: async (projectCode, materialCode) => {\n    try {\n      return await apiClient.withRetry(\n        () => apiClient.get(\n          `/workflows/documents/reusable?projectCode=${encodeURIComponent(projectCode)}&materialCode=${encodeURIComponent(materialCode)}`\n        ),\n        2, // maxRetries\n        500 // baseDelay\n      );\n    } catch (error) {\n      console.error(`[WorkflowAPI] Failed to get reusable documents for ${projectCode}/${materialCode}:`, error);\n      throw {\n        ...error,\n        context: 'GET_REUSABLE_DOCUMENTS',\n         projectCode,\n         materialCode\n      };\n    }\n  },\n\n  downloadDocument: async (documentId) => {\n    try {\n      return await apiClient.withRetry(\n        () => apiClient.download(`/workflows/documents/${documentId}/download`),\n        3, // more retries for downloads as they can be flaky\n        1000 // longer delay for file operations\n      );\n    } catch (error) {\n      console.error(`[WorkflowAPI] Failed to download document ${documentId}:`, error);\n      throw {\n        ...error,\n        context: 'DOWNLOAD_DOCUMENT',\n        documentId\n      };\n    }\n  },\n\n  uploadDocument: async (workflowId, file, metadata) => {\n    try {\n      return await apiClient.withRetry(\n        () => apiClient.upload(`/workflows/${workflowId}/documents`, file, {\n          metadata: JSON.stringify(metadata)\n        }),\n        2, // fewer retries for uploads to avoid duplicate uploads\n        1000 // longer delay for file operations\n      );\n    } catch (error) {\n      console.error(`[WorkflowAPI] Failed to upload document to workflow ${workflowId}:`, error);\n      throw {\n        ...error,\n        context: 'UPLOAD_DOCUMENT',\n         workflowId,\n        fileName: file?.name || 'unknown'\n      };\n    }\n  },\n\n  // Bulk document operations with enhanced error handling\n  uploadMultipleDocuments: async (workflowId, files, metadata = {}) => {\n    const results = [];\n    const errors = [];\n\n    for (const file of files) {\n      try {\n        const result = await workflowAPI.uploadDocument(workflowId, file, metadata);\n        results.push({ file: file.name, result, success: true });\n      } catch (error) {\n        console.error(`[WorkflowAPI] Failed to upload ${file.name}:`, error);\n        errors.push({ file: file.name, error, success: false });\n      }\n    }\n\n    return {\n      successful: results,\n      failed: errors,\n      totalFiles: files.length,\n      successCount: results.length,\n      failureCount: errors.length\n    };\n  },\n\n  // Retry failed document operations\n  retryDocumentOperation: async (operationType, operationData, maxRetries = 3) => {\n    let lastError;\n    \n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        switch (operationType) {\n          case 'UPLOAD':\n            return await workflowAPI.uploadDocument(\n              operationData.workflowId, \n              operationData.file, \n              operationData.metadata\n            );\n          case 'DOWNLOAD':\n            return await workflowAPI.downloadDocument(operationData.documentId);\n          case 'GET_DOCUMENTS':\n            return await workflowAPI.getAllWorkflowRelatedDocuments(operationData.workflowId);\n          default:\n            throw new Error(`Unknown operation type: ${operationType}`);\n        }\n      } catch (error) {\n        lastError = error;\n        console.warn(`[WorkflowAPI] Retry attempt ${attempt}/${maxRetries} failed for ${operationType}:`, error);\n        \n        if (attempt < maxRetries) {\n          // Exponential backoff\n          const delay = Math.pow(2, attempt) * 1000;\n          await new Promise(resolve => setTimeout(resolve, delay));\n        }\n      }\n    }\n\n    throw {\n      ...lastError,\n      context: 'RETRY_OPERATION_FAILED',\n       operationType,\n       maxRetries,\n      finalAttempt: true\n    };\n  },\n\n  // Material name management from ProjectItemMaster\n  updateAllMaterialNamesFromProjectItemMaster: () =>\n    apiClient.post('/workflows/update-material-names'),\n\n  updateMaterialNameFromProjectItemMaster: workflowId =>\n    apiClient.post(`/workflows/${workflowId}/update-material-name`),\n\n  // Plant Questionnaire endpoints\n  getQuestionnaireTemplate: ({ materialCode, plantCode, templateType = 'PLANT_QUESTIONNAIRE' }) =>\n    apiClient.get(\n      `/plant-questionnaire/template?materialCode=${encodeURIComponent(materialCode)}&plantCode=${encodeURIComponent(plantCode)}&templateType=${encodeURIComponent(templateType)}`\n    ),\n\n  getCqsData: ({ materialCode, plantCode }) =>\n    apiClient.get(\n      `/plant-questionnaire/cqs-data?materialCode=${encodeURIComponent(materialCode)}&plantCode=${encodeURIComponent(plantCode)}`\n    ),\n\n  // New unified questionnaire endpoint\n  getQuestionnaireData: (workflowId) =>\n    apiClient.get(`/api/v1/questionnaire/${workflowId}`),\n\n  getQuestionnaireForEdit: (workflowId) =>\n    apiClient.get(`/api/v1/questionnaire/${workflowId}/edit`),\n\n  getPlantSpecificData: ({ plantCode, materialCode }) =>\n    apiClient.get(\n      `/plant-questionnaire/plant-data?plantCode=${encodeURIComponent(plantCode)}&materialCode=${encodeURIComponent(materialCode)}`\n    ),\n\n  getOrCreatePlantSpecificData: ({ plantCode, materialCode, workflowId }) =>\n    apiClient.post(\n      `/plant-questionnaire/plant-data/init?plantCode=${encodeURIComponent(plantCode)}&materialCode=${encodeURIComponent(materialCode)}&workflowId=${workflowId}`\n    ),\n\n  savePlantSpecificData: (plantSpecificData, modifiedBy = 'SYSTEM') =>\n    apiClient.post(\n      `/plant-questionnaire/plant-data/save?modifiedBy=${encodeURIComponent(modifiedBy)}`,\n      plantSpecificData\n    ),\n\n  saveDraftPlantResponses: (workflowId, draftData) =>\n    apiClient.post(`/plant-questionnaire/draft?workflowId=${workflowId}`, draftData),\n\n  // Debug plant-specific data\n  debugPlantData: (plantCode, materialCode) =>\n    apiClient.get(`/plant-questionnaire/debug/${encodeURIComponent(plantCode)}/${encodeURIComponent(materialCode)}`),\n\n  submitPlantQuestionnaire: (workflowId, submissionData) =>\n    apiClient.post(`/plant-questionnaire/submit?workflowId=${workflowId}`, submissionData),\n\n  getPlantQuestionnaireStats: ({ plantCode, materialCode }) => {\n    const params = new URLSearchParams({ plantCode });\n    if (materialCode) {\n      params.append('materialCode', materialCode);\n    }\n    return apiClient.get(`/plant-questionnaire/stats?${params.toString()}`);\n  },\n\n  // Plant Dashboard with progress information\n  getPlantDashboardData: plantCode =>\n    apiClient.get(`/plant-questionnaire/dashboard?plantCode=${encodeURIComponent(plantCode)}`),\n\n  // Initialize sample plant data for testing\n  initializeSamplePlantData: plantCode =>\n    apiClient.post(\n      `/plant-questionnaire/init-sample-data?plantCode=${encodeURIComponent(plantCode)}`\n    ),\n\n  // Document management utility methods\n  /**\n   * Get document reuse statistics for a project/material combination\n   * @param {string} projectCode - Project code\n   * @param {string} materialCode - Material code\n   * @returns {Promise<Object>} Document reuse statistics\n   */\n  getDocumentReuseStats: async (projectCode, materialCode) => {\n    try {\n      return await apiClient.withRetry(\n        () => apiClient.get(\n          `/workflows/documents/reuse-stats?projectCode=${encodeURIComponent(projectCode)}&materialCode=${encodeURIComponent(materialCode)}`\n        ),\n        2, // maxRetries\n        500 // baseDelay\n      );\n    } catch (error) {\n      console.error(`[WorkflowAPI] Failed to get document reuse stats for ${projectCode}/${materialCode}:`, error);\n      throw {\n        ...error,\n        context: 'GET_DOCUMENT_REUSE_STATS',\n         projectCode,\n         materialCode\n      };\n    }\n  },\n\n  /**\n   * Validate document reuse eligibility before workflow extension\n   * @param {string} projectCode - Project code\n   * @param {string} materialCode - Material code\n   * @param {Array<string>} plantCodes - Plant codes to extend to\n   * @returns {Promise<Object>} Document reuse validation result\n   */\n  validateDocumentReuse: async (projectCode, materialCode, plantCodes) => {\n    try {\n      return await apiClient.withRetry(\n        () => apiClient.post('/workflows/documents/validate-reuse', {\n          projectCode,\n          materialCode,\n          plantCodes\n        }),\n        2, // maxRetries\n        500 // baseDelay\n      );\n    } catch (error) {\n      console.error(`[WorkflowAPI] Failed to validate document reuse for ${projectCode}/${materialCode}:`, error);\n      throw {\n        ...error,\n        context: 'VALIDATE_DOCUMENT_REUSE',\n         projectCode,\n         materialCode,\n         plantCodes\n      };\n    }\n  },\n\n  /**\n   * Get document access audit log\n   * @param {string} workflowId - Workflow ID\n   * @param {Object} options - Query options (dateRange, documentId, etc.)\n   * @returns {Promise<Array>} Document access audit log\n   */\n  getDocumentAuditLog: async (workflowId, options = {}) => {\n    try {\n      const queryParams = new URLSearchParams(options).toString();\n      return await apiClient.withRetry(\n        () => apiClient.get(`/workflows/${workflowId}/documents/audit-log?${queryParams}`),\n        2, // maxRetries\n        500 // baseDelay\n      );\n    } catch (error) {\n      console.error(`[WorkflowAPI] Failed to get document audit log for workflow ${workflowId}:`, error);\n      throw {\n        ...error,\n        context: 'GET_DOCUMENT_AUDIT_LOG',\n         workflowId,\n         options\n      };\n    }\n  },\n\n  /**\n   * Enhanced error handler for document operations\n   * Provides user-friendly error messages and recovery suggestions\n   * @param {Error} error - The error object\n   * @param {string} operation - The operation that failed\n   * @returns {Object} Enhanced error information\n   */\n  handleDocumentError: (error, operation) => {\n    const enhancedError = {\n      originalError: error,\n       operation,\n      timestamp: new Date().toISOString(),\n      userMessage: 'An error occurred with document operation',\n      technicalMessage: error.message,\n      recoveryActions: [],\n      retryable: false\n    };\n\n    // Determine user-friendly message and recovery actions based on error type\n    switch (error.context) {\n      case 'UPLOAD_DOCUMENT':\n        enhancedError.userMessage = 'Failed to upload document. Please check file size and format.';\n        enhancedError.recoveryActions = [\n          'Verify file is under 25MB',\n          'Check file format is supported (PDF, DOCX, XLSX, JPG, PNG)',\n          'Try uploading again',\n          'Contact support if problem persists'\n        ];\n        enhancedError.retryable = true;\n        break;\n\n      case 'DOWNLOAD_DOCUMENT':\n        enhancedError.userMessage = 'Failed to download document. Please try again.';\n        enhancedError.recoveryActions = [\n          'Check your internet connection',\n          'Try downloading again',\n          'Contact support if document is corrupted'\n        ];\n        enhancedError.retryable = true;\n        break;\n\n      case 'GET_ALL_WORKFLOW_DOCUMENTS':\n        enhancedError.userMessage = 'Failed to load workflow documents.';\n        enhancedError.recoveryActions = [\n          'Refresh the page',\n          'Check your internet connection',\n          'Contact support if problem persists'\n        ];\n        enhancedError.retryable = true;\n        break;\n\n      case 'SMART_PLANT_EXTENSION':\n        enhancedError.userMessage = 'Failed to extend workflow to plants. Some documents may not have been reused.';\n        enhancedError.recoveryActions = [\n          'Check if workflows were created successfully',\n          'Manually upload documents if needed',\n          'Try the extension again',\n          'Contact support for assistance'\n        ];\n        enhancedError.retryable = true;\n        break;\n\n      case 'UNIFIED_DOCUMENT_SEARCH':\n        enhancedError.userMessage = 'Document search failed. Please try again.';\n        enhancedError.recoveryActions = [\n          'Simplify your search terms',\n          'Try searching again',\n          'Use individual document lists instead'\n        ];\n        enhancedError.retryable = true;\n        break;\n\n      default:\n        if (error.type === 'NETWORK') {\n          enhancedError.userMessage = 'Network error occurred. Please check your connection.';\n          enhancedError.retryable = true;\n        } else if (error.type === 'TIMEOUT') {\n          enhancedError.userMessage = 'Operation timed out. Please try again.';\n          enhancedError.retryable = true;\n        } else if (error.status === 413) {\n          enhancedError.userMessage = 'File is too large. Please use a smaller file.';\n          enhancedError.retryable = false;\n        } else if (error.status === 415) {\n          enhancedError.userMessage = 'File type not supported. Please use PDF, DOCX, XLSX, JPG, or PNG.';\n          enhancedError.retryable = false;\n        }\n        break;\n    }\n\n    return enhancedError;\n  }\n};\n"],"names":["workflowAPI","getDashboardSummary","apiClient","get","getOverdueWorkflows","dayThreshold","arguments","length","undefined","getRecentActivity","days","getWorkflowCountsByState","getWorkflowsByPlant","plantName","encodeURIComponent","createWorkflow","workflowData","post","getWorkflow","id","updateWorkflow","put","deleteWorkflow","delete","transitionWorkflowState","newState","comment","extendWorkflow","extensionData","completeWorkflow","completionData","extendToMultiplePlantsSmartly","async","result","withRetry","documentReuse","totalReusedDocuments","reusedDocuments","reuseStrategy","sourceDescription","error","console","context","searchWorkflows","searchParams","getWorkflowsByState","state","getWorkflowsByUser","username","canTransitionTo","isReadyForCompletion","checkWorkflowExists","projectCode","materialCode","plantCode","getWorkflowStats","timeRange","getCompletionRateByPlant","getWorkflowCompletionTrend","months","getPendingWorkflows","getWorkflowsWithOpenQueries","getCountByState","getOverdueCount","getWorkflowsWithOpenQueriesCount","getRecentlyCreated","getRecentlyCompleted","saveDraftResponses","workflowId","draftData","getDraftResponses","submitQuestionnaire","questionnaireData","getWorkflowDocuments","getAllWorkflowRelatedDocuments","exportWorkflowDocuments","includeQueryDocuments","download","searchUnifiedDocuments","getUnifiedDocumentInfo","getReusableDocuments","downloadDocument","documentId","uploadDocument","file","metadata","upload","JSON","stringify","fileName","name","uploadMultipleDocuments","files","results","errors","push","success","successful","failed","totalFiles","successCount","failureCount","retryDocumentOperation","operationType","operationData","lastError","maxRetries","attempt","Error","warn","delay","Math","pow","Promise","resolve","setTimeout","finalAttempt","updateAllMaterialNamesFromProjectItemMaster","updateMaterialNameFromProjectItemMaster","getQuestionnaireTemplate","_ref","templateType","getCqsData","_ref2","getQuestionnaireData","getQuestionnaireForEdit","getPlantSpecificData","_ref3","getOrCreatePlantSpecificData","_ref4","savePlantSpecificData","plantSpecificData","modifiedBy","saveDraftPlantResponses","debugPlantData","submitPlantQuestionnaire","submissionData","getPlantQuestionnaireStats","_ref5","params","URLSearchParams","append","toString","getPlantDashboardData","initializeSamplePlantData","getDocumentReuseStats","validateDocumentReuse","plantCodes","getDocumentAuditLog","options","queryParams","handleDocumentError","operation","enhancedError","originalError","timestamp","Date","toISOString","userMessage","technicalMessage","message","recoveryActions","retryable","type","status"],"sourceRoot":""}